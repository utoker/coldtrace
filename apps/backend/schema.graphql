type Query {
  hello: String
  getDevices(
    deviceType: DeviceType
    isActive: Boolean
    location: String
    limit: Int = 50
    offset: Int = 0
  ): [Device!]!
  getDevice(id: ID!): Device
  getDeviceReadings(
    deviceId: ID!
    startTime: DateTime
    endTime: DateTime
    limit: Int = 100
  ): [Reading!]!
  getActiveAlerts(deviceId: ID): [Alert!]!
  getDeviceHistory(
    deviceId: ID!
    timeRange: TimeRangeInput!
    limit: Int = 1000
  ): DeviceHistoryResult!
  getDeviceStats(deviceId: ID!): DeviceStats!
}

type Mutation {
  createDevice(input: CreateDeviceInput!): Device!
  updateDevice(id: ID!, input: UpdateDeviceInput!): Device!
}

scalar DateTime

type Device {
  id: ID!
  name: String!
  deviceType: DeviceType!
  serialNumber: String!
  location: String!
  latitude: Float
  longitude: Float
  firmwareVersion: String
  isActive: Boolean!
  tempMin: Float
  tempMax: Float
  humidityMin: Float
  humidityMax: Float
  createdAt: DateTime!
  updatedAt: DateTime!
  readings: [Reading!]!
  alerts: [Alert!]!
  latestReading: Reading
}

type Reading {
  id: ID!
  deviceId: String!
  temperature: Float!
  humidity: Float
  pressure: Float
  battery: Float
  timestamp: DateTime!
  device: Device!
  alerts: [Alert!]!
}

type Alert {
  id: ID!
  deviceId: String!
  readingId: String
  alertType: AlertType!
  severity: AlertSeverity!
  title: String!
  description: String!
  value: Float
  threshold: Float
  isActive: Boolean!
  acknowledgedAt: DateTime
  acknowledgedBy: String
  resolvedAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
  device: Device!
  reading: Reading
}

enum DeviceType {
  FREEZER
  COOLER
  TRANSPORT_VEHICLE
  WAREHOUSE_SENSOR
  PORTABLE_LOGGER
}

enum AlertType {
  TEMPERATURE_HIGH
  TEMPERATURE_LOW
  HUMIDITY_HIGH
  HUMIDITY_LOW
  PRESSURE_ABNORMAL
  BATTERY_LOW
  DEVICE_OFFLINE
  SENSOR_FAULT
}

enum AlertSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

input CreateDeviceInput {
  name: String!
  deviceType: DeviceType!
  serialNumber: String!
  location: String!
  latitude: Float
  longitude: Float
  firmwareVersion: String
  tempMin: Float
  tempMax: Float
  humidityMin: Float
  humidityMax: Float
}

input UpdateDeviceInput {
  name: String
  location: String
  latitude: Float
  longitude: Float
  firmwareVersion: String
  tempMin: Float
  tempMax: Float
  humidityMin: Float
  humidityMax: Float
  isActive: Boolean
}

input TimeRangeInput {
  startTime: DateTime!
  endTime: DateTime!
}

type DeviceHistoryResult {
  deviceId: ID!
  readings: [Reading!]!
  totalCount: Int!
  timeRange: TimeRangeInfo!
}

type TimeRangeInfo {
  startTime: DateTime!
  endTime: DateTime!
  duration: String!
}

type DeviceStats {
  deviceId: ID!
  readingCount: Int!
  temperatureStats: TemperatureStats!
  humidityStats: HumidityStats
  dataRange: TimeRangeInfo!
  lastReading: Reading
}

type TemperatureStats {
  min: Float!
  max: Float!
  avg: Float!
  current: Float
}

type HumidityStats {
  min: Float
  max: Float
  avg: Float
  current: Float
}