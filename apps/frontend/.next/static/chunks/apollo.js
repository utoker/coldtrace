"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["apollo"],{

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/cache/core/cache.js":
/*!*********************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/cache/core/cache.js ***!
  \*********************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApolloCache: () => (/* binding */ ApolloCache)\n/* harmony export */ });\n/* harmony import */ var _wry_caches__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @wry/caches */ \"(app-pages-browser)/../../node_modules/.pnpm/@wry+caches@1.0.1/node_modules/@wry/caches/lib/weak.js\");\n/* harmony import */ var optimism__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! optimism */ \"(app-pages-browser)/../../node_modules/.pnpm/optimism@0.18.1/node_modules/optimism/lib/index.js\");\n/* harmony import */ var _barrel_optimize_names_Observable_rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! __barrel_optimize__?names=Observable!=!rxjs */ \"(app-pages-browser)/../../node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/Observable.js\");\n/* harmony import */ var _apollo_client_utilities__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @apollo/client/utilities */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/caching/sizes.js\");\n/* harmony import */ var _apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @apollo/client/utilities/environment */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/environment/index.development.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getFragmentDefinition.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/equalByQuery.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getFragmentQueryDocument.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getMemoryInternals.js\");\n/* harmony import */ var _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @apollo/client/utilities/invariant */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/invariant/index.development.js\");\n\n\n\n\n\n\n\nclass ApolloCache {\n    // Function used to lookup a fragment when a fragment definition is not part\n    // of the GraphQL document. This is useful for caches, such as InMemoryCache,\n    // that register fragments ahead of time so they can be referenced by name.\n    lookupFragment(fragmentName) {\n        return null;\n    }\n    // Transactional API\n    // The batch method is intended to replace/subsume both performTransaction\n    // and recordOptimisticTransaction, but performTransaction came first, so we\n    // provide a default batch implementation that's just another way of calling\n    // performTransaction. Subclasses of ApolloCache (such as InMemoryCache) can\n    // override the batch method to do more interesting things with its options.\n    batch(options) {\n        const optimisticId = typeof options.optimistic === \"string\" ? options.optimistic : options.optimistic === false ? null : void 0;\n        let updateResult;\n        this.performTransaction(()=>updateResult = options.update(this), optimisticId);\n        return updateResult;\n    }\n    recordOptimisticTransaction(transaction, optimisticId) {\n        this.performTransaction(transaction, optimisticId);\n    }\n    // Optional API\n    // Called once per input document, allowing the cache to make static changes\n    // to the query, such as adding __typename fields.\n    transformDocument(document) {\n        return document;\n    }\n    // Called before each ApolloLink request, allowing the cache to make dynamic\n    // changes to the query, such as filling in missing fragment definitions.\n    transformForLink(document) {\n        return document;\n    }\n    identify(object) {\n        return;\n    }\n    gc() {\n        return [];\n    }\n    modify(options) {\n        return false;\n    }\n    readQuery(options) {\n        let optimistic = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !!options.optimistic;\n        return this.read({\n            ...options,\n            rootId: options.id || \"ROOT_QUERY\",\n            optimistic\n        });\n    }\n    /**\n    * Watches the cache store of the fragment according to the options specified\n    * and returns an `Observable`. We can subscribe to this\n    * `Observable` and receive updated results through an\n    * observer when the cache store changes.\n    * \n    * You must pass in a GraphQL document with a single fragment or a document\n    * with multiple fragments that represent what you are reading. If you pass\n    * in a document with multiple fragments then you must also specify a\n    * `fragmentName`.\n    * \n    * @since 3.10.0\n    * @param options - An object of type `WatchFragmentOptions` that allows\n    * the cache to identify the fragment and optionally specify whether to react\n    * to optimistic updates.\n    */ watchFragment(options) {\n        const { fragment, fragmentName, from, optimistic = true, ...otherOptions } = options;\n        const query = this.getFragmentDoc(fragment, fragmentName);\n        // While our TypeScript types do not allow for `undefined` as a valid\n        // `from`, its possible `useFragment` gives us an `undefined` since it\n        // calls` cache.identify` and provides that value to `from`. We are\n        // adding this fix here however to ensure those using plain JavaScript\n        // and using `cache.identify` themselves will avoid seeing the obscure\n        // warning.\n        const id = typeof from === \"undefined\" || typeof from === \"string\" ? from : this.identify(from);\n        if (_apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_1__.__DEV__) {\n            const actualFragmentName = fragmentName || (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_2__.getFragmentDefinition)(fragment).name.value;\n            if (!id) {\n                _apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_1__.__DEV__ && _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_3__.invariant.warn(109, actualFragmentName);\n            }\n        }\n        const diffOptions = {\n            ...otherOptions,\n            returnPartialData: true,\n            id,\n            query,\n            optimistic\n        };\n        let latestDiff;\n        return new _barrel_optimize_names_Observable_rxjs__WEBPACK_IMPORTED_MODULE_4__.Observable((observer)=>{\n            return this.watch({\n                ...diffOptions,\n                immediate: true,\n                callback: (diff)=>{\n                    let data = diff.result;\n                    // TODO: Remove this once `watchFragment` supports `null` as valid\n                    // value emitted\n                    if (data === null) {\n                        data = {};\n                    }\n                    if (// Always ensure we deliver the first result\n                    latestDiff && (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_5__.equalByQuery)(query, {\n                        data: latestDiff.result\n                    }, {\n                        data\n                    }, options.variables)) {\n                        return;\n                    }\n                    const result = {\n                        data,\n                        dataState: diff.complete ? \"complete\" : \"partial\",\n                        complete: !!diff.complete\n                    };\n                    if (diff.missing) {\n                        result.missing = diff.missing.missing;\n                    }\n                    latestDiff = {\n                        ...diff,\n                        result: data\n                    };\n                    observer.next(result);\n                }\n            });\n        });\n    }\n    readFragment(options) {\n        let optimistic = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !!options.optimistic;\n        return this.read({\n            ...options,\n            query: this.getFragmentDoc(options.fragment, options.fragmentName),\n            rootId: options.id,\n            optimistic\n        });\n    }\n    writeQuery(param) {\n        let { id, data, ...options } = param;\n        return this.write(Object.assign(options, {\n            dataId: id || \"ROOT_QUERY\",\n            result: data\n        }));\n    }\n    writeFragment(param) {\n        let { id, data, fragment, fragmentName, ...options } = param;\n        return this.write(Object.assign(options, {\n            query: this.getFragmentDoc(fragment, fragmentName),\n            dataId: id,\n            result: data\n        }));\n    }\n    updateQuery(options, update) {\n        return this.batch({\n            update (cache) {\n                const value = cache.readQuery(options);\n                const data = update(value);\n                if (data === void 0 || data === null) return value;\n                cache.writeQuery({\n                    ...options,\n                    data\n                });\n                return data;\n            }\n        });\n    }\n    updateFragment(options, update) {\n        return this.batch({\n            update (cache) {\n                const value = cache.readFragment(options);\n                const data = update(value);\n                if (data === void 0 || data === null) return value;\n                cache.writeFragment({\n                    ...options,\n                    data\n                });\n                return data;\n            }\n        });\n    }\n    constructor(){\n        this.assumeImmutableResults = false;\n        // Make sure we compute the same (===) fragment query document every\n        // time we receive the same fragment in readFragment.\n        this.getFragmentDoc = (0,optimism__WEBPACK_IMPORTED_MODULE_0__.wrap)(_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_6__.getFragmentQueryDocument, {\n            max: _apollo_client_utilities__WEBPACK_IMPORTED_MODULE_7__.cacheSizes[\"cache.fragmentQueryDocuments\"] || 1000 /* defaultCacheSizes[\"cache.fragmentQueryDocuments\"] */ ,\n            cache: _wry_caches__WEBPACK_IMPORTED_MODULE_8__.WeakCache\n        });\n    }\n}\nif (_apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_1__.__DEV__) {\n    ApolloCache.prototype.getMemoryInternals = _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_9__.getApolloCacheMemoryInternals;\n} //# sourceMappingURL=cache.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/cache/core/cache.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/cache/core/types/common.js":
/*!****************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/cache/core/types/common.js ***!
  \****************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MissingFieldError: () => (/* binding */ MissingFieldError)\n/* harmony export */ });\nclass MissingFieldError extends Error {\n    constructor(message, path, query, variables){\n        // 'Error' breaks prototype chain here\n        super(message);\n        this.message = message;\n        this.path = path;\n        this.query = query;\n        this.variables = variables;\n        this.name = \"MissingFieldError\";\n        if (Array.isArray(this.path)) {\n            this.missing = this.message;\n            for(let i = this.path.length - 1; i >= 0; --i){\n                this.missing = {\n                    [this.path[i]]: this.missing\n                };\n            }\n        } else {\n            this.missing = this.path;\n        }\n        // We're not using `Object.setPrototypeOf` here as it isn't fully supported\n        // on Android (see issue #3236).\n        this.__proto__ = MissingFieldError.prototype;\n    }\n} //# sourceMappingURL=common.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9jYWNoZS9jb3JlL3R5cGVzL2NvbW1vbi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBNEJNLE1BQU8saUJBQWtCLFNBQVEsS0FBSztJQUMxQyxZQUNrQixPQUFlLEVBQ2YsSUFBMEMsRUFDMUMsS0FBbUIsRUFDbkIsU0FBK0I7UUFFL0Msc0NBQXNDO1FBQ3RDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQU5DLFlBQU8sR0FBUCxPQUFPLENBQVE7UUFDZixTQUFJLEdBQUosSUFBSSxDQUFzQztRQUMxQyxVQUFLLEdBQUwsS0FBSyxDQUFjO1FBQ25CLGNBQVMsR0FBVCxTQUFTLENBQXNCO1FBSS9DLElBQUksQ0FBQyxJQUFJLEdBQUcsbUJBQW1CLENBQUM7UUFFaEMsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO1lBQzdCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUM1QixJQUFLLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFFLENBQUM7Z0JBQy9DLElBQUksQ0FBQyxPQUFPLEdBQUc7b0JBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLE9BQU87Z0JBQUEsQ0FBRSxDQUFDO1lBQ2xELENBQUM7UUFDSCxDQUFDLE1BQU0sQ0FBQztZQUNOLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztRQUMzQixDQUFDO1FBRUQsMkVBQTJFO1FBQzNFLGdDQUFnQztRQUMvQixJQUFZLENBQUMsU0FBUyxHQUFHLGlCQUFpQixDQUFDLFNBQVMsQ0FBQztJQUN4RCxDQUFDO0NBR0YiLCJzb3VyY2VzIjpbIi9ob21lL3Uvc3JjL2NhY2hlL2NvcmUvdHlwZXMvY29tbW9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgRG9jdW1lbnROb2RlLCBGaWVsZE5vZGUgfSBmcm9tIFwiZ3JhcGhxbFwiO1xuXG5pbXBvcnQgdHlwZSB7XG4gIEFzU3RvcmVPYmplY3QsXG4gIERlZXBQYXJ0aWFsLFxuICBpc1JlZmVyZW5jZSxcbiAgUmVmZXJlbmNlLFxuICBTdG9yZU9iamVjdCxcbiAgU3RvcmVWYWx1ZSxcbn0gZnJvbSBcIkBhcG9sbG8vY2xpZW50L3V0aWxpdGllc1wiO1xuXG5pbXBvcnQgdHlwZSB7IFN0b3JhZ2VUeXBlIH0gZnJvbSBcIi4uLy4uL2lubWVtb3J5L3BvbGljaWVzLmpzXCI7XG5cbi8vIFRoZSBSZWFkb25seTxUPiB0eXBlIG9ubHkgcmVhbGx5IHdvcmtzIGZvciBvYmplY3QgdHlwZXMsIHNpbmNlIGl0IG1hcmtzXG4vLyBhbGwgb2YgdGhlIG9iamVjdCdzIHByb3BlcnRpZXMgYXMgcmVhZG9ubHksIGJ1dCB0aGVyZSBhcmUgbWFueSBjYXNlcyB3aGVuXG4vLyBhIGdlbmVyaWMgdHlwZSBwYXJhbWV0ZXIgbGlrZSBURXhpc3RpbmcgbWlnaHQgYmUgYSBzdHJpbmcgb3Igc29tZSBvdGhlclxuLy8gcHJpbWl0aXZlIHR5cGUsIGluIHdoaWNoIGNhc2Ugd2UgbmVlZCB0byBhdm9pZCB3cmFwcGluZyBpdCB3aXRoIFJlYWRvbmx5LlxuLy8gU2FmZVJlYWRvbmx5PHN0cmluZz4gY29sbGFwc2VzIHRvIGp1c3Qgc3RyaW5nLCB3aGljaCBtYWtlcyBzdHJpbmdcbi8vIGFzc2lnbmFibGUgdG8gU2FmZVJlYWRvbmx5PGFueT4sIHdoZXJlYXMgc3RyaW5nIGlzIG5vdCBhc3NpZ25hYmxlIHRvXG4vLyBSZWFkb25seTxhbnk+LCBzb21ld2hhdCBzdXJwcmlzaW5nbHkuXG5leHBvcnQgdHlwZSBTYWZlUmVhZG9ubHk8VD4gPSBUIGV4dGVuZHMgb2JqZWN0ID8gUmVhZG9ubHk8VD4gOiBUO1xuXG5leHBvcnQgdHlwZSBNaXNzaW5nVHJlZSA9XG4gIHwgc3RyaW5nXG4gIHwge1xuICAgICAgcmVhZG9ubHkgW2tleTogc3RyaW5nXTogTWlzc2luZ1RyZWU7XG4gICAgfTtcblxuZXhwb3J0IGNsYXNzIE1pc3NpbmdGaWVsZEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcmVhZG9ubHkgbWVzc2FnZTogc3RyaW5nLFxuICAgIHB1YmxpYyByZWFkb25seSBwYXRoOiBNaXNzaW5nVHJlZSB8IEFycmF5PHN0cmluZyB8IG51bWJlcj4sXG4gICAgcHVibGljIHJlYWRvbmx5IHF1ZXJ5OiBEb2N1bWVudE5vZGUsXG4gICAgcHVibGljIHJlYWRvbmx5IHZhcmlhYmxlcz86IFJlY29yZDxzdHJpbmcsIGFueT5cbiAgKSB7XG4gICAgLy8gJ0Vycm9yJyBicmVha3MgcHJvdG90eXBlIGNoYWluIGhlcmVcbiAgICBzdXBlcihtZXNzYWdlKTtcbiAgICB0aGlzLm5hbWUgPSBcIk1pc3NpbmdGaWVsZEVycm9yXCI7XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLnBhdGgpKSB7XG4gICAgICB0aGlzLm1pc3NpbmcgPSB0aGlzLm1lc3NhZ2U7XG4gICAgICBmb3IgKGxldCBpID0gdGhpcy5wYXRoLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHRoaXMubWlzc2luZyA9IHsgW3RoaXMucGF0aFtpXV06IHRoaXMubWlzc2luZyB9O1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm1pc3NpbmcgPSB0aGlzLnBhdGg7XG4gICAgfVxuXG4gICAgLy8gV2UncmUgbm90IHVzaW5nIGBPYmplY3Quc2V0UHJvdG90eXBlT2ZgIGhlcmUgYXMgaXQgaXNuJ3QgZnVsbHkgc3VwcG9ydGVkXG4gICAgLy8gb24gQW5kcm9pZCAoc2VlIGlzc3VlICMzMjM2KS5cbiAgICAodGhpcyBhcyBhbnkpLl9fcHJvdG9fXyA9IE1pc3NpbmdGaWVsZEVycm9yLnByb3RvdHlwZTtcbiAgfVxuXG4gIHB1YmxpYyByZWFkb25seSBtaXNzaW5nOiBNaXNzaW5nVHJlZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBGaWVsZFNwZWNpZmllciB7XG4gIHR5cGVuYW1lPzogc3RyaW5nO1xuICBmaWVsZE5hbWU6IHN0cmluZztcbiAgZmllbGQ/OiBGaWVsZE5vZGU7XG4gIGFyZ3M/OiBSZWNvcmQ8c3RyaW5nLCBhbnk+O1xuICB2YXJpYWJsZXM/OiBSZWNvcmQ8c3RyaW5nLCBhbnk+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJlYWRGaWVsZE9wdGlvbnMgZXh0ZW5kcyBGaWVsZFNwZWNpZmllciB7XG4gIGZyb20/OiBTdG9yZU9iamVjdCB8IFJlZmVyZW5jZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSZWFkRmllbGRGdW5jdGlvbiB7XG4gIDxWID0gU3RvcmVWYWx1ZT4ob3B0aW9uczogUmVhZEZpZWxkT3B0aW9ucyk6IFNhZmVSZWFkb25seTxWPiB8IHVuZGVmaW5lZDtcbiAgPFYgPSBTdG9yZVZhbHVlPihcbiAgICBmaWVsZE5hbWU6IHN0cmluZyxcbiAgICBmcm9tPzogU3RvcmVPYmplY3QgfCBSZWZlcmVuY2VcbiAgKTogU2FmZVJlYWRvbmx5PFY+IHwgdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgdHlwZSBUb1JlZmVyZW5jZUZ1bmN0aW9uID0gKFxuICBvYmpPcklkT3JSZWY6IFN0b3JlT2JqZWN0IHwgc3RyaW5nIHwgUmVmZXJlbmNlLFxuICBtZXJnZUludG9TdG9yZT86IGJvb2xlYW5cbikgPT4gUmVmZXJlbmNlIHwgdW5kZWZpbmVkO1xuXG5leHBvcnQgdHlwZSBDYW5SZWFkRnVuY3Rpb24gPSAodmFsdWU6IFN0b3JlVmFsdWUpID0+IGJvb2xlYW47XG5cbmRlY2xhcmUgY29uc3QgX2RlbGV0ZU1vZGlmaWVyOiB1bmlxdWUgc3ltYm9sO1xuZXhwb3J0IGludGVyZmFjZSBEZWxldGVNb2RpZmllciB7XG4gIFtfZGVsZXRlTW9kaWZpZXJdOiB0cnVlO1xufVxuZGVjbGFyZSBjb25zdCBfaW52YWxpZGF0ZU1vZGlmaWVyOiB1bmlxdWUgc3ltYm9sO1xuZXhwb3J0IGludGVyZmFjZSBJbnZhbGlkYXRlTW9kaWZpZXIge1xuICBbX2ludmFsaWRhdGVNb2RpZmllcl06IHRydWU7XG59XG5kZWNsYXJlIGNvbnN0IF9pZ25vcmVNb2RpZmllcjogdW5pcXVlIHN5bWJvbDtcbmV4cG9ydCBpbnRlcmZhY2UgSWdub3JlTW9kaWZpZXIge1xuICBbX2lnbm9yZU1vZGlmaWVyXTogdHJ1ZTtcbn1cblxuZXhwb3J0IHR5cGUgTW9kaWZpZXJEZXRhaWxzID0ge1xuICBERUxFVEU6IERlbGV0ZU1vZGlmaWVyO1xuICBJTlZBTElEQVRFOiBJbnZhbGlkYXRlTW9kaWZpZXI7XG4gIGZpZWxkTmFtZTogc3RyaW5nO1xuICBzdG9yZUZpZWxkTmFtZTogc3RyaW5nO1xuICByZWFkRmllbGQ6IFJlYWRGaWVsZEZ1bmN0aW9uO1xuICBjYW5SZWFkOiBDYW5SZWFkRnVuY3Rpb247XG4gIGlzUmVmZXJlbmNlOiB0eXBlb2YgaXNSZWZlcmVuY2U7XG4gIHRvUmVmZXJlbmNlOiBUb1JlZmVyZW5jZUZ1bmN0aW9uO1xuICBzdG9yYWdlOiBTdG9yYWdlVHlwZTtcbn07XG5cbmV4cG9ydCB0eXBlIE1vZGlmaWVyPFQ+ID0gKFxuICB2YWx1ZTogVCxcbiAgZGV0YWlsczogTW9kaWZpZXJEZXRhaWxzXG4pID0+IERlZXBQYXJ0aWFsPFQ+IHwgRGVsZXRlTW9kaWZpZXIgfCBJbnZhbGlkYXRlTW9kaWZpZXIgfCB1bmRlZmluZWQ7XG5cbnR5cGUgU3RvcmVPYmplY3RWYWx1ZU1heWJlUmVmZXJlbmNlPFN0b3JlVmFsPiA9XG4gIFN0b3JlVmFsIGV4dGVuZHMgQXJyYXk8UmVjb3JkPHN0cmluZywgYW55Pj4gP1xuICAgIFN0b3JlVmFsIGV4dGVuZHMgQXJyYXk8aW5mZXIgSXRlbT4gP1xuICAgICAgW0l0ZW1dIGV4dGVuZHMgW1JlY29yZDxzdHJpbmcsIGFueT5dID9cbiAgICAgICAgUmVhZG9ubHlBcnJheTxBc1N0b3JlT2JqZWN0PEl0ZW0+IHwgUmVmZXJlbmNlPlxuICAgICAgOiBuZXZlclxuICAgIDogbmV2ZXJcbiAgOiBTdG9yZVZhbCBleHRlbmRzIFJlY29yZDxzdHJpbmcsIGFueT4gPyBBc1N0b3JlT2JqZWN0PFN0b3JlVmFsPiB8IFJlZmVyZW5jZVxuICA6IFN0b3JlVmFsO1xuXG5leHBvcnQgdHlwZSBBbGxGaWVsZHNNb2RpZmllcjxFbnRpdHkgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCBhbnk+PiA9IE1vZGlmaWVyPFxuICBFbnRpdHlba2V5b2YgRW50aXR5XSBleHRlbmRzIGluZmVyIFZhbHVlID9cbiAgICBTdG9yZU9iamVjdFZhbHVlTWF5YmVSZWZlcmVuY2U8RXhjbHVkZTxWYWx1ZSwgdW5kZWZpbmVkPj5cbiAgOiBuZXZlclxuPjtcblxuZXhwb3J0IHR5cGUgTW9kaWZpZXJzPFQgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCBhbnk+ID0gUmVjb3JkPHN0cmluZywgdW5rbm93bj4+ID1cbiAgUGFydGlhbDx7XG4gICAgW0ZpZWxkTmFtZSBpbiBrZXlvZiBUXTogTW9kaWZpZXI8XG4gICAgICBTdG9yZU9iamVjdFZhbHVlTWF5YmVSZWZlcmVuY2U8RXhjbHVkZTxUW0ZpZWxkTmFtZV0sIHVuZGVmaW5lZD4+XG4gICAgPjtcbiAgfT47XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/cache/core/types/common.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/cache/inmemory/entityStore.js":
/*!*******************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/cache/inmemory/entityStore.js ***!
  \*******************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EntityStore: () => (/* binding */ EntityStore),\n/* harmony export */   maybeDependOnExistenceOfEntity: () => (/* binding */ maybeDependOnExistenceOfEntity),\n/* harmony export */   supportsResultCaching: () => (/* binding */ supportsResultCaching)\n/* harmony export */ });\n/* harmony import */ var _wry_equality__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wry/equality */ \"(app-pages-browser)/../../node_modules/.pnpm/@wry+equality@0.5.7/node_modules/@wry/equality/lib/index.js\");\n/* harmony import */ var _wry_trie__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @wry/trie */ \"(app-pages-browser)/../../node_modules/.pnpm/@wry+trie@0.5.0/node_modules/@wry/trie/lib/index.js\");\n/* harmony import */ var optimism__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! optimism */ \"(app-pages-browser)/../../node_modules/.pnpm/optimism@0.18.1/node_modules/optimism/lib/index.js\");\n/* harmony import */ var _apollo_client_utilities__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @apollo/client/utilities */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n/* harmony import */ var _apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @apollo/client/utilities/environment */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/environment/index.development.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/DeepMerger.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/makeReference.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/maybeDeepFreeze.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/isNonNullObject.js\");\n/* harmony import */ var _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @apollo/client/utilities/invariant */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/invariant/index.development.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./helpers.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/cache/inmemory/helpers.js\");\n\n\n\n\n\n\n\n\nconst DELETE = {};\nconst delModifier = ()=>DELETE;\nconst INVALIDATE = {};\nclass EntityStore {\n    // Although the EntityStore class is abstract, it contains concrete\n    // implementations of the various NormalizedCache interface methods that\n    // are inherited by the Root and Layer subclasses.\n    toObject() {\n        return {\n            ...this.data\n        };\n    }\n    has(dataId) {\n        return this.lookup(dataId, true) !== void 0;\n    }\n    get(dataId, fieldName) {\n        this.group.depend(dataId, fieldName);\n        if (_helpers_js__WEBPACK_IMPORTED_MODULE_3__.hasOwn.call(this.data, dataId)) {\n            const storeObject = this.data[dataId];\n            if (storeObject && _helpers_js__WEBPACK_IMPORTED_MODULE_3__.hasOwn.call(storeObject, fieldName)) {\n                return storeObject[fieldName];\n            }\n        }\n        if (fieldName === \"__typename\" && _helpers_js__WEBPACK_IMPORTED_MODULE_3__.hasOwn.call(this.policies.rootTypenamesById, dataId)) {\n            return this.policies.rootTypenamesById[dataId];\n        }\n        if (this instanceof Layer) {\n            return this.parent.get(dataId, fieldName);\n        }\n    }\n    lookup(dataId, dependOnExistence) {\n        // The has method (above) calls lookup with dependOnExistence = true, so\n        // that it can later be invalidated when we add or remove a StoreObject for\n        // this dataId. Any consumer who cares about the contents of the StoreObject\n        // should not rely on this dependency, since the contents could change\n        // without the object being added or removed.\n        if (dependOnExistence) this.group.depend(dataId, \"__exists\");\n        if (_helpers_js__WEBPACK_IMPORTED_MODULE_3__.hasOwn.call(this.data, dataId)) {\n            return this.data[dataId];\n        }\n        if (this instanceof Layer) {\n            return this.parent.lookup(dataId, dependOnExistence);\n        }\n        if (this.policies.rootTypenamesById[dataId]) {\n            return {};\n        }\n    }\n    merge(older, newer) {\n        let dataId;\n        // Convert unexpected references to ID strings.\n        if ((0,_apollo_client_utilities__WEBPACK_IMPORTED_MODULE_4__.isReference)(older)) older = older.__ref;\n        if ((0,_apollo_client_utilities__WEBPACK_IMPORTED_MODULE_4__.isReference)(newer)) newer = newer.__ref;\n        const existing = typeof older === \"string\" ? this.lookup(dataId = older) : older;\n        const incoming = typeof newer === \"string\" ? this.lookup(dataId = newer) : newer;\n        // If newer was a string ID, but that ID was not defined in this store,\n        // then there are no fields to be merged, so we're done.\n        if (!incoming) return;\n        (0,_apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_5__.invariant)(typeof dataId === \"string\", 95);\n        const merged = new _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_6__.DeepMerger(storeObjectReconciler).merge(existing, incoming);\n        // Even if merged === existing, existing may have come from a lower\n        // layer, so we always need to set this.data[dataId] on this level.\n        this.data[dataId] = merged;\n        if (merged !== existing) {\n            delete this.refs[dataId];\n            if (this.group.caching) {\n                const fieldsToDirty = {};\n                // If we added a new StoreObject where there was previously none, dirty\n                // anything that depended on the existence of this dataId, such as the\n                // EntityStore#has method.\n                if (!existing) fieldsToDirty.__exists = 1;\n                // Now invalidate dependents who called getFieldValue for any fields\n                // that are changing as a result of this merge.\n                Object.keys(incoming).forEach((storeFieldName)=>{\n                    if (!existing || existing[storeFieldName] !== merged[storeFieldName]) {\n                        // Always dirty the full storeFieldName, which may include\n                        // serialized arguments following the fieldName prefix.\n                        fieldsToDirty[storeFieldName] = 1;\n                        // Also dirty fieldNameFromStoreName(storeFieldName) if it's\n                        // different from storeFieldName and this field does not have\n                        // keyArgs configured, because that means the cache can't make\n                        // any assumptions about how field values with the same field\n                        // name but different arguments might be interrelated, so it\n                        // must err on the side of invalidating all field values that\n                        // share the same short fieldName, regardless of arguments.\n                        const fieldName = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.fieldNameFromStoreName)(storeFieldName);\n                        if (fieldName !== storeFieldName && !this.policies.hasKeyArgs(merged.__typename, fieldName)) {\n                            fieldsToDirty[fieldName] = 1;\n                        }\n                        // If merged[storeFieldName] has become undefined, and this is the\n                        // Root layer, actually delete the property from the merged object,\n                        // which is guaranteed to have been created fresh in this method.\n                        if (merged[storeFieldName] === void 0 && !(this instanceof Layer)) {\n                            delete merged[storeFieldName];\n                        }\n                    }\n                });\n                if (fieldsToDirty.__typename && !(existing && existing.__typename) && // Since we return default root __typename strings\n                // automatically from store.get, we don't need to dirty the\n                // ROOT_QUERY.__typename field if merged.__typename is equal\n                // to the default string (usually \"Query\").\n                this.policies.rootTypenamesById[dataId] === merged.__typename) {\n                    delete fieldsToDirty.__typename;\n                }\n                Object.keys(fieldsToDirty).forEach((fieldName)=>this.group.dirty(dataId, fieldName));\n            }\n        }\n    }\n    modify(dataId, fields, exact) {\n        const storeObject = this.lookup(dataId);\n        if (storeObject) {\n            const changedFields = {};\n            let needToMerge = false;\n            let allDeleted = true;\n            const sharedDetails = {\n                DELETE,\n                INVALIDATE,\n                isReference: _apollo_client_utilities__WEBPACK_IMPORTED_MODULE_4__.isReference,\n                toReference: this.toReference,\n                canRead: this.canRead,\n                readField: (fieldNameOrOptions, from)=>this.policies.readField(typeof fieldNameOrOptions === \"string\" ? {\n                        fieldName: fieldNameOrOptions,\n                        from: from || (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_7__.makeReference)(dataId)\n                    } : fieldNameOrOptions, {\n                        store: this\n                    })\n            };\n            Object.keys(storeObject).forEach((storeFieldName)=>{\n                const fieldName = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.fieldNameFromStoreName)(storeFieldName);\n                let fieldValue = storeObject[storeFieldName];\n                if (fieldValue === void 0) return;\n                const modify = typeof fields === \"function\" ? fields : fields[storeFieldName] || (exact ? undefined : fields[fieldName]);\n                if (modify) {\n                    let newValue = modify === delModifier ? DELETE : modify((0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_8__.maybeDeepFreeze)(fieldValue), {\n                        ...sharedDetails,\n                        fieldName,\n                        storeFieldName,\n                        storage: this.getStorage(dataId, storeFieldName)\n                    });\n                    if (newValue === INVALIDATE) {\n                        this.group.dirty(dataId, storeFieldName);\n                    } else {\n                        if (newValue === DELETE) newValue = void 0;\n                        if (newValue !== fieldValue) {\n                            changedFields[storeFieldName] = newValue;\n                            needToMerge = true;\n                            fieldValue = newValue;\n                            if (_apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_9__.__DEV__) {\n                                const checkReference = (ref)=>{\n                                    if (this.lookup(ref.__ref) === undefined) {\n                                        _apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_9__.__DEV__ && _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_5__.invariant.warn(96, ref);\n                                        return true;\n                                    }\n                                };\n                                if ((0,_apollo_client_utilities__WEBPACK_IMPORTED_MODULE_4__.isReference)(newValue)) {\n                                    checkReference(newValue);\n                                } else if (Array.isArray(newValue)) {\n                                    // Warn about writing \"mixed\" arrays of Reference and non-Reference objects\n                                    let seenReference = false;\n                                    let someNonReference;\n                                    for (const value of newValue){\n                                        if ((0,_apollo_client_utilities__WEBPACK_IMPORTED_MODULE_4__.isReference)(value)) {\n                                            seenReference = true;\n                                            if (checkReference(value)) break;\n                                        } else {\n                                            // Do not warn on primitive values, since those could never be represented\n                                            // by a reference. This is a valid (albeit uncommon) use case.\n                                            if (typeof value === \"object\" && !!value) {\n                                                const [id] = this.policies.identify(value);\n                                                // check if object could even be referenced, otherwise we are not interested in it for this warning\n                                                if (id) {\n                                                    someNonReference = value;\n                                                }\n                                            }\n                                        }\n                                        if (seenReference && someNonReference !== undefined) {\n                                            _apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_9__.__DEV__ && _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_5__.invariant.warn(97, someNonReference);\n                                            break;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                if (fieldValue !== void 0) {\n                    allDeleted = false;\n                }\n            });\n            if (needToMerge) {\n                this.merge(dataId, changedFields);\n                if (allDeleted) {\n                    if (this instanceof Layer) {\n                        this.data[dataId] = void 0;\n                    } else {\n                        delete this.data[dataId];\n                    }\n                    this.group.dirty(dataId, \"__exists\");\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n    // If called with only one argument, removes the entire entity\n    // identified by dataId. If called with a fieldName as well, removes all\n    // fields of that entity whose names match fieldName according to the\n    // fieldNameFromStoreName helper function. If called with a fieldName\n    // and variables, removes all fields of that entity whose names match fieldName\n    // and whose arguments when cached exactly match the variables passed.\n    delete(dataId, fieldName, args) {\n        const storeObject = this.lookup(dataId);\n        if (storeObject) {\n            const typename = this.getFieldValue(storeObject, \"__typename\");\n            const storeFieldName = fieldName && args ? this.policies.getStoreFieldName({\n                typename,\n                fieldName,\n                args\n            }) : fieldName;\n            return this.modify(dataId, storeFieldName ? {\n                [storeFieldName]: delModifier\n            } : delModifier, !!args);\n        }\n        return false;\n    }\n    evict(options, limit) {\n        let evicted = false;\n        if (options.id) {\n            if (_helpers_js__WEBPACK_IMPORTED_MODULE_3__.hasOwn.call(this.data, options.id)) {\n                evicted = this.delete(options.id, options.fieldName, options.args);\n            }\n            if (this instanceof Layer && this !== limit) {\n                evicted = this.parent.evict(options, limit) || evicted;\n            }\n            // Always invalidate the field to trigger rereading of watched\n            // queries, even if no cache data was modified by the eviction,\n            // because queries may depend on computed fields with custom read\n            // functions, whose values are not stored in the EntityStore.\n            if (options.fieldName || evicted) {\n                this.group.dirty(options.id, options.fieldName || \"__exists\");\n            }\n        }\n        return evicted;\n    }\n    clear() {\n        this.replace(null);\n    }\n    extract() {\n        const obj = this.toObject();\n        const extraRootIds = [];\n        this.getRootIdSet().forEach((id)=>{\n            if (!_helpers_js__WEBPACK_IMPORTED_MODULE_3__.hasOwn.call(this.policies.rootTypenamesById, id)) {\n                extraRootIds.push(id);\n            }\n        });\n        if (extraRootIds.length) {\n            obj.__META = {\n                extraRootIds: extraRootIds.sort()\n            };\n        }\n        return obj;\n    }\n    replace(newData) {\n        Object.keys(this.data).forEach((dataId)=>{\n            if (!(newData && _helpers_js__WEBPACK_IMPORTED_MODULE_3__.hasOwn.call(newData, dataId))) {\n                this.delete(dataId);\n            }\n        });\n        if (newData) {\n            const { __META, ...rest } = newData;\n            Object.keys(rest).forEach((dataId)=>{\n                this.merge(dataId, rest[dataId]);\n            });\n            if (__META) {\n                __META.extraRootIds.forEach(this.retain, this);\n            }\n        }\n    }\n    retain(rootId) {\n        return this.rootIds[rootId] = (this.rootIds[rootId] || 0) + 1;\n    }\n    release(rootId) {\n        if (this.rootIds[rootId] > 0) {\n            const count = --this.rootIds[rootId];\n            if (!count) delete this.rootIds[rootId];\n            return count;\n        }\n        return 0;\n    }\n    // Return a Set<string> of all the ID strings that have been retained by\n    // this layer/root *and* any layers/roots beneath it.\n    getRootIdSet() {\n        let ids = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : new Set();\n        Object.keys(this.rootIds).forEach(ids.add, ids);\n        if (this instanceof Layer) {\n            this.parent.getRootIdSet(ids);\n        } else {\n            // Official singleton IDs like ROOT_QUERY and ROOT_MUTATION are\n            // always considered roots for garbage collection, regardless of\n            // their retainment counts in this.rootIds.\n            Object.keys(this.policies.rootTypenamesById).forEach(ids.add, ids);\n        }\n        return ids;\n    }\n    // The goal of garbage collection is to remove IDs from the Root layer of the\n    // store that are no longer reachable starting from any IDs that have been\n    // explicitly retained (see retain and release, above). Returns an array of\n    // dataId strings that were removed from the store.\n    gc() {\n        const ids = this.getRootIdSet();\n        const snapshot = this.toObject();\n        ids.forEach((id)=>{\n            if (_helpers_js__WEBPACK_IMPORTED_MODULE_3__.hasOwn.call(snapshot, id)) {\n                // Because we are iterating over an ECMAScript Set, the IDs we add here\n                // will be visited in later iterations of the forEach loop only if they\n                // were not previously contained by the Set.\n                Object.keys(this.findChildRefIds(id)).forEach(ids.add, ids);\n                // By removing IDs from the snapshot object here, we protect them from\n                // getting removed from the root store layer below.\n                delete snapshot[id];\n            }\n        });\n        const idsToRemove = Object.keys(snapshot);\n        if (idsToRemove.length) {\n            let root = this;\n            while(root instanceof Layer)root = root.parent;\n            idsToRemove.forEach((id)=>root.delete(id));\n        }\n        return idsToRemove;\n    }\n    findChildRefIds(dataId) {\n        if (!_helpers_js__WEBPACK_IMPORTED_MODULE_3__.hasOwn.call(this.refs, dataId)) {\n            const found = this.refs[dataId] = {};\n            const root = this.data[dataId];\n            if (!root) return found;\n            const workSet = new Set([\n                root\n            ]);\n            // Within the store, only arrays and objects can contain child entity\n            // references, so we can prune the traversal using this predicate:\n            workSet.forEach((obj)=>{\n                if ((0,_apollo_client_utilities__WEBPACK_IMPORTED_MODULE_4__.isReference)(obj)) {\n                    found[obj.__ref] = true;\n                // In rare cases, a { __ref } Reference object may have other fields.\n                // This often indicates a mismerging of References with StoreObjects,\n                // but garbage collection should not be fooled by a stray __ref\n                // property in a StoreObject (ignoring all the other fields just\n                // because the StoreObject looks like a Reference). To avoid this\n                // premature termination of findChildRefIds recursion, we fall through\n                // to the code below, which will handle any other properties of obj.\n                }\n                if ((0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_10__.isNonNullObject)(obj)) {\n                    Object.keys(obj).forEach((key)=>{\n                        const child = obj[key];\n                        // No need to add primitive values to the workSet, since they cannot\n                        // contain reference objects.\n                        if ((0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_10__.isNonNullObject)(child)) {\n                            workSet.add(child);\n                        }\n                    });\n                }\n            });\n        }\n        return this.refs[dataId];\n    }\n    makeCacheKey() {\n        return this.group.keyMaker.lookupArray(arguments);\n    }\n    get supportsResultCaching() {\n        return this.group.caching;\n    }\n    constructor(policies, group){\n        this.data = {};\n        // Maps root entity IDs to the number of times they have been retained, minus\n        // the number of times they have been released. Retained entities keep other\n        // entities they reference (even indirectly) from being garbage collected.\n        this.rootIds = {};\n        // Lazily tracks { __ref: <dataId> } strings contained by this.data[dataId].\n        this.refs = {};\n        // Bound function that can be passed around to provide easy access to fields\n        // of Reference objects as well as ordinary objects.\n        this.getFieldValue = (objectOrReference, storeFieldName)=>(0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_8__.maybeDeepFreeze)((0,_apollo_client_utilities__WEBPACK_IMPORTED_MODULE_4__.isReference)(objectOrReference) ? this.get(objectOrReference.__ref, storeFieldName) : objectOrReference && objectOrReference[storeFieldName]);\n        // Returns true for non-normalized StoreObjects and non-dangling\n        // References, indicating that readField(name, objOrRef) has a chance of\n        // working. Useful for filtering out dangling references from lists.\n        this.canRead = (objOrRef)=>{\n            return (0,_apollo_client_utilities__WEBPACK_IMPORTED_MODULE_4__.isReference)(objOrRef) ? this.has(objOrRef.__ref) : typeof objOrRef === \"object\";\n        };\n        // Bound function that converts an id or an object with a __typename and\n        // primary key fields to a Reference object. If called with a Reference object,\n        // that same Reference object is returned. Pass true for mergeIntoStore to persist\n        // an object into the store.\n        this.toReference = (objOrIdOrRef, mergeIntoStore)=>{\n            if (typeof objOrIdOrRef === \"string\") {\n                return (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_7__.makeReference)(objOrIdOrRef);\n            }\n            if ((0,_apollo_client_utilities__WEBPACK_IMPORTED_MODULE_4__.isReference)(objOrIdOrRef)) {\n                return objOrIdOrRef;\n            }\n            const [id] = this.policies.identify(objOrIdOrRef);\n            if (id) {\n                const ref = (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_7__.makeReference)(id);\n                if (mergeIntoStore) {\n                    this.merge(id, objOrIdOrRef);\n                }\n                return ref;\n            }\n        };\n        this.policies = policies;\n        this.group = group;\n    }\n}\n// A single CacheGroup represents a set of one or more EntityStore objects,\n// typically the Root store in a CacheGroup by itself, and all active Layer\n// stores in a group together. A single EntityStore object belongs to only\n// one CacheGroup, store.group. The CacheGroup is responsible for tracking\n// dependencies, so store.group is helpful for generating unique keys for\n// cached results that need to be invalidated when/if those dependencies\n// change. If we used the EntityStore objects themselves as cache keys (that\n// is, store rather than store.group), the cache would become unnecessarily\n// fragmented by all the different Layer objects. Instead, the CacheGroup\n// approach allows all optimistic Layer objects in the same linked list to\n// belong to one CacheGroup, with the non-optimistic Root object belonging\n// to another CacheGroup, allowing resultCaching dependencies to be tracked\n// separately for optimistic and non-optimistic entity data.\nclass CacheGroup {\n    resetCaching() {\n        this.d = this.caching ? (0,optimism__WEBPACK_IMPORTED_MODULE_2__.dep)() : null;\n        this.keyMaker = new _wry_trie__WEBPACK_IMPORTED_MODULE_1__.Trie();\n    }\n    depend(dataId, storeFieldName) {\n        if (this.d) {\n            this.d(makeDepKey(dataId, storeFieldName));\n            const fieldName = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.fieldNameFromStoreName)(storeFieldName);\n            if (fieldName !== storeFieldName) {\n                // Fields with arguments that contribute extra identifying\n                // information to the fieldName (thus forming the storeFieldName)\n                // depend not only on the full storeFieldName but also on the\n                // short fieldName, so the field can be invalidated using either\n                // level of specificity.\n                this.d(makeDepKey(dataId, fieldName));\n            }\n            if (this.parent) {\n                this.parent.depend(dataId, storeFieldName);\n            }\n        }\n    }\n    dirty(dataId, storeFieldName) {\n        if (this.d) {\n            this.d.dirty(makeDepKey(dataId, storeFieldName), // When storeFieldName === \"__exists\", that means the entity identified\n            // by dataId has either disappeared from the cache or was newly added,\n            // so the result caching system would do well to \"forget everything it\n            // knows\" about that object. To achieve that kind of invalidation, we\n            // not only dirty the associated result cache entry, but also remove it\n            // completely from the dependency graph. For the optimism implementation\n            // details, see https://github.com/benjamn/optimism/pull/195.\n            storeFieldName === \"__exists\" ? \"forget\" : \"setDirty\");\n        }\n    }\n    constructor(caching, parent = null){\n        this.d = null;\n        this.caching = caching;\n        this.parent = parent;\n        this.resetCaching();\n    }\n}\nfunction makeDepKey(dataId, storeFieldName) {\n    // Since field names cannot have '#' characters in them, this method\n    // of joining the field name and the ID should be unambiguous, and much\n    // cheaper than JSON.stringify([dataId, fieldName]).\n    return storeFieldName + \"#\" + dataId;\n}\nfunction maybeDependOnExistenceOfEntity(store, entityId) {\n    if (supportsResultCaching(store)) {\n        // We use this pseudo-field __exists elsewhere in the EntityStore code to\n        // represent changes in the existence of the entity object identified by\n        // entityId. This dependency gets reliably dirtied whenever an object with\n        // this ID is deleted (or newly created) within this group, so any result\n        // cache entries (for example, StoreReader#executeSelectionSet results) that\n        // depend on __exists for this entityId will get dirtied as well, leading to\n        // the eventual recomputation (instead of reuse) of those result objects the\n        // next time someone reads them from the cache.\n        store.group.depend(entityId, \"__exists\");\n    }\n}\nclass Root extends EntityStore {\n    addLayer(layerId, replay) {\n        // Adding an optimistic Layer on top of the Root actually adds the Layer\n        // on top of the Stump, so the Stump always comes between the Root and\n        // any Layer objects that we've added.\n        return this.stump.addLayer(layerId, replay);\n    }\n    removeLayer() {\n        // Never remove the root layer.\n        return this;\n    }\n    getStorage() {\n        return this.storageTrie.lookupArray(arguments);\n    }\n    constructor({ policies, resultCaching = true, seed }){\n        super(policies, new CacheGroup(resultCaching)), this.stump = new Stump(this), this.storageTrie = new _wry_trie__WEBPACK_IMPORTED_MODULE_1__.Trie();\n        if (seed) this.replace(seed);\n    }\n}\nEntityStore.Root = Root;\n// Not exported, since all Layer instances are created by the addLayer method\n// of the EntityStore.Root class.\nclass Layer extends EntityStore {\n    addLayer(layerId, replay) {\n        return new Layer(layerId, this, replay, this.group);\n    }\n    removeLayer(layerId) {\n        // Remove all instances of the given id, not just the first one.\n        const parent = this.parent.removeLayer(layerId);\n        if (layerId === this.id) {\n            if (this.group.caching) {\n                // Dirty every ID we're removing. Technically we might be able to avoid\n                // dirtying fields that have values in higher layers, but we don't have\n                // easy access to higher layers here, and we're about to recreate those\n                // layers anyway (see parent.addLayer below).\n                Object.keys(this.data).forEach((dataId)=>{\n                    const ownStoreObject = this.data[dataId];\n                    const parentStoreObject = parent[\"lookup\"](dataId);\n                    if (!parentStoreObject) {\n                        // The StoreObject identified by dataId was defined in this layer\n                        // but will be undefined in the parent layer, so we can delete the\n                        // whole entity using this.delete(dataId). Since we're about to\n                        // throw this layer away, the only goal of this deletion is to dirty\n                        // the removed fields.\n                        this.delete(dataId);\n                    } else if (!ownStoreObject) {\n                        // This layer had an entry for dataId but it was undefined, which\n                        // means the entity was deleted in this layer, and it's about to\n                        // become undeleted when we remove this layer, so we need to dirty\n                        // all fields that are about to be reexposed.\n                        this.group.dirty(dataId, \"__exists\");\n                        Object.keys(parentStoreObject).forEach((storeFieldName)=>{\n                            this.group.dirty(dataId, storeFieldName);\n                        });\n                    } else if (ownStoreObject !== parentStoreObject) {\n                        // If ownStoreObject is not exactly the same as parentStoreObject,\n                        // dirty any fields whose values will change as a result of this\n                        // removal.\n                        Object.keys(ownStoreObject).forEach((storeFieldName)=>{\n                            if (!(0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(ownStoreObject[storeFieldName], parentStoreObject[storeFieldName])) {\n                                this.group.dirty(dataId, storeFieldName);\n                            }\n                        });\n                    }\n                });\n            }\n            return parent;\n        }\n        // No changes are necessary if the parent chain remains identical.\n        if (parent === this.parent) return this;\n        // Recreate this layer on top of the new parent.\n        return parent.addLayer(this.id, this.replay);\n    }\n    toObject() {\n        return {\n            ...this.parent.toObject(),\n            ...this.data\n        };\n    }\n    findChildRefIds(dataId) {\n        const fromParent = this.parent.findChildRefIds(dataId);\n        return _helpers_js__WEBPACK_IMPORTED_MODULE_3__.hasOwn.call(this.data, dataId) ? {\n            ...fromParent,\n            ...super.findChildRefIds(dataId)\n        } : fromParent;\n    }\n    getStorage() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        let p = this.parent;\n        while(p.parent)p = p.parent;\n        return p.getStorage(...args);\n    }\n    constructor(id, parent, replay, group){\n        super(parent.policies, group);\n        this.id = id;\n        this.parent = parent;\n        this.replay = replay;\n        this.group = group;\n        replay(this);\n    }\n}\n// Represents a Layer permanently installed just above the Root, which allows\n// reading optimistically (and registering optimistic dependencies) even when\n// no optimistic layers are currently active. The stump.group CacheGroup object\n// is shared by any/all Layer objects added on top of the Stump.\nclass Stump extends Layer {\n    removeLayer() {\n        // Never remove the Stump layer.\n        return this;\n    }\n    merge(older, newer) {\n        // We never want to write any data into the Stump, so we forward any merge\n        // calls to the Root instead. Another option here would be to throw an\n        // exception, but the toReference(object, true) function can sometimes\n        // trigger Stump writes (which used to be Root writes, before the Stump\n        // concept was introduced).\n        return this.parent.merge(older, newer);\n    }\n    constructor(root){\n        super(\"EntityStore.Stump\", root, ()=>{}, new CacheGroup(root.group.caching, root.group));\n    }\n}\nfunction storeObjectReconciler(existingObject, incomingObject, property) {\n    const existingValue = existingObject[property];\n    const incomingValue = incomingObject[property];\n    // Wherever there is a key collision, prefer the incoming value, unless\n    // it is deeply equal to the existing value. It's worth checking deep\n    // equality here (even though blindly returning incoming would be\n    // logically correct) because preserving the referential identity of\n    // existing data can prevent needless rereading and rerendering.\n    return (0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(existingValue, incomingValue) ? existingValue : incomingValue;\n}\nfunction supportsResultCaching(store) {\n    // When result caching is disabled, store.depend will be null.\n    return !!(store && store.supportsResultCaching);\n} //# sourceMappingURL=entityStore.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/cache/inmemory/entityStore.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/cache/inmemory/helpers.js":
/*!***************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/cache/inmemory/helpers.js ***!
  \***************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TypeOrFieldNameRegExp: () => (/* binding */ TypeOrFieldNameRegExp),\n/* harmony export */   defaultDataIdFromObject: () => (/* binding */ defaultDataIdFromObject),\n/* harmony export */   extractFragmentContext: () => (/* binding */ extractFragmentContext),\n/* harmony export */   fieldNameFromStoreName: () => (/* binding */ fieldNameFromStoreName),\n/* harmony export */   getTypenameFromStoreObject: () => (/* binding */ getTypenameFromStoreObject),\n/* harmony export */   hasOwn: () => (/* binding */ hasOwn),\n/* harmony export */   makeProcessedFieldsMerger: () => (/* binding */ makeProcessedFieldsMerger),\n/* harmony export */   normalizeConfig: () => (/* binding */ normalizeConfig),\n/* harmony export */   selectionSetMatchesResult: () => (/* binding */ selectionSetMatchesResult),\n/* harmony export */   storeValueIsStoreObject: () => (/* binding */ storeValueIsStoreObject)\n/* harmony export */ });\n/* harmony import */ var _apollo_client_utilities__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @apollo/client/utilities */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/compact.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/isNonNullObject.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/isArray.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/isField.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/shouldInclude.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/resultKeyNameFromField.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/DeepMerger.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/createFragmentMap.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getFragmentDefinitions.js\");\n\n\nconst { hasOwnProperty: hasOwn } = Object.prototype;\nfunction defaultDataIdFromObject(param, context) {\n    let { __typename, id, _id } = param;\n    if (typeof __typename === \"string\") {\n        if (context) {\n            context.keyObject = id != null ? {\n                id\n            } : _id != null ? {\n                _id\n            } : void 0;\n        }\n        // If there is no object.id, fall back to object._id.\n        if (id == null && _id != null) {\n            id = _id;\n        }\n        if (id != null) {\n            return \"\".concat(__typename, \":\").concat(typeof id === \"number\" || typeof id === \"string\" ? id : JSON.stringify(id));\n        }\n    }\n}\nconst defaultConfig = {\n    dataIdFromObject: defaultDataIdFromObject,\n    resultCaching: true\n};\nfunction normalizeConfig(config) {\n    return (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_0__.compact)(defaultConfig, config);\n}\nfunction getTypenameFromStoreObject(store, objectOrReference) {\n    return (0,_apollo_client_utilities__WEBPACK_IMPORTED_MODULE_1__.isReference)(objectOrReference) ? store.get(objectOrReference.__ref, \"__typename\") : objectOrReference && objectOrReference.__typename;\n}\nconst TypeOrFieldNameRegExp = /^[_a-z][_0-9a-z]*/i;\nfunction fieldNameFromStoreName(storeFieldName) {\n    const match = storeFieldName.match(TypeOrFieldNameRegExp);\n    return match ? match[0] : storeFieldName;\n}\nfunction selectionSetMatchesResult(selectionSet, result, variables) {\n    if ((0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_2__.isNonNullObject)(result)) {\n        return (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_3__.isArray)(result) ? result.every((item)=>selectionSetMatchesResult(selectionSet, item, variables)) : selectionSet.selections.every((field)=>{\n            if ((0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_4__.isField)(field) && (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_5__.shouldInclude)(field, variables)) {\n                const key = (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_6__.resultKeyNameFromField)(field);\n                return hasOwn.call(result, key) && (!field.selectionSet || selectionSetMatchesResult(field.selectionSet, result[key], variables));\n            }\n            // If the selection has been skipped with @skip(true) or\n            // @include(false), it should not count against the matching. If\n            // the selection is not a field, it must be a fragment (inline or\n            // named). We will determine if selectionSetMatchesResult for that\n            // fragment when we get to it, so for now we return true.\n            return true;\n        });\n    }\n    return false;\n}\nfunction storeValueIsStoreObject(value) {\n    return (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_2__.isNonNullObject)(value) && !(0,_apollo_client_utilities__WEBPACK_IMPORTED_MODULE_1__.isReference)(value) && !(0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_3__.isArray)(value);\n}\nfunction makeProcessedFieldsMerger() {\n    return new _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_7__.DeepMerger();\n}\nfunction extractFragmentContext(document, fragments) {\n    // FragmentMap consisting only of fragments defined directly in document, not\n    // including other fragments registered in the FragmentRegistry.\n    const fragmentMap = (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_8__.createFragmentMap)((0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_9__.getFragmentDefinitions)(document));\n    return {\n        fragmentMap,\n        lookupFragment (name) {\n            let def = fragmentMap[name];\n            if (!def && fragments) {\n                def = fragments.lookup(name);\n            }\n            return def || null;\n        }\n    };\n} //# sourceMappingURL=helpers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/cache/inmemory/helpers.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/cache/inmemory/inMemoryCache.js":
/*!*********************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/cache/inmemory/inMemoryCache.js ***!
  \*********************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InMemoryCache: () => (/* binding */ InMemoryCache)\n/* harmony export */ });\n/* harmony import */ var _wry_equality__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wry/equality */ \"(app-pages-browser)/../../node_modules/.pnpm/@wry+equality@0.5.7/node_modules/@wry/equality/lib/index.js\");\n/* harmony import */ var optimism__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! optimism */ \"(app-pages-browser)/../../node_modules/.pnpm/optimism@0.18.1/node_modules/optimism/lib/index.js\");\n/* harmony import */ var _apollo_client_utilities__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @apollo/client/utilities */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/caching/sizes.js\");\n/* harmony import */ var _apollo_client_utilities__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @apollo/client/utilities */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/canonicalStringify.js\");\n/* harmony import */ var _apollo_client_utilities__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @apollo/client/utilities */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/graphql/print.js\");\n/* harmony import */ var _apollo_client_utilities__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @apollo/client/utilities */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n/* harmony import */ var _apollo_client_utilities__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @apollo/client/utilities */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/graphql/DocumentTransform.js\");\n/* harmony import */ var _apollo_client_utilities__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @apollo/client/utilities */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/graphql/transform.js\");\n/* harmony import */ var _apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @apollo/client/utilities/environment */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/environment/index.development.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getMemoryInternals.js\");\n/* harmony import */ var _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @apollo/client/utilities/invariant */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/invariant/index.development.js\");\n/* harmony import */ var _core_cache_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/cache.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/cache/core/cache.js\");\n/* harmony import */ var _entityStore_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./entityStore.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/cache/inmemory/entityStore.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./helpers.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/cache/inmemory/helpers.js\");\n/* harmony import */ var _policies_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./policies.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/cache/inmemory/policies.js\");\n/* harmony import */ var _reactiveVars_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./reactiveVars.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/cache/inmemory/reactiveVars.js\");\n/* harmony import */ var _readFromStore_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./readFromStore.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/cache/inmemory/readFromStore.js\");\n/* harmony import */ var _writeToStore_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./writeToStore.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/cache/inmemory/writeToStore.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass InMemoryCache extends _core_cache_js__WEBPACK_IMPORTED_MODULE_2__.ApolloCache {\n    init() {\n        // Passing { resultCaching: false } in the InMemoryCache constructor options\n        // will completely disable dependency tracking, which will improve memory\n        // usage but worsen the performance of repeated reads.\n        const rootStore = this.data = new _entityStore_js__WEBPACK_IMPORTED_MODULE_3__.EntityStore.Root({\n            policies: this.policies,\n            resultCaching: this.config.resultCaching\n        });\n        // When no optimistic writes are currently active, cache.optimisticData ===\n        // cache.data, so there are no additional layers on top of the actual data.\n        // When an optimistic update happens, this.optimisticData will become a\n        // linked list of EntityStore Layer objects that terminates with the\n        // original this.data cache object.\n        this.optimisticData = rootStore.stump;\n        this.resetResultCache();\n    }\n    resetResultCache() {\n        const { fragments } = this.config;\n        this.addTypenameTransform.resetCache();\n        fragments === null || fragments === void 0 ? void 0 : fragments.resetCaches();\n        // The StoreWriter is mostly stateless and so doesn't really need to be\n        // reset, but it does need to have its writer.storeReader reference updated,\n        // so it's simpler to update this.storeWriter as well.\n        this.storeWriter = new _writeToStore_js__WEBPACK_IMPORTED_MODULE_4__.StoreWriter(this, this.storeReader = new _readFromStore_js__WEBPACK_IMPORTED_MODULE_5__.StoreReader({\n            cache: this,\n            fragments\n        }), fragments);\n        this.maybeBroadcastWatch = (0,optimism__WEBPACK_IMPORTED_MODULE_1__.wrap)((c, options)=>{\n            return this.broadcastWatch(c, options);\n        }, {\n            max: _apollo_client_utilities__WEBPACK_IMPORTED_MODULE_6__.cacheSizes[\"inMemoryCache.maybeBroadcastWatch\"] || 5000 /* defaultCacheSizes[\"inMemoryCache.maybeBroadcastWatch\"] */ ,\n            makeCacheKey: (c)=>{\n                // Return a cache key (thus enabling result caching) only if we're\n                // currently using a data store that can track cache dependencies.\n                const store = c.optimistic ? this.optimisticData : this.data;\n                if ((0,_entityStore_js__WEBPACK_IMPORTED_MODULE_3__.supportsResultCaching)(store)) {\n                    const { optimistic, id, variables } = c;\n                    return store.makeCacheKey(c.query, // Different watches can have the same query, optimistic\n                    // status, rootId, and variables, but if their callbacks are\n                    // different, the (identical) result needs to be delivered to\n                    // each distinct callback. The easiest way to achieve that\n                    // separation is to include c.callback in the cache key for\n                    // maybeBroadcastWatch calls. See issue #5733.\n                    c.callback, (0,_apollo_client_utilities__WEBPACK_IMPORTED_MODULE_7__.canonicalStringify)({\n                        optimistic,\n                        id,\n                        variables\n                    }));\n                }\n            }\n        });\n        // Since we have thrown away all the cached functions that depend on the\n        // CacheGroup dependencies maintained by EntityStore, we should also reset\n        // all CacheGroup dependency information.\n        new Set([\n            this.data.group,\n            this.optimisticData.group\n        ]).forEach((group)=>group.resetCaching());\n    }\n    restore(data) {\n        this.init();\n        // Since calling this.init() discards/replaces the entire StoreReader, along\n        // with the result caches it maintains, this.data.replace(data) won't have\n        // to bother deleting the old data.\n        if (data) this.data.replace(data);\n        return this;\n    }\n    extract() {\n        let optimistic = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;\n        return (optimistic ? this.optimisticData : this.data).extract();\n    }\n    read(options) {\n        const { // Since read returns data or null, without any additional metadata\n        // about whether/where there might have been missing fields, the\n        // default behavior cannot be returnPartialData = true (like it is\n        // for the diff method), since defaulting to true would violate the\n        // integrity of the T in the return type. However, partial data may\n        // be useful in some cases, so returnPartialData:true may be\n        // specified explicitly.\n        returnPartialData = false } = options;\n        return this.storeReader.diffQueryAgainstStore({\n            ...options,\n            store: options.optimistic ? this.optimisticData : this.data,\n            config: this.config,\n            returnPartialData\n        }).result;\n    }\n    write(options) {\n        try {\n            ++this.txCount;\n            return this.storeWriter.writeToStore(this.data, options);\n        } finally{\n            if (!--this.txCount && options.broadcast !== false) {\n                this.broadcastWatches();\n            }\n        }\n    }\n    modify(options) {\n        if (_helpers_js__WEBPACK_IMPORTED_MODULE_8__.hasOwn.call(options, \"id\") && !options.id) {\n            // To my knowledge, TypeScript does not currently provide a way to\n            // enforce that an optional property?:type must *not* be undefined\n            // when present. That ability would be useful here, because we want\n            // options.id to default to ROOT_QUERY only when no options.id was\n            // provided. If the caller attempts to pass options.id with a\n            // falsy/undefined value (perhaps because cache.identify failed), we\n            // should not assume the goal was to modify the ROOT_QUERY object.\n            // We could throw, but it seems natural to return false to indicate\n            // that nothing was modified.\n            return false;\n        }\n        const store = options.optimistic // Defaults to false.\n         ? this.optimisticData : this.data;\n        try {\n            ++this.txCount;\n            return store.modify(options.id || \"ROOT_QUERY\", options.fields, false);\n        } finally{\n            if (!--this.txCount && options.broadcast !== false) {\n                this.broadcastWatches();\n            }\n        }\n    }\n    diff(options) {\n        return this.storeReader.diffQueryAgainstStore({\n            ...options,\n            store: options.optimistic ? this.optimisticData : this.data,\n            rootId: options.id || \"ROOT_QUERY\",\n            config: this.config\n        });\n    }\n    watch(watch) {\n        if (!this.watches.size) {\n            // In case we previously called forgetCache(this) because\n            // this.watches became empty (see below), reattach this cache to any\n            // reactive variables on which it previously depended. It might seem\n            // paradoxical that we're able to recall something we supposedly\n            // forgot, but the point of calling forgetCache(this) is to silence\n            // useless broadcasts while this.watches is empty, and to allow the\n            // cache to be garbage collected. If, however, we manage to call\n            // recallCache(this) here, this cache object must not have been\n            // garbage collected yet, and should resume receiving updates from\n            // reactive variables, now that it has a watcher to notify.\n            (0,_reactiveVars_js__WEBPACK_IMPORTED_MODULE_9__.recallCache)(this);\n        }\n        this.watches.add(watch);\n        if (watch.immediate) {\n            this.maybeBroadcastWatch(watch);\n        }\n        return ()=>{\n            // Once we remove the last watch from this.watches, cache.broadcastWatches\n            // no longer does anything, so we preemptively tell the reactive variable\n            // system to exclude this cache from future broadcasts.\n            if (this.watches.delete(watch) && !this.watches.size) {\n                (0,_reactiveVars_js__WEBPACK_IMPORTED_MODULE_9__.forgetCache)(this);\n            }\n            // Remove this watch from the LRU cache managed by the\n            // maybeBroadcastWatch OptimisticWrapperFunction, to prevent memory\n            // leaks involving the closure of watch.callback.\n            this.maybeBroadcastWatch.forget(watch);\n        };\n    }\n    gc(options) {\n        _apollo_client_utilities__WEBPACK_IMPORTED_MODULE_7__.canonicalStringify.reset();\n        _apollo_client_utilities__WEBPACK_IMPORTED_MODULE_10__.print.reset();\n        const ids = this.optimisticData.gc();\n        if (options && !this.txCount && options.resetResultCache) {\n            this.resetResultCache();\n        }\n        return ids;\n    }\n    // Call this method to ensure the given root ID remains in the cache after\n    // garbage collection, along with its transitive child entities. Note that\n    // the cache automatically retains all directly written entities. By default,\n    // the retainment persists after optimistic updates are removed. Pass true\n    // for the optimistic argument if you would prefer for the retainment to be\n    // discarded when the top-most optimistic layer is removed. Returns the\n    // resulting (non-negative) retainment count.\n    retain(rootId, optimistic) {\n        return (optimistic ? this.optimisticData : this.data).retain(rootId);\n    }\n    // Call this method to undo the effect of the retain method, above. Once the\n    // retainment count falls to zero, the given ID will no longer be preserved\n    // during garbage collection, though it may still be preserved by other safe\n    // entities that refer to it. Returns the resulting (non-negative) retainment\n    // count, in case that's useful.\n    release(rootId, optimistic) {\n        return (optimistic ? this.optimisticData : this.data).release(rootId);\n    }\n    // Returns the canonical ID for a given StoreObject, obeying typePolicies\n    // and keyFields (and dataIdFromObject, if you still use that). At minimum,\n    // the object must contain a __typename and any primary key fields required\n    // to identify entities of that type. If you pass a query result object, be\n    // sure that none of the primary key fields have been renamed by aliasing.\n    // If you pass a Reference object, its __ref ID string will be returned.\n    identify(object) {\n        if ((0,_apollo_client_utilities__WEBPACK_IMPORTED_MODULE_11__.isReference)(object)) return object.__ref;\n        try {\n            return this.policies.identify(object)[0];\n        } catch (e) {\n            _apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_12__.__DEV__ && _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_13__.invariant.warn(e);\n        }\n    }\n    evict(options) {\n        if (!options.id) {\n            if (_helpers_js__WEBPACK_IMPORTED_MODULE_8__.hasOwn.call(options, \"id\")) {\n                // See comment in modify method about why we return false when\n                // options.id exists but is falsy/undefined.\n                return false;\n            }\n            options = {\n                ...options,\n                id: \"ROOT_QUERY\"\n            };\n        }\n        try {\n            // It's unlikely that the eviction will end up invoking any other\n            // cache update operations while it's running, but {in,de}crementing\n            // this.txCount still seems like a good idea, for uniformity with\n            // the other update methods.\n            ++this.txCount;\n            // Pass this.data as a limit on the depth of the eviction, so evictions\n            // during optimistic updates (when this.data is temporarily set equal to\n            // this.optimisticData) do not escape their optimistic Layer.\n            return this.optimisticData.evict(options, this.data);\n        } finally{\n            if (!--this.txCount && options.broadcast !== false) {\n                this.broadcastWatches();\n            }\n        }\n    }\n    reset(options) {\n        this.init();\n        _apollo_client_utilities__WEBPACK_IMPORTED_MODULE_7__.canonicalStringify.reset();\n        if (options && options.discardWatches) {\n            // Similar to what happens in the unsubscribe function returned by\n            // cache.watch, applied to all current watches.\n            this.watches.forEach((watch)=>this.maybeBroadcastWatch.forget(watch));\n            this.watches.clear();\n            (0,_reactiveVars_js__WEBPACK_IMPORTED_MODULE_9__.forgetCache)(this);\n        } else {\n            // Calling this.init() above unblocks all maybeBroadcastWatch caching, so\n            // this.broadcastWatches() triggers a broadcast to every current watcher\n            // (letting them know their data is now missing). This default behavior is\n            // convenient because it means the watches do not have to be manually\n            // reestablished after resetting the cache. To prevent this broadcast and\n            // cancel all watches, pass true for options.discardWatches.\n            this.broadcastWatches();\n        }\n        return Promise.resolve();\n    }\n    removeOptimistic(idToRemove) {\n        const newOptimisticData = this.optimisticData.removeLayer(idToRemove);\n        if (newOptimisticData !== this.optimisticData) {\n            this.optimisticData = newOptimisticData;\n            this.broadcastWatches();\n        }\n    }\n    batch(options) {\n        const { update, optimistic = true, removeOptimistic, onWatchUpdated } = options;\n        let updateResult;\n        const perform = (layer)=>{\n            const { data, optimisticData } = this;\n            ++this.txCount;\n            if (layer) {\n                this.data = this.optimisticData = layer;\n            }\n            try {\n                return updateResult = update(this);\n            } finally{\n                --this.txCount;\n                this.data = data;\n                this.optimisticData = optimisticData;\n            }\n        };\n        const alreadyDirty = new Set();\n        if (onWatchUpdated && !this.txCount) {\n            // If an options.onWatchUpdated callback is provided, we want to call it\n            // with only the Cache.WatchOptions objects affected by options.update,\n            // but there might be dirty watchers already waiting to be broadcast that\n            // have nothing to do with the update. To prevent including those watchers\n            // in the post-update broadcast, we perform this initial broadcast to\n            // collect the dirty watchers, so we can re-dirty them later, after the\n            // post-update broadcast, allowing them to receive their pending\n            // broadcasts the next time broadcastWatches is called, just as they would\n            // if we never called cache.batch.\n            this.broadcastWatches({\n                ...options,\n                onWatchUpdated (watch) {\n                    alreadyDirty.add(watch);\n                    return false;\n                }\n            });\n        }\n        if (typeof optimistic === \"string\") {\n            // Note that there can be multiple layers with the same optimistic ID.\n            // When removeOptimistic(id) is called for that id, all matching layers\n            // will be removed, and the remaining layers will be reapplied.\n            this.optimisticData = this.optimisticData.addLayer(optimistic, perform);\n        } else if (optimistic === false) {\n            // Ensure both this.data and this.optimisticData refer to the root\n            // (non-optimistic) layer of the cache during the update. Note that\n            // this.data could be a Layer if we are currently executing an optimistic\n            // update function, but otherwise will always be an EntityStore.Root\n            // instance.\n            perform(this.data);\n        } else {\n            // Otherwise, leave this.data and this.optimisticData unchanged and run\n            // the update with broadcast batching.\n            perform();\n        }\n        if (typeof removeOptimistic === \"string\") {\n            this.optimisticData = this.optimisticData.removeLayer(removeOptimistic);\n        }\n        // Note: if this.txCount > 0, then alreadyDirty.size === 0, so this code\n        // takes the else branch and calls this.broadcastWatches(options), which\n        // does nothing when this.txCount > 0.\n        if (onWatchUpdated && alreadyDirty.size) {\n            this.broadcastWatches({\n                ...options,\n                onWatchUpdated (watch, diff) {\n                    const result = onWatchUpdated.call(this, watch, diff);\n                    if (result !== false) {\n                        // Since onWatchUpdated did not return false, this diff is\n                        // about to be broadcast to watch.callback, so we don't need\n                        // to re-dirty it with the other alreadyDirty watches below.\n                        alreadyDirty.delete(watch);\n                    }\n                    return result;\n                }\n            });\n            // Silently re-dirty any watches that were already dirty before the update\n            // was performed, and were not broadcast just now.\n            if (alreadyDirty.size) {\n                alreadyDirty.forEach((watch)=>this.maybeBroadcastWatch.dirty(watch));\n            }\n        } else {\n            // If alreadyDirty is empty or we don't have an onWatchUpdated\n            // function, we don't need to go to the trouble of wrapping\n            // options.onWatchUpdated.\n            this.broadcastWatches(options);\n        }\n        return updateResult;\n    }\n    performTransaction(update, optimisticId) {\n        return this.batch({\n            update,\n            optimistic: optimisticId || optimisticId !== null\n        });\n    }\n    transformDocument(document) {\n        return this.addTypenameTransform.transformDocument(this.addFragmentsToDocument(document));\n    }\n    fragmentMatches(fragment, typename) {\n        return this.policies.fragmentMatches(fragment, typename);\n    }\n    lookupFragment(fragmentName) {\n        var _this_config_fragments;\n        return ((_this_config_fragments = this.config.fragments) === null || _this_config_fragments === void 0 ? void 0 : _this_config_fragments.lookup(fragmentName)) || null;\n    }\n    broadcastWatches(options) {\n        if (!this.txCount) {\n            this.watches.forEach((c)=>this.maybeBroadcastWatch(c, options));\n        }\n    }\n    addFragmentsToDocument(document) {\n        const { fragments } = this.config;\n        return fragments ? fragments.transform(document) : document;\n    }\n    // This method is wrapped by maybeBroadcastWatch, which is called by\n    // broadcastWatches, so that we compute and broadcast results only when\n    // the data that would be broadcast might have changed. It would be\n    // simpler to check for changes after recomputing a result but before\n    // broadcasting it, but this wrapping approach allows us to skip both\n    // the recomputation and the broadcast, in most cases.\n    broadcastWatch(c, options) {\n        const { lastDiff } = c;\n        // Both WatchOptions and DiffOptions extend ReadOptions, and DiffOptions\n        // currently requires no additional properties, so we can use c (a\n        // WatchOptions object) as DiffOptions, without having to allocate a new\n        // object, and without having to enumerate the relevant properties (query,\n        // variables, etc.) explicitly. There will be some additional properties\n        // (lastDiff, callback, etc.), but cache.diff ignores them.\n        const diff = this.diff(c);\n        if (options) {\n            if (c.optimistic && typeof options.optimistic === \"string\") {\n                diff.fromOptimisticTransaction = true;\n            }\n            if (options.onWatchUpdated && options.onWatchUpdated.call(this, c, diff, lastDiff) === false) {\n                // Returning false from the onWatchUpdated callback will prevent\n                // calling c.callback(diff) for this watcher.\n                return;\n            }\n        }\n        if (!lastDiff || !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(lastDiff.result, diff.result)) {\n            c.callback(c.lastDiff = diff, lastDiff);\n        }\n    }\n    constructor(config = {}){\n        super(), this.watches = new Set(), this.addTypenameTransform = new _apollo_client_utilities__WEBPACK_IMPORTED_MODULE_14__.DocumentTransform(_apollo_client_utilities__WEBPACK_IMPORTED_MODULE_15__.addTypenameToDocument), // Override the default value, since InMemoryCache result objects are frozen\n        // in development and expected to remain logically immutable in production.\n        this.assumeImmutableResults = true, this.makeVar = _reactiveVars_js__WEBPACK_IMPORTED_MODULE_9__.makeVar, this.txCount = 0;\n        this.config = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_8__.normalizeConfig)(config);\n        this.policies = new _policies_js__WEBPACK_IMPORTED_MODULE_16__.Policies({\n            cache: this,\n            dataIdFromObject: this.config.dataIdFromObject,\n            possibleTypes: this.config.possibleTypes,\n            typePolicies: this.config.typePolicies\n        });\n        this.init();\n    }\n}\nif (_apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_12__.__DEV__) {\n    InMemoryCache.prototype.getMemoryInternals = _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_17__.getInMemoryCacheMemoryInternals;\n} //# sourceMappingURL=inMemoryCache.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9jYWNoZS9pbm1lbW9yeS9pbk1lbW9yeUNhY2hlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBcUM7QUFPTjtBQWVFO0FBQzZCO0FBQ3FCO0FBQ3JCO0FBR2hCO0FBR3VCO0FBQ2Y7QUFDZDtBQUM2QjtBQUNyQjtBQUVEO0FBTy9DLE1BQWEsQ0FBYixxQkFBbUMsdURBQWxDLENBQUQ7SUEwQ1UsQ0FBVixHQUFjLENBQWQ7UUFDSSxDQUFKO1FBQ0ksQ0FBSjtRQUNJLENBQUo7UUFDSSxDQUFKLEtBQVUsQ0FBVixXQUF1QixDQUF2QixHQUEyQixDQUFDLENBQTVCLE1BQW1DLENBQW5DLEdBQXVDLHdEQUFXLENBQUMsQ0FBbkQsR0FBdUQsQ0FBQztZQUNsRCxDQUFOLE9BQWMsRUFBRSxDQUFoQixHQUFvQixDQUFDLENBQXJCLE9BQTZCO1lBQ3ZCLENBQU4sWUFBbUIsRUFBRSxDQUFyQixHQUF5QixDQUFDLENBQTFCLEtBQWdDLENBQUMsQ0FBakMsWUFBOEM7UUFDOUMsQ0FBSyxDQUFDLENBQUM7UUFFSCxDQUFKO1FBQ0ksQ0FBSjtRQUNJLENBQUo7UUFDSSxDQUFKO1FBQ0ksQ0FBSjtRQUNJLENBQUosR0FBUSxDQUFDLENBQVQsZ0JBQTBCLENBQTFCLFFBQW1DLENBQUMsQ0FBcEMsSUFBeUM7UUFFckMsQ0FBSixHQUFRLENBQUMsQ0FBVCxlQUF5QixDQUF6QixDQUEyQjtJQUN6QjtJQUVRLENBQVYsZUFBMEIsQ0FBMUI7UUFDSSxDQUFKLEtBQVUsRUFBRSxDQUFaLGFBQTBCLENBQTFCLEdBQThCLENBQUMsQ0FBL0IsS0FBcUM7UUFFakMsQ0FBSixHQUFRLENBQUMsQ0FBVCxtQkFBNkIsQ0FBQyxDQUE5QixTQUF3QyxDQUF4QyxDQUEwQzs4REFDdEMsQ0FBSixRQUFhLENBQWIsV0FBMEIsQ0FBMUIsQ0FBNEI7UUFFeEIsQ0FBSjtRQUNJLENBQUo7UUFDSSxDQUFKO1FBQ0ksQ0FBSixHQUFRLENBQUMsQ0FBVCxhQUF1QixDQUF2QixHQUEyQix5REFBVyxDQUNoQyxDQUROLEdBQ1UsRUFDSixDQUZOLEdBRVcsQ0FBQyxDQUZaLGFBRTBCLENBRjFCLEdBRThCLDBEQUFXLENBQUM7WUFBRSxDQUY1QyxJQUVpRCxFQUFFLENBRm5ELEdBRXVEO1lBQUUsQ0FGekQ7UUFBQSxDQUVvRSxDQUFDLENBQUMsQ0FDaEUsQ0FITixRQUdlLENBQ1Y7UUFFRCxDQUFKLEdBQVEsQ0FBQyxDQUFULHFCQUErQiw4Q0FBSSxDQUM3QixDQUFDLENBQXFCLEVBQUUsQ0FEOUIsTUFDd0QsRUFBRSxDQUQxRDtZQUVRLENBQVIsTUFBZSxDQUFmLEdBQW1CLENBQUMsQ0FBcEIsYUFBa0MsQ0FBQyxDQUFDLEVBQUUsQ0FBdEMsTUFBNkMsQ0FBQztRQUN4QyxDQUFDLEVBQ0Q7WUFDRSxDQUFSLEVBQVcsRUFDRCxnRUFBVSxDQUFDLENBRHJCLGtDQUN3RCxFQUR4RCxHQUVBLGlFQUFnRTtZQUN4RCxDQUFSLFdBQW9CLEVBQUUsQ0FBQyxDQUFxQixFQUFFLENBQTlDO2dCQUNVLENBQVY7Z0JBQ1UsQ0FBVjtnQkFDVSxDQUFWLEtBQWdCLENBQWhCLE9BQXdCLENBQUMsQ0FBQyxDQUExQixVQUFxQyxFQUFFLENBQXZDLEdBQTJDLENBQUMsQ0FBNUMsY0FBMkQsRUFBRSxDQUE3RCxHQUFpRSxDQUFDLENBQWxFLEdBQXNFO2dCQUM1RCxDQUFWLEdBQWMsc0VBQXFCLENBQUMsQ0FBcEMsSUFBeUMsQ0FBQyxFQUFFO29CQUNoQyxDQUFaLEtBQWtCLEVBQUUsQ0FBcEIsU0FBOEIsRUFBRSxDQUFoQyxDQUFrQyxFQUFFLENBQXBDLGFBQWtELENBQUM7b0JBQ3ZDLENBQVosTUFBbUIsQ0FBbkIsSUFBd0IsQ0FBQyxDQUF6QixXQUFxQyxDQUN2QixDQUFDLENBQUMsQ0FEaEIsSUFDcUIsRUFDUCxDQUFkO29CQUNjLENBQWQ7b0JBQ2MsQ0FBZDtvQkFDYyxDQUFkO29CQUNjLENBQWQ7b0JBQ2MsQ0FBZDtvQkFDYyxDQUFDLENBQUMsQ0FBaEIsT0FBd0IsRUFDViw0RUFBa0IsQ0FBQzt3QkFBRSxDQURuQyxTQUM2Qzt3QkFBRSxDQUQvQyxDQUNpRDt3QkFBRSxDQURuRDtvQkFBQSxDQUM4RCxDQUFDLENBQ2xEO2dCQUNIO1lBQ0YsQ0FBQztRQUNULENBQU8sQ0FDRjtRQUVELENBQUo7UUFDSSxDQUFKO1FBQ0ksQ0FBSjtRQUNJLENBQUosR0FBUSxDQUFSLEVBQVcsQ0FBQztZQUFDLENBQWIsR0FBaUIsQ0FBQyxDQUFsQixHQUFzQixDQUFDLENBQXZCLElBQTRCO1lBQUUsQ0FBOUIsR0FBa0MsQ0FBQyxDQUFuQyxhQUFpRCxDQUFDLENBQWxELElBQXVEO1NBQUMsQ0FBQyxDQUFDLENBQTFELE1BQWlFLENBQUMsQ0FBQyxDQUFuRSxJQUF3RSxFQUFFLENBQTFFLEtBQ1csQ0FBQyxDQURaLFdBQ3dCLENBRHhCLENBQzBCLENBQ3JCO0lBQ0g7SUFFTyxDQUFULE1BQWdCLENBQUMsQ0FBakIsR0FBNEMsRUFBNUM7UUFDSSxDQUFKLEdBQVEsQ0FBQyxDQUFULEdBQWEsQ0FBYixDQUFlO1FBQ1gsQ0FBSjtRQUNJLENBQUo7UUFDSSxDQUFKO1FBQ0ksQ0FBSixHQUFRLENBQVIsR0FBWSxFQUFFLENBQWQsR0FBa0IsQ0FBQyxDQUFuQixHQUF1QixDQUFDLENBQXhCLE1BQStCLENBQUMsQ0FBaEMsR0FBb0MsQ0FBQztRQUNqQyxDQUFKLE1BQVcsQ0FBWCxHQUFlO0lBQ2I7SUFFTyxDQUFULE1BQWdCLEdBQWhCO3lCQUFpQixDQUFqQixnRUFBdUMsQ0FBdkMsSUFBNEM7UUFDeEMsQ0FBSixNQUFXLENBQUMsQ0FBWixVQUF1QixFQUFFLENBQXpCLEdBQTZCLENBQUMsQ0FBOUIsY0FBNkMsRUFBRSxDQUEvQyxHQUFtRCxDQUFDLENBQXBELElBQXlELENBQUMsQ0FBMUQsTUFBaUUsQ0FBakUsQ0FBbUU7SUFDakU7SUFZTyxDQUFULEdBQWEsQ0FDVCxDQURKLE1BQ3lELEVBRHpEO1FBR0ksQ0FBSixLQUFVLEVBQ0osQ0FBTjtRQUNNLENBQU47UUFDTSxDQUFOO1FBQ00sQ0FBTjtRQUNNLENBQU47UUFDTSxDQUFOO1FBQ00sQ0FBTjtRQUNNLENBQU4sbUJBQTBCLENBQTFCLElBQStCLEVBQS9CLEdBQ1EsQ0FEUixNQUNlO1FBRVgsQ0FBSixNQUFXLENBQVgsR0FBZSxDQUFDLENBQWhCLFVBQTJCLENBQUMsQ0FBNUIsb0JBQWlELENBQVE7WUFDbkQsQ0FBTixFQUFTLENBQVQsTUFBZ0I7WUFDVixDQUFOLElBQVcsRUFBRSxDQUFiLE1BQW9CLENBQUMsQ0FBckIsVUFBZ0MsRUFBRSxDQUFsQyxHQUFzQyxDQUFDLENBQXZDLGNBQXNELEVBQUUsQ0FBeEQsR0FBNEQsQ0FBQyxDQUE3RCxHQUFpRTtZQUMzRCxDQUFOLEtBQVksRUFBRSxDQUFkLEdBQWtCLENBQUMsQ0FBbkIsS0FBeUI7WUFDbkIsQ0FBTixnQkFBdUI7UUFDdkIsQ0FBSyxDQUFDLENBQUMsQ0FBUCxLQUFhO0lBQ1g7SUFFTyxDQUFULElBQWMsQ0FHVixDQUhKLE1BR2tELEVBSGxEO1FBSUksQ0FBSixHQUFRO1lBQ0YsQ0FBTixDQUFRLENBQVIsR0FBWSxDQUFDLENBQWIsTUFBb0I7WUFDZCxDQUFOLE1BQWEsQ0FBYixHQUFpQixDQUFDLENBQWxCLFVBQTZCLENBQUMsQ0FBOUIsV0FBMEMsQ0FBQyxDQUEzQyxHQUErQyxDQUFDLENBQWhELEdBQW9ELEVBQUUsQ0FBdEQsTUFBNkQsQ0FBQztRQUMxRCxTQUFVO1lBQ1IsQ0FBTixHQUFVLENBQUMsQ0FBWCxDQUFhLENBQWIsR0FBaUIsQ0FBQyxDQUFsQixVQUE2QixDQUE3QixNQUFvQyxDQUFDLENBQXJDLGFBQW1ELENBQW5ELElBQXdELEVBQUU7Z0JBQ2xELENBQVIsR0FBWSxDQUFDLENBQWIsZUFBNkIsQ0FBN0IsQ0FBK0I7WUFDekI7UUFDRjtJQUNGO0lBRU8sQ0FBVCxLQUFlLENBQ1gsQ0FESixNQUN3QyxFQUR4QztRQUdJLENBQUosR0FBUSwrQ0FBTSxDQUFDLENBQWYsR0FBbUIsQ0FBQyxDQUFwQixNQUEyQixFQUFFLENBQTdCLEdBQWlDLEVBQWpDLEdBQXNDLENBQUMsQ0FBdkMsTUFBOEMsQ0FBQyxDQUEvQyxDQUFpRCxFQUFFO1lBQzdDLENBQU47WUFDTSxDQUFOO1lBQ00sQ0FBTjtZQUNNLENBQU47WUFDTSxDQUFOO1lBQ00sQ0FBTjtZQUNNLENBQU47WUFDTSxDQUFOO1lBQ00sQ0FBTjtZQUNNLENBQU4sTUFBYSxDQUFiLElBQWtCO1FBQ2Q7UUFDQSxDQUFKLEtBQVUsQ0FBVixPQUNNLENBRE4sT0FFZ0IsQ0FGaEIsVUFFMkIsQ0FGM0I7V0FJUSxDQUFSLEdBQVksQ0FBQyxDQUFiLGdCQUNRLENBQVIsR0FBWSxDQUFDLENBQWIsR0FBaUI7UUFDYixDQUFKLEdBQVE7WUFDRixDQUFOLENBQVEsQ0FBUixHQUFZLENBQUMsQ0FBYixNQUFvQjtZQUNkLENBQU4sTUFBYSxDQUFiLElBQWtCLENBQUMsQ0FBbkIsS0FBeUIsQ0FBQyxDQUExQixNQUFpQyxDQUFDLENBQWxDLEtBQXdDLENBQXhDLFdBQW9ELEVBQUUsQ0FBdEQsTUFBNkQsQ0FBQyxDQUE5RCxLQUFvRSxFQUFFLENBQXRFLElBQTJFLENBQUM7UUFDeEUsU0FBVTtZQUNSLENBQU4sR0FBVSxDQUFDLENBQVgsQ0FBYSxDQUFiLEdBQWlCLENBQUMsQ0FBbEIsVUFBNkIsQ0FBN0IsTUFBb0MsQ0FBQyxDQUFyQyxhQUFtRCxDQUFuRCxJQUF3RCxFQUFFO2dCQUNsRCxDQUFSLEdBQVksQ0FBQyxDQUFiLGVBQTZCLENBQTdCLENBQStCO1lBQ3pCO1FBQ0Y7SUFDRjtJQUVPLENBQVQsR0FBYSxDQUdULENBSEosTUFHaUQsRUFIakQ7UUFJSSxDQUFKLE1BQVcsQ0FBWCxHQUFlLENBQUMsQ0FBaEIsVUFBMkIsQ0FBQyxDQUE1QixvQkFBaUQsQ0FBQztZQUM1QyxDQUFOLEVBQVMsQ0FBVCxNQUFnQjtZQUNWLENBQU4sSUFBVyxFQUFFLENBQWIsTUFBb0IsQ0FBQyxDQUFyQixVQUFnQyxFQUFFLENBQWxDLEdBQXNDLENBQUMsQ0FBdkMsY0FBc0QsRUFBRSxDQUF4RCxHQUE0RCxDQUFDLENBQTdELEdBQWlFO1lBQzNELENBQU4sS0FBWSxFQUFFLENBQWQsTUFBcUIsQ0FBQyxDQUF0QixLQUE0QixDQUE1QixXQUF3QztZQUNsQyxDQUFOLEtBQVksRUFBRSxDQUFkLEdBQWtCLENBQUMsQ0FBbkIsS0FBeUI7UUFDekIsQ0FBSyxDQUFDO0lBQ0o7SUFFTyxDQUFULElBQWMsQ0FHVixDQUhKLElBR2dELEVBSGhEO1FBSUksQ0FBSixHQUFRLENBQUMsQ0FBVCxHQUFhLENBQUMsQ0FBZCxNQUFxQixDQUFDLENBQXRCLEdBQTBCLEVBQUU7WUFDdEIsQ0FBTjtZQUNNLENBQU47WUFDTSxDQUFOO1lBQ00sQ0FBTjtZQUNNLENBQU47WUFDTSxDQUFOO1lBQ00sQ0FBTjtZQUNNLENBQU47WUFDTSxDQUFOO1lBQ00sQ0FBTjtZQUNNLDZEQUFXLENBQUMsQ0FBbEIsR0FBc0IsQ0FBQztRQUNuQjtRQUNBLENBQUosR0FBUSxDQUFDLENBQVQsTUFBZ0IsQ0FBQyxDQUFqQixFQUFvQixDQUFDLENBQXJCLElBQTBCLENBQUM7UUFDdkIsQ0FBSixHQUFRLENBQVIsSUFBYSxDQUFDLENBQWQsUUFBdUIsRUFBRTtZQUNuQixDQUFOLEdBQVUsQ0FBQyxDQUFYLGtCQUE4QixDQUFDLENBQS9CLElBQW9DLENBQUM7UUFDakM7UUFDQSxDQUFKLE1BQVcsQ0FBWCxFQUFjLENBQWQ7WUFDTSxDQUFOO1lBQ00sQ0FBTjtZQUNNLENBQU47WUFDTSxDQUFOLEdBQVUsQ0FBVixHQUFjLENBQUMsQ0FBZixNQUFzQixDQUFDLENBQXZCLEtBQTZCLENBQUMsQ0FBOUIsSUFBbUMsRUFBbkMsR0FBd0MsQ0FBQyxDQUF6QyxHQUE2QyxDQUFDLENBQTlDLE1BQXFELENBQUMsQ0FBdEQsR0FBMEQsRUFBRTtnQkFDcEQsNkRBQVcsQ0FBQyxDQUFwQixHQUF3QixDQUFDO1lBQ25CO1lBQ0EsQ0FBTjtZQUNNLENBQU47WUFDTSxDQUFOO1lBQ00sQ0FBTixHQUFVLENBQUMsQ0FBWCxrQkFBOEIsQ0FBQyxDQUEvQixLQUFxQyxDQUFDLENBQXRDLElBQTJDLENBQUM7UUFDeEMsQ0FBQztJQUNIO0lBRU8sQ0FBVCxDQUFXLENBQUMsQ0FBWixNQUlHLEVBSkg7UUFLSSx3RUFBa0IsQ0FBQyxDQUF2QixJQUE0QixDQUE1QixDQUE4QjtRQUMxQiw0REFBSyxDQUFDLENBQVYsSUFBZSxDQUFmLENBQWlCO1FBQ2IsQ0FBSixLQUFVLENBQVYsS0FBZ0IsQ0FBaEIsR0FBb0IsQ0FBQyxDQUFyQixhQUFtQyxDQUFDLENBQXBDLENBQXNDLENBQXRDLENBQXdDO1FBQ3BDLENBQUosR0FBUSxDQUFSLFVBQW1CLENBQUMsQ0FBcEIsR0FBd0IsQ0FBQyxDQUF6QixVQUFvQyxDQUFwQyxNQUEyQyxDQUFDLENBQTVDLGVBQTRELEVBQUU7WUFDeEQsQ0FBTixHQUFVLENBQUMsQ0FBWCxlQUEyQixDQUEzQixDQUE2QjtRQUN6QjtRQUNBLENBQUosTUFBVyxDQUFYLEVBQWM7SUFDWjtJQUVBLENBQUY7SUFDRSxDQUFGO0lBQ0UsQ0FBRjtJQUNFLENBQUY7SUFDRSxDQUFGO0lBQ0UsQ0FBRjtJQUNFLENBQUY7SUFDUyxDQUFULEtBQWUsQ0FBQyxDQUFoQixLQUE4QixFQUFFLENBQWhDLFNBQW9ELEVBQXBEO1FBQ0ksQ0FBSixNQUFXLENBQUMsQ0FBWixVQUF1QixFQUFFLENBQXpCLEdBQTZCLENBQUMsQ0FBOUIsY0FBNkMsRUFBRSxDQUEvQyxHQUFtRCxDQUFDLENBQXBELEdBQXdELENBQUMsQ0FBQyxDQUExRCxLQUFnRSxDQUFDLENBQWpFLEtBQXVFLENBQUM7SUFDdEU7SUFFQSxDQUFGO0lBQ0UsQ0FBRjtJQUNFLENBQUY7SUFDRSxDQUFGO0lBQ0UsQ0FBRjtJQUNTLENBQVQsTUFBZ0IsQ0FBQyxDQUFqQixLQUErQixFQUFFLENBQWpDLFNBQXFELEVBQXJEO1FBQ0ksQ0FBSixNQUFXLENBQUMsQ0FBWixVQUF1QixFQUFFLENBQXpCLEdBQTZCLENBQUMsQ0FBOUIsY0FBNkMsRUFBRSxDQUEvQyxHQUFtRCxDQUFDLENBQXBELEdBQXdELENBQUMsQ0FBQyxDQUExRCxNQUFpRSxDQUFDLENBQWxFLEtBQXdFLENBQUM7SUFDdkU7SUFFQSxDQUFGO0lBQ0UsQ0FBRjtJQUNFLENBQUY7SUFDRSxDQUFGO0lBQ0UsQ0FBRjtJQUNFLENBQUY7SUFDUyxDQUFULE9BQWlCLENBQUMsQ0FBbEIsS0FBaUQsRUFBakQ7UUFDSSxDQUFKLEdBQVEsc0VBQVcsQ0FBQyxDQUFwQixLQUEwQixDQUFDLEVBQUUsQ0FBN0IsTUFBb0MsQ0FBcEMsS0FBMEMsQ0FBQyxDQUEzQyxJQUFnRDtRQUM1QyxDQUFKLEdBQVE7WUFDRixDQUFOLE1BQWEsQ0FBYixHQUFpQixDQUFDLENBQWxCLE9BQTBCLENBQUMsQ0FBM0IsT0FBbUMsQ0FBQyxDQUFwQyxLQUEwQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzFDLEVBQUUsQ0FBTixNQUFhLENBQUMsRUFBRTswRkFDViwwRUFBUyxDQUFDLENBQWhCLEdBQW9CLENBQUMsQ0FBQyxDQUFDO1FBQ25CO0lBQ0Y7SUFFTyxDQUFULElBQWMsQ0FBQyxDQUFmLE1BQTBDLEVBQTFDO1FBQ0ksQ0FBSixHQUFRLENBQUMsQ0FBVCxNQUFnQixDQUFDLENBQWpCLENBQW1CLEVBQUU7WUFDZixDQUFOLEdBQVUsK0NBQU0sQ0FBQyxDQUFqQixHQUFxQixDQUFDLENBQXRCLE1BQTZCLEVBQUUsQ0FBL0IsR0FBbUMsQ0FBQyxFQUFFO2dCQUM5QixDQUFSO2dCQUNRLENBQVI7Z0JBQ1EsQ0FBUixNQUFlLENBQWYsSUFBb0I7WUFDZDtZQUNBLENBQU4sU0FBZ0I7Z0JBQUUsQ0FBbEIsRUFBcUIsQ0FBckIsTUFBNEI7Z0JBQUUsQ0FBOUIsQ0FBZ0MsRUFBRSxDQUFsQztZQUFBLENBQWdEO1FBQzVDO1FBQ0EsQ0FBSixHQUFRO1lBQ0YsQ0FBTjtZQUNNLENBQU47WUFDTSxDQUFOO1lBQ00sQ0FBTjtZQUNNLENBQU4sQ0FBUSxDQUFSLEdBQVksQ0FBQyxDQUFiLE1BQW9CO1lBQ2QsQ0FBTjtZQUNNLENBQU47WUFDTSxDQUFOO1lBQ00sQ0FBTixNQUFhLENBQWIsR0FBaUIsQ0FBQyxDQUFsQixhQUFnQyxDQUFDLENBQWpDLElBQXNDLENBQUMsQ0FBdkMsTUFBOEMsRUFBRSxDQUFoRCxHQUFvRCxDQUFDLENBQXJELEdBQXlELENBQUM7UUFDdEQsU0FBVTtZQUNSLENBQU4sR0FBVSxDQUFDLENBQVgsQ0FBYSxDQUFiLEdBQWlCLENBQUMsQ0FBbEIsVUFBNkIsQ0FBN0IsTUFBb0MsQ0FBQyxDQUFyQyxhQUFtRCxDQUFuRCxJQUF3RCxFQUFFO2dCQUNsRCxDQUFSLEdBQVksQ0FBQyxDQUFiLGVBQTZCLENBQTdCLENBQStCO1lBQ3pCO1FBQ0Y7SUFDRjtJQUVPLENBQVQsSUFBYyxDQUFDLENBQWYsTUFBMkMsRUFBM0M7UUFDSSxDQUFKLEdBQVEsQ0FBQyxDQUFULEdBQWEsQ0FBYixDQUFlO1FBRVgsd0VBQWtCLENBQUMsQ0FBdkIsSUFBNEIsQ0FBNUIsQ0FBOEI7UUFFMUIsQ0FBSixHQUFRLENBQVIsVUFBbUIsQ0FBbkIsTUFBMEIsQ0FBQyxDQUEzQixhQUF5QyxFQUFFO1lBQ3JDLENBQU47WUFDTSxDQUFOO1lBQ00sQ0FBTixHQUFVLENBQUMsQ0FBWCxNQUFrQixDQUFDLENBQW5CLE1BQTBCLENBQUMsQ0FBQyxDQUE1QixJQUFpQyxFQUFFLENBQW5DLElBQTBDLENBQUMsQ0FBM0Msa0JBQThELENBQUMsQ0FBL0QsS0FBcUUsQ0FBQyxDQUF0RSxJQUEyRSxDQUFDLENBQUM7WUFDdkUsQ0FBTixHQUFVLENBQUMsQ0FBWCxNQUFrQixDQUFDLENBQW5CLElBQXdCLENBQXhCLENBQTBCO1lBQ3BCLDZEQUFXLENBQUMsQ0FBbEIsR0FBc0IsQ0FBQztRQUNuQixPQUFPO1lBQ0wsQ0FBTjtZQUNNLENBQU47WUFDTSxDQUFOO1lBQ00sQ0FBTjtZQUNNLENBQU47WUFDTSxDQUFOO1lBQ00sQ0FBTixHQUFVLENBQUMsQ0FBWCxlQUEyQixDQUEzQixDQUE2QjtRQUN6QjtRQUVBLENBQUosTUFBVyxDQUFYLE1BQWtCLENBQUMsQ0FBbkIsTUFBMEIsQ0FBMUIsQ0FBNEI7SUFDMUI7SUFFTyxDQUFULGVBQXlCLENBQUMsQ0FBMUIsU0FBNEMsRUFBNUM7UUFDSSxDQUFKLEtBQVUsQ0FBVixtQkFBOEIsQ0FBOUIsR0FBa0MsQ0FBQyxDQUFuQyxhQUFpRCxDQUFDLENBQWxELFVBQTZELENBQUMsQ0FBOUQsU0FBd0UsQ0FBQztRQUNyRSxDQUFKLEdBQVEsQ0FBUixxQkFBOEIsQ0FBOUIsR0FBa0MsQ0FBQyxDQUFuQyxhQUFpRCxFQUFFO1lBQzdDLENBQU4sR0FBVSxDQUFDLENBQVgsZ0JBQTRCLENBQTVCLGdCQUE2QztZQUN2QyxDQUFOLEdBQVUsQ0FBQyxDQUFYLGVBQTJCLENBQTNCLENBQTZCO1FBQ3pCO0lBQ0Y7SUFJTyxDQUFULElBQWMsQ0FDVixDQURKLE1BQzZELEVBRDdEO1FBR0ksQ0FBSixLQUFVLEVBQ0osQ0FETixLQUNZLEVBQ04sQ0FGTixZQUVtQixDQUZuQixHQUV1QixFQUNqQixDQUhOLGVBR3NCLEVBQ2hCLENBSk4sYUFJb0IsRUFKcEIsR0FLUSxDQUxSLE1BS2U7UUFFWCxDQUFKLEdBQVEsQ0FBUixXQUFtQztRQUMvQixDQUFKLEtBQVUsQ0FBVixTQUFvQixDQUFDLENBQXJCLElBQXdDLEVBQWlCLENBQXpEO1lBQ00sQ0FBTixLQUFZLEVBQUUsQ0FBZCxHQUFrQixFQUFFLENBQXBCLGtCQUF1QyxDQUF2QyxHQUEyQztZQUNyQyxDQUFOLENBQVEsQ0FBUixHQUFZLENBQUMsQ0FBYixNQUFvQjtZQUNkLENBQU4sR0FBVSxDQUFWLElBQWUsRUFBRTtnQkFDVCxDQUFSLEdBQVksQ0FBQyxDQUFiLE1BQW9CLENBQXBCLEdBQXdCLENBQUMsQ0FBekIsZ0JBQTBDLENBQTFDLElBQStDO1lBQ3pDO1lBQ0EsQ0FBTixHQUFVO2dCQUNGLENBQVIsTUFBZSxDQUFmLGNBQStCLENBQS9CLEtBQXFDLENBQUMsQ0FBdEMsR0FBMEMsQ0FBQyxDQUFDO1lBQ3RDLFNBQVU7Z0JBQ1IsQ0FBUixDQUFVLENBQVYsR0FBYyxDQUFDLENBQWYsTUFBc0I7Z0JBQ2QsQ0FBUixHQUFZLENBQUMsQ0FBYixNQUFvQixDQUFwQixHQUF3QjtnQkFDaEIsQ0FBUixHQUFZLENBQUMsQ0FBYixnQkFBOEIsQ0FBOUIsYUFBNEM7WUFDdEM7UUFDRixDQUFDO1FBRUQsQ0FBSixLQUFVLENBQVYsY0FBeUIsQ0FBekIsR0FBNkIsQ0FBN0IsRUFBZ0MsQ0FBaEMsQ0FBc0Q7UUFFbEQsQ0FBSixHQUFRLENBQVIsaUJBQTBCLENBQUMsQ0FBM0IsR0FBK0IsQ0FBQyxDQUFoQyxNQUF1QyxFQUFFO1lBQ25DLENBQU47WUFDTSxDQUFOO1lBQ00sQ0FBTjtZQUNNLENBQU47WUFDTSxDQUFOO1lBQ00sQ0FBTjtZQUNNLENBQU47WUFDTSxDQUFOO1lBQ00sQ0FBTjtZQUNNLENBQU4sR0FBVSxDQUFDLENBQVgsZUFBMkIsQ0FBQztnQkFDcEIsQ0FBUixFQUFXLENBQVgsTUFBa0I7Z0JBQ1YsQ0FBUixhQUFzQixFQUFDLENBQXZCLElBQTRCLEVBQTVCO29CQUNVLENBQVYsV0FBc0IsQ0FBQyxDQUF2QixFQUEwQixDQUFDLENBQTNCLElBQWdDLENBQUM7b0JBQ3ZCLENBQVYsTUFBaUIsQ0FBakIsSUFBc0I7Z0JBQ2QsQ0FBQztZQUNULENBQU8sQ0FBQztRQUNKO1FBRUEsQ0FBSixHQUFRLENBQVIsTUFBZSxDQUFmLGNBQThCLENBQTlCLE9BQXNDLEVBQUU7WUFDbEMsQ0FBTjtZQUNNLENBQU47WUFDTSxDQUFOO1lBQ00sQ0FBTixHQUFVLENBQUMsQ0FBWCxnQkFBNEIsQ0FBNUIsR0FBZ0MsQ0FBQyxDQUFqQyxhQUErQyxDQUFDLENBQWhELE9BQXdELENBQUMsQ0FBekQsU0FBbUUsRUFBRSxDQUFyRSxNQUE0RSxDQUFDO1FBQ3pFLE9BQU8sQ0FBWCxHQUFlLENBQWYsY0FBOEIsQ0FBOUIsSUFBbUMsRUFBRTtZQUMvQixDQUFOO1lBQ00sQ0FBTjtZQUNNLENBQU47WUFDTSxDQUFOO1lBQ00sQ0FBTjtZQUNNLENBQU4sTUFBYSxDQUFDLENBQWQsR0FBa0IsQ0FBQyxDQUFuQixHQUF1QixDQUFDO1FBQ3BCLE9BQU87WUFDTCxDQUFOO1lBQ00sQ0FBTjtZQUNNLENBQU4sTUFBYSxDQUFiLENBQWU7UUFDWDtRQUVBLENBQUosR0FBUSxDQUFSLE1BQWUsQ0FBZixvQkFBb0MsQ0FBcEMsT0FBNEMsRUFBRTtZQUN4QyxDQUFOLEdBQVUsQ0FBQyxDQUFYLGdCQUE0QixDQUE1QixHQUFnQyxDQUFDLENBQWpDLGFBQStDLENBQUMsQ0FBaEQsVUFBMkQsQ0FBQyxDQUE1RCxlQUE0RSxDQUFDO1FBQ3pFO1FBRUEsQ0FBSjtRQUNJLENBQUo7UUFDSSxDQUFKO1FBQ0ksQ0FBSixHQUFRLENBQVIsaUJBQTBCLENBQTFCLFdBQXNDLENBQUMsQ0FBdkMsR0FBMkMsRUFBRTtZQUN2QyxDQUFOLEdBQVUsQ0FBQyxDQUFYLGVBQTJCLENBQUM7Z0JBQ3BCLENBQVIsRUFBVyxDQUFYLE1BQWtCO2dCQUNWLENBQVIsYUFBc0IsRUFBQyxDQUF2QixJQUE0QixFQUFFLENBQTlCLEdBQWtDLEVBQWxDO29CQUNVLENBQVYsS0FBZ0IsQ0FBaEIsUUFBeUIsQ0FBekIsYUFBdUMsQ0FBQyxDQUF4QyxHQUE0QyxDQUFDLENBQTdDLEdBQWlELEVBQUUsQ0FBbkQsSUFBd0QsRUFBRSxDQUExRCxHQUE4RCxDQUFDO29CQUNyRCxDQUFWLEdBQWMsQ0FBZCxVQUF5QixDQUF6QixJQUE4QixFQUFFO3dCQUNwQixDQUFaO3dCQUNZLENBQVo7d0JBQ1ksQ0FBWjt3QkFDWSxDQUFaLFdBQXdCLENBQUMsQ0FBekIsS0FBK0IsQ0FBQyxDQUFoQyxJQUFxQyxDQUFDO29CQUM1QjtvQkFDQSxDQUFWLE1BQWlCLENBQWpCLEtBQXVCO2dCQUNmLENBQUM7WUFDVCxDQUFPLENBQUM7WUFDRixDQUFOO1lBQ00sQ0FBTjtZQUNNLENBQU4sR0FBVSxDQUFWLFdBQXNCLENBQUMsQ0FBdkIsR0FBMkIsRUFBRTtnQkFDckIsQ0FBUixXQUFvQixDQUFDLENBQXJCLE1BQTRCLENBQUMsQ0FBQyxDQUE5QixJQUFtQyxFQUFFLENBQXJDLElBQTRDLENBQUMsQ0FBN0Msa0JBQWdFLENBQUMsQ0FBakUsSUFBc0UsQ0FBQyxDQUF2RSxJQUE0RSxDQUFDLENBQUM7WUFDeEU7UUFDRixPQUFPO1lBQ0wsQ0FBTjtZQUNNLENBQU47WUFDTSxDQUFOO1lBQ00sQ0FBTixHQUFVLENBQUMsQ0FBWCxlQUEyQixDQUFDLENBQTVCLE1BQW1DLENBQUM7UUFDaEM7UUFFQSxDQUFKLE1BQVcsQ0FBWCxXQUF3QjtJQUN0QjtJQUVPLENBQVQsaUJBQTJCLENBQ3ZCLENBREosS0FDeUMsRUFDckMsQ0FGSixXQUVnQyxFQUZoQztRQUlJLENBQUosTUFBVyxDQUFYLEdBQWUsQ0FBQyxDQUFoQixJQUFxQixDQUFDO1lBQ2hCLENBQU4sS0FBWTtZQUNOLENBQU4sU0FBZ0IsRUFBRSxDQUFsQixlQUFrQyxDQUFsQyxnQkFBbUQsQ0FBbkQsR0FBdUQ7UUFDdkQsQ0FBSyxDQUFDO0lBQ0o7SUFFTyxDQUFULGdCQUEwQixDQUFDLENBQTNCLE9BQWlELEVBQWpEO1FBQ0ksQ0FBSixNQUFXLENBQVgsR0FBZSxDQUFDLENBQWhCLG1CQUFvQyxDQUFDLENBQXJDLGdCQUFzRCxDQUNoRCxDQUROLEdBQ1UsQ0FBQyxDQURYLHFCQUNpQyxDQUFDLENBRGxDLE9BQzBDLENBQUMsQ0FDdEM7SUFDSDtJQUVPLENBQVQsY0FBd0IsQ0FDcEIsQ0FESixPQUN5RCxFQUNyRCxDQUZKLE9BRW9CLEVBRnBCO1FBSUksQ0FBSixNQUFXLENBQVgsR0FBZSxDQUFDLENBQWhCLE9BQXdCLENBQUMsQ0FBekIsY0FBd0MsQ0FBQyxDQUF6QyxPQUFpRCxFQUFFLENBQW5ELE9BQTJELENBQUM7SUFDMUQ7SUFFTyxDQUFULGFBQXVCLENBQUMsQ0FBeEIsV0FBNEMsRUFBNUM7O1FBQ0ksQ0FBSixxQ0FBZSxDQUFDLENBQWhCLEtBQXNCLENBQUMsQ0FBdkIsUUFBZ0MsQ0FBaEMsYUFBVyxDQUFYLG1FQUFrQyxDQUFsQyxLQUF3QyxDQUFDLENBQXpDLFdBQXFELEVBQXJELElBQTBELENBQTFELEdBQThEO0lBQzVEO0lBRVUsQ0FBWixlQUE0QixDQUFDLENBQTdCLE1BQXVELEVBQXZEO1FBQ0ksQ0FBSixHQUFRLENBQUMsQ0FBVCxHQUFhLENBQUMsQ0FBZCxNQUFxQixFQUFFO1lBQ2pCLENBQU4sR0FBVSxDQUFDLENBQVgsTUFBa0IsQ0FBQyxDQUFuQixNQUEwQixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQS9CLElBQXNDLENBQUMsQ0FBdkMsa0JBQTBELENBQUMsQ0FBQyxFQUFFLENBQTlELE1BQXFFLENBQUMsQ0FBQztRQUNuRTtJQUNGO0lBRVEsQ0FBVixxQkFBZ0MsQ0FBQyxDQUFqQyxPQUF1RCxFQUF2RDtRQUNJLENBQUosS0FBVSxFQUFFLENBQVosYUFBMEIsQ0FBMUIsR0FBOEIsQ0FBQyxDQUEvQixLQUFxQztRQUNqQyxDQUFKLE1BQVcsQ0FBWCxTQUFxQixFQUFFLENBQXZCLFFBQWdDLENBQUMsQ0FBakMsUUFBMEMsQ0FBQyxDQUEzQyxPQUFtRCxFQUFFLEVBQUUsQ0FBdkQsT0FBK0Q7SUFDN0Q7SUFFQSxDQUFGO0lBQ0UsQ0FBRjtJQUNFLENBQUY7SUFDRSxDQUFGO0lBQ0UsQ0FBRjtJQUNFLENBQUY7SUFDVSxDQUFWLGFBQXdCLENBQUMsQ0FBcUIsRUFBRSxDQUFoRCxNQUEwRSxFQUExRTtRQUNJLENBQUosS0FBVSxFQUFFLENBQVosWUFBeUIsQ0FBQztRQUV0QixDQUFKO1FBQ0ksQ0FBSjtRQUNJLENBQUo7UUFDSSxDQUFKO1FBQ0ksQ0FBSjtRQUNJLENBQUo7UUFDSSxDQUFKLEtBQVUsQ0FBVixNQUFpQixDQUFqQixHQUFxQixDQUFDLENBQXRCLEdBQTBCLENBQU0sQ0FBQyxDQUFDO1FBRTlCLENBQUosR0FBUSxDQUFSLE1BQWUsRUFBRTtZQUNYLENBQU4sR0FBVSxDQUFDLENBQUMsQ0FBWixhQUEwQixDQUExQixNQUFpQyxDQUFqQyxNQUF3QyxDQUFDLENBQXpDLGNBQXdELENBQXhELE9BQWdFLEVBQUU7Z0JBQzFELENBQVIsR0FBWSxDQUFDLENBQWIsMkJBQXlDLENBQXpDLEdBQTZDO1lBQ3ZDO1lBRUEsQ0FBTixHQUNRLENBRFIsTUFDZSxDQUFDLENBRGhCLGlCQUVRLENBQVIsTUFBZSxDQUFDLENBQWhCLGFBQThCLENBQUMsQ0FBL0IsR0FBbUMsQ0FBQyxDQUFwQyxHQUF3QyxFQUFFLENBQUMsRUFBRSxDQUE3QyxHQUFpRCxFQUFFLENBQW5ELE9BQTJELEVBQTNELElBQWlFLENBQWpFLElBQXNFLEVBQzlEO2dCQUNBLENBQVI7Z0JBQ1EsQ0FBUjtnQkFDUSxDQUFSO1lBQ007UUFDRjtRQUVBLENBQUosR0FBUSxDQUFDLENBQVQsV0FBcUIsQ0FBQyxvREFBSyxDQUFDLENBQTVCLE9BQW9DLENBQUMsQ0FBckMsS0FBMkMsRUFBRSxDQUE3QyxHQUFpRCxDQUFDLENBQWxELEtBQXdELENBQUMsRUFBRTtZQUNyRCxDQUFDLENBQUMsQ0FBUixPQUFnQixDQUFDLENBQUUsQ0FBQyxDQUFwQixVQUErQixDQUEvQixHQUFtQyxDQUFDLENBQUUsQ0FBdEMsT0FBOEMsQ0FBQztRQUMzQztJQUNGO0lBMWZBLENBQUYsV0FBYyxDQUFkLFFBQTRDLENBQTVDLENBQThDLENBQTlDO1FBQ0ksQ0FBSixJQUFTLENBQVQsQ0FBVyxPQXhCRCxDQUFWLFNBQW9CLENBQXBCLEdBQXdCLENBQXhCLEVBQTJCLENBQTNCLENBQTJELE9BSWpELENBQVYsc0JBQWlDLENBQWpDLEdBQXFDLHdFQUFpQixDQUFDLDRFQUFxQixDQUFDLEVBUTNFLENBQUY7UUFDRSxDQUFGO2FBQ2tCLENBQWxCLHdCQUEyQyxDQUEzQyxHQUErQyxPQU83QixDQUFsQixTQUE0QixxREFBTyxPQTRVekIsQ0FBVixTQUFvQixDQUFDO1FBeFVqQixDQUFKLEdBQVEsQ0FBQyxDQUFULFFBQWtCLDREQUFlLENBQUMsQ0FBbEMsS0FBd0MsQ0FBQztRQUVyQyxDQUFKLEdBQVEsQ0FBQyxDQUFULFVBQW9CLENBQXBCLEdBQXdCLG1EQUFRLENBQUM7WUFDM0IsQ0FBTixJQUFXLEVBQUUsQ0FBYixHQUFpQjtZQUNYLENBQU4sZUFBc0IsRUFBRSxDQUF4QixHQUE0QixDQUFDLENBQTdCLEtBQW1DLENBQUMsQ0FBcEMsZUFBb0Q7WUFDOUMsQ0FBTixZQUFtQixFQUFFLENBQXJCLEdBQXlCLENBQUMsQ0FBMUIsS0FBZ0MsQ0FBQyxDQUFqQyxZQUE4QztZQUN4QyxDQUFOLFdBQWtCLEVBQUUsQ0FBcEIsR0FBd0IsQ0FBQyxDQUF6QixLQUErQixDQUFDLENBQWhDLFdBQTRDO1FBQzVDLENBQUssQ0FBQztRQUVGLENBQUosR0FBUSxDQUFDLENBQVQsR0FBYSxDQUFiLENBQWU7SUFDYjtBQXdmRjtBQUVBLElBQUksMEVBQUosRUFBYTtJQUNYLENBQUYsWUFBZSxDQUFDLENBQWhCLFFBQXlCLENBQUMsQ0FBMUIsb0JBQStDLCtGQUErQjtBQUM5RSIsInNvdXJjZXMiOlsiL2hvbWUvdS9Qcm9qZWN0cy9zcmMvY2FjaGUvaW5tZW1vcnkvaW5NZW1vcnlDYWNoZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBlcXVhbCB9IGZyb20gXCJAd3J5L2VxdWFsaXR5XCI7XG5pbXBvcnQgdHlwZSB7XG4gIERvY3VtZW50Tm9kZSxcbiAgRnJhZ21lbnREZWZpbml0aW9uTm9kZSxcbiAgSW5saW5lRnJhZ21lbnROb2RlLFxufSBmcm9tIFwiZ3JhcGhxbFwiO1xuaW1wb3J0IHR5cGUgeyBPcHRpbWlzdGljV3JhcHBlckZ1bmN0aW9uIH0gZnJvbSBcIm9wdGltaXNtXCI7XG5pbXBvcnQgeyB3cmFwIH0gZnJvbSBcIm9wdGltaXNtXCI7XG5cbmltcG9ydCB0eXBlIHsgT3BlcmF0aW9uVmFyaWFibGVzIH0gZnJvbSBcIkBhcG9sbG8vY2xpZW50XCI7XG5pbXBvcnQgdHlwZSB7XG4gIERlZXBQYXJ0aWFsLFxuICBSZWZlcmVuY2UsXG4gIFN0b3JlT2JqZWN0LFxufSBmcm9tIFwiQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzXCI7XG5pbXBvcnQge1xuICBhZGRUeXBlbmFtZVRvRG9jdW1lbnQsXG4gIGNhY2hlU2l6ZXMsXG4gIGNhbm9uaWNhbFN0cmluZ2lmeSxcbiAgRG9jdW1lbnRUcmFuc2Zvcm0sXG4gIGlzUmVmZXJlbmNlLFxuICBwcmludCxcbn0gZnJvbSBcIkBhcG9sbG8vY2xpZW50L3V0aWxpdGllc1wiO1xuaW1wb3J0IHsgX19ERVZfXyB9IGZyb20gXCJAYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvZW52aXJvbm1lbnRcIjtcbmltcG9ydCB7IGdldEluTWVtb3J5Q2FjaGVNZW1vcnlJbnRlcm5hbHMgfSBmcm9tIFwiQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2ludGVybmFsXCI7XG5pbXBvcnQgeyBpbnZhcmlhbnQgfSBmcm9tIFwiQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2ludmFyaWFudFwiO1xuXG5pbXBvcnQgeyBkZWZhdWx0Q2FjaGVTaXplcyB9IGZyb20gXCIuLi8uLi91dGlsaXRpZXMvY2FjaGluZy9zaXplcy5qc1wiO1xuaW1wb3J0IHsgQXBvbGxvQ2FjaGUgfSBmcm9tIFwiLi4vY29yZS9jYWNoZS5qc1wiO1xuaW1wb3J0IHR5cGUgeyBDYWNoZSB9IGZyb20gXCIuLi9jb3JlL3R5cGVzL0NhY2hlLmpzXCI7XG5cbmltcG9ydCB7IEVudGl0eVN0b3JlLCBzdXBwb3J0c1Jlc3VsdENhY2hpbmcgfSBmcm9tIFwiLi9lbnRpdHlTdG9yZS5qc1wiO1xuaW1wb3J0IHsgaGFzT3duLCBub3JtYWxpemVDb25maWcgfSBmcm9tIFwiLi9oZWxwZXJzLmpzXCI7XG5pbXBvcnQgeyBQb2xpY2llcyB9IGZyb20gXCIuL3BvbGljaWVzLmpzXCI7XG5pbXBvcnQgeyBmb3JnZXRDYWNoZSwgbWFrZVZhciwgcmVjYWxsQ2FjaGUgfSBmcm9tIFwiLi9yZWFjdGl2ZVZhcnMuanNcIjtcbmltcG9ydCB7IFN0b3JlUmVhZGVyIH0gZnJvbSBcIi4vcmVhZEZyb21TdG9yZS5qc1wiO1xuaW1wb3J0IHR5cGUgeyBJbk1lbW9yeUNhY2hlQ29uZmlnLCBOb3JtYWxpemVkQ2FjaGVPYmplY3QgfSBmcm9tIFwiLi90eXBlcy5qc1wiO1xuaW1wb3J0IHsgU3RvcmVXcml0ZXIgfSBmcm9tIFwiLi93cml0ZVRvU3RvcmUuanNcIjtcblxudHlwZSBCcm9hZGNhc3RPcHRpb25zID0gUGljazxcbiAgQ2FjaGUuQmF0Y2hPcHRpb25zPEluTWVtb3J5Q2FjaGU+LFxuICBcIm9wdGltaXN0aWNcIiB8IFwib25XYXRjaFVwZGF0ZWRcIlxuPjtcblxuZXhwb3J0IGNsYXNzIEluTWVtb3J5Q2FjaGUgZXh0ZW5kcyBBcG9sbG9DYWNoZSB7XG4gIHByaXZhdGUgZGF0YSE6IEVudGl0eVN0b3JlO1xuICBwcml2YXRlIG9wdGltaXN0aWNEYXRhITogRW50aXR5U3RvcmU7XG5cbiAgcHJvdGVjdGVkIGNvbmZpZzogSW5NZW1vcnlDYWNoZUNvbmZpZztcbiAgcHJpdmF0ZSB3YXRjaGVzID0gbmV3IFNldDxDYWNoZS5XYXRjaE9wdGlvbnM8YW55LCBhbnk+PigpO1xuXG4gIHByaXZhdGUgc3RvcmVSZWFkZXIhOiBTdG9yZVJlYWRlcjtcbiAgcHJpdmF0ZSBzdG9yZVdyaXRlciE6IFN0b3JlV3JpdGVyO1xuICBwcml2YXRlIGFkZFR5cGVuYW1lVHJhbnNmb3JtID0gbmV3IERvY3VtZW50VHJhbnNmb3JtKGFkZFR5cGVuYW1lVG9Eb2N1bWVudCk7XG5cbiAgcHJpdmF0ZSBtYXliZUJyb2FkY2FzdFdhdGNoITogT3B0aW1pc3RpY1dyYXBwZXJGdW5jdGlvbjxcbiAgICBbQ2FjaGUuV2F0Y2hPcHRpb25zPGFueSwgYW55PiwgQnJvYWRjYXN0T3B0aW9ucz9dLFxuICAgIGFueSxcbiAgICBbQ2FjaGUuV2F0Y2hPcHRpb25zPGFueSwgYW55Pl1cbiAgPjtcblxuICAvLyBPdmVycmlkZSB0aGUgZGVmYXVsdCB2YWx1ZSwgc2luY2UgSW5NZW1vcnlDYWNoZSByZXN1bHQgb2JqZWN0cyBhcmUgZnJvemVuXG4gIC8vIGluIGRldmVsb3BtZW50IGFuZCBleHBlY3RlZCB0byByZW1haW4gbG9naWNhbGx5IGltbXV0YWJsZSBpbiBwcm9kdWN0aW9uLlxuICBwdWJsaWMgcmVhZG9ubHkgYXNzdW1lSW1tdXRhYmxlUmVzdWx0cyA9IHRydWU7XG5cbiAgLy8gRHluYW1pY2FsbHkgaW1wb3J0ZWQgY29kZSBjYW4gYXVnbWVudCBleGlzdGluZyB0eXBlUG9saWNpZXMgb3JcbiAgLy8gcG9zc2libGVUeXBlcyBieSBjYWxsaW5nIGNhY2hlLnBvbGljaWVzLmFkZFR5cGVQb2xpY2llcyBvclxuICAvLyBjYWNoZS5wb2xpY2llcy5hZGRQb3NzaWJsZXR5cGVzLlxuICBwdWJsaWMgcmVhZG9ubHkgcG9saWNpZXM6IFBvbGljaWVzO1xuXG4gIHB1YmxpYyByZWFkb25seSBtYWtlVmFyID0gbWFrZVZhcjtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IEluTWVtb3J5Q2FjaGVDb25maWcgPSB7fSkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5jb25maWcgPSBub3JtYWxpemVDb25maWcoY29uZmlnKTtcblxuICAgIHRoaXMucG9saWNpZXMgPSBuZXcgUG9saWNpZXMoe1xuICAgICAgY2FjaGU6IHRoaXMsXG4gICAgICBkYXRhSWRGcm9tT2JqZWN0OiB0aGlzLmNvbmZpZy5kYXRhSWRGcm9tT2JqZWN0LFxuICAgICAgcG9zc2libGVUeXBlczogdGhpcy5jb25maWcucG9zc2libGVUeXBlcyxcbiAgICAgIHR5cGVQb2xpY2llczogdGhpcy5jb25maWcudHlwZVBvbGljaWVzLFxuICAgIH0pO1xuXG4gICAgdGhpcy5pbml0KCk7XG4gIH1cblxuICBwcml2YXRlIGluaXQoKSB7XG4gICAgLy8gUGFzc2luZyB7IHJlc3VsdENhY2hpbmc6IGZhbHNlIH0gaW4gdGhlIEluTWVtb3J5Q2FjaGUgY29uc3RydWN0b3Igb3B0aW9uc1xuICAgIC8vIHdpbGwgY29tcGxldGVseSBkaXNhYmxlIGRlcGVuZGVuY3kgdHJhY2tpbmcsIHdoaWNoIHdpbGwgaW1wcm92ZSBtZW1vcnlcbiAgICAvLyB1c2FnZSBidXQgd29yc2VuIHRoZSBwZXJmb3JtYW5jZSBvZiByZXBlYXRlZCByZWFkcy5cbiAgICBjb25zdCByb290U3RvcmUgPSAodGhpcy5kYXRhID0gbmV3IEVudGl0eVN0b3JlLlJvb3Qoe1xuICAgICAgcG9saWNpZXM6IHRoaXMucG9saWNpZXMsXG4gICAgICByZXN1bHRDYWNoaW5nOiB0aGlzLmNvbmZpZy5yZXN1bHRDYWNoaW5nLFxuICAgIH0pKTtcblxuICAgIC8vIFdoZW4gbm8gb3B0aW1pc3RpYyB3cml0ZXMgYXJlIGN1cnJlbnRseSBhY3RpdmUsIGNhY2hlLm9wdGltaXN0aWNEYXRhID09PVxuICAgIC8vIGNhY2hlLmRhdGEsIHNvIHRoZXJlIGFyZSBubyBhZGRpdGlvbmFsIGxheWVycyBvbiB0b3Agb2YgdGhlIGFjdHVhbCBkYXRhLlxuICAgIC8vIFdoZW4gYW4gb3B0aW1pc3RpYyB1cGRhdGUgaGFwcGVucywgdGhpcy5vcHRpbWlzdGljRGF0YSB3aWxsIGJlY29tZSBhXG4gICAgLy8gbGlua2VkIGxpc3Qgb2YgRW50aXR5U3RvcmUgTGF5ZXIgb2JqZWN0cyB0aGF0IHRlcm1pbmF0ZXMgd2l0aCB0aGVcbiAgICAvLyBvcmlnaW5hbCB0aGlzLmRhdGEgY2FjaGUgb2JqZWN0LlxuICAgIHRoaXMub3B0aW1pc3RpY0RhdGEgPSByb290U3RvcmUuc3R1bXA7XG5cbiAgICB0aGlzLnJlc2V0UmVzdWx0Q2FjaGUoKTtcbiAgfVxuXG4gIHByaXZhdGUgcmVzZXRSZXN1bHRDYWNoZSgpIHtcbiAgICBjb25zdCB7IGZyYWdtZW50cyB9ID0gdGhpcy5jb25maWc7XG5cbiAgICB0aGlzLmFkZFR5cGVuYW1lVHJhbnNmb3JtLnJlc2V0Q2FjaGUoKTtcbiAgICBmcmFnbWVudHM/LnJlc2V0Q2FjaGVzKCk7XG5cbiAgICAvLyBUaGUgU3RvcmVXcml0ZXIgaXMgbW9zdGx5IHN0YXRlbGVzcyBhbmQgc28gZG9lc24ndCByZWFsbHkgbmVlZCB0byBiZVxuICAgIC8vIHJlc2V0LCBidXQgaXQgZG9lcyBuZWVkIHRvIGhhdmUgaXRzIHdyaXRlci5zdG9yZVJlYWRlciByZWZlcmVuY2UgdXBkYXRlZCxcbiAgICAvLyBzbyBpdCdzIHNpbXBsZXIgdG8gdXBkYXRlIHRoaXMuc3RvcmVXcml0ZXIgYXMgd2VsbC5cbiAgICB0aGlzLnN0b3JlV3JpdGVyID0gbmV3IFN0b3JlV3JpdGVyKFxuICAgICAgdGhpcyxcbiAgICAgICh0aGlzLnN0b3JlUmVhZGVyID0gbmV3IFN0b3JlUmVhZGVyKHsgY2FjaGU6IHRoaXMsIGZyYWdtZW50cyB9KSksXG4gICAgICBmcmFnbWVudHNcbiAgICApO1xuXG4gICAgdGhpcy5tYXliZUJyb2FkY2FzdFdhdGNoID0gd3JhcChcbiAgICAgIChjOiBDYWNoZS5XYXRjaE9wdGlvbnMsIG9wdGlvbnM/OiBCcm9hZGNhc3RPcHRpb25zKSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmJyb2FkY2FzdFdhdGNoKGMsIG9wdGlvbnMpO1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbWF4OlxuICAgICAgICAgIGNhY2hlU2l6ZXNbXCJpbk1lbW9yeUNhY2hlLm1heWJlQnJvYWRjYXN0V2F0Y2hcIl0gfHxcbiAgICAgICAgICBkZWZhdWx0Q2FjaGVTaXplc1tcImluTWVtb3J5Q2FjaGUubWF5YmVCcm9hZGNhc3RXYXRjaFwiXSxcbiAgICAgICAgbWFrZUNhY2hlS2V5OiAoYzogQ2FjaGUuV2F0Y2hPcHRpb25zKSA9PiB7XG4gICAgICAgICAgLy8gUmV0dXJuIGEgY2FjaGUga2V5ICh0aHVzIGVuYWJsaW5nIHJlc3VsdCBjYWNoaW5nKSBvbmx5IGlmIHdlJ3JlXG4gICAgICAgICAgLy8gY3VycmVudGx5IHVzaW5nIGEgZGF0YSBzdG9yZSB0aGF0IGNhbiB0cmFjayBjYWNoZSBkZXBlbmRlbmNpZXMuXG4gICAgICAgICAgY29uc3Qgc3RvcmUgPSBjLm9wdGltaXN0aWMgPyB0aGlzLm9wdGltaXN0aWNEYXRhIDogdGhpcy5kYXRhO1xuICAgICAgICAgIGlmIChzdXBwb3J0c1Jlc3VsdENhY2hpbmcoc3RvcmUpKSB7XG4gICAgICAgICAgICBjb25zdCB7IG9wdGltaXN0aWMsIGlkLCB2YXJpYWJsZXMgfSA9IGM7XG4gICAgICAgICAgICByZXR1cm4gc3RvcmUubWFrZUNhY2hlS2V5KFxuICAgICAgICAgICAgICBjLnF1ZXJ5LFxuICAgICAgICAgICAgICAvLyBEaWZmZXJlbnQgd2F0Y2hlcyBjYW4gaGF2ZSB0aGUgc2FtZSBxdWVyeSwgb3B0aW1pc3RpY1xuICAgICAgICAgICAgICAvLyBzdGF0dXMsIHJvb3RJZCwgYW5kIHZhcmlhYmxlcywgYnV0IGlmIHRoZWlyIGNhbGxiYWNrcyBhcmVcbiAgICAgICAgICAgICAgLy8gZGlmZmVyZW50LCB0aGUgKGlkZW50aWNhbCkgcmVzdWx0IG5lZWRzIHRvIGJlIGRlbGl2ZXJlZCB0b1xuICAgICAgICAgICAgICAvLyBlYWNoIGRpc3RpbmN0IGNhbGxiYWNrLiBUaGUgZWFzaWVzdCB3YXkgdG8gYWNoaWV2ZSB0aGF0XG4gICAgICAgICAgICAgIC8vIHNlcGFyYXRpb24gaXMgdG8gaW5jbHVkZSBjLmNhbGxiYWNrIGluIHRoZSBjYWNoZSBrZXkgZm9yXG4gICAgICAgICAgICAgIC8vIG1heWJlQnJvYWRjYXN0V2F0Y2ggY2FsbHMuIFNlZSBpc3N1ZSAjNTczMy5cbiAgICAgICAgICAgICAgYy5jYWxsYmFjayxcbiAgICAgICAgICAgICAgY2Fub25pY2FsU3RyaW5naWZ5KHsgb3B0aW1pc3RpYywgaWQsIHZhcmlhYmxlcyB9KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICB9XG4gICAgKTtcblxuICAgIC8vIFNpbmNlIHdlIGhhdmUgdGhyb3duIGF3YXkgYWxsIHRoZSBjYWNoZWQgZnVuY3Rpb25zIHRoYXQgZGVwZW5kIG9uIHRoZVxuICAgIC8vIENhY2hlR3JvdXAgZGVwZW5kZW5jaWVzIG1haW50YWluZWQgYnkgRW50aXR5U3RvcmUsIHdlIHNob3VsZCBhbHNvIHJlc2V0XG4gICAgLy8gYWxsIENhY2hlR3JvdXAgZGVwZW5kZW5jeSBpbmZvcm1hdGlvbi5cbiAgICBuZXcgU2V0KFt0aGlzLmRhdGEuZ3JvdXAsIHRoaXMub3B0aW1pc3RpY0RhdGEuZ3JvdXBdKS5mb3JFYWNoKChncm91cCkgPT5cbiAgICAgIGdyb3VwLnJlc2V0Q2FjaGluZygpXG4gICAgKTtcbiAgfVxuXG4gIHB1YmxpYyByZXN0b3JlKGRhdGE6IE5vcm1hbGl6ZWRDYWNoZU9iamVjdCk6IHRoaXMge1xuICAgIHRoaXMuaW5pdCgpO1xuICAgIC8vIFNpbmNlIGNhbGxpbmcgdGhpcy5pbml0KCkgZGlzY2FyZHMvcmVwbGFjZXMgdGhlIGVudGlyZSBTdG9yZVJlYWRlciwgYWxvbmdcbiAgICAvLyB3aXRoIHRoZSByZXN1bHQgY2FjaGVzIGl0IG1haW50YWlucywgdGhpcy5kYXRhLnJlcGxhY2UoZGF0YSkgd29uJ3QgaGF2ZVxuICAgIC8vIHRvIGJvdGhlciBkZWxldGluZyB0aGUgb2xkIGRhdGEuXG4gICAgaWYgKGRhdGEpIHRoaXMuZGF0YS5yZXBsYWNlKGRhdGEpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcHVibGljIGV4dHJhY3Qob3B0aW1pc3RpYzogYm9vbGVhbiA9IGZhbHNlKTogTm9ybWFsaXplZENhY2hlT2JqZWN0IHtcbiAgICByZXR1cm4gKG9wdGltaXN0aWMgPyB0aGlzLm9wdGltaXN0aWNEYXRhIDogdGhpcy5kYXRhKS5leHRyYWN0KCk7XG4gIH1cblxuICBwdWJsaWMgcmVhZDxURGF0YSA9IHVua25vd24+KFxuICAgIG9wdGlvbnM6IENhY2hlLlJlYWRPcHRpb25zPFREYXRhLCBPcGVyYXRpb25WYXJpYWJsZXM+ICYge1xuICAgICAgcmV0dXJuUGFydGlhbERhdGE6IHRydWU7XG4gICAgfVxuICApOiBURGF0YSB8IERlZXBQYXJ0aWFsPFREYXRhPiB8IG51bGw7XG5cbiAgcHVibGljIHJlYWQ8VERhdGEgPSB1bmtub3duPihcbiAgICBvcHRpb25zOiBDYWNoZS5SZWFkT3B0aW9uczxURGF0YSwgT3BlcmF0aW9uVmFyaWFibGVzPlxuICApOiBURGF0YSB8IG51bGw7XG5cbiAgcHVibGljIHJlYWQ8VERhdGEgPSB1bmtub3duPihcbiAgICBvcHRpb25zOiBDYWNoZS5SZWFkT3B0aW9uczxURGF0YSwgT3BlcmF0aW9uVmFyaWFibGVzPlxuICApOiBURGF0YSB8IERlZXBQYXJ0aWFsPFREYXRhPiB8IG51bGwge1xuICAgIGNvbnN0IHtcbiAgICAgIC8vIFNpbmNlIHJlYWQgcmV0dXJucyBkYXRhIG9yIG51bGwsIHdpdGhvdXQgYW55IGFkZGl0aW9uYWwgbWV0YWRhdGFcbiAgICAgIC8vIGFib3V0IHdoZXRoZXIvd2hlcmUgdGhlcmUgbWlnaHQgaGF2ZSBiZWVuIG1pc3NpbmcgZmllbGRzLCB0aGVcbiAgICAgIC8vIGRlZmF1bHQgYmVoYXZpb3IgY2Fubm90IGJlIHJldHVyblBhcnRpYWxEYXRhID0gdHJ1ZSAobGlrZSBpdCBpc1xuICAgICAgLy8gZm9yIHRoZSBkaWZmIG1ldGhvZCksIHNpbmNlIGRlZmF1bHRpbmcgdG8gdHJ1ZSB3b3VsZCB2aW9sYXRlIHRoZVxuICAgICAgLy8gaW50ZWdyaXR5IG9mIHRoZSBUIGluIHRoZSByZXR1cm4gdHlwZS4gSG93ZXZlciwgcGFydGlhbCBkYXRhIG1heVxuICAgICAgLy8gYmUgdXNlZnVsIGluIHNvbWUgY2FzZXMsIHNvIHJldHVyblBhcnRpYWxEYXRhOnRydWUgbWF5IGJlXG4gICAgICAvLyBzcGVjaWZpZWQgZXhwbGljaXRseS5cbiAgICAgIHJldHVyblBhcnRpYWxEYXRhID0gZmFsc2UsXG4gICAgfSA9IG9wdGlvbnM7XG5cbiAgICByZXR1cm4gdGhpcy5zdG9yZVJlYWRlci5kaWZmUXVlcnlBZ2FpbnN0U3RvcmU8VERhdGE+KHtcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgICBzdG9yZTogb3B0aW9ucy5vcHRpbWlzdGljID8gdGhpcy5vcHRpbWlzdGljRGF0YSA6IHRoaXMuZGF0YSxcbiAgICAgIGNvbmZpZzogdGhpcy5jb25maWcsXG4gICAgICByZXR1cm5QYXJ0aWFsRGF0YSxcbiAgICB9KS5yZXN1bHQ7XG4gIH1cblxuICBwdWJsaWMgd3JpdGU8XG4gICAgVERhdGEgPSB1bmtub3duLFxuICAgIFRWYXJpYWJsZXMgZXh0ZW5kcyBPcGVyYXRpb25WYXJpYWJsZXMgPSBPcGVyYXRpb25WYXJpYWJsZXMsXG4gID4ob3B0aW9uczogQ2FjaGUuV3JpdGVPcHRpb25zPFREYXRhLCBUVmFyaWFibGVzPik6IFJlZmVyZW5jZSB8IHVuZGVmaW5lZCB7XG4gICAgdHJ5IHtcbiAgICAgICsrdGhpcy50eENvdW50O1xuICAgICAgcmV0dXJuIHRoaXMuc3RvcmVXcml0ZXIud3JpdGVUb1N0b3JlKHRoaXMuZGF0YSwgb3B0aW9ucyk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmICghLS10aGlzLnR4Q291bnQgJiYgb3B0aW9ucy5icm9hZGNhc3QgIT09IGZhbHNlKSB7XG4gICAgICAgIHRoaXMuYnJvYWRjYXN0V2F0Y2hlcygpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBtb2RpZnk8RW50aXR5IGV4dGVuZHMgUmVjb3JkPHN0cmluZywgYW55PiA9IFJlY29yZDxzdHJpbmcsIGFueT4+KFxuICAgIG9wdGlvbnM6IENhY2hlLk1vZGlmeU9wdGlvbnM8RW50aXR5PlxuICApOiBib29sZWFuIHtcbiAgICBpZiAoaGFzT3duLmNhbGwob3B0aW9ucywgXCJpZFwiKSAmJiAhb3B0aW9ucy5pZCkge1xuICAgICAgLy8gVG8gbXkga25vd2xlZGdlLCBUeXBlU2NyaXB0IGRvZXMgbm90IGN1cnJlbnRseSBwcm92aWRlIGEgd2F5IHRvXG4gICAgICAvLyBlbmZvcmNlIHRoYXQgYW4gb3B0aW9uYWwgcHJvcGVydHk/OnR5cGUgbXVzdCAqbm90KiBiZSB1bmRlZmluZWRcbiAgICAgIC8vIHdoZW4gcHJlc2VudC4gVGhhdCBhYmlsaXR5IHdvdWxkIGJlIHVzZWZ1bCBoZXJlLCBiZWNhdXNlIHdlIHdhbnRcbiAgICAgIC8vIG9wdGlvbnMuaWQgdG8gZGVmYXVsdCB0byBST09UX1FVRVJZIG9ubHkgd2hlbiBubyBvcHRpb25zLmlkIHdhc1xuICAgICAgLy8gcHJvdmlkZWQuIElmIHRoZSBjYWxsZXIgYXR0ZW1wdHMgdG8gcGFzcyBvcHRpb25zLmlkIHdpdGggYVxuICAgICAgLy8gZmFsc3kvdW5kZWZpbmVkIHZhbHVlIChwZXJoYXBzIGJlY2F1c2UgY2FjaGUuaWRlbnRpZnkgZmFpbGVkKSwgd2VcbiAgICAgIC8vIHNob3VsZCBub3QgYXNzdW1lIHRoZSBnb2FsIHdhcyB0byBtb2RpZnkgdGhlIFJPT1RfUVVFUlkgb2JqZWN0LlxuICAgICAgLy8gV2UgY291bGQgdGhyb3csIGJ1dCBpdCBzZWVtcyBuYXR1cmFsIHRvIHJldHVybiBmYWxzZSB0byBpbmRpY2F0ZVxuICAgICAgLy8gdGhhdCBub3RoaW5nIHdhcyBtb2RpZmllZC5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3Qgc3RvcmUgPVxuICAgICAgKFxuICAgICAgICBvcHRpb25zLm9wdGltaXN0aWMgLy8gRGVmYXVsdHMgdG8gZmFsc2UuXG4gICAgICApID9cbiAgICAgICAgdGhpcy5vcHRpbWlzdGljRGF0YVxuICAgICAgOiB0aGlzLmRhdGE7XG4gICAgdHJ5IHtcbiAgICAgICsrdGhpcy50eENvdW50O1xuICAgICAgcmV0dXJuIHN0b3JlLm1vZGlmeShvcHRpb25zLmlkIHx8IFwiUk9PVF9RVUVSWVwiLCBvcHRpb25zLmZpZWxkcywgZmFsc2UpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAoIS0tdGhpcy50eENvdW50ICYmIG9wdGlvbnMuYnJvYWRjYXN0ICE9PSBmYWxzZSkge1xuICAgICAgICB0aGlzLmJyb2FkY2FzdFdhdGNoZXMoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZGlmZjxcbiAgICBURGF0YSA9IHVua25vd24sXG4gICAgVFZhcmlhYmxlcyBleHRlbmRzIE9wZXJhdGlvblZhcmlhYmxlcyA9IE9wZXJhdGlvblZhcmlhYmxlcyxcbiAgPihvcHRpb25zOiBDYWNoZS5EaWZmT3B0aW9uczxURGF0YSwgVFZhcmlhYmxlcz4pOiBDYWNoZS5EaWZmUmVzdWx0PFREYXRhPiB7XG4gICAgcmV0dXJuIHRoaXMuc3RvcmVSZWFkZXIuZGlmZlF1ZXJ5QWdhaW5zdFN0b3JlKHtcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgICBzdG9yZTogb3B0aW9ucy5vcHRpbWlzdGljID8gdGhpcy5vcHRpbWlzdGljRGF0YSA6IHRoaXMuZGF0YSxcbiAgICAgIHJvb3RJZDogb3B0aW9ucy5pZCB8fCBcIlJPT1RfUVVFUllcIixcbiAgICAgIGNvbmZpZzogdGhpcy5jb25maWcsXG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgd2F0Y2g8XG4gICAgVERhdGEgPSB1bmtub3duLFxuICAgIFRWYXJpYWJsZXMgZXh0ZW5kcyBPcGVyYXRpb25WYXJpYWJsZXMgPSBPcGVyYXRpb25WYXJpYWJsZXMsXG4gID4od2F0Y2g6IENhY2hlLldhdGNoT3B0aW9uczxURGF0YSwgVFZhcmlhYmxlcz4pOiAoKSA9PiB2b2lkIHtcbiAgICBpZiAoIXRoaXMud2F0Y2hlcy5zaXplKSB7XG4gICAgICAvLyBJbiBjYXNlIHdlIHByZXZpb3VzbHkgY2FsbGVkIGZvcmdldENhY2hlKHRoaXMpIGJlY2F1c2VcbiAgICAgIC8vIHRoaXMud2F0Y2hlcyBiZWNhbWUgZW1wdHkgKHNlZSBiZWxvdyksIHJlYXR0YWNoIHRoaXMgY2FjaGUgdG8gYW55XG4gICAgICAvLyByZWFjdGl2ZSB2YXJpYWJsZXMgb24gd2hpY2ggaXQgcHJldmlvdXNseSBkZXBlbmRlZC4gSXQgbWlnaHQgc2VlbVxuICAgICAgLy8gcGFyYWRveGljYWwgdGhhdCB3ZSdyZSBhYmxlIHRvIHJlY2FsbCBzb21ldGhpbmcgd2Ugc3VwcG9zZWRseVxuICAgICAgLy8gZm9yZ290LCBidXQgdGhlIHBvaW50IG9mIGNhbGxpbmcgZm9yZ2V0Q2FjaGUodGhpcykgaXMgdG8gc2lsZW5jZVxuICAgICAgLy8gdXNlbGVzcyBicm9hZGNhc3RzIHdoaWxlIHRoaXMud2F0Y2hlcyBpcyBlbXB0eSwgYW5kIHRvIGFsbG93IHRoZVxuICAgICAgLy8gY2FjaGUgdG8gYmUgZ2FyYmFnZSBjb2xsZWN0ZWQuIElmLCBob3dldmVyLCB3ZSBtYW5hZ2UgdG8gY2FsbFxuICAgICAgLy8gcmVjYWxsQ2FjaGUodGhpcykgaGVyZSwgdGhpcyBjYWNoZSBvYmplY3QgbXVzdCBub3QgaGF2ZSBiZWVuXG4gICAgICAvLyBnYXJiYWdlIGNvbGxlY3RlZCB5ZXQsIGFuZCBzaG91bGQgcmVzdW1lIHJlY2VpdmluZyB1cGRhdGVzIGZyb21cbiAgICAgIC8vIHJlYWN0aXZlIHZhcmlhYmxlcywgbm93IHRoYXQgaXQgaGFzIGEgd2F0Y2hlciB0byBub3RpZnkuXG4gICAgICByZWNhbGxDYWNoZSh0aGlzKTtcbiAgICB9XG4gICAgdGhpcy53YXRjaGVzLmFkZCh3YXRjaCk7XG4gICAgaWYgKHdhdGNoLmltbWVkaWF0ZSkge1xuICAgICAgdGhpcy5tYXliZUJyb2FkY2FzdFdhdGNoKHdhdGNoKTtcbiAgICB9XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIC8vIE9uY2Ugd2UgcmVtb3ZlIHRoZSBsYXN0IHdhdGNoIGZyb20gdGhpcy53YXRjaGVzLCBjYWNoZS5icm9hZGNhc3RXYXRjaGVzXG4gICAgICAvLyBubyBsb25nZXIgZG9lcyBhbnl0aGluZywgc28gd2UgcHJlZW1wdGl2ZWx5IHRlbGwgdGhlIHJlYWN0aXZlIHZhcmlhYmxlXG4gICAgICAvLyBzeXN0ZW0gdG8gZXhjbHVkZSB0aGlzIGNhY2hlIGZyb20gZnV0dXJlIGJyb2FkY2FzdHMuXG4gICAgICBpZiAodGhpcy53YXRjaGVzLmRlbGV0ZSh3YXRjaCkgJiYgIXRoaXMud2F0Y2hlcy5zaXplKSB7XG4gICAgICAgIGZvcmdldENhY2hlKHRoaXMpO1xuICAgICAgfVxuICAgICAgLy8gUmVtb3ZlIHRoaXMgd2F0Y2ggZnJvbSB0aGUgTFJVIGNhY2hlIG1hbmFnZWQgYnkgdGhlXG4gICAgICAvLyBtYXliZUJyb2FkY2FzdFdhdGNoIE9wdGltaXN0aWNXcmFwcGVyRnVuY3Rpb24sIHRvIHByZXZlbnQgbWVtb3J5XG4gICAgICAvLyBsZWFrcyBpbnZvbHZpbmcgdGhlIGNsb3N1cmUgb2Ygd2F0Y2guY2FsbGJhY2suXG4gICAgICB0aGlzLm1heWJlQnJvYWRjYXN0V2F0Y2guZm9yZ2V0KHdhdGNoKTtcbiAgICB9O1xuICB9XG5cbiAgcHVibGljIGdjKG9wdGlvbnM/OiB7XG4gICAgLy8gSWYgdHJ1ZSwgYWxzbyBmcmVlIG5vbi1lc3NlbnRpYWwgcmVzdWx0IGNhY2hlIG1lbW9yeSBieSBidWxrLXJlbGVhc2luZ1xuICAgIC8vIHRoaXMue3N0b3Jle1JlYWRlcixXcml0ZXJ9LG1heWJlQnJvYWRjYXN0V2F0Y2h9LiBEZWZhdWx0cyB0byBmYWxzZS5cbiAgICByZXNldFJlc3VsdENhY2hlPzogYm9vbGVhbjtcbiAgfSkge1xuICAgIGNhbm9uaWNhbFN0cmluZ2lmeS5yZXNldCgpO1xuICAgIHByaW50LnJlc2V0KCk7XG4gICAgY29uc3QgaWRzID0gdGhpcy5vcHRpbWlzdGljRGF0YS5nYygpO1xuICAgIGlmIChvcHRpb25zICYmICF0aGlzLnR4Q291bnQgJiYgb3B0aW9ucy5yZXNldFJlc3VsdENhY2hlKSB7XG4gICAgICB0aGlzLnJlc2V0UmVzdWx0Q2FjaGUoKTtcbiAgICB9XG4gICAgcmV0dXJuIGlkcztcbiAgfVxuXG4gIC8vIENhbGwgdGhpcyBtZXRob2QgdG8gZW5zdXJlIHRoZSBnaXZlbiByb290IElEIHJlbWFpbnMgaW4gdGhlIGNhY2hlIGFmdGVyXG4gIC8vIGdhcmJhZ2UgY29sbGVjdGlvbiwgYWxvbmcgd2l0aCBpdHMgdHJhbnNpdGl2ZSBjaGlsZCBlbnRpdGllcy4gTm90ZSB0aGF0XG4gIC8vIHRoZSBjYWNoZSBhdXRvbWF0aWNhbGx5IHJldGFpbnMgYWxsIGRpcmVjdGx5IHdyaXR0ZW4gZW50aXRpZXMuIEJ5IGRlZmF1bHQsXG4gIC8vIHRoZSByZXRhaW5tZW50IHBlcnNpc3RzIGFmdGVyIG9wdGltaXN0aWMgdXBkYXRlcyBhcmUgcmVtb3ZlZC4gUGFzcyB0cnVlXG4gIC8vIGZvciB0aGUgb3B0aW1pc3RpYyBhcmd1bWVudCBpZiB5b3Ugd291bGQgcHJlZmVyIGZvciB0aGUgcmV0YWlubWVudCB0byBiZVxuICAvLyBkaXNjYXJkZWQgd2hlbiB0aGUgdG9wLW1vc3Qgb3B0aW1pc3RpYyBsYXllciBpcyByZW1vdmVkLiBSZXR1cm5zIHRoZVxuICAvLyByZXN1bHRpbmcgKG5vbi1uZWdhdGl2ZSkgcmV0YWlubWVudCBjb3VudC5cbiAgcHVibGljIHJldGFpbihyb290SWQ6IHN0cmluZywgb3B0aW1pc3RpYz86IGJvb2xlYW4pOiBudW1iZXIge1xuICAgIHJldHVybiAob3B0aW1pc3RpYyA/IHRoaXMub3B0aW1pc3RpY0RhdGEgOiB0aGlzLmRhdGEpLnJldGFpbihyb290SWQpO1xuICB9XG5cbiAgLy8gQ2FsbCB0aGlzIG1ldGhvZCB0byB1bmRvIHRoZSBlZmZlY3Qgb2YgdGhlIHJldGFpbiBtZXRob2QsIGFib3ZlLiBPbmNlIHRoZVxuICAvLyByZXRhaW5tZW50IGNvdW50IGZhbGxzIHRvIHplcm8sIHRoZSBnaXZlbiBJRCB3aWxsIG5vIGxvbmdlciBiZSBwcmVzZXJ2ZWRcbiAgLy8gZHVyaW5nIGdhcmJhZ2UgY29sbGVjdGlvbiwgdGhvdWdoIGl0IG1heSBzdGlsbCBiZSBwcmVzZXJ2ZWQgYnkgb3RoZXIgc2FmZVxuICAvLyBlbnRpdGllcyB0aGF0IHJlZmVyIHRvIGl0LiBSZXR1cm5zIHRoZSByZXN1bHRpbmcgKG5vbi1uZWdhdGl2ZSkgcmV0YWlubWVudFxuICAvLyBjb3VudCwgaW4gY2FzZSB0aGF0J3MgdXNlZnVsLlxuICBwdWJsaWMgcmVsZWFzZShyb290SWQ6IHN0cmluZywgb3B0aW1pc3RpYz86IGJvb2xlYW4pOiBudW1iZXIge1xuICAgIHJldHVybiAob3B0aW1pc3RpYyA/IHRoaXMub3B0aW1pc3RpY0RhdGEgOiB0aGlzLmRhdGEpLnJlbGVhc2Uocm9vdElkKTtcbiAgfVxuXG4gIC8vIFJldHVybnMgdGhlIGNhbm9uaWNhbCBJRCBmb3IgYSBnaXZlbiBTdG9yZU9iamVjdCwgb2JleWluZyB0eXBlUG9saWNpZXNcbiAgLy8gYW5kIGtleUZpZWxkcyAoYW5kIGRhdGFJZEZyb21PYmplY3QsIGlmIHlvdSBzdGlsbCB1c2UgdGhhdCkuIEF0IG1pbmltdW0sXG4gIC8vIHRoZSBvYmplY3QgbXVzdCBjb250YWluIGEgX190eXBlbmFtZSBhbmQgYW55IHByaW1hcnkga2V5IGZpZWxkcyByZXF1aXJlZFxuICAvLyB0byBpZGVudGlmeSBlbnRpdGllcyBvZiB0aGF0IHR5cGUuIElmIHlvdSBwYXNzIGEgcXVlcnkgcmVzdWx0IG9iamVjdCwgYmVcbiAgLy8gc3VyZSB0aGF0IG5vbmUgb2YgdGhlIHByaW1hcnkga2V5IGZpZWxkcyBoYXZlIGJlZW4gcmVuYW1lZCBieSBhbGlhc2luZy5cbiAgLy8gSWYgeW91IHBhc3MgYSBSZWZlcmVuY2Ugb2JqZWN0LCBpdHMgX19yZWYgSUQgc3RyaW5nIHdpbGwgYmUgcmV0dXJuZWQuXG4gIHB1YmxpYyBpZGVudGlmeShvYmplY3Q6IFN0b3JlT2JqZWN0IHwgUmVmZXJlbmNlKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgICBpZiAoaXNSZWZlcmVuY2Uob2JqZWN0KSkgcmV0dXJuIG9iamVjdC5fX3JlZjtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHRoaXMucG9saWNpZXMuaWRlbnRpZnkob2JqZWN0KVswXTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpbnZhcmlhbnQud2FybihlKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZXZpY3Qob3B0aW9uczogQ2FjaGUuRXZpY3RPcHRpb25zKTogYm9vbGVhbiB7XG4gICAgaWYgKCFvcHRpb25zLmlkKSB7XG4gICAgICBpZiAoaGFzT3duLmNhbGwob3B0aW9ucywgXCJpZFwiKSkge1xuICAgICAgICAvLyBTZWUgY29tbWVudCBpbiBtb2RpZnkgbWV0aG9kIGFib3V0IHdoeSB3ZSByZXR1cm4gZmFsc2Ugd2hlblxuICAgICAgICAvLyBvcHRpb25zLmlkIGV4aXN0cyBidXQgaXMgZmFsc3kvdW5kZWZpbmVkLlxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBvcHRpb25zID0geyAuLi5vcHRpb25zLCBpZDogXCJST09UX1FVRVJZXCIgfTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIC8vIEl0J3MgdW5saWtlbHkgdGhhdCB0aGUgZXZpY3Rpb24gd2lsbCBlbmQgdXAgaW52b2tpbmcgYW55IG90aGVyXG4gICAgICAvLyBjYWNoZSB1cGRhdGUgb3BlcmF0aW9ucyB3aGlsZSBpdCdzIHJ1bm5pbmcsIGJ1dCB7aW4sZGV9Y3JlbWVudGluZ1xuICAgICAgLy8gdGhpcy50eENvdW50IHN0aWxsIHNlZW1zIGxpa2UgYSBnb29kIGlkZWEsIGZvciB1bmlmb3JtaXR5IHdpdGhcbiAgICAgIC8vIHRoZSBvdGhlciB1cGRhdGUgbWV0aG9kcy5cbiAgICAgICsrdGhpcy50eENvdW50O1xuICAgICAgLy8gUGFzcyB0aGlzLmRhdGEgYXMgYSBsaW1pdCBvbiB0aGUgZGVwdGggb2YgdGhlIGV2aWN0aW9uLCBzbyBldmljdGlvbnNcbiAgICAgIC8vIGR1cmluZyBvcHRpbWlzdGljIHVwZGF0ZXMgKHdoZW4gdGhpcy5kYXRhIGlzIHRlbXBvcmFyaWx5IHNldCBlcXVhbCB0b1xuICAgICAgLy8gdGhpcy5vcHRpbWlzdGljRGF0YSkgZG8gbm90IGVzY2FwZSB0aGVpciBvcHRpbWlzdGljIExheWVyLlxuICAgICAgcmV0dXJuIHRoaXMub3B0aW1pc3RpY0RhdGEuZXZpY3Qob3B0aW9ucywgdGhpcy5kYXRhKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaWYgKCEtLXRoaXMudHhDb3VudCAmJiBvcHRpb25zLmJyb2FkY2FzdCAhPT0gZmFsc2UpIHtcbiAgICAgICAgdGhpcy5icm9hZGNhc3RXYXRjaGVzKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHJlc2V0KG9wdGlvbnM/OiBDYWNoZS5SZXNldE9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0aGlzLmluaXQoKTtcblxuICAgIGNhbm9uaWNhbFN0cmluZ2lmeS5yZXNldCgpO1xuXG4gICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5kaXNjYXJkV2F0Y2hlcykge1xuICAgICAgLy8gU2ltaWxhciB0byB3aGF0IGhhcHBlbnMgaW4gdGhlIHVuc3Vic2NyaWJlIGZ1bmN0aW9uIHJldHVybmVkIGJ5XG4gICAgICAvLyBjYWNoZS53YXRjaCwgYXBwbGllZCB0byBhbGwgY3VycmVudCB3YXRjaGVzLlxuICAgICAgdGhpcy53YXRjaGVzLmZvckVhY2goKHdhdGNoKSA9PiB0aGlzLm1heWJlQnJvYWRjYXN0V2F0Y2guZm9yZ2V0KHdhdGNoKSk7XG4gICAgICB0aGlzLndhdGNoZXMuY2xlYXIoKTtcbiAgICAgIGZvcmdldENhY2hlKHRoaXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDYWxsaW5nIHRoaXMuaW5pdCgpIGFib3ZlIHVuYmxvY2tzIGFsbCBtYXliZUJyb2FkY2FzdFdhdGNoIGNhY2hpbmcsIHNvXG4gICAgICAvLyB0aGlzLmJyb2FkY2FzdFdhdGNoZXMoKSB0cmlnZ2VycyBhIGJyb2FkY2FzdCB0byBldmVyeSBjdXJyZW50IHdhdGNoZXJcbiAgICAgIC8vIChsZXR0aW5nIHRoZW0ga25vdyB0aGVpciBkYXRhIGlzIG5vdyBtaXNzaW5nKS4gVGhpcyBkZWZhdWx0IGJlaGF2aW9yIGlzXG4gICAgICAvLyBjb252ZW5pZW50IGJlY2F1c2UgaXQgbWVhbnMgdGhlIHdhdGNoZXMgZG8gbm90IGhhdmUgdG8gYmUgbWFudWFsbHlcbiAgICAgIC8vIHJlZXN0YWJsaXNoZWQgYWZ0ZXIgcmVzZXR0aW5nIHRoZSBjYWNoZS4gVG8gcHJldmVudCB0aGlzIGJyb2FkY2FzdCBhbmRcbiAgICAgIC8vIGNhbmNlbCBhbGwgd2F0Y2hlcywgcGFzcyB0cnVlIGZvciBvcHRpb25zLmRpc2NhcmRXYXRjaGVzLlxuICAgICAgdGhpcy5icm9hZGNhc3RXYXRjaGVzKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICB9XG5cbiAgcHVibGljIHJlbW92ZU9wdGltaXN0aWMoaWRUb1JlbW92ZTogc3RyaW5nKSB7XG4gICAgY29uc3QgbmV3T3B0aW1pc3RpY0RhdGEgPSB0aGlzLm9wdGltaXN0aWNEYXRhLnJlbW92ZUxheWVyKGlkVG9SZW1vdmUpO1xuICAgIGlmIChuZXdPcHRpbWlzdGljRGF0YSAhPT0gdGhpcy5vcHRpbWlzdGljRGF0YSkge1xuICAgICAgdGhpcy5vcHRpbWlzdGljRGF0YSA9IG5ld09wdGltaXN0aWNEYXRhO1xuICAgICAgdGhpcy5icm9hZGNhc3RXYXRjaGVzKCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSB0eENvdW50ID0gMDtcblxuICBwdWJsaWMgYmF0Y2g8VFVwZGF0ZVJlc3VsdD4oXG4gICAgb3B0aW9uczogQ2FjaGUuQmF0Y2hPcHRpb25zPEluTWVtb3J5Q2FjaGUsIFRVcGRhdGVSZXN1bHQ+XG4gICk6IFRVcGRhdGVSZXN1bHQge1xuICAgIGNvbnN0IHtcbiAgICAgIHVwZGF0ZSxcbiAgICAgIG9wdGltaXN0aWMgPSB0cnVlLFxuICAgICAgcmVtb3ZlT3B0aW1pc3RpYyxcbiAgICAgIG9uV2F0Y2hVcGRhdGVkLFxuICAgIH0gPSBvcHRpb25zO1xuXG4gICAgbGV0IHVwZGF0ZVJlc3VsdDogVFVwZGF0ZVJlc3VsdDtcbiAgICBjb25zdCBwZXJmb3JtID0gKGxheWVyPzogRW50aXR5U3RvcmUpOiBUVXBkYXRlUmVzdWx0ID0+IHtcbiAgICAgIGNvbnN0IHsgZGF0YSwgb3B0aW1pc3RpY0RhdGEgfSA9IHRoaXM7XG4gICAgICArK3RoaXMudHhDb3VudDtcbiAgICAgIGlmIChsYXllcikge1xuICAgICAgICB0aGlzLmRhdGEgPSB0aGlzLm9wdGltaXN0aWNEYXRhID0gbGF5ZXI7XG4gICAgICB9XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gKHVwZGF0ZVJlc3VsdCA9IHVwZGF0ZSh0aGlzKSk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICAtLXRoaXMudHhDb3VudDtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy5vcHRpbWlzdGljRGF0YSA9IG9wdGltaXN0aWNEYXRhO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBjb25zdCBhbHJlYWR5RGlydHkgPSBuZXcgU2V0PENhY2hlLldhdGNoT3B0aW9ucz4oKTtcblxuICAgIGlmIChvbldhdGNoVXBkYXRlZCAmJiAhdGhpcy50eENvdW50KSB7XG4gICAgICAvLyBJZiBhbiBvcHRpb25zLm9uV2F0Y2hVcGRhdGVkIGNhbGxiYWNrIGlzIHByb3ZpZGVkLCB3ZSB3YW50IHRvIGNhbGwgaXRcbiAgICAgIC8vIHdpdGggb25seSB0aGUgQ2FjaGUuV2F0Y2hPcHRpb25zIG9iamVjdHMgYWZmZWN0ZWQgYnkgb3B0aW9ucy51cGRhdGUsXG4gICAgICAvLyBidXQgdGhlcmUgbWlnaHQgYmUgZGlydHkgd2F0Y2hlcnMgYWxyZWFkeSB3YWl0aW5nIHRvIGJlIGJyb2FkY2FzdCB0aGF0XG4gICAgICAvLyBoYXZlIG5vdGhpbmcgdG8gZG8gd2l0aCB0aGUgdXBkYXRlLiBUbyBwcmV2ZW50IGluY2x1ZGluZyB0aG9zZSB3YXRjaGVyc1xuICAgICAgLy8gaW4gdGhlIHBvc3QtdXBkYXRlIGJyb2FkY2FzdCwgd2UgcGVyZm9ybSB0aGlzIGluaXRpYWwgYnJvYWRjYXN0IHRvXG4gICAgICAvLyBjb2xsZWN0IHRoZSBkaXJ0eSB3YXRjaGVycywgc28gd2UgY2FuIHJlLWRpcnR5IHRoZW0gbGF0ZXIsIGFmdGVyIHRoZVxuICAgICAgLy8gcG9zdC11cGRhdGUgYnJvYWRjYXN0LCBhbGxvd2luZyB0aGVtIHRvIHJlY2VpdmUgdGhlaXIgcGVuZGluZ1xuICAgICAgLy8gYnJvYWRjYXN0cyB0aGUgbmV4dCB0aW1lIGJyb2FkY2FzdFdhdGNoZXMgaXMgY2FsbGVkLCBqdXN0IGFzIHRoZXkgd291bGRcbiAgICAgIC8vIGlmIHdlIG5ldmVyIGNhbGxlZCBjYWNoZS5iYXRjaC5cbiAgICAgIHRoaXMuYnJvYWRjYXN0V2F0Y2hlcyh7XG4gICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIG9uV2F0Y2hVcGRhdGVkKHdhdGNoKSB7XG4gICAgICAgICAgYWxyZWFkeURpcnR5LmFkZCh3YXRjaCk7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBvcHRpbWlzdGljID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAvLyBOb3RlIHRoYXQgdGhlcmUgY2FuIGJlIG11bHRpcGxlIGxheWVycyB3aXRoIHRoZSBzYW1lIG9wdGltaXN0aWMgSUQuXG4gICAgICAvLyBXaGVuIHJlbW92ZU9wdGltaXN0aWMoaWQpIGlzIGNhbGxlZCBmb3IgdGhhdCBpZCwgYWxsIG1hdGNoaW5nIGxheWVyc1xuICAgICAgLy8gd2lsbCBiZSByZW1vdmVkLCBhbmQgdGhlIHJlbWFpbmluZyBsYXllcnMgd2lsbCBiZSByZWFwcGxpZWQuXG4gICAgICB0aGlzLm9wdGltaXN0aWNEYXRhID0gdGhpcy5vcHRpbWlzdGljRGF0YS5hZGRMYXllcihvcHRpbWlzdGljLCBwZXJmb3JtKTtcbiAgICB9IGVsc2UgaWYgKG9wdGltaXN0aWMgPT09IGZhbHNlKSB7XG4gICAgICAvLyBFbnN1cmUgYm90aCB0aGlzLmRhdGEgYW5kIHRoaXMub3B0aW1pc3RpY0RhdGEgcmVmZXIgdG8gdGhlIHJvb3RcbiAgICAgIC8vIChub24tb3B0aW1pc3RpYykgbGF5ZXIgb2YgdGhlIGNhY2hlIGR1cmluZyB0aGUgdXBkYXRlLiBOb3RlIHRoYXRcbiAgICAgIC8vIHRoaXMuZGF0YSBjb3VsZCBiZSBhIExheWVyIGlmIHdlIGFyZSBjdXJyZW50bHkgZXhlY3V0aW5nIGFuIG9wdGltaXN0aWNcbiAgICAgIC8vIHVwZGF0ZSBmdW5jdGlvbiwgYnV0IG90aGVyd2lzZSB3aWxsIGFsd2F5cyBiZSBhbiBFbnRpdHlTdG9yZS5Sb290XG4gICAgICAvLyBpbnN0YW5jZS5cbiAgICAgIHBlcmZvcm0odGhpcy5kYXRhKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gT3RoZXJ3aXNlLCBsZWF2ZSB0aGlzLmRhdGEgYW5kIHRoaXMub3B0aW1pc3RpY0RhdGEgdW5jaGFuZ2VkIGFuZCBydW5cbiAgICAgIC8vIHRoZSB1cGRhdGUgd2l0aCBicm9hZGNhc3QgYmF0Y2hpbmcuXG4gICAgICBwZXJmb3JtKCk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiByZW1vdmVPcHRpbWlzdGljID09PSBcInN0cmluZ1wiKSB7XG4gICAgICB0aGlzLm9wdGltaXN0aWNEYXRhID0gdGhpcy5vcHRpbWlzdGljRGF0YS5yZW1vdmVMYXllcihyZW1vdmVPcHRpbWlzdGljKTtcbiAgICB9XG5cbiAgICAvLyBOb3RlOiBpZiB0aGlzLnR4Q291bnQgPiAwLCB0aGVuIGFscmVhZHlEaXJ0eS5zaXplID09PSAwLCBzbyB0aGlzIGNvZGVcbiAgICAvLyB0YWtlcyB0aGUgZWxzZSBicmFuY2ggYW5kIGNhbGxzIHRoaXMuYnJvYWRjYXN0V2F0Y2hlcyhvcHRpb25zKSwgd2hpY2hcbiAgICAvLyBkb2VzIG5vdGhpbmcgd2hlbiB0aGlzLnR4Q291bnQgPiAwLlxuICAgIGlmIChvbldhdGNoVXBkYXRlZCAmJiBhbHJlYWR5RGlydHkuc2l6ZSkge1xuICAgICAgdGhpcy5icm9hZGNhc3RXYXRjaGVzKHtcbiAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgb25XYXRjaFVwZGF0ZWQod2F0Y2gsIGRpZmYpIHtcbiAgICAgICAgICBjb25zdCByZXN1bHQgPSBvbldhdGNoVXBkYXRlZC5jYWxsKHRoaXMsIHdhdGNoLCBkaWZmKTtcbiAgICAgICAgICBpZiAocmVzdWx0ICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgLy8gU2luY2Ugb25XYXRjaFVwZGF0ZWQgZGlkIG5vdCByZXR1cm4gZmFsc2UsIHRoaXMgZGlmZiBpc1xuICAgICAgICAgICAgLy8gYWJvdXQgdG8gYmUgYnJvYWRjYXN0IHRvIHdhdGNoLmNhbGxiYWNrLCBzbyB3ZSBkb24ndCBuZWVkXG4gICAgICAgICAgICAvLyB0byByZS1kaXJ0eSBpdCB3aXRoIHRoZSBvdGhlciBhbHJlYWR5RGlydHkgd2F0Y2hlcyBiZWxvdy5cbiAgICAgICAgICAgIGFscmVhZHlEaXJ0eS5kZWxldGUod2F0Y2gpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgICAvLyBTaWxlbnRseSByZS1kaXJ0eSBhbnkgd2F0Y2hlcyB0aGF0IHdlcmUgYWxyZWFkeSBkaXJ0eSBiZWZvcmUgdGhlIHVwZGF0ZVxuICAgICAgLy8gd2FzIHBlcmZvcm1lZCwgYW5kIHdlcmUgbm90IGJyb2FkY2FzdCBqdXN0IG5vdy5cbiAgICAgIGlmIChhbHJlYWR5RGlydHkuc2l6ZSkge1xuICAgICAgICBhbHJlYWR5RGlydHkuZm9yRWFjaCgod2F0Y2gpID0+IHRoaXMubWF5YmVCcm9hZGNhc3RXYXRjaC5kaXJ0eSh3YXRjaCkpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBJZiBhbHJlYWR5RGlydHkgaXMgZW1wdHkgb3Igd2UgZG9uJ3QgaGF2ZSBhbiBvbldhdGNoVXBkYXRlZFxuICAgICAgLy8gZnVuY3Rpb24sIHdlIGRvbid0IG5lZWQgdG8gZ28gdG8gdGhlIHRyb3VibGUgb2Ygd3JhcHBpbmdcbiAgICAgIC8vIG9wdGlvbnMub25XYXRjaFVwZGF0ZWQuXG4gICAgICB0aGlzLmJyb2FkY2FzdFdhdGNoZXMob3B0aW9ucyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVwZGF0ZVJlc3VsdCE7XG4gIH1cblxuICBwdWJsaWMgcGVyZm9ybVRyYW5zYWN0aW9uKFxuICAgIHVwZGF0ZTogKGNhY2hlOiBJbk1lbW9yeUNhY2hlKSA9PiBhbnksXG4gICAgb3B0aW1pc3RpY0lkPzogc3RyaW5nIHwgbnVsbFxuICApIHtcbiAgICByZXR1cm4gdGhpcy5iYXRjaCh7XG4gICAgICB1cGRhdGUsXG4gICAgICBvcHRpbWlzdGljOiBvcHRpbWlzdGljSWQgfHwgb3B0aW1pc3RpY0lkICE9PSBudWxsLFxuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIHRyYW5zZm9ybURvY3VtZW50KGRvY3VtZW50OiBEb2N1bWVudE5vZGUpOiBEb2N1bWVudE5vZGUge1xuICAgIHJldHVybiB0aGlzLmFkZFR5cGVuYW1lVHJhbnNmb3JtLnRyYW5zZm9ybURvY3VtZW50KFxuICAgICAgdGhpcy5hZGRGcmFnbWVudHNUb0RvY3VtZW50KGRvY3VtZW50KVxuICAgICk7XG4gIH1cblxuICBwdWJsaWMgZnJhZ21lbnRNYXRjaGVzKFxuICAgIGZyYWdtZW50OiBJbmxpbmVGcmFnbWVudE5vZGUgfCBGcmFnbWVudERlZmluaXRpb25Ob2RlLFxuICAgIHR5cGVuYW1lOiBzdHJpbmdcbiAgKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMucG9saWNpZXMuZnJhZ21lbnRNYXRjaGVzKGZyYWdtZW50LCB0eXBlbmFtZSk7XG4gIH1cblxuICBwdWJsaWMgbG9va3VwRnJhZ21lbnQoZnJhZ21lbnROYW1lOiBzdHJpbmcpOiBGcmFnbWVudERlZmluaXRpb25Ob2RlIHwgbnVsbCB7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlnLmZyYWdtZW50cz8ubG9va3VwKGZyYWdtZW50TmFtZSkgfHwgbnVsbDtcbiAgfVxuXG4gIHByb3RlY3RlZCBicm9hZGNhc3RXYXRjaGVzKG9wdGlvbnM/OiBCcm9hZGNhc3RPcHRpb25zKSB7XG4gICAgaWYgKCF0aGlzLnR4Q291bnQpIHtcbiAgICAgIHRoaXMud2F0Y2hlcy5mb3JFYWNoKChjKSA9PiB0aGlzLm1heWJlQnJvYWRjYXN0V2F0Y2goYywgb3B0aW9ucykpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYWRkRnJhZ21lbnRzVG9Eb2N1bWVudChkb2N1bWVudDogRG9jdW1lbnROb2RlKSB7XG4gICAgY29uc3QgeyBmcmFnbWVudHMgfSA9IHRoaXMuY29uZmlnO1xuICAgIHJldHVybiBmcmFnbWVudHMgPyBmcmFnbWVudHMudHJhbnNmb3JtKGRvY3VtZW50KSA6IGRvY3VtZW50O1xuICB9XG5cbiAgLy8gVGhpcyBtZXRob2QgaXMgd3JhcHBlZCBieSBtYXliZUJyb2FkY2FzdFdhdGNoLCB3aGljaCBpcyBjYWxsZWQgYnlcbiAgLy8gYnJvYWRjYXN0V2F0Y2hlcywgc28gdGhhdCB3ZSBjb21wdXRlIGFuZCBicm9hZGNhc3QgcmVzdWx0cyBvbmx5IHdoZW5cbiAgLy8gdGhlIGRhdGEgdGhhdCB3b3VsZCBiZSBicm9hZGNhc3QgbWlnaHQgaGF2ZSBjaGFuZ2VkLiBJdCB3b3VsZCBiZVxuICAvLyBzaW1wbGVyIHRvIGNoZWNrIGZvciBjaGFuZ2VzIGFmdGVyIHJlY29tcHV0aW5nIGEgcmVzdWx0IGJ1dCBiZWZvcmVcbiAgLy8gYnJvYWRjYXN0aW5nIGl0LCBidXQgdGhpcyB3cmFwcGluZyBhcHByb2FjaCBhbGxvd3MgdXMgdG8gc2tpcCBib3RoXG4gIC8vIHRoZSByZWNvbXB1dGF0aW9uIGFuZCB0aGUgYnJvYWRjYXN0LCBpbiBtb3N0IGNhc2VzLlxuICBwcml2YXRlIGJyb2FkY2FzdFdhdGNoKGM6IENhY2hlLldhdGNoT3B0aW9ucywgb3B0aW9ucz86IEJyb2FkY2FzdE9wdGlvbnMpIHtcbiAgICBjb25zdCB7IGxhc3REaWZmIH0gPSBjO1xuXG4gICAgLy8gQm90aCBXYXRjaE9wdGlvbnMgYW5kIERpZmZPcHRpb25zIGV4dGVuZCBSZWFkT3B0aW9ucywgYW5kIERpZmZPcHRpb25zXG4gICAgLy8gY3VycmVudGx5IHJlcXVpcmVzIG5vIGFkZGl0aW9uYWwgcHJvcGVydGllcywgc28gd2UgY2FuIHVzZSBjIChhXG4gICAgLy8gV2F0Y2hPcHRpb25zIG9iamVjdCkgYXMgRGlmZk9wdGlvbnMsIHdpdGhvdXQgaGF2aW5nIHRvIGFsbG9jYXRlIGEgbmV3XG4gICAgLy8gb2JqZWN0LCBhbmQgd2l0aG91dCBoYXZpbmcgdG8gZW51bWVyYXRlIHRoZSByZWxldmFudCBwcm9wZXJ0aWVzIChxdWVyeSxcbiAgICAvLyB2YXJpYWJsZXMsIGV0Yy4pIGV4cGxpY2l0bHkuIFRoZXJlIHdpbGwgYmUgc29tZSBhZGRpdGlvbmFsIHByb3BlcnRpZXNcbiAgICAvLyAobGFzdERpZmYsIGNhbGxiYWNrLCBldGMuKSwgYnV0IGNhY2hlLmRpZmYgaWdub3JlcyB0aGVtLlxuICAgIGNvbnN0IGRpZmYgPSB0aGlzLmRpZmY8YW55PihjKTtcblxuICAgIGlmIChvcHRpb25zKSB7XG4gICAgICBpZiAoYy5vcHRpbWlzdGljICYmIHR5cGVvZiBvcHRpb25zLm9wdGltaXN0aWMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgZGlmZi5mcm9tT3B0aW1pc3RpY1RyYW5zYWN0aW9uID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKFxuICAgICAgICBvcHRpb25zLm9uV2F0Y2hVcGRhdGVkICYmXG4gICAgICAgIG9wdGlvbnMub25XYXRjaFVwZGF0ZWQuY2FsbCh0aGlzLCBjLCBkaWZmLCBsYXN0RGlmZikgPT09IGZhbHNlXG4gICAgICApIHtcbiAgICAgICAgLy8gUmV0dXJuaW5nIGZhbHNlIGZyb20gdGhlIG9uV2F0Y2hVcGRhdGVkIGNhbGxiYWNrIHdpbGwgcHJldmVudFxuICAgICAgICAvLyBjYWxsaW5nIGMuY2FsbGJhY2soZGlmZikgZm9yIHRoaXMgd2F0Y2hlci5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghbGFzdERpZmYgfHwgIWVxdWFsKGxhc3REaWZmLnJlc3VsdCwgZGlmZi5yZXN1bHQpKSB7XG4gICAgICBjLmNhbGxiYWNrKChjLmxhc3REaWZmID0gZGlmZiksIGxhc3REaWZmKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQGV4cGVyaW1lbnRhbFxuICAgKiBAaW50ZXJuYWxcbiAgICogVGhpcyBpcyBub3QgYSBzdGFibGUgQVBJIC0gaXQgaXMgdXNlZCBpbiBkZXZlbG9wbWVudCBidWlsZHMgdG8gZXhwb3NlXG4gICAqIGluZm9ybWF0aW9uIHRvIHRoZSBEZXZUb29scy5cbiAgICogVXNlIGF0IHlvdXIgb3duIHJpc2shXG4gICAqL1xuICBwdWJsaWMgZGVjbGFyZSBnZXRNZW1vcnlJbnRlcm5hbHM/OiB0eXBlb2YgZ2V0SW5NZW1vcnlDYWNoZU1lbW9yeUludGVybmFscztcbn1cblxuaWYgKF9fREVWX18pIHtcbiAgSW5NZW1vcnlDYWNoZS5wcm90b3R5cGUuZ2V0TWVtb3J5SW50ZXJuYWxzID0gZ2V0SW5NZW1vcnlDYWNoZU1lbW9yeUludGVybmFscztcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/cache/inmemory/inMemoryCache.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/cache/inmemory/key-extractor.js":
/*!*********************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/cache/inmemory/key-extractor.js ***!
  \*********************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   collectSpecifierPaths: () => (/* binding */ collectSpecifierPaths),\n/* harmony export */   extractKeyPath: () => (/* binding */ extractKeyPath),\n/* harmony export */   getSpecifierPaths: () => (/* binding */ getSpecifierPaths),\n/* harmony export */   keyArgsFnFromSpecifier: () => (/* binding */ keyArgsFnFromSpecifier),\n/* harmony export */   keyFieldsFnFromSpecifier: () => (/* binding */ keyFieldsFnFromSpecifier)\n/* harmony export */ });\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/isNonEmptyArray.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/argumentsObjectFromField.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/DeepMerger.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/isArray.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/isNonNullObject.js\");\n/* harmony import */ var _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @apollo/client/utilities/invariant */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/invariant/index.development.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/cache/inmemory/helpers.js\");\n\n\n\n// Mapping from JSON-encoded KeySpecifier strings to associated information.\nconst specifierInfoCache = {};\nfunction lookupSpecifierInfo(spec) {\n    // It's safe to encode KeySpecifier arrays with JSON.stringify, since they're\n    // just arrays of strings or nested KeySpecifier arrays, and the order of the\n    // array elements is important (and suitably preserved by JSON.stringify).\n    const cacheKey = JSON.stringify(spec);\n    return specifierInfoCache[cacheKey] || (specifierInfoCache[cacheKey] = {});\n}\nfunction keyFieldsFnFromSpecifier(specifier) {\n    const info = lookupSpecifierInfo(specifier);\n    return info.keyFieldsFn || (info.keyFieldsFn = (object, context)=>{\n        const extract = (from, key)=>context.readField(key, from);\n        const keyObject = context.keyObject = collectSpecifierPaths(specifier, (schemaKeyPath)=>{\n            let extracted = extractKeyPath(context.storeObject, schemaKeyPath, // Using context.readField to extract paths from context.storeObject\n            // allows the extraction to see through Reference objects and respect\n            // custom read functions.\n            extract);\n            if (extracted === void 0 && object !== context.storeObject && _helpers_js__WEBPACK_IMPORTED_MODULE_0__.hasOwn.call(object, schemaKeyPath[0])) {\n                // If context.storeObject fails to provide a value for the requested\n                // path, fall back to the raw result object, if it has a top-level key\n                // matching the first key in the path (schemaKeyPath[0]). This allows\n                // key fields included in the written data to be saved in the cache\n                // even if they are not selected explicitly in context.selectionSet.\n                // Not being mentioned by context.selectionSet is convenient here,\n                // since it means these extra fields cannot be affected by field\n                // aliasing, which is why we can use extractKey instead of\n                // context.readField for this extraction.\n                extracted = extractKeyPath(object, schemaKeyPath, extractKey);\n            }\n            (0,_apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(extracted !== void 0, 98, schemaKeyPath.join(\".\"), object);\n            return extracted;\n        });\n        return \"\".concat(context.typename, \":\").concat(JSON.stringify(keyObject));\n    });\n}\n// The keyArgs extraction process is roughly analogous to keyFields extraction,\n// but there are no aliases involved, missing fields are tolerated (by merely\n// omitting them from the key), and drawing from field.directives or variables\n// is allowed (in addition to drawing from the field's arguments object).\n// Concretely, these differences mean passing a different key path extractor\n// function to collectSpecifierPaths, reusing the shared extractKeyPath helper\n// wherever possible.\nfunction keyArgsFnFromSpecifier(specifier) {\n    const info = lookupSpecifierInfo(specifier);\n    return info.keyArgsFn || (info.keyArgsFn = (args, param)=>{\n        let { field, variables, fieldName } = param;\n        const collected = collectSpecifierPaths(specifier, (keyPath)=>{\n            const firstKey = keyPath[0];\n            const firstChar = firstKey.charAt(0);\n            if (firstChar === \"@\") {\n                if (field && (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_2__.isNonEmptyArray)(field.directives)) {\n                    const directiveName = firstKey.slice(1);\n                    // If the directive appears multiple times, only the first\n                    // occurrence's arguments will be used. TODO Allow repetition?\n                    // TODO Cache this work somehow, a la aliasMap?\n                    const d = field.directives.find((d)=>d.name.value === directiveName);\n                    // Fortunately argumentsObjectFromField works for DirectiveNode!\n                    const directiveArgs = d && (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_3__.argumentsObjectFromField)(d, variables);\n                    // For directives without arguments (d defined, but directiveArgs ===\n                    // null), the presence or absence of the directive still counts as\n                    // part of the field key, so we return null in those cases. If no\n                    // directive with this name was found for this field (d undefined and\n                    // thus directiveArgs undefined), we return undefined, which causes\n                    // this value to be omitted from the key object returned by\n                    // collectSpecifierPaths.\n                    return directiveArgs && extractKeyPath(directiveArgs, // If keyPath.length === 1, this code calls extractKeyPath with an\n                    // empty path, which works because it uses directiveArgs as the\n                    // extracted value.\n                    keyPath.slice(1));\n                }\n                // If the key started with @ but there was no corresponding directive,\n                // we want to omit this value from the key object, not fall through to\n                // treating @whatever as a normal argument name.\n                return;\n            }\n            if (firstChar === \"$\") {\n                const variableName = firstKey.slice(1);\n                if (variables && _helpers_js__WEBPACK_IMPORTED_MODULE_0__.hasOwn.call(variables, variableName)) {\n                    const varKeyPath = keyPath.slice(0);\n                    varKeyPath[0] = variableName;\n                    return extractKeyPath(variables, varKeyPath);\n                }\n                // If the key started with $ but there was no corresponding variable, we\n                // want to omit this value from the key object, not fall through to\n                // treating $whatever as a normal argument name.\n                return;\n            }\n            if (args) {\n                return extractKeyPath(args, keyPath);\n            }\n        });\n        const suffix = JSON.stringify(collected);\n        // If no arguments were passed to this field, and it didn't have any other\n        // field key contributions from directives or variables, hide the empty\n        // :{} suffix from the field key. However, a field passed no arguments can\n        // still end up with a non-empty :{...} suffix if its key configuration\n        // refers to directives or variables.\n        if (args || suffix !== \"{}\") {\n            fieldName += \":\" + suffix;\n        }\n        return fieldName;\n    });\n}\nfunction collectSpecifierPaths(specifier, extractor) {\n    // For each path specified by specifier, invoke the extractor, and repeatedly\n    // merge the results together, with appropriate ancestor context.\n    const merger = new _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_4__.DeepMerger();\n    return getSpecifierPaths(specifier).reduce((collected, path)=>{\n        let toMerge = extractor(path);\n        if (toMerge !== void 0) {\n            // This path is not expected to contain array indexes, so the toMerge\n            // reconstruction will not contain arrays. TODO Fix this?\n            for(let i = path.length - 1; i >= 0; --i){\n                toMerge = {\n                    [path[i]]: toMerge\n                };\n            }\n            collected = merger.merge(collected, toMerge);\n        }\n        return collected;\n    }, {});\n}\nfunction getSpecifierPaths(spec) {\n    const info = lookupSpecifierInfo(spec);\n    if (!info.paths) {\n        const paths = info.paths = [];\n        const currentPath = [];\n        spec.forEach((s, i)=>{\n            if ((0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_5__.isArray)(s)) {\n                getSpecifierPaths(s).forEach((p)=>paths.push(currentPath.concat(p)));\n                currentPath.length = 0;\n            } else {\n                currentPath.push(s);\n                if (!(0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_5__.isArray)(spec[i + 1])) {\n                    paths.push(currentPath.slice(0));\n                    currentPath.length = 0;\n                }\n            }\n        });\n    }\n    return info.paths;\n}\nfunction extractKey(object, key) {\n    return object[key];\n}\nfunction extractKeyPath(object, path, extract) {\n    // For each key in path, extract the corresponding child property from obj,\n    // flattening arrays if encountered (uncommon for keyFields and keyArgs, but\n    // possible). The final result of path.reduce is normalized so unexpected leaf\n    // objects have their keys safely sorted. That final result is difficult to\n    // type as anything other than any. You're welcome to try to improve the\n    // return type, but keep in mind extractKeyPath is not a public function\n    // (exported only for testing), so the effort may not be worthwhile unless the\n    // limited set of actual callers (see above) pass arguments that TypeScript\n    // can statically type. If we know only that path is some array of strings\n    // (and not, say, a specific tuple of statically known strings), any (or\n    // possibly unknown) is the honest answer.\n    extract = extract || extractKey;\n    return normalize(path.reduce(function reducer(obj, key) {\n        return (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_5__.isArray)(obj) ? obj.map((child)=>reducer(child, key)) : obj && extract(obj, key);\n    }, object));\n}\nfunction normalize(value) {\n    // Usually the extracted value will be a scalar value, since most primary\n    // key fields are scalar, but just in case we get an object or an array, we\n    // need to do some normalization of the order of (nested) keys.\n    if ((0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_6__.isNonNullObject)(value)) {\n        if ((0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_5__.isArray)(value)) {\n            return value.map(normalize);\n        }\n        return collectSpecifierPaths(Object.keys(value).sort(), (path)=>extractKeyPath(value, path));\n    }\n    return value;\n} //# sourceMappingURL=key-extractor.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/cache/inmemory/key-extractor.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/cache/inmemory/policies.js":
/*!****************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/cache/inmemory/policies.js ***!
  \****************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Policies: () => (/* binding */ Policies),\n/* harmony export */   normalizeReadFieldOptions: () => (/* binding */ normalizeReadFieldOptions)\n/* harmony export */ });\n/* harmony import */ var _apollo_client_masking__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @apollo/client/masking */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/masking/utils.js\");\n/* harmony import */ var _apollo_client_utilities__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @apollo/client/utilities */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n/* harmony import */ var _apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @apollo/client/utilities/environment */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/environment/index.development.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/argumentsObjectFromField.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/isArray.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/storeKeyNameFromField.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getStoreKeyName.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/stringifyForDisplay.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/isNonNullObject.js\");\n/* harmony import */ var _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @apollo/client/utilities/invariant */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/invariant/index.development.js\");\n/* harmony import */ var _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @apollo/client/utilities/invariant */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/invariant/index.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./helpers.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/cache/inmemory/helpers.js\");\n/* harmony import */ var _key_extractor_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./key-extractor.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/cache/inmemory/key-extractor.js\");\n/* harmony import */ var _reactiveVars_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./reactiveVars.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/cache/inmemory/reactiveVars.js\");\n\n\n\n\n\n\n\n\nfunction argsFromFieldSpecifier(spec) {\n    return spec.args !== void 0 ? spec.args : spec.field ? (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_0__.argumentsObjectFromField)(spec.field, spec.variables) : null;\n}\nconst nullKeyFieldsFn = ()=>void 0;\nconst simpleKeyArgsFn = (_args, context)=>context.fieldName;\n// These merge functions can be selected by specifying merge:true or\n// merge:false in a field policy.\nconst mergeTrueFn = (existing, incoming, param)=>{\n    let { mergeObjects } = param;\n    return mergeObjects(existing, incoming);\n};\nconst mergeFalseFn = (_, incoming)=>incoming;\nclass Policies {\n    identify(object, partialContext) {\n        var _partialContext_storeObject;\n        const policies = this;\n        const typename = partialContext && (partialContext.typename || ((_partialContext_storeObject = partialContext.storeObject) === null || _partialContext_storeObject === void 0 ? void 0 : _partialContext_storeObject.__typename)) || object.__typename;\n        // It should be possible to write root Query fields with writeFragment,\n        // using { __typename: \"Query\", ... } as the data, but it does not make\n        // sense to allow the same identification behavior for the Mutation and\n        // Subscription types, since application code should never be writing\n        // directly to (or reading directly from) those root objects.\n        if (typename === this.rootTypenamesById.ROOT_QUERY) {\n            return [\n                \"ROOT_QUERY\"\n            ];\n        }\n        // Default context.storeObject to object if not otherwise provided.\n        const storeObject = partialContext && partialContext.storeObject || object;\n        const context = {\n            ...partialContext,\n            typename,\n            storeObject,\n            readField: partialContext && partialContext.readField || function() {\n                for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                    args[_key] = arguments[_key];\n                }\n                const options = normalizeReadFieldOptions(args, storeObject);\n                return policies.readField(options, {\n                    store: policies.cache[\"data\"],\n                    variables: options.variables\n                });\n            }\n        };\n        let id;\n        const policy = typename && this.getTypePolicy(typename);\n        let keyFn = policy && policy.keyFn || this.config.dataIdFromObject;\n        _apollo_client_masking__WEBPACK_IMPORTED_MODULE_1__.disableWarningsSlot.withValue(true, ()=>{\n            while(keyFn){\n                const specifierOrId = keyFn({\n                    ...object,\n                    ...storeObject\n                }, context);\n                if ((0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_2__.isArray)(specifierOrId)) {\n                    keyFn = (0,_key_extractor_js__WEBPACK_IMPORTED_MODULE_3__.keyFieldsFnFromSpecifier)(specifierOrId);\n                } else {\n                    id = specifierOrId;\n                    break;\n                }\n            }\n        });\n        id = id ? String(id) : void 0;\n        return context.keyObject ? [\n            id,\n            context.keyObject\n        ] : [\n            id\n        ];\n    }\n    addTypePolicies(typePolicies) {\n        Object.keys(typePolicies).forEach((typename)=>{\n            const { queryType, mutationType, subscriptionType, ...incoming } = typePolicies[typename];\n            // Though {query,mutation,subscription}Type configurations are rare,\n            // it's important to call setRootTypename as early as possible,\n            // since these configurations should apply consistently for the\n            // entire lifetime of the cache. Also, since only one __typename can\n            // qualify as one of these root types, these three properties cannot\n            // be inherited, unlike the rest of the incoming properties. That\n            // restriction is convenient, because the purpose of this.toBeAdded\n            // is to delay the processing of type/field policies until the first\n            // time they're used, allowing policies to be added in any order as\n            // long as all relevant policies (including policies for supertypes)\n            // have been added by the time a given policy is used for the first\n            // time. In other words, since inheritance doesn't matter for these\n            // properties, there's also no need to delay their processing using\n            // the this.toBeAdded queue.\n            if (queryType) this.setRootTypename(\"Query\", typename);\n            if (mutationType) this.setRootTypename(\"Mutation\", typename);\n            if (subscriptionType) this.setRootTypename(\"Subscription\", typename);\n            if (_helpers_js__WEBPACK_IMPORTED_MODULE_4__.hasOwn.call(this.toBeAdded, typename)) {\n                this.toBeAdded[typename].push(incoming);\n            } else {\n                this.toBeAdded[typename] = [\n                    incoming\n                ];\n            }\n        });\n    }\n    updateTypePolicy(typename, incoming, existingFieldPolicies) {\n        const existing = this.getTypePolicy(typename);\n        const { keyFields, fields } = incoming;\n        function setMerge(existing, merge) {\n            existing.merge = typeof merge === \"function\" ? merge : merge === true ? mergeTrueFn : merge === false ? mergeFalseFn : existing.merge;\n        }\n        // Type policies can define merge functions, as an alternative to\n        // using field policies to merge child objects.\n        setMerge(existing, incoming.merge);\n        existing.keyFn = // Pass false to disable normalization for this typename.\n        keyFields === false ? nullKeyFieldsFn : (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_2__.isArray)(keyFields) ? (0,_key_extractor_js__WEBPACK_IMPORTED_MODULE_3__.keyFieldsFnFromSpecifier)(keyFields) : typeof keyFields === \"function\" ? keyFields : existing.keyFn;\n        if (fields) {\n            Object.keys(fields).forEach((fieldName)=>{\n                let existing = existingFieldPolicies[fieldName];\n                // Field policy inheritance is atomic/shallow: you can't inherit a\n                // field policy and then override just its read function, since read\n                // and merge functions often need to cooperate, so changing only one\n                // of them would be a recipe for inconsistency.\n                // So here we avoid merging an inherited field policy with an updated one.\n                if (!existing || (existing === null || existing === void 0 ? void 0 : existing.typename) !== typename) {\n                    existing = existingFieldPolicies[fieldName] = {\n                        typename\n                    };\n                }\n                const incoming = fields[fieldName];\n                if (typeof incoming === \"function\") {\n                    existing.read = incoming;\n                } else {\n                    const { keyArgs, read, merge } = incoming;\n                    existing.keyFn = // Pass false to disable argument-based differentiation of\n                    // field identities.\n                    keyArgs === false ? simpleKeyArgsFn : (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_2__.isArray)(keyArgs) ? (0,_key_extractor_js__WEBPACK_IMPORTED_MODULE_3__.keyArgsFnFromSpecifier)(keyArgs) : typeof keyArgs === \"function\" ? keyArgs : existing.keyFn;\n                    if (typeof read === \"function\") {\n                        existing.read = read;\n                    }\n                    setMerge(existing, merge);\n                }\n                if (existing.read && existing.merge) {\n                    // If we have both a read and a merge function, assume\n                    // keyArgs:false, because read and merge together can take\n                    // responsibility for interpreting arguments in and out. This\n                    // default assumption can always be overridden by specifying\n                    // keyArgs explicitly in the FieldPolicy.\n                    existing.keyFn = existing.keyFn || simpleKeyArgsFn;\n                }\n            });\n        }\n    }\n    setRootTypename(which) {\n        let typename = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : which;\n        const rootId = \"ROOT_\" + which.toUpperCase();\n        const old = this.rootTypenamesById[rootId];\n        if (typename !== old) {\n            (0,_apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_5__.invariant)(!old || old === which, 99, which);\n            // First, delete any old __typename associated with this rootId from\n            // rootIdsByTypename.\n            if (old) delete this.rootIdsByTypename[old];\n            // Now make this the only __typename that maps to this rootId.\n            this.rootIdsByTypename[typename] = rootId;\n            // Finally, update the __typename associated with this rootId.\n            this.rootTypenamesById[rootId] = typename;\n        }\n    }\n    addPossibleTypes(possibleTypes) {\n        this.usingPossibleTypes = true;\n        Object.keys(possibleTypes).forEach((supertype)=>{\n            // Make sure all types have an entry in this.supertypeMap, even if\n            // their supertype set is empty, so we can return false immediately\n            // from policies.fragmentMatches for unknown supertypes.\n            this.getSupertypeSet(supertype, true);\n            possibleTypes[supertype].forEach((subtype)=>{\n                this.getSupertypeSet(subtype, true).add(supertype);\n                const match = subtype.match(_helpers_js__WEBPACK_IMPORTED_MODULE_4__.TypeOrFieldNameRegExp);\n                if (!match || match[0] !== subtype) {\n                    // TODO Don't interpret just any invalid typename as a RegExp.\n                    this.fuzzySubtypes.set(subtype, new RegExp(subtype));\n                }\n            });\n        });\n    }\n    getTypePolicy(typename) {\n        if (!_helpers_js__WEBPACK_IMPORTED_MODULE_4__.hasOwn.call(this.typePolicies, typename)) {\n            const policy = this.typePolicies[typename] = {};\n            policy.fields = {};\n            // When the TypePolicy for typename is first accessed, instead of\n            // starting with an empty policy object, inherit any properties or\n            // fields from the type policies of the supertypes of typename.\n            //\n            // Any properties or fields defined explicitly within the TypePolicy\n            // for typename will take precedence, and if there are multiple\n            // supertypes, the properties of policies whose types were added\n            // later via addPossibleTypes will take precedence over those of\n            // earlier supertypes. TODO Perhaps we should warn about these\n            // conflicts in development, and recommend defining the property\n            // explicitly in the subtype policy?\n            //\n            // Field policy inheritance is atomic/shallow: you can't inherit a\n            // field policy and then override just its read function, since read\n            // and merge functions often need to cooperate, so changing only one\n            // of them would be a recipe for inconsistency.\n            //\n            // Once the TypePolicy for typename has been accessed, its properties can\n            // still be updated directly using addTypePolicies, but future changes to\n            // inherited supertype policies will not be reflected in this subtype\n            // policy, because this code runs at most once per typename.\n            let supertypes = this.supertypeMap.get(typename);\n            if (!supertypes && this.fuzzySubtypes.size) {\n                // To make the inheritance logic work for unknown typename strings that\n                // may have fuzzy supertypes, we give this typename an empty supertype\n                // set and then populate it with any fuzzy supertypes that match.\n                supertypes = this.getSupertypeSet(typename, true);\n                // This only works for typenames that are directly matched by a fuzzy\n                // supertype. What if there is an intermediate chain of supertypes?\n                // While possible, that situation can only be solved effectively by\n                // specifying the intermediate relationships via possibleTypes, manually\n                // and in a non-fuzzy way.\n                this.fuzzySubtypes.forEach((regExp, fuzzy)=>{\n                    if (regExp.test(typename)) {\n                        // The fuzzy parameter is just the original string version of regExp\n                        // (not a valid __typename string), but we can look up the\n                        // associated supertype(s) in this.supertypeMap.\n                        const fuzzySupertypes = this.supertypeMap.get(fuzzy);\n                        if (fuzzySupertypes) {\n                            fuzzySupertypes.forEach((supertype)=>supertypes.add(supertype));\n                        }\n                    }\n                });\n            }\n            if (supertypes && supertypes.size) {\n                supertypes.forEach((supertype)=>{\n                    const { fields, ...rest } = this.getTypePolicy(supertype);\n                    Object.assign(policy, rest);\n                    Object.assign(policy.fields, fields);\n                });\n            }\n        }\n        const inbox = this.toBeAdded[typename];\n        if (inbox && inbox.length) {\n            // Merge the pending policies into this.typePolicies, in the order they\n            // were originally passed to addTypePolicy.\n            inbox.splice(0).forEach((policy)=>{\n                this.updateTypePolicy(typename, policy, this.typePolicies[typename].fields);\n            });\n        }\n        return this.typePolicies[typename];\n    }\n    getFieldPolicy(typename, fieldName) {\n        if (typename) {\n            return this.getTypePolicy(typename).fields[fieldName];\n        }\n    }\n    getSupertypeSet(subtype, createIfMissing) {\n        let supertypeSet = this.supertypeMap.get(subtype);\n        if (!supertypeSet && createIfMissing) {\n            this.supertypeMap.set(subtype, supertypeSet = new Set());\n        }\n        return supertypeSet;\n    }\n    fragmentMatches(fragment, typename, result, variables) {\n        if (!fragment.typeCondition) return true;\n        // If the fragment has a type condition but the object we're matching\n        // against does not have a __typename, the fragment cannot match.\n        if (!typename) return false;\n        const supertype = fragment.typeCondition.name.value;\n        // Common case: fragment type condition and __typename are the same.\n        if (typename === supertype) return true;\n        if (this.usingPossibleTypes && this.supertypeMap.has(supertype)) {\n            const typenameSupertypeSet = this.getSupertypeSet(typename, true);\n            const workQueue = [\n                typenameSupertypeSet\n            ];\n            const maybeEnqueue = (subtype)=>{\n                const supertypeSet = this.getSupertypeSet(subtype, false);\n                if (supertypeSet && supertypeSet.size && workQueue.indexOf(supertypeSet) < 0) {\n                    workQueue.push(supertypeSet);\n                }\n            };\n            // We need to check fuzzy subtypes only if we encountered fuzzy\n            // subtype strings in addPossibleTypes, and only while writing to\n            // the cache, since that's when selectionSetMatchesResult gives a\n            // strong signal of fragment matching. The StoreReader class calls\n            // policies.fragmentMatches without passing a result object, so\n            // needToCheckFuzzySubtypes is always false while reading.\n            let needToCheckFuzzySubtypes = !!(result && this.fuzzySubtypes.size);\n            let checkingFuzzySubtypes = false;\n            // It's important to keep evaluating workQueue.length each time through\n            // the loop, because the queue can grow while we're iterating over it.\n            for(let i = 0; i < workQueue.length; ++i){\n                const supertypeSet = workQueue[i];\n                if (supertypeSet.has(supertype)) {\n                    if (!typenameSupertypeSet.has(supertype)) {\n                        if (checkingFuzzySubtypes) {\n                            _apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_6__.__DEV__ && _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_5__.invariant.warn(100, typename, supertype);\n                        }\n                        // Record positive results for faster future lookup.\n                        // Unfortunately, we cannot safely cache negative results,\n                        // because new possibleTypes data could always be added to the\n                        // Policies class.\n                        typenameSupertypeSet.add(supertype);\n                    }\n                    return true;\n                }\n                supertypeSet.forEach(maybeEnqueue);\n                if (needToCheckFuzzySubtypes && // Start checking fuzzy subtypes only after exhausting all\n                // non-fuzzy subtypes (after the final iteration of the loop).\n                i === workQueue.length - 1 && // We could wait to compare fragment.selectionSet to result\n                // after we verify the supertype, but this check is often less\n                // expensive than that search, and we will have to do the\n                // comparison anyway whenever we find a potential match.\n                (0,_helpers_js__WEBPACK_IMPORTED_MODULE_4__.selectionSetMatchesResult)(fragment.selectionSet, result, variables)) {\n                    // We don't always need to check fuzzy subtypes (if no result\n                    // was provided, or !this.fuzzySubtypes.size), but, when we do,\n                    // we only want to check them once.\n                    needToCheckFuzzySubtypes = false;\n                    checkingFuzzySubtypes = true;\n                    // If we find any fuzzy subtypes that match typename, extend the\n                    // workQueue to search through the supertypes of those fuzzy\n                    // subtypes. Otherwise the for-loop will terminate and we'll\n                    // return false below.\n                    this.fuzzySubtypes.forEach((regExp, fuzzyString)=>{\n                        const match = typename.match(regExp);\n                        if (match && match[0] === typename) {\n                            maybeEnqueue(fuzzyString);\n                        }\n                    });\n                }\n            }\n        }\n        return false;\n    }\n    hasKeyArgs(typename, fieldName) {\n        const policy = this.getFieldPolicy(typename, fieldName);\n        return !!(policy && policy.keyFn);\n    }\n    getStoreFieldName(fieldSpec) {\n        const { typename, fieldName } = fieldSpec;\n        const policy = this.getFieldPolicy(typename, fieldName);\n        let storeFieldName;\n        let keyFn = policy && policy.keyFn;\n        if (keyFn && typename) {\n            const context = {\n                typename,\n                fieldName,\n                field: fieldSpec.field || null,\n                variables: fieldSpec.variables\n            };\n            const args = argsFromFieldSpecifier(fieldSpec);\n            while(keyFn){\n                const specifierOrString = keyFn(args, context);\n                if ((0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_2__.isArray)(specifierOrString)) {\n                    keyFn = (0,_key_extractor_js__WEBPACK_IMPORTED_MODULE_3__.keyArgsFnFromSpecifier)(specifierOrString);\n                } else {\n                    // If the custom keyFn returns a falsy value, fall back to\n                    // fieldName instead.\n                    storeFieldName = specifierOrString || fieldName;\n                    break;\n                }\n            }\n        }\n        if (storeFieldName === void 0) {\n            storeFieldName = fieldSpec.field ? (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_7__.storeKeyNameFromField)(fieldSpec.field, fieldSpec.variables) : (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_8__.getStoreKeyName)(fieldName, argsFromFieldSpecifier(fieldSpec));\n        }\n        // Returning false from a keyArgs function is like configuring\n        // keyArgs: false, but more dynamic.\n        if (storeFieldName === false) {\n            return fieldName;\n        }\n        // Make sure custom field names start with the actual field.name.value\n        // of the field, so we can always figure out which properties of a\n        // StoreObject correspond to which original field names.\n        return fieldName === (0,_helpers_js__WEBPACK_IMPORTED_MODULE_4__.fieldNameFromStoreName)(storeFieldName) ? storeFieldName : fieldName + \":\" + storeFieldName;\n    }\n    readField(options, context) {\n        const objectOrReference = options.from;\n        if (!objectOrReference) return;\n        const nameOrField = options.field || options.fieldName;\n        if (!nameOrField) return;\n        if (options.typename === void 0) {\n            const typename = context.store.getFieldValue(objectOrReference, \"__typename\");\n            if (typename) options.typename = typename;\n        }\n        const storeFieldName = this.getStoreFieldName(options);\n        const fieldName = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_4__.fieldNameFromStoreName)(storeFieldName);\n        const existing = context.store.getFieldValue(objectOrReference, storeFieldName);\n        const policy = this.getFieldPolicy(options.typename, fieldName);\n        const read = policy && policy.read;\n        if (read) {\n            const readOptions = makeFieldFunctionOptions(this, objectOrReference, options, context, context.store.getStorage((0,_apollo_client_utilities__WEBPACK_IMPORTED_MODULE_9__.isReference)(objectOrReference) ? objectOrReference.__ref : objectOrReference, storeFieldName));\n            // Call read(existing, readOptions) with cacheSlot holding this.cache.\n            return _reactiveVars_js__WEBPACK_IMPORTED_MODULE_10__.cacheSlot.withValue(this.cache, read, [\n                existing,\n                readOptions\n            ]);\n        }\n        return existing;\n    }\n    getReadFunction(typename, fieldName) {\n        const policy = this.getFieldPolicy(typename, fieldName);\n        return policy && policy.read;\n    }\n    getMergeFunction(parentTypename, fieldName, childTypename) {\n        let policy = this.getFieldPolicy(parentTypename, fieldName);\n        let merge = policy && policy.merge;\n        if (!merge && childTypename) {\n            policy = this.getTypePolicy(childTypename);\n            merge = policy && policy.merge;\n        }\n        return merge;\n    }\n    runMergeFunction(existing, incoming, param, context, storage) {\n        let { field, typename, merge } = param;\n        if (merge === mergeTrueFn) {\n            // Instead of going to the trouble of creating a full\n            // FieldFunctionOptions object and calling mergeTrueFn, we can\n            // simply call mergeObjects, as mergeTrueFn would.\n            return makeMergeObjectsFunction(context.store)(existing, incoming);\n        }\n        if (merge === mergeFalseFn) {\n            // Likewise for mergeFalseFn, whose implementation is even simpler.\n            return incoming;\n        }\n        // If cache.writeQuery or cache.writeFragment was called with\n        // options.overwrite set to true, we still call merge functions, but\n        // the existing data is always undefined, so the merge function will\n        // not attempt to combine the incoming data with the existing data.\n        if (context.overwrite) {\n            existing = void 0;\n        }\n        return merge(existing, incoming, makeFieldFunctionOptions(this, // Unlike options.readField for read functions, we do not fall\n        // back to the current object if no foreignObjOrRef is provided,\n        // because it's not clear what the current object should be for\n        // merge functions: the (possibly undefined) existing object, or\n        // the incoming object? If you think your merge function needs\n        // to read sibling fields in order to produce a new value for\n        // the current field, you might want to rethink your strategy,\n        // because that's a recipe for making merge behavior sensitive\n        // to the order in which fields are written into the cache.\n        // However, readField(name, ref) is useful for merge functions\n        // that need to deduplicate child objects and references.\n        void 0, {\n            typename,\n            fieldName: field.name.value,\n            field,\n            variables: context.variables\n        }, context, storage || {}));\n    }\n    constructor(config){\n        this.typePolicies = {};\n        this.toBeAdded = {};\n        // Map from subtype names to sets of supertype names. Note that this\n        // representation inverts the structure of possibleTypes (whose keys are\n        // supertypes and whose values are arrays of subtypes) because it tends\n        // to be much more efficient to search upwards than downwards.\n        this.supertypeMap = new Map();\n        // Any fuzzy subtypes specified by possibleTypes will be converted to\n        // RegExp objects and recorded here. Every key of this map can also be\n        // found in supertypeMap. In many cases this Map will be empty, which\n        // means no fuzzy subtype checking will happen in fragmentMatches.\n        this.fuzzySubtypes = new Map();\n        this.rootIdsByTypename = {};\n        this.rootTypenamesById = {};\n        this.usingPossibleTypes = false;\n        this.config = config;\n        this.config = {\n            dataIdFromObject: _helpers_js__WEBPACK_IMPORTED_MODULE_4__.defaultDataIdFromObject,\n            ...config\n        };\n        this.cache = this.config.cache;\n        this.setRootTypename(\"Query\");\n        this.setRootTypename(\"Mutation\");\n        this.setRootTypename(\"Subscription\");\n        if (config.possibleTypes) {\n            this.addPossibleTypes(config.possibleTypes);\n        }\n        if (config.typePolicies) {\n            this.addTypePolicies(config.typePolicies);\n        }\n    }\n}\nfunction makeFieldFunctionOptions(policies, objectOrReference, fieldSpec, context, storage) {\n    const storeFieldName = policies.getStoreFieldName(fieldSpec);\n    const fieldName = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_4__.fieldNameFromStoreName)(storeFieldName);\n    const variables = fieldSpec.variables || context.variables;\n    const { toReference, canRead } = context.store;\n    return {\n        args: argsFromFieldSpecifier(fieldSpec),\n        field: fieldSpec.field || null,\n        fieldName,\n        storeFieldName,\n        variables,\n        isReference: _apollo_client_utilities__WEBPACK_IMPORTED_MODULE_9__.isReference,\n        toReference,\n        storage,\n        cache: policies.cache,\n        canRead,\n        readField () {\n            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                args[_key] = arguments[_key];\n            }\n            return policies.readField(normalizeReadFieldOptions(args, objectOrReference, variables), context);\n        },\n        mergeObjects: makeMergeObjectsFunction(context.store)\n    };\n}\nfunction normalizeReadFieldOptions(readFieldArgs, objectOrReference, variables) {\n    const { 0: fieldNameOrOptions, 1: from, length: argc } = readFieldArgs;\n    let options;\n    if (typeof fieldNameOrOptions === \"string\") {\n        options = {\n            fieldName: fieldNameOrOptions,\n            // Default to objectOrReference only when no second argument was\n            // passed for the from parameter, not when undefined is explicitly\n            // passed as the second argument.\n            from: argc > 1 ? from : objectOrReference\n        };\n    } else {\n        options = {\n            ...fieldNameOrOptions\n        };\n        // Default to objectOrReference only when fieldNameOrOptions.from is\n        // actually omitted, rather than just undefined.\n        if (!_helpers_js__WEBPACK_IMPORTED_MODULE_4__.hasOwn.call(options, \"from\")) {\n            options.from = objectOrReference;\n        }\n    }\n    if (_apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_6__.__DEV__ && options.from === void 0) {\n        _apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_6__.__DEV__ && _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_5__.invariant.warn(101, (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_11__.stringifyForDisplay)(Array.from(readFieldArgs)));\n    }\n    if (void 0 === options.variables) {\n        options.variables = variables;\n    }\n    return options;\n}\nfunction makeMergeObjectsFunction(store) {\n    return function mergeObjects(existing, incoming) {\n        if ((0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_2__.isArray)(existing) || (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_2__.isArray)(incoming)) {\n            throw (0,_apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_12__.newInvariantError)(102);\n        }\n        // These dynamic checks are necessary because the parameters of a\n        // custom merge function can easily have the any type, so the type\n        // system cannot always enforce the StoreObject | Reference parameter\n        // types of options.mergeObjects.\n        if ((0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_13__.isNonNullObject)(existing) && (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_13__.isNonNullObject)(incoming)) {\n            const eType = store.getFieldValue(existing, \"__typename\");\n            const iType = store.getFieldValue(incoming, \"__typename\");\n            const typesDiffer = eType && iType && eType !== iType;\n            if (typesDiffer) {\n                return incoming;\n            }\n            if ((0,_apollo_client_utilities__WEBPACK_IMPORTED_MODULE_9__.isReference)(existing) && (0,_helpers_js__WEBPACK_IMPORTED_MODULE_4__.storeValueIsStoreObject)(incoming)) {\n                // Update the normalized EntityStore for the entity identified by\n                // existing.__ref, preferring/overwriting any fields contributed by the\n                // newer incoming StoreObject.\n                store.merge(existing.__ref, incoming);\n                return existing;\n            }\n            if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_4__.storeValueIsStoreObject)(existing) && (0,_apollo_client_utilities__WEBPACK_IMPORTED_MODULE_9__.isReference)(incoming)) {\n                // Update the normalized EntityStore for the entity identified by\n                // incoming.__ref, taking fields from the older existing object only if\n                // those fields are not already present in the newer StoreObject\n                // identified by incoming.__ref.\n                store.merge(existing, incoming.__ref);\n                return incoming;\n            }\n            if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_4__.storeValueIsStoreObject)(existing) && (0,_helpers_js__WEBPACK_IMPORTED_MODULE_4__.storeValueIsStoreObject)(incoming)) {\n                return {\n                    ...existing,\n                    ...incoming\n                };\n            }\n        }\n        return incoming;\n    };\n} //# sourceMappingURL=policies.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/cache/inmemory/policies.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/cache/inmemory/reactiveVars.js":
/*!********************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/cache/inmemory/reactiveVars.js ***!
  \********************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cacheSlot: () => (/* binding */ cacheSlot),\n/* harmony export */   forgetCache: () => (/* binding */ forgetCache),\n/* harmony export */   makeVar: () => (/* binding */ makeVar),\n/* harmony export */   recallCache: () => (/* binding */ recallCache)\n/* harmony export */ });\n/* harmony import */ var optimism__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! optimism */ \"(app-pages-browser)/../../node_modules/.pnpm/optimism@0.18.1/node_modules/optimism/lib/index.js\");\n\n// Contextual Slot that acquires its value when custom read functions are\n// called in Policies#readField.\nconst cacheSlot = new optimism__WEBPACK_IMPORTED_MODULE_0__.Slot();\nconst cacheInfoMap = new WeakMap();\nfunction getCacheInfo(cache) {\n    let info = cacheInfoMap.get(cache);\n    if (!info) {\n        cacheInfoMap.set(cache, info = {\n            vars: new Set(),\n            dep: (0,optimism__WEBPACK_IMPORTED_MODULE_0__.dep)()\n        });\n    }\n    return info;\n}\nfunction forgetCache(cache) {\n    getCacheInfo(cache).vars.forEach((rv)=>rv.forgetCache(cache));\n}\n// Calling forgetCache(cache) serves to silence broadcasts and allows the\n// cache to be garbage collected. However, the varsByCache WeakMap\n// preserves the set of reactive variables that were previously associated\n// with this cache, which makes it possible to \"recall\" the cache at a\n// later time, by reattaching it to those variables. If the cache has been\n// garbage collected in the meantime, because it is no longer reachable,\n// you won't be able to call recallCache(cache), and the cache will\n// automatically disappear from the varsByCache WeakMap.\nfunction recallCache(cache) {\n    getCacheInfo(cache).vars.forEach((rv)=>rv.attachCache(cache));\n}\nfunction makeVar(value) {\n    const caches = new Set();\n    const listeners = new Set();\n    const rv = function(newValue) {\n        if (arguments.length > 0) {\n            if (value !== newValue) {\n                value = newValue;\n                caches.forEach((cache)=>{\n                    // Invalidate any fields with custom read functions that\n                    // consumed this variable, so query results involving those\n                    // fields will be recomputed the next time we read them.\n                    getCacheInfo(cache).dep.dirty(rv);\n                    // Broadcast changes to any caches that have previously read\n                    // from this variable.\n                    broadcast(cache);\n                });\n                // Finally, notify any listeners added via rv.onNextChange.\n                const oldListeners = Array.from(listeners);\n                listeners.clear();\n                oldListeners.forEach((listener)=>listener(value));\n            }\n        } else {\n            // When reading from the variable, obtain the current cache from\n            // context via cacheSlot. This isn't entirely foolproof, but it's\n            // the same system that powers varDep.\n            const cache = cacheSlot.getValue();\n            if (cache) {\n                attach(cache);\n                getCacheInfo(cache).dep(rv);\n            }\n        }\n        return value;\n    };\n    rv.onNextChange = (listener)=>{\n        listeners.add(listener);\n        return ()=>{\n            listeners.delete(listener);\n        };\n    };\n    const attach = rv.attachCache = (cache)=>{\n        caches.add(cache);\n        getCacheInfo(cache).vars.add(rv);\n        return rv;\n    };\n    rv.forgetCache = (cache)=>caches.delete(cache);\n    return rv;\n}\nfunction broadcast(cache) {\n    if (cache.broadcastWatches) {\n        cache.broadcastWatches();\n    }\n} //# sourceMappingURL=reactiveVars.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/cache/inmemory/reactiveVars.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/cache/inmemory/readFromStore.js":
/*!*********************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/cache/inmemory/readFromStore.js ***!
  \*********************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StoreReader: () => (/* binding */ StoreReader)\n/* harmony export */ });\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! graphql */ \"(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/kinds.mjs\");\n/* harmony import */ var optimism__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! optimism */ \"(app-pages-browser)/../../node_modules/.pnpm/optimism@0.18.1/node_modules/optimism/lib/index.js\");\n/* harmony import */ var _apollo_client_utilities__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @apollo/client/utilities */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/canonicalStringify.js\");\n/* harmony import */ var _apollo_client_utilities__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @apollo/client/utilities */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n/* harmony import */ var _apollo_client_utilities__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @apollo/client/utilities */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/graphql/transform.js\");\n/* harmony import */ var _apollo_client_utilities__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @apollo/client/utilities */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/caching/sizes.js\");\n/* harmony import */ var _apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @apollo/client/utilities/environment */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/environment/index.development.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getDefaultValues.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getQueryDefinition.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/makeReference.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getMainDefinition.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/DeepMerger.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/shouldInclude.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/isField.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/resultKeyNameFromField.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/isArray.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getFragmentFromSelection.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/mergeDeepArray.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/maybeDeepFreeze.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/isNonNullObject.js\");\n/* harmony import */ var _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @apollo/client/utilities/invariant */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/invariant/index.js\");\n/* harmony import */ var _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @apollo/client/utilities/invariant */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/invariant/index.development.js\");\n/* harmony import */ var _core_types_common_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../core/types/common.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/cache/core/types/common.js\");\n/* harmony import */ var _entityStore_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./entityStore.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/cache/inmemory/entityStore.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./helpers.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/cache/inmemory/helpers.js\");\n\n\n\n\n\n\n\n\n\nfunction execSelectionSetKeyArgs(options) {\n    return [\n        options.selectionSet,\n        options.objectOrReference,\n        options.context\n    ];\n}\nclass StoreReader {\n    /**\n     * Given a store and a query, return as much of the result as possible and\n     * identify if any data was missing from the store.\n     */ diffQueryAgainstStore(param) {\n        let { store, query, rootId = \"ROOT_QUERY\", variables, returnPartialData = true } = param;\n        const policies = this.config.cache.policies;\n        variables = {\n            ...(0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_1__.getDefaultValues)((0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_2__.getQueryDefinition)(query)),\n            ...variables\n        };\n        const rootRef = (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_3__.makeReference)(rootId);\n        const execResult = this.executeSelectionSet({\n            selectionSet: (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_4__.getMainDefinition)(query).selectionSet,\n            objectOrReference: rootRef,\n            enclosingRef: rootRef,\n            context: {\n                store,\n                query,\n                policies,\n                variables,\n                varString: (0,_apollo_client_utilities__WEBPACK_IMPORTED_MODULE_5__.canonicalStringify)(variables),\n                ...(0,_helpers_js__WEBPACK_IMPORTED_MODULE_6__.extractFragmentContext)(query, this.config.fragments)\n            }\n        });\n        let missing;\n        if (execResult.missing) {\n            missing = new _core_types_common_js__WEBPACK_IMPORTED_MODULE_7__.MissingFieldError(firstMissing(execResult.missing), execResult.missing, query, variables);\n        }\n        const complete = !missing;\n        const { result } = execResult;\n        return {\n            result: complete || returnPartialData ? Object.keys(result).length === 0 ? null : result : null,\n            complete,\n            missing\n        };\n    }\n    isFresh(result, parent, selectionSet, context) {\n        if ((0,_entityStore_js__WEBPACK_IMPORTED_MODULE_8__.supportsResultCaching)(context.store) && this.knownResults.get(result) === selectionSet) {\n            const latest = this.executeSelectionSet.peek(selectionSet, parent, context);\n            if (latest && result === latest.result) {\n                return true;\n            }\n        }\n        return false;\n    }\n    // Uncached version of executeSelectionSet.\n    execSelectionSetImpl(param) {\n        let { selectionSet, objectOrReference, enclosingRef, context } = param;\n        if ((0,_apollo_client_utilities__WEBPACK_IMPORTED_MODULE_9__.isReference)(objectOrReference) && !context.policies.rootTypenamesById[objectOrReference.__ref] && !context.store.has(objectOrReference.__ref)) {\n            return {\n                result: {},\n                missing: \"Dangling reference to missing \".concat(objectOrReference.__ref, \" object\")\n            };\n        }\n        const { variables, policies, store } = context;\n        const typename = store.getFieldValue(objectOrReference, \"__typename\");\n        const objectsToMerge = [];\n        let missing;\n        const missingMerger = new _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_10__.DeepMerger();\n        if (typeof typename === \"string\" && !policies.rootIdsByTypename[typename]) {\n            // Ensure we always include a default value for the __typename\n            // field, if we have one. Note that this field can be overridden by other\n            // merged objects.\n            objectsToMerge.push({\n                __typename: typename\n            });\n        }\n        function handleMissing(result, resultName) {\n            if (result.missing) {\n                missing = missingMerger.merge(missing, {\n                    [resultName]: result.missing\n                });\n            }\n            return result.result;\n        }\n        const workSet = new Set(selectionSet.selections);\n        workSet.forEach((selection)=>{\n            // Omit fields with directives @skip(if: <truthy value>) or\n            // @include(if: <falsy value>).\n            if (!(0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_11__.shouldInclude)(selection, variables)) return;\n            if ((0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_12__.isField)(selection)) {\n                let fieldValue = policies.readField({\n                    fieldName: selection.name.value,\n                    field: selection,\n                    variables: context.variables,\n                    from: objectOrReference\n                }, context);\n                const resultName = (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_13__.resultKeyNameFromField)(selection);\n                if (fieldValue === void 0) {\n                    if (!_apollo_client_utilities__WEBPACK_IMPORTED_MODULE_14__.addTypenameToDocument.added(selection)) {\n                        missing = missingMerger.merge(missing, {\n                            [resultName]: \"Can't find field '\".concat(selection.name.value, \"' on \").concat((0,_apollo_client_utilities__WEBPACK_IMPORTED_MODULE_9__.isReference)(objectOrReference) ? objectOrReference.__ref + \" object\" : \"object \" + JSON.stringify(objectOrReference, null, 2))\n                        });\n                    }\n                } else if ((0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_15__.isArray)(fieldValue)) {\n                    if (fieldValue.length > 0) {\n                        fieldValue = handleMissing(this.executeSubSelectedArray({\n                            field: selection,\n                            array: fieldValue,\n                            enclosingRef,\n                            context\n                        }), resultName);\n                    }\n                } else if (!selection.selectionSet) {\n                // do nothing\n                } else if (fieldValue != null) {\n                    // In this case, because we know the field has a selection set,\n                    // it must be trying to query a GraphQLObjectType, which is why\n                    // fieldValue must be != null.\n                    fieldValue = handleMissing(this.executeSelectionSet({\n                        selectionSet: selection.selectionSet,\n                        objectOrReference: fieldValue,\n                        enclosingRef: (0,_apollo_client_utilities__WEBPACK_IMPORTED_MODULE_9__.isReference)(fieldValue) ? fieldValue : enclosingRef,\n                        context\n                    }), resultName);\n                }\n                if (fieldValue !== void 0) {\n                    objectsToMerge.push({\n                        [resultName]: fieldValue\n                    });\n                }\n            } else {\n                const fragment = (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_16__.getFragmentFromSelection)(selection, context.lookupFragment);\n                if (!fragment && selection.kind === graphql__WEBPACK_IMPORTED_MODULE_17__.Kind.FRAGMENT_SPREAD) {\n                    throw (0,_apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_18__.newInvariantError)(103, selection.name.value);\n                }\n                if (fragment && policies.fragmentMatches(fragment, typename)) {\n                    fragment.selectionSet.selections.forEach(workSet.add, workSet);\n                }\n            }\n        });\n        const result = (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_19__.mergeDeepArray)(objectsToMerge);\n        const finalResult = {\n            result,\n            missing\n        };\n        const frozen = (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_20__.maybeDeepFreeze)(finalResult);\n        // Store this result with its selection set so that we can quickly\n        // recognize it again in the StoreReader#isFresh method.\n        if (frozen.result) {\n            this.knownResults.set(frozen.result, selectionSet);\n        }\n        return frozen;\n    }\n    // Uncached version of executeSubSelectedArray.\n    execSubSelectedArrayImpl(param) {\n        let { field, array, enclosingRef, context } = param;\n        let missing;\n        let missingMerger = new _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_10__.DeepMerger();\n        function handleMissing(childResult, i) {\n            if (childResult.missing) {\n                missing = missingMerger.merge(missing, {\n                    [i]: childResult.missing\n                });\n            }\n            return childResult.result;\n        }\n        if (field.selectionSet) {\n            array = array.filter(context.store.canRead);\n        }\n        array = array.map((item, i)=>{\n            // null value in array\n            if (item === null) {\n                return null;\n            }\n            // This is a nested array, recurse\n            if ((0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_15__.isArray)(item)) {\n                return handleMissing(this.executeSubSelectedArray({\n                    field,\n                    array: item,\n                    enclosingRef,\n                    context\n                }), i);\n            }\n            // This is an object, run the selection set on it\n            if (field.selectionSet) {\n                return handleMissing(this.executeSelectionSet({\n                    selectionSet: field.selectionSet,\n                    objectOrReference: item,\n                    enclosingRef: (0,_apollo_client_utilities__WEBPACK_IMPORTED_MODULE_9__.isReference)(item) ? item : enclosingRef,\n                    context\n                }), i);\n            }\n            if (_apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_21__.__DEV__) {\n                assertSelectionSetForIdValue(context.store, field, item);\n            }\n            return item;\n        });\n        return {\n            result: array,\n            missing\n        };\n    }\n    constructor(config){\n        this.knownResults = new WeakMap();\n        this.config = config;\n        // memoized functions in this class will be \"garbage-collected\"\n        // by recreating the whole `StoreReader` in\n        // `InMemoryCache.resetResultsCache`\n        // (triggered from `InMemoryCache.gc` with `resetResultCache: true`)\n        this.executeSelectionSet = (0,optimism__WEBPACK_IMPORTED_MODULE_0__.wrap)((options)=>{\n            const peekArgs = execSelectionSetKeyArgs(options);\n            const other = this.executeSelectionSet.peek(...peekArgs);\n            if (other) {\n                // If we previously read this result with canonization enabled, we can\n                // return that canonized result as-is.\n                return other;\n            }\n            (0,_entityStore_js__WEBPACK_IMPORTED_MODULE_8__.maybeDependOnExistenceOfEntity)(options.context.store, options.enclosingRef.__ref);\n            // Finally, if we didn't find any useful previous results, run the real\n            // execSelectionSetImpl method with the given options.\n            return this.execSelectionSetImpl(options);\n        }, {\n            max: _apollo_client_utilities__WEBPACK_IMPORTED_MODULE_22__.cacheSizes[\"inMemoryCache.executeSelectionSet\"] || 50000 /* defaultCacheSizes[\"inMemoryCache.executeSelectionSet\"] */ ,\n            keyArgs: execSelectionSetKeyArgs,\n            // Note that the parameters of makeCacheKey are determined by the\n            // array returned by keyArgs.\n            makeCacheKey (selectionSet, parent, context) {\n                if ((0,_entityStore_js__WEBPACK_IMPORTED_MODULE_8__.supportsResultCaching)(context.store)) {\n                    return context.store.makeCacheKey(selectionSet, (0,_apollo_client_utilities__WEBPACK_IMPORTED_MODULE_9__.isReference)(parent) ? parent.__ref : parent, context.varString);\n                }\n            }\n        });\n        this.executeSubSelectedArray = (0,optimism__WEBPACK_IMPORTED_MODULE_0__.wrap)((options)=>{\n            (0,_entityStore_js__WEBPACK_IMPORTED_MODULE_8__.maybeDependOnExistenceOfEntity)(options.context.store, options.enclosingRef.__ref);\n            return this.execSubSelectedArrayImpl(options);\n        }, {\n            max: _apollo_client_utilities__WEBPACK_IMPORTED_MODULE_22__.cacheSizes[\"inMemoryCache.executeSubSelectedArray\"] || 10000 /* defaultCacheSizes[\"inMemoryCache.executeSubSelectedArray\"] */ ,\n            makeCacheKey (param) {\n                let { field, array, context } = param;\n                if ((0,_entityStore_js__WEBPACK_IMPORTED_MODULE_8__.supportsResultCaching)(context.store)) {\n                    return context.store.makeCacheKey(field, array, context.varString);\n                }\n            }\n        });\n    }\n}\nfunction firstMissing(tree) {\n    try {\n        JSON.stringify(tree, (_, value)=>{\n            if (typeof value === \"string\") throw value;\n            return value;\n        });\n    } catch (result) {\n        return result;\n    }\n}\nfunction assertSelectionSetForIdValue(store, field, fieldValue) {\n    if (!field.selectionSet) {\n        const workSet = new Set([\n            fieldValue\n        ]);\n        workSet.forEach((value)=>{\n            if ((0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_23__.isNonNullObject)(value)) {\n                (0,_apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_24__.invariant)(!(0,_apollo_client_utilities__WEBPACK_IMPORTED_MODULE_9__.isReference)(value), 104, (0,_helpers_js__WEBPACK_IMPORTED_MODULE_6__.getTypenameFromStoreObject)(store, value), field.name.value);\n                Object.values(value).forEach(workSet.add, workSet);\n            }\n        });\n    }\n} //# sourceMappingURL=readFromStore.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/cache/inmemory/readFromStore.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/cache/inmemory/writeToStore.js":
/*!********************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/cache/inmemory/writeToStore.js ***!
  \********************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StoreWriter: () => (/* binding */ StoreWriter)\n/* harmony export */ });\n/* harmony import */ var _wry_equality__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wry/equality */ \"(app-pages-browser)/../../node_modules/.pnpm/@wry+equality@0.5.7/node_modules/@wry/equality/lib/index.js\");\n/* harmony import */ var _wry_trie__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @wry/trie */ \"(app-pages-browser)/../../node_modules/.pnpm/@wry+trie@0.5.0/node_modules/@wry/trie/lib/index.js\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! graphql */ \"(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/kinds.mjs\");\n/* harmony import */ var _apollo_client_utilities__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @apollo/client/utilities */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/canonicalStringify.js\");\n/* harmony import */ var _apollo_client_utilities__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @apollo/client/utilities */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n/* harmony import */ var _apollo_client_utilities__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @apollo/client/utilities */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/graphql/transform.js\");\n/* harmony import */ var _apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @apollo/client/utilities/environment */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/environment/index.development.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getOperationDefinition.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getDefaultValues.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/makeReference.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/resultKeyNameFromField.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/cloneDeep.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/isArray.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/shouldInclude.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/isNonEmptyArray.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/argumentsObjectFromField.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/isField.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getFragmentFromSelection.js\");\n/* harmony import */ var _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @apollo/client/utilities/invariant */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/invariant/index.js\");\n/* harmony import */ var _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @apollo/client/utilities/invariant */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/invariant/index.development.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./helpers.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/cache/inmemory/helpers.js\");\n/* harmony import */ var _policies_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./policies.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/cache/inmemory/policies.js\");\n\n\n\n\n\n\n\n\n\n// Since there are only four possible combinations of context.clientOnly and\n// context.deferred values, we should need at most four \"flavors\" of any given\n// WriteContext. To avoid creating multiple copies of the same context, we cache\n// the contexts in the context.flavors Map (shared by all flavors) according to\n// their clientOnly and deferred values (always in that order).\nfunction getContextFlavor(context, clientOnly, deferred) {\n    const key = \"\".concat(clientOnly).concat(deferred);\n    let flavored = context.flavors.get(key);\n    if (!flavored) {\n        context.flavors.set(key, flavored = context.clientOnly === clientOnly && context.deferred === deferred ? context : {\n            ...context,\n            clientOnly,\n            deferred\n        });\n    }\n    return flavored;\n}\nclass StoreWriter {\n    writeToStore(store, param) {\n        let { query, result, dataId, variables, overwrite } = param;\n        const operationDefinition = (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_2__.getOperationDefinition)(query);\n        const merger = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.makeProcessedFieldsMerger)();\n        variables = {\n            ...(0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_4__.getDefaultValues)(operationDefinition),\n            ...variables\n        };\n        const context = {\n            store,\n            written: {},\n            merge (existing, incoming) {\n                return merger.merge(existing, incoming);\n            },\n            variables: variables,\n            varString: (0,_apollo_client_utilities__WEBPACK_IMPORTED_MODULE_5__.canonicalStringify)(variables),\n            ...(0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.extractFragmentContext)(query, this.fragments),\n            overwrite: !!overwrite,\n            incomingById: new Map(),\n            clientOnly: false,\n            deferred: false,\n            flavors: new Map()\n        };\n        const ref = this.processSelectionSet({\n            result: result || {},\n            dataId,\n            selectionSet: operationDefinition.selectionSet,\n            mergeTree: {\n                map: new Map()\n            },\n            context\n        });\n        if (!(0,_apollo_client_utilities__WEBPACK_IMPORTED_MODULE_6__.isReference)(ref)) {\n            throw (0,_apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_7__.newInvariantError)(105, result);\n        }\n        // So far, the store has not been modified, so now it's time to process\n        // context.incomingById and merge those incoming fields into context.store.\n        context.incomingById.forEach((param, dataId)=>{\n            let { storeObject, mergeTree, fieldNodeSet } = param;\n            const entityRef = (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_8__.makeReference)(dataId);\n            if (mergeTree && mergeTree.map.size) {\n                const applied = this.applyMerges(mergeTree, entityRef, storeObject, context);\n                if ((0,_apollo_client_utilities__WEBPACK_IMPORTED_MODULE_6__.isReference)(applied)) {\n                    // Assume References returned by applyMerges have already been merged\n                    // into the store. See makeMergeObjectsFunction in policies.ts for an\n                    // example of how this can happen.\n                    return;\n                }\n                // Otherwise, applyMerges returned a StoreObject, whose fields we should\n                // merge into the store (see store.merge statement below).\n                storeObject = applied;\n            }\n            if (_apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_9__.__DEV__ && !context.overwrite) {\n                const fieldsWithSelectionSets = {};\n                fieldNodeSet.forEach((field)=>{\n                    if (field.selectionSet) {\n                        fieldsWithSelectionSets[field.name.value] = true;\n                    }\n                });\n                const hasSelectionSet = (storeFieldName)=>fieldsWithSelectionSets[(0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.fieldNameFromStoreName)(storeFieldName)] === true;\n                const hasMergeFunction = (storeFieldName)=>{\n                    const childTree = mergeTree && mergeTree.map.get(storeFieldName);\n                    return Boolean(childTree && childTree.info && childTree.info.merge);\n                };\n                Object.keys(storeObject).forEach((storeFieldName)=>{\n                    // If a merge function was defined for this field, trust that it\n                    // did the right thing about (not) clobbering data. If the field\n                    // has no selection set, it's a scalar field, so it doesn't need\n                    // a merge function (even if it's an object, like JSON data).\n                    if (hasSelectionSet(storeFieldName) && !hasMergeFunction(storeFieldName)) {\n                        warnAboutDataLoss(entityRef, storeObject, storeFieldName, context.store);\n                    }\n                });\n            }\n            store.merge(dataId, storeObject);\n        });\n        // Any IDs written explicitly to the cache will be retained as\n        // reachable root IDs for garbage collection purposes. Although this\n        // logic includes root IDs like ROOT_QUERY and ROOT_MUTATION, their\n        // retainment counts are effectively ignored because cache.gc() always\n        // includes them in its root ID set.\n        store.retain(ref.__ref);\n        return ref;\n    }\n    processSelectionSet(param) {\n        let { dataId, result, selectionSet, context, // This object allows processSelectionSet to report useful information\n        // to its callers without explicitly returning that information.\n        mergeTree } = param;\n        const { policies } = this.cache;\n        // This variable will be repeatedly updated using context.merge to\n        // accumulate all fields that need to be written into the store.\n        let incoming = {};\n        // If typename was not passed in, infer it. Note that typename is\n        // always passed in for tricky-to-infer cases such as \"Query\" for\n        // ROOT_QUERY.\n        const typename = dataId && policies.rootTypenamesById[dataId] || getTypenameFromResult(result, selectionSet, context.fragmentMap) || dataId && context.store.get(dataId, \"__typename\");\n        if (\"string\" === typeof typename) {\n            incoming.__typename = typename;\n        }\n        // This readField function will be passed as context.readField in the\n        // KeyFieldsContext object created within policies.identify (called below).\n        // In addition to reading from the existing context.store (thanks to the\n        // policies.readField(options, context) line at the very bottom), this\n        // version of readField can read from Reference objects that are currently\n        // pending in context.incomingById, which is important whenever keyFields\n        // need to be extracted from a child object that processSelectionSet has\n        // turned into a Reference.\n        const readField = function() {\n            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                args[_key] = arguments[_key];\n            }\n            const options = (0,_policies_js__WEBPACK_IMPORTED_MODULE_10__.normalizeReadFieldOptions)(args, incoming, context.variables);\n            if ((0,_apollo_client_utilities__WEBPACK_IMPORTED_MODULE_6__.isReference)(options.from)) {\n                const info = context.incomingById.get(options.from.__ref);\n                if (info) {\n                    const result = policies.readField({\n                        ...options,\n                        from: info.storeObject\n                    }, context);\n                    if (result !== void 0) {\n                        return result;\n                    }\n                }\n            }\n            return policies.readField(options, context);\n        };\n        const fieldNodeSet = new Set();\n        this.flattenFields(selectionSet, result, // This WriteContext will be the default context value for fields returned\n        // by the flattenFields method, but some fields may be assigned a modified\n        // context, depending on the presence of @client and other directives.\n        context, typename).forEach((context, field)=>{\n            const resultFieldKey = (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_11__.resultKeyNameFromField)(field);\n            const value = result[resultFieldKey];\n            fieldNodeSet.add(field);\n            if (value !== void 0) {\n                const storeFieldName = policies.getStoreFieldName({\n                    typename,\n                    fieldName: field.name.value,\n                    field,\n                    variables: context.variables\n                });\n                const childTree = getChildMergeTree(mergeTree, storeFieldName);\n                let incomingValue = this.processFieldValue(value, field, // Reset context.clientOnly and context.deferred to their default\n                // values before processing nested selection sets.\n                field.selectionSet ? getContextFlavor(context, false, false) : context, childTree);\n                // To determine if this field holds a child object with a merge function\n                // defined in its type policy (see PR #7070), we need to figure out the\n                // child object's __typename.\n                let childTypename;\n                // The field's value can be an object that has a __typename only if the\n                // field has a selection set. Otherwise incomingValue is scalar.\n                if (field.selectionSet && ((0,_apollo_client_utilities__WEBPACK_IMPORTED_MODULE_6__.isReference)(incomingValue) || (0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.storeValueIsStoreObject)(incomingValue))) {\n                    childTypename = readField(\"__typename\", incomingValue);\n                }\n                const merge = policies.getMergeFunction(typename, field.name.value, childTypename);\n                if (merge) {\n                    childTree.info = {\n                        // TODO Check compatibility against any existing childTree.field?\n                        field,\n                        typename,\n                        merge\n                    };\n                } else {\n                    maybeRecycleChildMergeTree(mergeTree, storeFieldName);\n                }\n                incoming = context.merge(incoming, {\n                    [storeFieldName]: incomingValue\n                });\n            } else if (_apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_9__.__DEV__ && !context.clientOnly && !context.deferred && !_apollo_client_utilities__WEBPACK_IMPORTED_MODULE_12__.addTypenameToDocument.added(field) && // If the field has a read function, it may be a synthetic field or\n            // provide a default value, so its absence from the written data should\n            // not be cause for alarm.\n            !policies.getReadFunction(typename, field.name.value)) {\n                _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_13__.invariant.error(106, (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_11__.resultKeyNameFromField)(field), result);\n            }\n        });\n        // Identify the result object, even if dataId was already provided,\n        // since we always need keyObject below.\n        try {\n            const [id, keyObject] = policies.identify(result, {\n                typename,\n                selectionSet,\n                fragmentMap: context.fragmentMap,\n                storeObject: incoming,\n                readField\n            });\n            // If dataId was not provided, fall back to the id just generated by\n            // policies.identify.\n            dataId = dataId || id;\n            // Write any key fields that were used during identification, even if\n            // they were not mentioned in the original query.\n            if (keyObject) {\n                // TODO Reverse the order of the arguments?\n                incoming = context.merge(incoming, keyObject);\n            }\n        } catch (e) {\n            // If dataId was provided, tolerate failure of policies.identify.\n            if (!dataId) throw e;\n        }\n        if (\"string\" === typeof dataId) {\n            const dataRef = (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_8__.makeReference)(dataId);\n            // Avoid processing the same entity object using the same selection\n            // set more than once. We use an array instead of a Set since most\n            // entity IDs will be written using only one selection set, so the\n            // size of this array is likely to be very small, meaning indexOf is\n            // likely to be faster than Set.prototype.has.\n            const sets = context.written[dataId] || (context.written[dataId] = []);\n            if (sets.indexOf(selectionSet) >= 0) return dataRef;\n            sets.push(selectionSet);\n            // If we're about to write a result object into the store, but we\n            // happen to know that the exact same (===) result object would be\n            // returned if we were to reread the result with the same inputs,\n            // then we can skip the rest of the processSelectionSet work for\n            // this object, and immediately return a Reference to it.\n            if (this.reader && this.reader.isFresh(result, dataRef, selectionSet, context)) {\n                return dataRef;\n            }\n            const previous = context.incomingById.get(dataId);\n            if (previous) {\n                previous.storeObject = context.merge(previous.storeObject, incoming);\n                previous.mergeTree = mergeMergeTrees(previous.mergeTree, mergeTree);\n                fieldNodeSet.forEach((field)=>previous.fieldNodeSet.add(field));\n            } else {\n                context.incomingById.set(dataId, {\n                    storeObject: incoming,\n                    // Save a reference to mergeTree only if it is not empty, because\n                    // empty MergeTrees may be recycled by maybeRecycleChildMergeTree and\n                    // reused for entirely different parts of the result tree.\n                    mergeTree: mergeTreeIsEmpty(mergeTree) ? void 0 : mergeTree,\n                    fieldNodeSet\n                });\n            }\n            return dataRef;\n        }\n        return incoming;\n    }\n    processFieldValue(value, field, context, mergeTree) {\n        if (!field.selectionSet || value === null) {\n            // In development, we need to clone scalar values so that they can be\n            // safely frozen with maybeDeepFreeze in readFromStore.ts. In production,\n            // it's cheaper to store the scalar values directly in the cache.\n            return _apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_9__.__DEV__ ? (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_14__.cloneDeep)(value) : value;\n        }\n        if ((0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_15__.isArray)(value)) {\n            return value.map((item, i)=>{\n                const value = this.processFieldValue(item, field, context, getChildMergeTree(mergeTree, i));\n                maybeRecycleChildMergeTree(mergeTree, i);\n                return value;\n            });\n        }\n        return this.processSelectionSet({\n            result: value,\n            selectionSet: field.selectionSet,\n            context,\n            mergeTree\n        });\n    }\n    // Implements https://spec.graphql.org/draft/#sec-Field-Collection, but with\n    // some additions for tracking @client and @defer directives.\n    flattenFields(selectionSet, result, context) {\n        let typename = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : getTypenameFromResult(result, selectionSet, context.fragmentMap);\n        const fieldMap = new Map();\n        const { policies } = this.cache;\n        const limitingTrie = new _wry_trie__WEBPACK_IMPORTED_MODULE_1__.Trie(false); // No need for WeakMap, since limitingTrie does not escape.\n        (function flatten(selectionSet, inheritedContext) {\n            const visitedNode = limitingTrie.lookup(selectionSet, // Because we take inheritedClientOnly and inheritedDeferred into\n            // consideration here (in addition to selectionSet), it's possible for\n            // the same selection set to be flattened more than once, if it appears\n            // in the query with different @client and/or @directive configurations.\n            inheritedContext.clientOnly, inheritedContext.deferred);\n            if (visitedNode.visited) return;\n            visitedNode.visited = true;\n            selectionSet.selections.forEach((selection)=>{\n                if (!(0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_16__.shouldInclude)(selection, context.variables)) return;\n                let { clientOnly, deferred } = inheritedContext;\n                if (// Since the presence of @client or @defer on this field can only\n                // cause clientOnly or deferred to become true, we can skip the\n                // forEach loop if both clientOnly and deferred are already true.\n                !(clientOnly && deferred) && (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_17__.isNonEmptyArray)(selection.directives)) {\n                    selection.directives.forEach((dir)=>{\n                        const name = dir.name.value;\n                        if (name === \"client\") clientOnly = true;\n                        if (name === \"defer\") {\n                            const args = (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_18__.argumentsObjectFromField)(dir, context.variables);\n                            // The @defer directive takes an optional args.if boolean\n                            // argument, similar to @include(if: boolean). Note that\n                            // @defer(if: false) does not make context.deferred false, but\n                            // instead behaves as if there was no @defer directive.\n                            if (!args || args.if !== false) {\n                                deferred = true;\n                            }\n                        // TODO In the future, we may want to record args.label using\n                        // context.deferred, if a label is specified.\n                        }\n                    });\n                }\n                if ((0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_19__.isField)(selection)) {\n                    const existing = fieldMap.get(selection);\n                    if (existing) {\n                        // If this field has been visited along another recursive path\n                        // before, the final context should have clientOnly or deferred set\n                        // to true only if *all* paths have the directive (hence the &&).\n                        clientOnly = clientOnly && existing.clientOnly;\n                        deferred = deferred && existing.deferred;\n                    }\n                    fieldMap.set(selection, getContextFlavor(context, clientOnly, deferred));\n                } else {\n                    const fragment = (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_20__.getFragmentFromSelection)(selection, context.lookupFragment);\n                    if (!fragment && selection.kind === graphql__WEBPACK_IMPORTED_MODULE_21__.Kind.FRAGMENT_SPREAD) {\n                        throw (0,_apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_7__.newInvariantError)(107, selection.name.value);\n                    }\n                    if (fragment && policies.fragmentMatches(fragment, typename, result, context.variables)) {\n                        flatten(fragment.selectionSet, getContextFlavor(context, clientOnly, deferred));\n                    }\n                }\n            });\n        })(selectionSet, context);\n        return fieldMap;\n    }\n    applyMerges(mergeTree, existing, incoming, context, getStorageArgs) {\n        if (mergeTree.map.size && !(0,_apollo_client_utilities__WEBPACK_IMPORTED_MODULE_6__.isReference)(incoming)) {\n            const e = // Items in the same position in different arrays are not\n            // necessarily related to each other, so when incoming is an array\n            // we process its elements as if there was no existing data.\n            !(0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_15__.isArray)(incoming) && // Likewise, existing must be either a Reference or a StoreObject\n            // in order for its fields to be safe to merge with the fields of\n            // the incoming object.\n            ((0,_apollo_client_utilities__WEBPACK_IMPORTED_MODULE_6__.isReference)(existing) || (0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.storeValueIsStoreObject)(existing)) ? existing : void 0;\n            // This narrowing is implied by mergeTree.map.size > 0 and\n            // !isReference(incoming), though TypeScript understandably cannot\n            // hope to infer this type.\n            const i = incoming;\n            // The options.storage objects provided to read and merge functions\n            // are derived from the identity of the parent object plus a\n            // sequence of storeFieldName strings/numbers identifying the nested\n            // field name path of each field value to be merged.\n            if (e && !getStorageArgs) {\n                getStorageArgs = [\n                    (0,_apollo_client_utilities__WEBPACK_IMPORTED_MODULE_6__.isReference)(e) ? e.__ref : e\n                ];\n            }\n            // It's possible that applying merge functions to this subtree will\n            // not change the incoming data, so this variable tracks the fields\n            // that did change, so we can create a new incoming object when (and\n            // only when) at least one incoming field has changed. We use a Map\n            // to preserve the type of numeric keys.\n            let changedFields;\n            const getValue = (from, name)=>{\n                return (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_15__.isArray)(from) ? typeof name === \"number\" ? from[name] : void 0 : context.store.getFieldValue(from, String(name));\n            };\n            mergeTree.map.forEach((childTree, storeFieldName)=>{\n                const eVal = getValue(e, storeFieldName);\n                const iVal = getValue(i, storeFieldName);\n                // If we have no incoming data, leave any existing data untouched.\n                if (void 0 === iVal) return;\n                if (getStorageArgs) {\n                    getStorageArgs.push(storeFieldName);\n                }\n                const aVal = this.applyMerges(childTree, eVal, iVal, context, getStorageArgs);\n                if (aVal !== iVal) {\n                    changedFields = changedFields || new Map();\n                    changedFields.set(storeFieldName, aVal);\n                }\n                if (getStorageArgs) {\n                    (0,_apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_13__.invariant)(getStorageArgs.pop() === storeFieldName);\n                }\n            });\n            if (changedFields) {\n                // Shallow clone i so we can add changed fields to it.\n                incoming = (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_15__.isArray)(i) ? i.slice(0) : {\n                    ...i\n                };\n                changedFields.forEach((value, name)=>{\n                    incoming[name] = value;\n                });\n            }\n        }\n        if (mergeTree.info) {\n            return this.cache.policies.runMergeFunction(existing, incoming, mergeTree.info, context, getStorageArgs && context.store.getStorage(...getStorageArgs));\n        }\n        return incoming;\n    }\n    constructor(cache, reader, fragments){\n        this.cache = cache;\n        this.reader = reader;\n        this.fragments = fragments;\n    }\n}\nconst emptyMergeTreePool = [];\nfunction getChildMergeTree(param, name) {\n    let { map } = param;\n    if (!map.has(name)) {\n        map.set(name, emptyMergeTreePool.pop() || {\n            map: new Map()\n        });\n    }\n    return map.get(name);\n}\nfunction mergeMergeTrees(left, right) {\n    if (left === right || !right || mergeTreeIsEmpty(right)) return left;\n    if (!left || mergeTreeIsEmpty(left)) return right;\n    const info = left.info && right.info ? {\n        ...left.info,\n        ...right.info\n    } : left.info || right.info;\n    const needToMergeMaps = left.map.size && right.map.size;\n    const map = needToMergeMaps ? new Map() : left.map.size ? left.map : right.map;\n    const merged = {\n        info,\n        map\n    };\n    if (needToMergeMaps) {\n        const remainingRightKeys = new Set(right.map.keys());\n        left.map.forEach((leftTree, key)=>{\n            merged.map.set(key, mergeMergeTrees(leftTree, right.map.get(key)));\n            remainingRightKeys.delete(key);\n        });\n        remainingRightKeys.forEach((key)=>{\n            merged.map.set(key, mergeMergeTrees(right.map.get(key), left.map.get(key)));\n        });\n    }\n    return merged;\n}\nfunction mergeTreeIsEmpty(tree) {\n    return !tree || !(tree.info || tree.map.size);\n}\nfunction maybeRecycleChildMergeTree(param, name) {\n    let { map } = param;\n    const childTree = map.get(name);\n    if (childTree && mergeTreeIsEmpty(childTree)) {\n        emptyMergeTreePool.push(childTree);\n        map.delete(name);\n    }\n}\nconst warnings = new Set();\n// Note that this function is unused in production, and thus should be\n// pruned by any well-configured minifier.\nfunction warnAboutDataLoss(existingRef, incomingObj, storeFieldName, store) {\n    const getChild = (objOrRef)=>{\n        const child = store.getFieldValue(objOrRef, storeFieldName);\n        return typeof child === \"object\" && child;\n    };\n    const existing = getChild(existingRef);\n    if (!existing) return;\n    const incoming = getChild(incomingObj);\n    if (!incoming) return;\n    // It's always safe to replace a reference, since it refers to data\n    // safely stored elsewhere.\n    if ((0,_apollo_client_utilities__WEBPACK_IMPORTED_MODULE_6__.isReference)(existing)) return;\n    // If the values are structurally equivalent, we do not need to worry\n    // about incoming replacing existing.\n    if ((0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(existing, incoming)) return;\n    // If we're replacing every key of the existing object, then the\n    // existing data would be overwritten even if the objects were\n    // normalized, so warning would not be helpful here.\n    if (Object.keys(existing).every((key)=>store.getFieldValue(incoming, key) !== void 0)) {\n        return;\n    }\n    const parentType = store.getFieldValue(existingRef, \"__typename\") || store.getFieldValue(incomingObj, \"__typename\");\n    const fieldName = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.fieldNameFromStoreName)(storeFieldName);\n    const typeDotName = \"\".concat(parentType, \".\").concat(fieldName);\n    // Avoid warning more than once for the same type and field name.\n    if (warnings.has(typeDotName)) return;\n    warnings.add(typeDotName);\n    const childTypenames = [];\n    // Arrays do not have __typename fields, and always need a custom merge\n    // function, even if their elements are normalized entities.\n    if (!(0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_15__.isArray)(existing) && !(0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_15__.isArray)(incoming)) {\n        [\n            existing,\n            incoming\n        ].forEach((child)=>{\n            const typename = store.getFieldValue(child, \"__typename\");\n            if (typeof typename === \"string\" && !childTypenames.includes(typename)) {\n                childTypenames.push(typename);\n            }\n        });\n    }\n    _apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_9__.__DEV__ && _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_13__.invariant.warn(108, fieldName, parentType, childTypenames.length ? \"either ensure all objects of type \" + childTypenames.join(\" and \") + \" have an ID or a custom merge function, or \" : \"\", typeDotName, {\n        ...existing\n    }, {\n        ...incoming\n    });\n}\nfunction getTypenameFromResult(result, selectionSet, fragmentMap) {\n    let fragments;\n    for (const selection of selectionSet.selections){\n        if ((0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_19__.isField)(selection)) {\n            if (selection.name.value === \"__typename\") {\n                return result[(0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_11__.resultKeyNameFromField)(selection)];\n            }\n        } else if (fragments) {\n            fragments.push(selection);\n        } else {\n            fragments = [\n                selection\n            ];\n        }\n    }\n    if (typeof result.__typename === \"string\") {\n        return result.__typename;\n    }\n    if (fragments) {\n        for (const selection of fragments){\n            const typename = getTypenameFromResult(result, (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_20__.getFragmentFromSelection)(selection, fragmentMap).selectionSet, fragmentMap);\n            if (typeof typename === \"string\") {\n                return typename;\n            }\n        }\n    }\n} //# sourceMappingURL=writeToStore.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/cache/inmemory/writeToStore.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/core/ApolloClient.js":
/*!**********************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/core/ApolloClient.js ***!
  \**********************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApolloClient: () => (/* binding */ ApolloClient)\n/* harmony export */ });\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! graphql */ \"(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/ast.mjs\");\n/* harmony import */ var _barrel_optimize_names_map_rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! __barrel_optimize__?names=map!=!rxjs */ \"(app-pages-browser)/../../node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/operators/map.js\");\n/* harmony import */ var _apollo_client_incremental__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @apollo/client/incremental */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/incremental/handlers/notImplemented.js\");\n/* harmony import */ var _apollo_client_link__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @apollo/client/link */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/link/core/execute.js\");\n/* harmony import */ var _apollo_client_utilities__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @apollo/client/utilities */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/graphql/DocumentTransform.js\");\n/* harmony import */ var _apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @apollo/client/utilities/environment */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/environment/index.development.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/mergeOptions.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/compact.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/checkDocument.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/removeFragmentSpreads.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getMemoryInternals.js\");\n/* harmony import */ var _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @apollo/client/utilities/invariant */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/invariant/index.development.js\");\n/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../version.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/version.js\");\n/* harmony import */ var _QueryManager_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./QueryManager.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/core/QueryManager.js\");\n\n\n\n\n\n\n\n\n\n\nlet hasSuggestedDevtools = false;\n/**\n * This is the primary Apollo Client class. It is used to send GraphQL documents (i.e. queries\n * and mutations) to a GraphQL spec-compliant server over an `ApolloLink` instance,\n * receive results from the server and cache the results in a store. It also delivers updates\n * to GraphQL queries through `Observable` instances.\n */ class ApolloClient {\n    set prioritizeCacheValues(value) {\n        this.queryManager.prioritizeCacheValues = value;\n    }\n    /**\n     * Whether to prioritize cache values over network results when `query` or `watchQuery` is called.\n     * This will essentially turn a `\"network-only\"` or `\"cache-and-network\"` fetchPolicy into a `\"cache-first\"` fetchPolicy,\n     * but without influencing the `fetchPolicy` of the created `ObservableQuery` long-term.\n     *\n     * This can e.g. be used to prioritize the cache during the first render after SSR.\n     */ get prioritizeCacheValues() {\n        return this.queryManager.prioritizeCacheValues;\n    }\n    connectToDevTools() {\n        if (typeof window === \"undefined\") {\n            return;\n        }\n        const windowWithDevTools = window;\n        const devtoolsSymbol = Symbol.for(\"apollo.devtools\");\n        (windowWithDevTools[devtoolsSymbol] = windowWithDevTools[devtoolsSymbol] || []).push(this);\n        windowWithDevTools.__APOLLO_CLIENT__ = this;\n        /**\n         * Suggest installing the devtools for developers who don't have them\n         */ if (!hasSuggestedDevtools && _apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_0__.__DEV__) {\n            hasSuggestedDevtools = true;\n            if (window.document && window.top === window.self && /^(https?|file):$/.test(window.location.protocol)) {\n                setTimeout(()=>{\n                    if (!window.__APOLLO_DEVTOOLS_GLOBAL_HOOK__) {\n                        const nav = window.navigator;\n                        const ua = nav && nav.userAgent;\n                        let url;\n                        if (typeof ua === \"string\") {\n                            if (ua.indexOf(\"Chrome/\") > -1) {\n                                url = \"https://chrome.google.com/webstore/detail/\" + \"apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm\";\n                            } else if (ua.indexOf(\"Firefox/\") > -1) {\n                                url = \"https://addons.mozilla.org/en-US/firefox/addon/apollo-developer-tools/\";\n                            }\n                        }\n                        if (url) {\n                            _apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_0__.__DEV__ && _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant.log(\"Download the Apollo DevTools for a better development \" + \"experience: %s\", url);\n                        }\n                    }\n                }, 10000);\n            }\n        }\n    }\n    /**\n     * The `DocumentTransform` used to modify GraphQL documents before a request\n     * is made. If a custom `DocumentTransform` is not provided, this will be the\n     * default document transform.\n     */ get documentTransform() {\n        return this.queryManager.documentTransform;\n    }\n    /**\n     * The configured `LocalState` instance used to enable the use of `@client`\n     * fields.\n     */ get localState() {\n        return this.queryManager.localState;\n    }\n    set localState(localState) {\n        this.queryManager.localState = localState;\n    }\n    /**\n     * Call this method to terminate any active client processes, making it safe\n     * to dispose of this `ApolloClient` instance.\n     *\n     * This method performs aggressive cleanup to prevent memory leaks:\n     *\n     * - Unsubscribes all active `ObservableQuery` instances by emitting a `completed` event\n     * - Rejects all currently running queries with \"QueryManager stopped while query was in flight\"\n     * - Removes all queryRefs from the suspense cache\n     */ stop() {\n        this.queryManager.stop();\n    }\n    /**\n     * This watches the cache store of the query according to the options specified and\n     * returns an `ObservableQuery`. We can subscribe to this `ObservableQuery` and\n     * receive updated results through an observer when the cache store changes.\n     *\n     * Note that this method is not an implementation of GraphQL subscriptions. Rather,\n     * it uses Apollo's store in order to reactively deliver updates to your query results.\n     *\n     * For example, suppose you call watchQuery on a GraphQL query that fetches a person's\n     * first and last name and this person has a particular object identifier, provided by\n     * `cache.identify`. Later, a different query fetches that same person's\n     * first and last name and the first name has now changed. Then, any observers associated\n     * with the results of the first query will be updated with a new result object.\n     *\n     * Note that if the cache does not change, the subscriber will _not_ be notified.\n     *\n     * See [here](https://medium.com/apollo-stack/the-concepts-of-graphql-bc68bd819be3#.3mb0cbcmc) for\n     * a description of store reactivity.\n     */ watchQuery(options) {\n        if (this.defaultOptions.watchQuery) {\n            options = (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_2__.mergeOptions)(this.defaultOptions.watchQuery, options);\n        }\n        return this.queryManager.watchQuery(options);\n    }\n    /**\n     * This resolves a single query according to the options specified and\n     * returns a `Promise` which is either resolved with the resulting data\n     * or rejected with an error.\n     *\n     * @param options - An object of type `QueryOptions` that allows us to\n     * describe how this query should be treated e.g. whether it should hit the\n     * server at all or just resolve from the cache, etc.\n     */ query(options) {\n        if (this.defaultOptions.query) {\n            options = (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_2__.mergeOptions)(this.defaultOptions.query, options);\n        }\n        if (_apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_0__.__DEV__) {\n            (0,_apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(options.fetchPolicy !== \"cache-and-network\", 67);\n            (0,_apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(options.fetchPolicy !== \"standby\", 68);\n            (0,_apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(options.query, 69);\n            (0,_apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(options.query.kind === \"Document\", 70);\n            (0,_apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(!options.returnPartialData, 71);\n            (0,_apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(!options.pollInterval, 72);\n            (0,_apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(!options.notifyOnNetworkStatusChange, 73);\n        }\n        return this.queryManager.query(options);\n    }\n    /**\n     * This resolves a single mutation according to the options specified and returns a\n     * Promise which is either resolved with the resulting data or rejected with an\n     * error. In some cases both `data` and `errors` might be undefined, for example\n     * when `errorPolicy` is set to `'ignore'`.\n     *\n     * It takes options as an object with the following keys and values:\n     */ mutate(options) {\n        const optionsWithDefaults = (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_2__.mergeOptions)((0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_3__.compact)({\n            fetchPolicy: \"network-only\",\n            errorPolicy: \"none\"\n        }, this.defaultOptions.mutate), options);\n        if (_apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_0__.__DEV__) {\n            (0,_apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(optionsWithDefaults.mutation, 74);\n            (0,_apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(optionsWithDefaults.fetchPolicy === \"network-only\" || optionsWithDefaults.fetchPolicy === \"no-cache\", 75);\n        }\n        (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_4__.checkDocument)(optionsWithDefaults.mutation, graphql__WEBPACK_IMPORTED_MODULE_5__.OperationTypeNode.MUTATION);\n        return this.queryManager.mutate(optionsWithDefaults);\n    }\n    /**\n     * This subscribes to a graphql subscription according to the options specified and returns an\n     * `Observable` which either emits received data or an error.\n     */ subscribe(options) {\n        const cause = {};\n        const observable = this.queryManager.startGraphQLSubscription(options);\n        const mapped = observable.pipe((0,_barrel_optimize_names_map_rxjs__WEBPACK_IMPORTED_MODULE_6__.map)((result)=>({\n                ...result,\n                data: this.queryManager.maskOperation({\n                    document: options.query,\n                    data: result.data,\n                    fetchPolicy: options.fetchPolicy,\n                    cause\n                })\n            })));\n        return Object.assign(mapped, {\n            restart: observable.restart\n        });\n    }\n    readQuery(options) {\n        let optimistic = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n        return this.cache.readQuery({\n            ...options,\n            query: this.transform(options.query)\n        }, optimistic);\n    }\n    /**\n     * Watches the cache store of the fragment according to the options specified\n     * and returns an `Observable`. We can subscribe to this\n     * `Observable` and receive updated results through an\n     * observer when the cache store changes.\n     *\n     * You must pass in a GraphQL document with a single fragment or a document\n     * with multiple fragments that represent what you are reading. If you pass\n     * in a document with multiple fragments then you must also specify a\n     * `fragmentName`.\n     *\n     * @since 3.10.0\n     * @param options - An object of type `WatchFragmentOptions` that allows\n     * the cache to identify the fragment and optionally specify whether to react\n     * to optimistic updates.\n     */ watchFragment(options) {\n        const dataMasking = this.queryManager.dataMasking;\n        return this.cache.watchFragment({\n            ...options,\n            fragment: this.transform(options.fragment, dataMasking)\n        }).pipe((0,_barrel_optimize_names_map_rxjs__WEBPACK_IMPORTED_MODULE_6__.map)((result)=>{\n            // The transform will remove fragment spreads from the fragment\n            // document when dataMasking is enabled. The `maskFragment` function\n            // remains to apply warnings to fragments marked as\n            // `@unmask(mode: \"migrate\")`. Since these warnings are only applied\n            // in dev, we can skip the masking algorithm entirely for production.\n            if (_apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_0__.__DEV__) {\n                if (dataMasking) {\n                    const data = this.queryManager.maskFragment({\n                        ...options,\n                        data: result.data\n                    });\n                    return {\n                        ...result,\n                        data\n                    };\n                }\n            }\n            return result;\n        }));\n    }\n    readFragment(options) {\n        let optimistic = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n        return this.cache.readFragment({\n            ...options,\n            fragment: this.transform(options.fragment)\n        }, optimistic);\n    }\n    /**\n     * Writes some data in the shape of the provided GraphQL query directly to\n     * the store. This method will start at the root query. To start at a\n     * specific id returned by `cache.identify` then use `writeFragment`.\n     */ writeQuery(options) {\n        const ref = this.cache.writeQuery(options);\n        if (options.broadcast !== false) {\n            this.queryManager.broadcastQueries();\n        }\n        return ref;\n    }\n    /**\n     * Writes some data in the shape of the provided GraphQL fragment directly to\n     * the store. This method will write to a GraphQL fragment from any arbitrary\n     * id that is currently cached, unlike `writeQuery` which will only write\n     * from the root query.\n     *\n     * You must pass in a GraphQL document with a single fragment or a document\n     * with multiple fragments that represent what you are writing. If you pass\n     * in a document with multiple fragments then you must also specify a\n     * `fragmentName`.\n     */ writeFragment(options) {\n        const ref = this.cache.writeFragment(options);\n        if (options.broadcast !== false) {\n            this.queryManager.broadcastQueries();\n        }\n        return ref;\n    }\n    __actionHookForDevTools(cb) {\n        this.devToolsHookCb = cb;\n    }\n    __requestRaw(request) {\n        return (0,_apollo_client_link__WEBPACK_IMPORTED_MODULE_7__.execute)(this.link, request, {\n            client: this\n        });\n    }\n    /**\n     * Resets your entire store by clearing out your cache and then re-executing\n     * all of your active queries. This makes it so that you may guarantee that\n     * there is no data left in your store from a time before you called this\n     * method.\n     *\n     * `resetStore()` is useful when your user just logged out. You’ve removed the\n     * user session, and you now want to make sure that any references to data you\n     * might have fetched while the user session was active is gone.\n     *\n     * It is important to remember that `resetStore()` _will_ refetch any active\n     * queries. This means that any components that might be mounted will execute\n     * their queries again using your network interface. If you do not want to\n     * re-execute any queries then you should make sure to stop watching any\n     * active queries.\n     */ resetStore() {\n        return Promise.resolve().then(()=>this.queryManager.clearStore({\n                discardWatches: false\n            })).then(()=>Promise.all(this.resetStoreCallbacks.map((fn)=>fn()))).then(()=>this.refetchObservableQueries());\n    }\n    /**\n     * Remove all data from the store. Unlike `resetStore`, `clearStore` will\n     * not refetch any active queries.\n     */ clearStore() {\n        return Promise.resolve().then(()=>this.queryManager.clearStore({\n                discardWatches: true\n            })).then(()=>Promise.all(this.clearStoreCallbacks.map((fn)=>fn())));\n    }\n    /**\n     * Allows callbacks to be registered that are executed when the store is\n     * reset. `onResetStore` returns an unsubscribe function that can be used\n     * to remove registered callbacks.\n     */ onResetStore(cb) {\n        this.resetStoreCallbacks.push(cb);\n        return ()=>{\n            this.resetStoreCallbacks = this.resetStoreCallbacks.filter((c)=>c !== cb);\n        };\n    }\n    /**\n     * Allows callbacks to be registered that are executed when the store is\n     * cleared. `onClearStore` returns an unsubscribe function that can be used\n     * to remove registered callbacks.\n     */ onClearStore(cb) {\n        this.clearStoreCallbacks.push(cb);\n        return ()=>{\n            this.clearStoreCallbacks = this.clearStoreCallbacks.filter((c)=>c !== cb);\n        };\n    }\n    /**\n     * Refetches all of your active queries.\n     *\n     * `refetchObservableQueries()` is useful if you want to bring the client back to proper state in case of a network outage\n     *\n     * It is important to remember that `refetchObservableQueries()` _will_ refetch any active\n     * queries. This means that any components that might be mounted will execute\n     * their queries again using your network interface. If you do not want to\n     * re-execute any queries then you should make sure to stop watching any\n     * active queries.\n     * Takes optional parameter `includeStandby` which will include queries in standby-mode when refetching.\n     *\n     * Note: `cache-only` queries are not refetched by this function.\n     */ refetchObservableQueries(includeStandby) {\n        return this.queryManager.refetchObservableQueries(includeStandby);\n    }\n    /**\n     * Refetches specified active queries. Similar to \"refetchObservableQueries()\" but with a specific list of queries.\n     *\n     * `refetchQueries()` is useful for use cases to imperatively refresh a selection of queries.\n     *\n     * It is important to remember that `refetchQueries()` _will_ refetch specified active\n     * queries. This means that any components that might be mounted will execute\n     * their queries again using your network interface. If you do not want to\n     * re-execute any queries then you should make sure to stop watching any\n     * active queries.\n     */ refetchQueries(options) {\n        const map = this.queryManager.refetchQueries(options);\n        const queries = [];\n        const results = [];\n        map.forEach((result, obsQuery)=>{\n            queries.push(obsQuery);\n            results.push(result);\n        });\n        const result = Promise.all(results);\n        // In case you need the raw results immediately, without awaiting\n        // Promise.all(results):\n        result.queries = queries;\n        result.results = results;\n        // If you decide to ignore the result Promise because you're using\n        // result.queries and result.results instead, you shouldn't have to worry\n        // about preventing uncaught rejections for the Promise.all result.\n        result.catch((error)=>{\n            _apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_0__.__DEV__ && _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant.debug(76, error);\n        });\n        return result;\n    }\n    /**\n     * Get all currently active `ObservableQuery` objects, in a `Set`.\n     *\n     * An \"active\" query is one that has observers and a `fetchPolicy` other than\n     * \"standby\" or \"cache-only\".\n     *\n     * You can include all `ObservableQuery` objects (including the inactive ones)\n     * by passing \"all\" instead of \"active\", or you can include just a subset of\n     * active queries by passing an array of query names or DocumentNode objects.\n     *\n     * Note: This method only returns queries that have active subscribers. Queries\n     * without subscribers are not tracked by the client.\n     */ getObservableQueries() {\n        let include = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"active\";\n        return this.queryManager.getObservableQueries(include);\n    }\n    /**\n     * Exposes the cache's complete state, in a serializable format for later restoration.\n     */ extract(optimistic) {\n        return this.cache.extract(optimistic);\n    }\n    /**\n     * Replaces existing state in the cache (if any) with the values expressed by\n     * `serializedState`.\n     *\n     * Called when hydrating a cache (server side rendering, or offline storage),\n     * and also (potentially) during hot reloads.\n     */ restore(serializedState) {\n        return this.cache.restore(serializedState);\n    }\n    /**\n     * Define a new ApolloLink (or link chain) that Apollo Client will use.\n     */ setLink(newLink) {\n        this.link = newLink;\n    }\n    get defaultContext() {\n        return this.queryManager.defaultContext;\n    }\n    transform(document) {\n        let dataMasking = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n        const transformed = this.queryManager.transform(document);\n        return dataMasking ? this.maskedFragmentTransform.transformDocument(transformed) : transformed;\n    }\n    /**\n     * Constructs an instance of `ApolloClient`.\n     *\n     * @example\n     *\n     * ```js\n     * import { ApolloClient, InMemoryCache } from \"@apollo/client\";\n     *\n     * const cache = new InMemoryCache();\n     *\n     * const client = new ApolloClient({\n     *   // Provide required constructor fields\n     *   cache: cache,\n     *   uri: \"http://localhost:4000/\",\n     *\n     *   // Provide some optional constructor fields\n     *   name: \"react-web-client\",\n     *   version: \"1.3\",\n     *   queryDeduplication: false,\n     *   defaultOptions: {\n     *     watchQuery: {\n     *       fetchPolicy: \"cache-and-network\",\n     *     },\n     *   },\n     * });\n     * ```\n     */ constructor(options){\n        this.resetStoreCallbacks = [];\n        this.clearStoreCallbacks = [];\n        this.maskedFragmentTransform = new _apollo_client_utilities__WEBPACK_IMPORTED_MODULE_8__.DocumentTransform(_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_9__.removeMaskedFragmentSpreads);\n        if (_apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_0__.__DEV__) {\n            (0,_apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(options.cache, 65);\n            (0,_apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(options.link, 66);\n        }\n        const { cache, documentTransform, ssrMode = false, ssrForceFetchDelay = 0, queryDeduplication = true, defaultOptions, defaultContext, assumeImmutableResults = cache.assumeImmutableResults, localState, devtools, dataMasking, link, incrementalHandler = new _apollo_client_incremental__WEBPACK_IMPORTED_MODULE_10__.NotImplementedHandler() } = options;\n        this.link = link;\n        this.cache = cache;\n        this.queryDeduplication = queryDeduplication;\n        this.defaultOptions = defaultOptions || {};\n        var _devtools_enabled;\n        this.devtoolsConfig = {\n            ...devtools,\n            enabled: (_devtools_enabled = devtools === null || devtools === void 0 ? void 0 : devtools.enabled) !== null && _devtools_enabled !== void 0 ? _devtools_enabled : _apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_0__.__DEV__\n        };\n        this.watchQuery = this.watchQuery.bind(this);\n        this.query = this.query.bind(this);\n        this.mutate = this.mutate.bind(this);\n        this.watchFragment = this.watchFragment.bind(this);\n        this.resetStore = this.resetStore.bind(this);\n        this.reFetchObservableQueries = this.refetchObservableQueries = this.refetchObservableQueries.bind(this);\n        this.version = _version_js__WEBPACK_IMPORTED_MODULE_11__.version;\n        this.queryManager = new _QueryManager_js__WEBPACK_IMPORTED_MODULE_12__.QueryManager({\n            client: this,\n            defaultOptions: this.defaultOptions,\n            defaultContext,\n            documentTransform,\n            queryDeduplication,\n            ssrMode,\n            dataMasking: !!dataMasking,\n            clientOptions: options,\n            incrementalHandler,\n            assumeImmutableResults,\n            onBroadcast: this.devtoolsConfig.enabled ? ()=>{\n                if (this.devToolsHookCb) {\n                    this.devToolsHookCb();\n                }\n            } : void 0,\n            localState\n        });\n        this.prioritizeCacheValues = ssrMode || ssrForceFetchDelay > 0;\n        if (ssrForceFetchDelay) {\n            setTimeout(()=>{\n                this.prioritizeCacheValues = false;\n            }, ssrForceFetchDelay);\n        }\n        if (this.devtoolsConfig.enabled) this.connectToDevTools();\n    }\n}\nif (_apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_0__.__DEV__) {\n    ApolloClient.prototype.getMemoryInternals = _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_13__.getApolloClientMemoryInternals;\n} //# sourceMappingURL=ApolloClient.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/core/ApolloClient.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/core/ObservableQuery.js":
/*!*************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/core/ObservableQuery.js ***!
  \*************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ObservableQuery: () => (/* binding */ ObservableQuery),\n/* harmony export */   logMissingFieldErrors: () => (/* binding */ logMissingFieldErrors)\n/* harmony export */ });\n/* harmony import */ var _wry_equality__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wry/equality */ \"(app-pages-browser)/../../node_modules/.pnpm/@wry+equality@0.5.7/node_modules/@wry/equality/lib/index.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_Observable_Subject_share_tap_rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,Observable,Subject,share,tap!=!rxjs */ \"(app-pages-browser)/../../node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_Observable_Subject_share_tap_rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,Observable,Subject,share,tap!=!rxjs */ \"(app-pages-browser)/../../node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/operators/tap.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_Observable_Subject_share_tap_rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,Observable,Subject,share,tap!=!rxjs */ \"(app-pages-browser)/../../node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/Subject.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_Observable_Subject_share_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,Observable,Subject,share,tap!=!rxjs */ \"(app-pages-browser)/../../node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/Observable.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_Observable_Subject_share_tap_rxjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,Observable,Subject,share,tap!=!rxjs */ \"(app-pages-browser)/../../node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/operators/share.js\");\n/* harmony import */ var _apollo_client_utilities__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @apollo/client/utilities */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/isNetworkRequestInFlight.js\");\n/* harmony import */ var _apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @apollo/client/utilities/environment */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/environment/index.development.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/filterMap.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/equalByQuery.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getQueryDefinition.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getOperationName.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/compact.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/toQueryResult.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/preventUnhandledRejection.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getOperationDefinition.js\");\n/* harmony import */ var _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @apollo/client/utilities/invariant */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/invariant/index.development.js\");\n/* harmony import */ var _networkStatus_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./networkStatus.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/core/networkStatus.js\");\n\n\n\n\n\n\n\nconst { assign, hasOwnProperty } = Object;\nconst uninitialized = {\n    loading: true,\n    networkStatus: _networkStatus_js__WEBPACK_IMPORTED_MODULE_1__.NetworkStatus.loading,\n    data: undefined,\n    dataState: \"empty\",\n    partial: true\n};\nconst empty = {\n    loading: false,\n    networkStatus: _networkStatus_js__WEBPACK_IMPORTED_MODULE_1__.NetworkStatus.ready,\n    data: undefined,\n    dataState: \"empty\",\n    partial: true\n};\nclass ObservableQuery {\n    // The `query` computed property will always reflect the document transformed\n    // by the last run query. `this.options.query` will always reflect the raw\n    // untransformed query to ensure document transforms with runtime conditionals\n    // are run on the original document.\n    get query() {\n        return this.lastQuery;\n    }\n    /**\n     * An object containing the variables that were provided for the query.\n     */ get variables() {\n        return this.options.variables;\n    }\n    get networkStatus() {\n        return this.subject.getValue().result.networkStatus;\n    }\n    initializeObservablesQueue() {\n        this.subject = new _barrel_optimize_names_BehaviorSubject_Observable_Subject_share_tap_rxjs__WEBPACK_IMPORTED_MODULE_2__.BehaviorSubject({\n            query: this.query,\n            variables: this.variables,\n            result: uninitialized,\n            meta: {}\n        });\n        const observable = this.subject.pipe((0,_barrel_optimize_names_BehaviorSubject_Observable_Subject_share_tap_rxjs__WEBPACK_IMPORTED_MODULE_3__.tap)({\n            subscribe: ()=>{\n                if (!this.subject.observed) {\n                    this.reobserve();\n                    // TODO: See if we can rework updatePolling to better handle this.\n                    // reobserve calls updatePolling but this `subscribe` callback is\n                    // called before the subject is subscribed to so `updatePolling`\n                    // can't accurately detect if there is an active subscription.\n                    // Calling it again here ensures that it can detect if it can poll\n                    setTimeout(()=>this.updatePolling());\n                }\n            },\n            unsubscribe: ()=>{\n                if (!this.subject.observed) {\n                    this.tearDownQuery();\n                }\n            }\n        }), (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_4__.filterMap)((param, context)=>{\n            let { query, variables, result: current, meta } = param;\n            const { shouldEmit } = meta;\n            if (current === uninitialized) {\n                // reset internal state after `ObservableQuery.reset()`\n                context.previous = undefined;\n                context.previousVariables = undefined;\n            }\n            if (this.options.fetchPolicy === \"standby\" || shouldEmit === 2 /* EmitBehavior.never */ ) return;\n            if (shouldEmit === 1 /* EmitBehavior.force */ ) return emit();\n            const { previous, previousVariables } = context;\n            if (previous) {\n                const documentInfo = this.queryManager.getDocumentInfo(query);\n                const dataMasking = this.queryManager.dataMasking;\n                const maskedQuery = dataMasking ? documentInfo.nonReactiveQuery : query;\n                const resultIsEqual = dataMasking || documentInfo.hasNonreactiveDirective ? (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_5__.equalByQuery)(maskedQuery, previous, current, variables) : (0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(previous, current);\n                if (resultIsEqual && (0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(previousVariables, variables)) {\n                    return;\n                }\n            }\n            if (shouldEmit === 3 /* EmitBehavior.networkStatusChange */  && (!this.options.notifyOnNetworkStatusChange || (0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(previous, current))) {\n                return;\n            }\n            return emit();\n            function emit() {\n                context.previous = current;\n                context.previousVariables = variables;\n                return current;\n            }\n        }, ()=>({})));\n        this.pipe = observable.pipe.bind(observable);\n        this.subscribe = observable.subscribe.bind(observable);\n        this.input = new _barrel_optimize_names_BehaviorSubject_Observable_Subject_share_tap_rxjs__WEBPACK_IMPORTED_MODULE_6__.Subject();\n        // we want to feed many streams into `this.subject`, but none of them should\n        // be able to close `this.input`\n        this.input.complete = ()=>{};\n        this.input.pipe(this.operator).subscribe(this.subject);\n    }\n    /**\n    * @internal\n    * \n    * @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n    */ getCacheDiff() {\n        let { optimistic = true } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        return this.queryManager.cache.diff({\n            query: this.query,\n            variables: this.variables,\n            returnPartialData: true,\n            optimistic\n        });\n    }\n    getInitialResult(initialFetchPolicy) {\n        const fetchPolicy = this.queryManager.prioritizeCacheValues ? \"cache-first\" : initialFetchPolicy || this.options.fetchPolicy;\n        const cacheResult = ()=>{\n            const diff = this.getCacheDiff();\n            var _diff_result;\n            // TODO: queryInfo.getDiff should handle this since cache.diff returns a\n            // null when returnPartialData is false\n            const data = this.options.returnPartialData || diff.complete ? (_diff_result = diff.result) !== null && _diff_result !== void 0 ? _diff_result : undefined : undefined;\n            return this.maskResult({\n                data,\n                dataState: diff.complete ? \"complete\" : data === undefined ? \"empty\" : \"partial\",\n                loading: !diff.complete,\n                networkStatus: diff.complete ? _networkStatus_js__WEBPACK_IMPORTED_MODULE_1__.NetworkStatus.ready : _networkStatus_js__WEBPACK_IMPORTED_MODULE_1__.NetworkStatus.loading,\n                partial: !diff.complete\n            });\n        };\n        switch(fetchPolicy){\n            case \"cache-only\":\n                {\n                    return {\n                        ...cacheResult(),\n                        loading: false,\n                        networkStatus: _networkStatus_js__WEBPACK_IMPORTED_MODULE_1__.NetworkStatus.ready\n                    };\n                }\n            case \"cache-first\":\n                return cacheResult();\n            case \"cache-and-network\":\n                return {\n                    ...cacheResult(),\n                    loading: true,\n                    networkStatus: _networkStatus_js__WEBPACK_IMPORTED_MODULE_1__.NetworkStatus.loading\n                };\n            case \"standby\":\n                return empty;\n            default:\n                return uninitialized;\n        }\n    }\n    resubscribeCache() {\n        const { variables, fetchPolicy } = this.options;\n        const query = this.query;\n        const shouldUnsubscribe = fetchPolicy === \"standby\" || fetchPolicy === \"no-cache\" || this.waitForNetworkResult;\n        const shouldResubscribe = !isEqualQuery({\n            query,\n            variables\n        }, this.unsubscribeFromCache) && !this.waitForNetworkResult;\n        if (shouldUnsubscribe || shouldResubscribe) {\n            var _this_unsubscribeFromCache, _this;\n            (_this_unsubscribeFromCache = (_this = this).unsubscribeFromCache) === null || _this_unsubscribeFromCache === void 0 ? void 0 : _this_unsubscribeFromCache.call(_this);\n        }\n        if (shouldUnsubscribe || !shouldResubscribe) {\n            return;\n        }\n        const watch = {\n            query,\n            variables,\n            optimistic: true,\n            watcher: this,\n            callback: (diff)=>{\n                const info = this.queryManager.getDocumentInfo(query);\n                if (info.hasClientExports || info.hasForcedResolvers) {\n                    // If this is not set to something different than `diff`, we will\n                    // not be notified about future cache changes with an equal `diff`.\n                    // That would be the case if we are working with client-only fields\n                    // that are forced or with `exports` fields that might change, causing\n                    // local resovlers to return a new result.\n                    // This is based on an implementation detail of `InMemoryCache`, which\n                    // is not optimal - but the only alternative to this would be to\n                    // resubscribe to the cache asynchonouly, which would bear the risk of\n                    // missing further synchronous updates.\n                    watch.lastDiff = undefined;\n                }\n                if (watch.lastOwnDiff === diff) {\n                    // skip cache updates that were caused by our own writes\n                    return;\n                }\n                const { result: previousResult } = this.subject.getValue();\n                if (!diff.complete && // If we are trying to deliver an incomplete cache result, we avoid\n                // reporting it if the query has errored, otherwise we let the broadcast try\n                // and repair the partial result by refetching the query. This check avoids\n                // a situation where a query that errors and another succeeds with\n                // overlapping data does not report the partial data result to the errored\n                // query.\n                //\n                // See https://github.com/apollographql/apollo-client/issues/11400 for more\n                // information on this issue.\n                (previousResult.error || // Prevent to schedule a notify directly after the `ObservableQuery`\n                // has been `reset` (which will set the `previousResult` to `uninitialized` or `empty`)\n                // as in those cases, `resetCache` will manually call `refetch` with more intentional timing.\n                previousResult === uninitialized || previousResult === empty)) {\n                    return;\n                }\n                if (!(0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(previousResult.data, diff.result)) {\n                    this.scheduleNotify();\n                }\n            }\n        };\n        const cancelWatch = this.queryManager.cache.watch(watch);\n        this.unsubscribeFromCache = Object.assign(()=>{\n            this.unsubscribeFromCache = undefined;\n            cancelWatch();\n        }, {\n            query,\n            variables\n        });\n    }\n    getCurrentResult() {\n        const { result: current } = this.subject.getValue();\n        let value = // if the `current` result is in an error state, we will always return that\n        // error state, even if we have no observers\n        current.networkStatus === _networkStatus_js__WEBPACK_IMPORTED_MODULE_1__.NetworkStatus.error || // if we have observers, we are watching the cache and\n        // this.subject.getValue() will always be up to date\n        this.hasObservers() || // if we are using a `no-cache` fetch policy in which case this\n        // `ObservableQuery` cannot have been updated from the outside - in\n        // that case, we prefer to keep the current value\n        this.options.fetchPolicy === \"no-cache\" ? current : this.getInitialResult();\n        if (value === uninitialized) {\n            value = this.getInitialResult();\n        }\n        if (!(0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(this.stableLastResult, value)) {\n            this.stableLastResult = value;\n        }\n        return this.stableLastResult;\n    }\n    /**\n     * Update the variables of this observable query, and fetch the new results.\n     * This method should be preferred over `setVariables` in most use cases.\n     *\n     * Returns a `ResultPromise` with an additional `.retain()` method. Calling\n     * `.retain()` keeps the network operation running even if the `ObservableQuery`\n     * no longer requires the result.\n     *\n     * Note: `refetch()` guarantees that a value will be emitted from the\n     * observable, even if the result is deep equal to the previous value.\n     *\n     * @param variables - The new set of variables. If there are missing variables,\n     * the previous values of those variables will be used.\n     */ refetch(variables) {\n        const { fetchPolicy } = this.options;\n        const reobserveOptions = {\n            // Always disable polling for refetches.\n            pollInterval: 0\n        };\n        // Unless the provided fetchPolicy always consults the network\n        // (no-cache, network-only, or cache-and-network), override it with\n        // network-only to force the refetch for this fetchQuery call.\n        if (fetchPolicy === \"no-cache\") {\n            reobserveOptions.fetchPolicy = \"no-cache\";\n        } else {\n            reobserveOptions.fetchPolicy = \"network-only\";\n        }\n        if (_apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_7__.__DEV__ && variables && hasOwnProperty.call(variables, \"variables\")) {\n            const queryDef = (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_8__.getQueryDefinition)(this.query);\n            const vars = queryDef.variableDefinitions;\n            if (!vars || !vars.some((v)=>v.variable.name.value === \"variables\")) {\n                var _queryDef_name;\n                _apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_7__.__DEV__ && _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_9__.invariant.warn(77, variables, ((_queryDef_name = queryDef.name) === null || _queryDef_name === void 0 ? void 0 : _queryDef_name.value) || queryDef);\n            }\n        }\n        if (variables && !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(this.variables, variables)) {\n            // Update the existing options with new variables\n            reobserveOptions.variables = this.options.variables = this.getVariablesWithDefaults({\n                ...this.variables,\n                ...variables\n            });\n        }\n        this._lastWrite = undefined;\n        return this._reobserve(reobserveOptions, {\n            newNetworkStatus: _networkStatus_js__WEBPACK_IMPORTED_MODULE_1__.NetworkStatus.refetch\n        });\n    }\n    fetchMore(param) {\n        let { query, variables, context, errorPolicy, updateQuery } = param;\n        (0,_apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_9__.invariant)(this.options.fetchPolicy !== \"cache-only\", 78, (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_10__.getOperationName)(this.query, \"(anonymous)\"));\n        const combinedOptions = {\n            ...(0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_11__.compact)(this.options, {\n                errorPolicy: \"none\"\n            }, {\n                query,\n                context,\n                errorPolicy\n            }),\n            variables: query ? variables : {\n                ...this.variables,\n                ...variables\n            },\n            // The fetchMore request goes immediately to the network and does\n            // not automatically write its result to the cache (hence no-cache\n            // instead of network-only), because we allow the caller of\n            // fetchMore to provide an updateQuery callback that determines how\n            // the data gets written to the cache.\n            fetchPolicy: \"no-cache\",\n            notifyOnNetworkStatusChange: this.options.notifyOnNetworkStatusChange\n        };\n        combinedOptions.query = this.transformDocument(combinedOptions.query);\n        // If a temporary query is passed to `fetchMore`, we don't want to store\n        // it as the last query result since it may be an optimized query for\n        // pagination. We will however run the transforms on the original document\n        // as well as the document passed in `fetchMoreOptions` to ensure the cache\n        // uses the most up-to-date document which may rely on runtime conditionals.\n        this.lastQuery = query ? this.transformDocument(this.options.query) : combinedOptions.query;\n        let wasUpdated = false;\n        const isCached = this.options.fetchPolicy !== \"no-cache\";\n        if (!isCached) {\n            (0,_apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_9__.invariant)(updateQuery, 79);\n        }\n        const { finalize, pushNotification } = this.pushOperation(_networkStatus_js__WEBPACK_IMPORTED_MODULE_1__.NetworkStatus.fetchMore);\n        pushNotification({\n            source: \"newNetworkStatus\",\n            kind: \"N\",\n            value: {}\n        }, {\n            shouldEmit: 3 /* EmitBehavior.networkStatusChange */ \n        });\n        return this.queryManager.fetchQuery(combinedOptions, _networkStatus_js__WEBPACK_IMPORTED_MODULE_1__.NetworkStatus.fetchMore).then((fetchMoreResult)=>{\n            // disable the `fetchMore` override that is currently active\n            // the next updates caused by this should not be `fetchMore` anymore,\n            // but `ready` or whatever other calculated loading state is currently\n            // appropriate\n            finalize();\n            if (isCached) {\n                // Performing this cache update inside a cache.batch transaction ensures\n                // any affected cache.watch watchers are notified at most once about any\n                // updates. Most watchers will be using the QueryInfo class, which\n                // responds to notifications by calling reobserveCacheFirst to deliver\n                // fetchMore cache results back to this ObservableQuery.\n                this.queryManager.cache.batch({\n                    update: (cache)=>{\n                        if (updateQuery) {\n                            cache.updateQuery({\n                                query: this.query,\n                                variables: this.variables,\n                                returnPartialData: true,\n                                optimistic: false\n                            }, (previous)=>updateQuery(previous, {\n                                    fetchMoreResult: fetchMoreResult.data,\n                                    variables: combinedOptions.variables\n                                }));\n                        } else {\n                            // If we're using a field policy instead of updateQuery, the only\n                            // thing we need to do is write the new data to the cache using\n                            // combinedOptions.variables (instead of this.variables, which is\n                            // what this.updateQuery uses, because it works by abusing the\n                            // original field value, keyed by the original variables).\n                            cache.writeQuery({\n                                query: combinedOptions.query,\n                                variables: combinedOptions.variables,\n                                data: fetchMoreResult.data\n                            });\n                        }\n                    },\n                    onWatchUpdated: (watch)=>{\n                        if (watch.watcher === this) {\n                            wasUpdated = true;\n                        }\n                    }\n                });\n            } else {\n                // There is a possibility `lastResult` may not be set when\n                // `fetchMore` is called which would cause this to crash. This should\n                // only happen if we haven't previously reported a result. We don't\n                // quite know what the right behavior should be here since this block\n                // of code runs after the fetch result has executed on the network.\n                // We plan to let it crash in the meantime.\n                //\n                // If we get bug reports due to the `data` property access on\n                // undefined, this should give us a real-world scenario that we can\n                // use to test against and determine the right behavior. If we do end\n                // up changing this behavior, this may require, for example, an\n                // adjustment to the types on `updateQuery` since that function\n                // expects that the first argument always contains previous result\n                // data, but not `undefined`.\n                const lastResult = this.getCurrentResult();\n                const data = updateQuery(lastResult.data, {\n                    fetchMoreResult: fetchMoreResult.data,\n                    variables: combinedOptions.variables\n                });\n                // was reportResult\n                pushNotification({\n                    kind: \"N\",\n                    value: {\n                        ...lastResult,\n                        networkStatus: _networkStatus_js__WEBPACK_IMPORTED_MODULE_1__.NetworkStatus.ready,\n                        // will be overwritten anyways, just here for types sake\n                        loading: false,\n                        data: data,\n                        dataState: lastResult.dataState === \"streaming\" ? \"streaming\" : \"complete\"\n                    },\n                    source: \"network\"\n                });\n            }\n            return this.maskResult(fetchMoreResult);\n        }).finally(()=>{\n            // call `finalize` a second time in case the `.then` case above was not reached\n            finalize();\n            // In case the cache writes above did not generate a broadcast\n            // notification (which would have been intercepted by onWatchUpdated),\n            // likely because the written data were the same as what was already in\n            // the cache, we still want fetchMore to deliver its final loading:false\n            // result with the unchanged data.\n            if (isCached && !wasUpdated) {\n                pushNotification({\n                    kind: \"N\",\n                    source: \"newNetworkStatus\",\n                    value: {}\n                }, {\n                    shouldEmit: 1 /* EmitBehavior.force */ \n                });\n            }\n        });\n    }\n    // XXX the subscription variables are separate from the query variables.\n    // if you want to update subscription variables, right now you have to do that separately,\n    // and you can only do it by stopping the subscription and then subscribing again with new variables.\n    /**\n     * A function that enables you to execute a [subscription](https://www.apollographql.com/docs/react/data/subscriptions/), usually to subscribe to specific fields that were included in the query.\n     *\n     * This function returns _another_ function that you can call to terminate the subscription.\n     */ subscribeToMore(options) {\n        const subscription = this.queryManager.startGraphQLSubscription({\n            query: options.document,\n            variables: options.variables,\n            context: options.context\n        }).subscribe({\n            next: (subscriptionData)=>{\n                const { updateQuery, onError } = options;\n                const { error } = subscriptionData;\n                if (error) {\n                    if (onError) {\n                        onError(error);\n                    } else {\n                        _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_9__.invariant.error(80, error);\n                    }\n                    return;\n                }\n                if (updateQuery) {\n                    this.updateQuery((previous, updateOptions)=>updateQuery(previous, {\n                            subscriptionData: subscriptionData,\n                            ...updateOptions\n                        }));\n                }\n            }\n        });\n        this.subscriptions.add(subscription);\n        return ()=>{\n            if (this.subscriptions.delete(subscription)) {\n                subscription.unsubscribe();\n            }\n        };\n    }\n    /**\n    * @internal\n    * \n    * @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n    */ applyOptions(newOptions) {\n        const mergedOptions = (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_11__.compact)(this.options, newOptions || {});\n        assign(this.options, mergedOptions);\n        this.updatePolling();\n    }\n    /**\n     * Update the variables of this observable query, and fetch the new results\n     * if they've changed. Most users should prefer `refetch` instead of\n     * `setVariables` in order to to be properly notified of results even when\n     * they come from the cache.\n     *\n     * Note: `setVariables()` guarantees that a value will be emitted from the\n     * observable, even if the result is deeply equal to the previous value.\n     *\n     * Note: the promise will resolve with the last emitted result\n     * when either the variables match the current variables or there\n     * are no subscribers to the query.\n     *\n     * @param variables - The new set of variables. If there are missing variables,\n     * the previous values of those variables will be used.\n     */ async setVariables(variables) {\n        variables = this.getVariablesWithDefaults(variables);\n        if ((0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(this.variables, variables)) {\n            // If we have no observers, then we don't actually want to make a network\n            // request. As soon as someone observes the query, the request will kick\n            // off. For now, we just store any changes. (See #1077)\n            return (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_12__.toQueryResult)(this.getCurrentResult());\n        }\n        this.options.variables = variables;\n        // See comment above\n        if (!this.hasObservers()) {\n            return (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_12__.toQueryResult)(this.getCurrentResult());\n        }\n        return this._reobserve({\n            // Reset options.fetchPolicy to its original value.\n            fetchPolicy: this.options.initialFetchPolicy,\n            variables\n        }, {\n            newNetworkStatus: _networkStatus_js__WEBPACK_IMPORTED_MODULE_1__.NetworkStatus.setVariables\n        });\n    }\n    /**\n     * A function that enables you to update the query's cached result without executing a followup GraphQL operation.\n     *\n     * See [using updateQuery and updateFragment](https://www.apollographql.com/docs/react/caching/cache-interaction/#using-updatequery-and-updatefragment) for additional information.\n     */ updateQuery(mapFn) {\n        const { queryManager } = this;\n        const { result, complete } = this.getCacheDiff({\n            optimistic: false\n        });\n        const newResult = mapFn(result, {\n            variables: this.variables,\n            complete: !!complete,\n            previousData: result\n        });\n        if (newResult) {\n            queryManager.cache.writeQuery({\n                query: this.options.query,\n                data: newResult,\n                variables: this.variables\n            });\n            queryManager.broadcastQueries();\n        }\n    }\n    /**\n     * A function that instructs the query to begin re-executing at a specified interval (in milliseconds).\n     */ startPolling(pollInterval) {\n        this.options.pollInterval = pollInterval;\n        this.updatePolling();\n    }\n    /**\n     * A function that instructs the query to stop polling after a previous call to `startPolling`.\n     */ stopPolling() {\n        this.options.pollInterval = 0;\n        this.updatePolling();\n    }\n    // Update options.fetchPolicy according to options.nextFetchPolicy.\n    applyNextFetchPolicy(reason, // It's possible to use this method to apply options.nextFetchPolicy to\n    // options.fetchPolicy even if options !== this.options, though that happens\n    // most often when the options are temporary, used for only one request and\n    // then thrown away, so nextFetchPolicy may not end up mattering.\n    options) {\n        if (options.nextFetchPolicy) {\n            const { fetchPolicy = \"cache-first\", initialFetchPolicy = fetchPolicy } = options;\n            if (fetchPolicy === \"standby\") {\n            // Do nothing, leaving options.fetchPolicy unchanged.\n            } else if (typeof options.nextFetchPolicy === \"function\") {\n                // When someone chooses \"cache-and-network\" or \"network-only\" as their\n                // initial FetchPolicy, they often do not want future cache updates to\n                // trigger unconditional network requests, which is what repeatedly\n                // applying the \"cache-and-network\" or \"network-only\" policies would\n                // seem to imply. Instead, when the cache reports an update after the\n                // initial network request, it may be desirable for subsequent network\n                // requests to be triggered only if the cache result is incomplete. To\n                // that end, the options.nextFetchPolicy option provides an easy way to\n                // update options.fetchPolicy after the initial network request, without\n                // having to call observableQuery.reobserve.\n                options.fetchPolicy = options.nextFetchPolicy.call(options, fetchPolicy, {\n                    reason,\n                    options,\n                    observable: this,\n                    initialFetchPolicy\n                });\n            } else if (reason === \"variables-changed\") {\n                options.fetchPolicy = initialFetchPolicy;\n            } else {\n                options.fetchPolicy = options.nextFetchPolicy;\n            }\n        }\n        return options.fetchPolicy;\n    }\n    fetch(options, networkStatus, fetchQuery, operator) {\n        var _options;\n        // TODO Make sure we update the networkStatus (and infer fetchVariables)\n        // before actually committing to the fetch.\n        const initialFetchPolicy = this.options.fetchPolicy;\n        var _context;\n        (_context = (_options = options).context) !== null && _context !== void 0 ? _context : _options.context = {};\n        let synchronouslyEmitted = false;\n        const onCacheHit = ()=>{\n            synchronouslyEmitted = true;\n        };\n        const fetchQueryOperator = // hook with `subscribe` and we care for \"directly before and after subscription\"\n        (source)=>new _barrel_optimize_names_BehaviorSubject_Observable_Subject_share_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.Observable((subscriber)=>{\n                try {\n                    return source.subscribe({\n                        next (value) {\n                            synchronouslyEmitted = true;\n                            subscriber.next(value);\n                        },\n                        error: (error)=>subscriber.error(error),\n                        complete: ()=>subscriber.complete()\n                    });\n                } finally{\n                    if (!synchronouslyEmitted) {\n                        operation.override = networkStatus;\n                        this.input.next({\n                            kind: \"N\",\n                            source: \"newNetworkStatus\",\n                            value: {\n                                resetError: true\n                            },\n                            query,\n                            variables,\n                            meta: {\n                                shouldEmit: 3 /* EmitBehavior.networkStatusChange */ ,\n                                /*\n                             * The moment this notification is emitted, `nextFetchPolicy`\n                             * might already have switched from a `network-only` to a\n                             * `cache-something` policy, so we want to ensure that the\n                             * loading state emit doesn't accidentally read from the cache\n                             * in those cases.\n                             */ fetchPolicy: initialFetchPolicy\n                            }\n                        });\n                    }\n                }\n            });\n        let { observable, fromLink } = this.queryManager.fetchObservableWithInfo(options, {\n            networkStatus,\n            query: fetchQuery,\n            onCacheHit,\n            fetchQueryOperator,\n            observableQuery: this\n        });\n        // track query and variables from the start of the operation\n        const { query, variables } = this;\n        const operation = {\n            abort: ()=>{\n                subscription.unsubscribe();\n            },\n            query,\n            variables\n        };\n        this.activeOperations.add(operation);\n        let forceFirstValueEmit = networkStatus == _networkStatus_js__WEBPACK_IMPORTED_MODULE_1__.NetworkStatus.refetch || networkStatus == _networkStatus_js__WEBPACK_IMPORTED_MODULE_1__.NetworkStatus.setVariables;\n        observable = observable.pipe(operator, (0,_barrel_optimize_names_BehaviorSubject_Observable_Subject_share_tap_rxjs__WEBPACK_IMPORTED_MODULE_14__.share)());\n        const subscription = observable.pipe((0,_barrel_optimize_names_BehaviorSubject_Observable_Subject_share_tap_rxjs__WEBPACK_IMPORTED_MODULE_3__.tap)({\n            next: (notification)=>{\n                if (notification.source === \"newNetworkStatus\" || notification.kind === \"N\" && notification.value.loading) {\n                    operation.override = networkStatus;\n                } else {\n                    delete operation.override;\n                }\n            },\n            finalize: ()=>this.activeOperations.delete(operation)\n        })).subscribe({\n            next: (value)=>{\n                const meta = {};\n                if (forceFirstValueEmit && value.kind === \"N\" && \"loading\" in value.value && !value.value.loading) {\n                    forceFirstValueEmit = false;\n                    meta.shouldEmit = 1 /* EmitBehavior.force */ ;\n                }\n                this.input.next({\n                    ...value,\n                    query,\n                    variables,\n                    meta\n                });\n            }\n        });\n        return {\n            fromLink,\n            subscription,\n            observable\n        };\n    }\n    updatePolling() {\n        // Avoid polling in SSR mode\n        if (this.queryManager.ssrMode) {\n            return;\n        }\n        const { pollingInfo, options: { fetchPolicy, pollInterval } } = this;\n        if (!pollInterval || !this.hasObservers() || fetchPolicy === \"cache-only\") {\n            if (_apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_7__.__DEV__) {\n                if (!this.didWarnCacheOnlyPolling && pollInterval && fetchPolicy === \"cache-only\") {\n                    _apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_7__.__DEV__ && _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_9__.invariant.warn(81, (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_10__.getOperationName)(this.query, \"(anonymous)\"));\n                    this.didWarnCacheOnlyPolling = true;\n                }\n            }\n            this.cancelPolling();\n            return;\n        }\n        if ((pollingInfo === null || pollingInfo === void 0 ? void 0 : pollingInfo.interval) === pollInterval) {\n            return;\n        }\n        const info = pollingInfo || (this.pollingInfo = {});\n        info.interval = pollInterval;\n        const maybeFetch = ()=>{\n            if (this.pollingInfo) {\n                var _this_options_skipPollAttempt, _this_options;\n                if (!(0,_apollo_client_utilities__WEBPACK_IMPORTED_MODULE_15__.isNetworkRequestInFlight)(this.networkStatus) && !((_this_options_skipPollAttempt = (_this_options = this.options).skipPollAttempt) === null || _this_options_skipPollAttempt === void 0 ? void 0 : _this_options_skipPollAttempt.call(_this_options))) {\n                    this._reobserve({\n                        // Most fetchPolicy options don't make sense to use in a polling context, as\n                        // users wouldn't want to be polling the cache directly. However, network-only and\n                        // no-cache are both useful for when the user wants to control whether or not the\n                        // polled results are written to the cache.\n                        fetchPolicy: this.options.initialFetchPolicy === \"no-cache\" ? \"no-cache\" : \"network-only\"\n                    }, {\n                        newNetworkStatus: _networkStatus_js__WEBPACK_IMPORTED_MODULE_1__.NetworkStatus.poll\n                    }).then(poll, poll);\n                } else {\n                    poll();\n                }\n            }\n        };\n        const poll = ()=>{\n            const info = this.pollingInfo;\n            if (info) {\n                clearTimeout(info.timeout);\n                info.timeout = setTimeout(maybeFetch, info.interval);\n            }\n        };\n        poll();\n    }\n    // This differs from stopPolling in that it does not set pollInterval to 0\n    cancelPolling() {\n        if (this.pollingInfo) {\n            clearTimeout(this.pollingInfo.timeout);\n            delete this.pollingInfo;\n        }\n    }\n    /**\n     * Reevaluate the query, optionally against new options. New options will be\n     * merged with the current options when given.\n     *\n     * Note: `variables` can be reset back to their defaults (typically empty) by calling `reobserve` with\n     * `variables: undefined`.\n     */ reobserve(newOptions) {\n        return this._reobserve(newOptions);\n    }\n    _reobserve(newOptions, internalOptions) {\n        this.isTornDown = false;\n        let { newNetworkStatus } = internalOptions || {};\n        this.queryManager.obsQueries.add(this);\n        const useDisposableObservable = // Refetching uses a disposable Observable to allow refetches using different\n        // options, without permanently altering the options of the\n        // original ObservableQuery.\n        newNetworkStatus === _networkStatus_js__WEBPACK_IMPORTED_MODULE_1__.NetworkStatus.refetch || // Polling uses a disposable Observable so the polling options (which force\n        // fetchPolicy to be \"network-only\" or \"no-cache\") won't override the original options.\n        newNetworkStatus === _networkStatus_js__WEBPACK_IMPORTED_MODULE_1__.NetworkStatus.poll;\n        // Save the old variables, since Object.assign may modify them below.\n        const oldVariables = this.variables;\n        const oldFetchPolicy = this.options.fetchPolicy;\n        const mergedOptions = (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_11__.compact)(this.options, newOptions || {});\n        const options = useDisposableObservable ? // Disposable Observable fetches receive a shallow copy of this.options\n        // (merged with newOptions), leaving this.options unmodified.\n        mergedOptions : assign(this.options, mergedOptions);\n        // Don't update options.query with the transformed query to avoid\n        // overwriting this.options.query when we aren't using a disposable concast.\n        // We want to ensure we can re-run the custom document transforms the next\n        // time a request is made against the original query.\n        const query = this.transformDocument(options.query);\n        this.lastQuery = query;\n        // Reevaluate variables to allow resetting variables with variables: undefined,\n        // otherwise `compact` will ignore the `variables` key in `newOptions`. We\n        // do this after we run the query transform to ensure we get default\n        // variables from the transformed query.\n        //\n        // Note: updating options.variables may mutate this.options.variables\n        // in the case of a non-disposable query. This is intentional.\n        if (newOptions && \"variables\" in newOptions) {\n            options.variables = this.getVariablesWithDefaults(newOptions.variables);\n        }\n        if (!useDisposableObservable) {\n            // We can skip calling updatePolling if we're not changing this.options.\n            this.updatePolling();\n            // Reset options.fetchPolicy to its original value when variables change,\n            // unless a new fetchPolicy was provided by newOptions.\n            if (newOptions && newOptions.variables && !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(newOptions.variables, oldVariables) && // Don't mess with the fetchPolicy if it's currently \"standby\".\n            options.fetchPolicy !== \"standby\" && // If we're changing the fetchPolicy anyway, don't try to change it here\n            // using applyNextFetchPolicy. The explicit options.fetchPolicy wins.\n            (options.fetchPolicy === oldFetchPolicy || // A `nextFetchPolicy` function has even higher priority, though,\n            // so in that case `applyNextFetchPolicy` must be called.\n            typeof options.nextFetchPolicy === \"function\")) {\n                // This might mutate options.fetchPolicy\n                this.applyNextFetchPolicy(\"variables-changed\", options);\n                if (newNetworkStatus === void 0) {\n                    newNetworkStatus = _networkStatus_js__WEBPACK_IMPORTED_MODULE_1__.NetworkStatus.setVariables;\n                }\n            }\n        }\n        const oldNetworkStatus = this.networkStatus;\n        if (!newNetworkStatus) {\n            newNetworkStatus = _networkStatus_js__WEBPACK_IMPORTED_MODULE_1__.NetworkStatus.loading;\n            if (oldNetworkStatus !== _networkStatus_js__WEBPACK_IMPORTED_MODULE_1__.NetworkStatus.loading && (newOptions === null || newOptions === void 0 ? void 0 : newOptions.variables) && !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(newOptions.variables, oldVariables)) {\n                newNetworkStatus = _networkStatus_js__WEBPACK_IMPORTED_MODULE_1__.NetworkStatus.setVariables;\n            }\n            // QueryManager does not emit any values for standby fetch policies so we\n            // want ensure that the networkStatus remains ready.\n            if (options.fetchPolicy === \"standby\") {\n                newNetworkStatus = _networkStatus_js__WEBPACK_IMPORTED_MODULE_1__.NetworkStatus.ready;\n            }\n        }\n        if (options.fetchPolicy === \"standby\") {\n            this.cancelPolling();\n        }\n        this.resubscribeCache();\n        const { promise, operator: promiseOperator } = getTrackingOperatorPromise((value)=>{\n            switch(value.kind){\n                case \"E\":\n                    throw value.error;\n                case \"N\":\n                    if (value.source !== \"newNetworkStatus\" && !value.value.loading) return value.value;\n            }\n        }, // This default value should only be used when using a `fetchPolicy` of\n        // `standby` since that fetch policy completes without emitting a\n        // result. Since we are converting this to a QueryResult type, we\n        // omit the extra fields from ApolloQueryResult in the default value.\n        options.fetchPolicy === \"standby\" ? {\n            data: undefined\n        } : undefined);\n        const { subscription, observable, fromLink } = this.fetch(options, newNetworkStatus, query, promiseOperator);\n        if (!useDisposableObservable && (fromLink || !this.linkSubscription)) {\n            if (this.linkSubscription) {\n                this.linkSubscription.unsubscribe();\n            }\n            this.linkSubscription = subscription;\n        }\n        const ret = Object.assign((0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_16__.preventUnhandledRejection)(promise.then((result)=>(0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_12__.toQueryResult)(this.maskResult(result))).finally(()=>{\n            if (!this.hasObservers() && this.activeOperations.size === 0) {\n                // If `reobserve` was called on a query without any obervers,\n                // the teardown logic would never be called, so we need to\n                // call it here to ensure the query is properly torn down.\n                this.tearDownQuery();\n            }\n        })), {\n            retain: ()=>{\n                const subscription = observable.subscribe({});\n                const unsubscribe = ()=>subscription.unsubscribe();\n                promise.then(unsubscribe, unsubscribe);\n                return ret;\n            }\n        });\n        return ret;\n    }\n    hasObservers() {\n        return this.subject.observed;\n    }\n    /**\n     * Tears down the `ObservableQuery` and stops all active operations by sending a `complete` notification.\n     */ stop() {\n        this.subject.complete();\n        this.initializeObservablesQueue();\n        this.tearDownQuery();\n    }\n    tearDownQuery() {\n        var _this_unsubscribeFromCache, _this;\n        if (this.isTornDown) return;\n        this.resetNotifications();\n        (_this_unsubscribeFromCache = (_this = this).unsubscribeFromCache) === null || _this_unsubscribeFromCache === void 0 ? void 0 : _this_unsubscribeFromCache.call(_this);\n        if (this.linkSubscription) {\n            this.linkSubscription.unsubscribe();\n            delete this.linkSubscription;\n        }\n        this.stopPolling();\n        // stop all active GraphQL subscriptions\n        this.subscriptions.forEach((sub)=>sub.unsubscribe());\n        this.subscriptions.clear();\n        this.queryManager.obsQueries.delete(this);\n        this.isTornDown = true;\n        this.abortActiveOperations();\n        this._lastWrite = undefined;\n    }\n    transformDocument(document) {\n        return this.queryManager.transform(document);\n    }\n    maskResult(result) {\n        const masked = this.queryManager.maskOperation({\n            document: this.query,\n            data: result.data,\n            fetchPolicy: this.options.fetchPolicy,\n            cause: this\n        });\n        // Maintain object identity as much as possible\n        return masked === result.data ? result : {\n            ...result,\n            data: masked\n        };\n    }\n    /**\n    * @internal\n    * \n    * @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n    */ resetNotifications() {\n        if (this.notifyTimeout) {\n            clearTimeout(this.notifyTimeout);\n            this.notifyTimeout = void 0;\n        }\n        this.dirty = false;\n    }\n    /**\n    * @internal\n    * \n    * @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n    */ scheduleNotify() {\n        if (this.dirty) return;\n        this.dirty = true;\n        if (!this.notifyTimeout) {\n            this.notifyTimeout = setTimeout(()=>this.notify(true), 0);\n        }\n    }\n    /**\n    * @internal\n    * \n    * @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n    */ notify() {\n        let scheduled = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;\n        if (!scheduled) {\n            // For queries with client exports or forced resolvers, we don't want to\n            // synchronously reobserve the cache on broadcast,\n            // but actually wait for the `scheduleNotify` timeout triggered by the\n            // `cache.watch` callback from `resubscribeCache`.\n            const info = this.queryManager.getDocumentInfo(this.query);\n            if (info.hasClientExports || info.hasForcedResolvers) {\n                return;\n            }\n        }\n        const { dirty } = this;\n        this.resetNotifications();\n        if (dirty && (this.options.fetchPolicy == \"cache-only\" || this.options.fetchPolicy == \"cache-and-network\" || !this.activeOperations.size)) {\n            const diff = this.getCacheDiff();\n            if (// `fromOptimisticTransaction` is not avaiable through the `cache.diff`\n            // code path, so we need to check it this way\n            (0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(diff.result, this.getCacheDiff({\n                optimistic: false\n            }).result)) {\n                //If this diff did not come from an optimistic transaction\n                // make the ObservableQuery \"reobserve\" the latest data\n                // using a temporary fetch policy of \"cache-first\", so complete cache\n                // results have a chance to be delivered without triggering additional\n                // network requests, even when options.fetchPolicy is \"network-only\"\n                // or \"cache-and-network\". All other fetch policies are preserved by\n                // this method, and are handled by calling oq.reobserve(). If this\n                // reobservation is spurious, distinctUntilChanged still has a\n                // chance to catch it before delivery to ObservableQuery subscribers.\n                this.reobserveCacheFirst();\n            } else {\n                // If this diff came from an optimistic transaction, deliver the\n                // current cache data to the ObservableQuery, but don't perform a\n                // reobservation, since oq.reobserveCacheFirst might make a network\n                // request, and we never want to trigger network requests in the\n                // middle of optimistic updates.\n                this.input.next({\n                    kind: \"N\",\n                    value: {\n                        data: diff.result,\n                        dataState: diff.complete ? \"complete\" : diff.result ? \"partial\" : \"empty\",\n                        networkStatus: _networkStatus_js__WEBPACK_IMPORTED_MODULE_1__.NetworkStatus.ready,\n                        loading: false,\n                        error: undefined,\n                        partial: !diff.complete\n                    },\n                    source: \"cache\",\n                    query: this.query,\n                    variables: this.variables,\n                    meta: {}\n                });\n            }\n        }\n    }\n    pushOperation(networkStatus) {\n        let aborted = false;\n        // track query and variables from the start of the operation\n        const { query, variables } = this;\n        const finalize = ()=>{\n            this.activeOperations.delete(operation);\n        };\n        const operation = {\n            override: networkStatus,\n            abort: ()=>{\n                aborted = true;\n                finalize();\n            },\n            query,\n            variables\n        };\n        this.activeOperations.add(operation);\n        return {\n            finalize,\n            pushNotification: (notification, additionalMeta)=>{\n                if (!aborted) {\n                    this.input.next({\n                        ...notification,\n                        query,\n                        variables,\n                        meta: {\n                            ...additionalMeta\n                        }\n                    });\n                }\n            }\n        };\n    }\n    calculateNetworkStatus(baseNetworkStatus) {\n        if (baseNetworkStatus === _networkStatus_js__WEBPACK_IMPORTED_MODULE_1__.NetworkStatus.streaming) {\n            return baseNetworkStatus;\n        }\n        // in the future, this could be more complex logic, e.g. \"refetch\" and\n        // \"fetchMore\" having priority over \"polling\" or \"loading\" network statuses\n        // as for now we just take the \"latest\" operation that is still active,\n        // as that lines up best with previous behavior[]\n        const operation = Array.from(this.activeOperations.values()).findLast((operation)=>isEqualQuery(operation, this) && operation.override !== undefined);\n        var _operation_override;\n        return (_operation_override = operation === null || operation === void 0 ? void 0 : operation.override) !== null && _operation_override !== void 0 ? _operation_override : baseNetworkStatus;\n    }\n    abortActiveOperations() {\n        this.activeOperations.forEach((operation)=>operation.abort());\n    }\n    /**\n    * @internal\n    * Called from `clearStore`.\n    *\n    * - resets the query to its initial state\n    * - cancels all active operations and their subscriptions\n    * \n    * @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n    */ reset() {\n        // exception for cache-only queries - we reset them into a \"ready\" state\n        // as we won't trigger a refetch for them\n        const resetToEmpty = this.options.fetchPolicy === \"cache-only\";\n        this.setResult(resetToEmpty ? empty : uninitialized, {\n            shouldEmit: resetToEmpty ? 1 /* EmitBehavior.force */  : 2 /* EmitBehavior.never */ \n        });\n        this.abortActiveOperations();\n    }\n    /**\n    * @internal\n    * \n    * @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n    */ setResult(result, additionalMeta) {\n        this.input.next({\n            source: \"setResult\",\n            kind: \"N\",\n            value: result,\n            query: this.query,\n            variables: this.variables,\n            meta: {\n                ...additionalMeta\n            }\n        });\n    }\n    // Reobserve with fetchPolicy effectively set to \"cache-first\", triggering\n    // delivery of any new data from the cache, possibly falling back to the network\n    // if any cache data are missing. This allows _complete_ cache results to be\n    // delivered without also kicking off unnecessary network requests when\n    // this.options.fetchPolicy is \"cache-and-network\" or \"network-only\". When\n    // this.options.fetchPolicy is any other policy (\"cache-first\", \"cache-only\",\n    // \"standby\", or \"no-cache\"), we call this.reobserve() as usual.\n    reobserveCacheFirst() {\n        const { fetchPolicy, nextFetchPolicy } = this.options;\n        if (fetchPolicy === \"cache-and-network\" || fetchPolicy === \"network-only\") {\n            this.reobserve({\n                fetchPolicy: \"cache-first\",\n                // Use a temporary nextFetchPolicy function that replaces itself with the\n                // previous nextFetchPolicy value and returns the original fetchPolicy.\n                nextFetchPolicy (currentFetchPolicy, context) {\n                    // Replace this nextFetchPolicy function in the options object with the\n                    // original this.options.nextFetchPolicy value.\n                    this.nextFetchPolicy = nextFetchPolicy;\n                    // If the original nextFetchPolicy value was a function, give it a\n                    // chance to decide what happens here.\n                    if (typeof this.nextFetchPolicy === \"function\") {\n                        return this.nextFetchPolicy(currentFetchPolicy, context);\n                    }\n                    // Otherwise go back to the original this.options.fetchPolicy.\n                    return fetchPolicy;\n                }\n            });\n        } else {\n            this.reobserve();\n        }\n    }\n    getVariablesWithDefaults(variables) {\n        return this.queryManager.getVariables(this.query, variables);\n    }\n    constructor({ queryManager, options, transformedQuery = queryManager.transform(options.query) }){\n        this.subscriptions = new Set();\n        // Turns polling on or off based on this.options.pollInterval.\n        this.didWarnCacheOnlyPolling = false;\n        this.dirty = false;\n        this.activeOperations = new Set();\n        this.operator = (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_4__.filterMap)((notification)=>{\n            const { query, variables, meta } = notification;\n            if (notification.source === \"setResult\") {\n                return {\n                    query,\n                    variables,\n                    result: notification.value,\n                    meta\n                };\n            }\n            if (notification.kind === \"C\" || !isEqualQuery(notification, this)) {\n                return;\n            }\n            let result;\n            const previous = this.subject.getValue();\n            if (notification.source === \"cache\") {\n                result = notification.value;\n                if (result.networkStatus === _networkStatus_js__WEBPACK_IMPORTED_MODULE_1__.NetworkStatus.ready && result.partial && (!this.options.returnPartialData || previous.result.networkStatus === _networkStatus_js__WEBPACK_IMPORTED_MODULE_1__.NetworkStatus.error) && this.options.fetchPolicy !== \"cache-only\") {\n                    return;\n                }\n            } else if (notification.source === \"network\") {\n                if (this.waitForNetworkResult) {\n                    this.waitForNetworkResult = false;\n                    this.resubscribeCache();\n                }\n                result = notification.kind === \"E\" ? {\n                    ...isEqualQuery(previous, notification) ? previous.result : {\n                        data: undefined,\n                        dataState: \"empty\",\n                        partial: true\n                    },\n                    error: notification.error,\n                    networkStatus: _networkStatus_js__WEBPACK_IMPORTED_MODULE_1__.NetworkStatus.error,\n                    loading: false\n                } : notification.value;\n                if (notification.kind === \"E\" && result.dataState === \"streaming\") {\n                    result.dataState = \"complete\";\n                }\n                if (result.error) {\n                    meta.shouldEmit = 1 /* EmitBehavior.force */ ;\n                }\n            } else if (notification.source === \"newNetworkStatus\") {\n                const baseResult = isEqualQuery(previous, notification) ? previous.result : this.getInitialResult(meta.fetchPolicy);\n                const { resetError } = notification.value;\n                const error = resetError ? undefined : baseResult.error;\n                const networkStatus = error ? _networkStatus_js__WEBPACK_IMPORTED_MODULE_1__.NetworkStatus.error : _networkStatus_js__WEBPACK_IMPORTED_MODULE_1__.NetworkStatus.ready;\n                result = {\n                    ...baseResult,\n                    error,\n                    networkStatus\n                };\n            }\n            // every code path until here should have either returned or set a result,\n            // but typescript needs a little help\n            (0,_apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_9__.invariant)(result);\n            // normalize result shape\n            if (!result.error) delete result.error;\n            result.networkStatus = this.calculateNetworkStatus(result.networkStatus);\n            result.loading = (0,_apollo_client_utilities__WEBPACK_IMPORTED_MODULE_15__.isNetworkRequestInFlight)(result.networkStatus);\n            result = this.maskResult(result);\n            return {\n                query,\n                variables,\n                result,\n                meta\n            };\n        });\n        this.queryManager = queryManager;\n        // active state\n        this.waitForNetworkResult = options.fetchPolicy === \"network-only\";\n        this.isTornDown = false;\n        this.subscribeToMore = this.subscribeToMore.bind(this);\n        this.maskResult = this.maskResult.bind(this);\n        const { watchQuery: { fetchPolicy: defaultFetchPolicy = \"cache-first\" } = {} } = queryManager.defaultOptions;\n        const { fetchPolicy = defaultFetchPolicy, // Make sure we don't store \"standby\" as the initialFetchPolicy.\n        initialFetchPolicy = fetchPolicy === \"standby\" ? defaultFetchPolicy : fetchPolicy } = options;\n        this.lastQuery = transformedQuery;\n        this.options = {\n            ...options,\n            // Remember the initial options.fetchPolicy so we can revert back to this\n            // policy when variables change. This information can also be specified\n            // (or overridden) by providing options.initialFetchPolicy explicitly.\n            initialFetchPolicy,\n            // This ensures this.options.fetchPolicy always has a string value, in\n            // case options.fetchPolicy was not provided.\n            fetchPolicy,\n            variables: this.getVariablesWithDefaults(options.variables)\n        };\n        this.initializeObservablesQueue();\n        this[\"@@observable\"] = ()=>this;\n        if (Symbol.observable) {\n            this[Symbol.observable] = ()=>this;\n        }\n        const opDef = (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_17__.getOperationDefinition)(this.query);\n        this.queryName = opDef && opDef.name && opDef.name.value;\n    }\n}\nfunction logMissingFieldErrors(missing) {\n    if (_apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_7__.__DEV__ && missing) {\n        _apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_7__.__DEV__ && _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_9__.invariant.debug(82, missing);\n    }\n}\nfunction isEqualQuery(a, b) {\n    return !!(a && b && a.query === b.query && (0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(a.variables, b.variables));\n}\nfunction getTrackingOperatorPromise(filterMapCb, defaultValue) {\n    let lastValue = defaultValue, resolve, reject;\n    const promise = new Promise((res, rej)=>{\n        resolve = res;\n        reject = rej;\n    });\n    const operator = (0,_barrel_optimize_names_BehaviorSubject_Observable_Subject_share_tap_rxjs__WEBPACK_IMPORTED_MODULE_3__.tap)({\n        next (value) {\n            try {\n                const newValue = filterMapCb(value);\n                if (newValue !== undefined) {\n                    lastValue = newValue;\n                }\n            } catch (error) {\n                reject(error);\n            }\n        },\n        finalize: ()=>{\n            if (lastValue) {\n                resolve(lastValue);\n            } else {\n                const message = \"The operation was aborted.\";\n                const name = \"AbortError\";\n                reject(typeof DOMException !== \"undefined\" ? new DOMException(message, name) : Object.assign(new Error(message), {\n                    name\n                }));\n            }\n        }\n    });\n    return {\n        promise,\n        operator\n    };\n} //# sourceMappingURL=ObservableQuery.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/core/ObservableQuery.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/core/QueryInfo.js":
/*!*******************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/core/QueryInfo.js ***!
  \*******************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QueryInfo: () => (/* binding */ QueryInfo)\n/* harmony export */ });\n/* harmony import */ var _wry_equality__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wry/equality */ \"(app-pages-browser)/../../node_modules/.pnpm/@wry+equality@0.5.7/node_modules/@wry/equality/lib/index.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/graphQLResultHasError.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getOperationName.js\");\n/* harmony import */ var _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @apollo/client/utilities/invariant */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/invariant/index.development.js\");\n\n\n\nconst IGNORE = {};\nconst destructiveMethodCounts = new WeakMap();\nfunction wrapDestructiveCacheMethod(cache, methodName) {\n    const original = cache[methodName];\n    if (typeof original === \"function\") {\n        // @ts-expect-error this is just too generic to be typed correctly\n        cache[methodName] = function() {\n            destructiveMethodCounts.set(cache, // The %1e15 allows the count to wrap around to 0 safely every\n            // quadrillion evictions, so there's no risk of overflow. To be\n            // clear, this is more of a pedantic principle than something\n            // that matters in any conceivable practical scenario.\n            (destructiveMethodCounts.get(cache) + 1) % 1e15);\n            // @ts-expect-error this is just too generic to be typed correctly\n            return original.apply(this, arguments);\n        };\n    }\n}\nconst queryInfoIds = new WeakMap();\n// A QueryInfo object represents a single network request, either initiated\n// from the QueryManager or from an ObservableQuery.\n// It will only ever be used for a single network call.\n// It is responsible for reporting results to the cache, merging and in a no-cache\n// scenario accumulating the response.\nclass QueryInfo {\n    get lastWrite() {\n        return (this.observableQuery || this)._lastWrite;\n    }\n    set lastWrite(value) {\n        (this.observableQuery || this)._lastWrite = value;\n    }\n    resetLastWrite() {\n        this.lastWrite = void 0;\n    }\n    shouldWrite(result, variables) {\n        const { lastWrite } = this;\n        return !(lastWrite && // If cache.evict has been called since the last time we wrote this\n        // data into the cache, there's a chance writing this result into\n        // the cache will repair what was evicted.\n        lastWrite.dmCount === destructiveMethodCounts.get(this.cache) && (0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(variables, lastWrite.variables) && (0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(result.data, lastWrite.result.data));\n    }\n    get hasNext() {\n        return this.incremental ? this.incremental.hasNext : false;\n    }\n    maybeHandleIncrementalResult(cacheData, incoming, query) {\n        const { incrementalHandler } = this.queryManager;\n        if (incrementalHandler.isIncrementalResult(incoming)) {\n            this.incremental || (this.incremental = incrementalHandler.startRequest({\n                query\n            }));\n            return this.incremental.handle(cacheData, incoming);\n        }\n        return incoming;\n    }\n    markQueryResult(incoming, param) {\n        let { document: query, variables, errorPolicy, cacheWriteBehavior } = param;\n        var // Cancel the pending notify timeout (if it exists) to prevent extraneous network\n        // requests. To allow future notify timeouts, diff and dirty are reset as well.\n        _this_observableQuery;\n        const diffOptions = {\n            query,\n            variables,\n            returnPartialData: true,\n            optimistic: true\n        };\n        (_this_observableQuery = this.observableQuery) === null || _this_observableQuery === void 0 ? void 0 : _this_observableQuery[\"resetNotifications\"]();\n        const skipCache = cacheWriteBehavior === 0 /* CacheWriteBehavior.FORBID */ ;\n        const lastDiff = skipCache ? undefined : this.cache.diff(diffOptions);\n        let result = this.maybeHandleIncrementalResult(lastDiff === null || lastDiff === void 0 ? void 0 : lastDiff.result, incoming, query);\n        if (skipCache) {\n            return result;\n        }\n        if (shouldWriteResult(result, errorPolicy)) {\n            // Using a transaction here so we have a chance to read the result\n            // back from the cache before the watch callback fires as a result\n            // of writeQuery, so we can store the new diff quietly and ignore\n            // it when we receive it redundantly from the watch callback.\n            this.cache.batch({\n                onWatchUpdated: (// all additional options on ObservableQuery.CacheWatchOptions are\n                // optional so we can use the type here\n                watch, diff)=>{\n                    if (watch.watcher === this.observableQuery) {\n                        // see comment on `lastOwnDiff` for explanation\n                        watch.lastOwnDiff = diff;\n                    }\n                },\n                update: (cache)=>{\n                    if (this.shouldWrite(result, variables)) {\n                        cache.writeQuery({\n                            query,\n                            data: result.data,\n                            variables,\n                            overwrite: cacheWriteBehavior === 1 /* CacheWriteBehavior.OVERWRITE */ \n                        });\n                        this.lastWrite = {\n                            result,\n                            variables,\n                            dmCount: destructiveMethodCounts.get(this.cache)\n                        };\n                    } else {\n                        // If result is the same as the last result we received from\n                        // the network (and the variables match too), avoid writing\n                        // result into the cache again. The wisdom of skipping this\n                        // cache write is far from obvious, since any cache write\n                        // could be the one that puts the cache back into a desired\n                        // state, fixing corruption or missing data. However, if we\n                        // always write every network result into the cache, we enable\n                        // feuds between queries competing to update the same data in\n                        // incompatible ways, which can lead to an endless cycle of\n                        // cache broadcasts and useless network requests. As with any\n                        // feud, eventually one side must step back from the brink,\n                        // letting the other side(s) have the last word(s). There may\n                        // be other points where we could break this cycle, such as\n                        // silencing the broadcast for cache.writeQuery (not a good\n                        // idea, since it just delays the feud a bit) or somehow\n                        // avoiding the network request that just happened (also bad,\n                        // because the server could return useful new data). All\n                        // options considered, skipping this cache write seems to be\n                        // the least damaging place to break the cycle, because it\n                        // reflects the intuition that we recently wrote this exact\n                        // result into the cache, so the cache *should* already/still\n                        // contain this data. If some other query has clobbered that\n                        // data in the meantime, that's too bad, but there will be no\n                        // winners if every query blindly reverts to its own version\n                        // of the data. This approach also gives the network a chance\n                        // to return new data, which will be written into the cache as\n                        // usual, notifying only those queries that are directly\n                        // affected by the cache updates, as usual. In the future, an\n                        // even more sophisticated cache could perhaps prevent or\n                        // mitigate the clobbering somehow, but that would make this\n                        // particular cache write even less important, and thus\n                        // skipping it would be even safer than it is today.\n                        if (lastDiff && lastDiff.complete) {\n                            // Reuse data from the last good (complete) diff that we\n                            // received, when possible.\n                            result = {\n                                ...result,\n                                data: lastDiff.result\n                            };\n                            return;\n                        }\n                    // If the previous this.diff was incomplete, fall through to\n                    // re-reading the latest data with cache.diff, below.\n                    }\n                    const diff = cache.diff(diffOptions);\n                    // If we're allowed to write to the cache, and we can read a\n                    // complete result from the cache, update result.data to be the\n                    // result from the cache, rather than the raw network result.\n                    // Set without setDiff to avoid triggering a notify call, since\n                    // we have other ways of notifying for this result.\n                    if (diff.complete) {\n                        result = {\n                            ...result,\n                            data: diff.result\n                        };\n                    }\n                }\n            });\n        } else {\n            this.lastWrite = void 0;\n        }\n        return result;\n    }\n    markMutationResult(incoming, mutation) {\n        let cache = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this.cache;\n        const cacheWrites = [];\n        const skipCache = mutation.cacheWriteBehavior === 0 /* CacheWriteBehavior.FORBID */ ;\n        let result = this.maybeHandleIncrementalResult(skipCache ? undefined : cache.diff({\n            id: \"ROOT_MUTATION\",\n            // The cache complains if passed a mutation where it expects a\n            // query, so we transform mutations and subscriptions to queries\n            // (only once, thanks to this.transformCache).\n            query: this.queryManager.getDocumentInfo(mutation.document).asQuery,\n            variables: mutation.variables,\n            optimistic: false,\n            returnPartialData: true\n        }).result, incoming, mutation.document);\n        if (mutation.errorPolicy === \"ignore\") {\n            result = {\n                ...result,\n                errors: []\n            };\n        }\n        if ((0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_1__.graphQLResultHasError)(result) && mutation.errorPolicy === \"none\") {\n            return Promise.resolve(result);\n        }\n        const getResultWithDataState = ()=>({\n                ...result,\n                dataState: this.hasNext ? \"streaming\" : \"complete\"\n            });\n        if (!skipCache && shouldWriteResult(result, mutation.errorPolicy)) {\n            cacheWrites.push({\n                result: result.data,\n                dataId: \"ROOT_MUTATION\",\n                query: mutation.document,\n                variables: mutation.variables\n            });\n            const { updateQueries } = mutation;\n            if (updateQueries) {\n                this.queryManager.getObservableQueries(\"all\").forEach((observableQuery)=>{\n                    const queryName = observableQuery && observableQuery.queryName;\n                    if (!queryName || !Object.hasOwnProperty.call(updateQueries, queryName)) {\n                        return;\n                    }\n                    const updater = updateQueries[queryName];\n                    const { query: document, variables } = observableQuery;\n                    // Read the current query result from the store.\n                    const { result: currentQueryResult, complete } = observableQuery.getCacheDiff({\n                        optimistic: false\n                    });\n                    if (complete && currentQueryResult) {\n                        // Run our reducer using the current query result and the mutation result.\n                        const nextQueryResult = updater(currentQueryResult, {\n                            mutationResult: getResultWithDataState(),\n                            queryName: document && (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_2__.getOperationName)(document) || void 0,\n                            queryVariables: variables\n                        });\n                        // Write the modified result back into the store if we got a new result.\n                        if (nextQueryResult) {\n                            cacheWrites.push({\n                                result: nextQueryResult,\n                                dataId: \"ROOT_QUERY\",\n                                query: document,\n                                variables\n                            });\n                        }\n                    }\n                });\n            }\n        }\n        let refetchQueries = mutation.refetchQueries;\n        if (typeof refetchQueries === \"function\") {\n            refetchQueries = refetchQueries(getResultWithDataState());\n        }\n        if (cacheWrites.length > 0 || (refetchQueries || \"\").length > 0 || mutation.update || mutation.onQueryUpdated || mutation.removeOptimistic) {\n            const results = [];\n            this.queryManager.refetchQueries({\n                updateCache: (cache)=>{\n                    if (!skipCache) {\n                        cacheWrites.forEach((write)=>cache.write(write));\n                    }\n                    // If the mutation has some writes associated with it then we need to\n                    // apply those writes to the store by running this reducer again with\n                    // a write action.\n                    const { update } = mutation;\n                    // Determine whether result is a SingleExecutionResult,\n                    // or the final ExecutionPatchResult.\n                    if (update) {\n                        if (!skipCache) {\n                            // Re-read the ROOT_MUTATION data we just wrote into the cache\n                            // (the first cache.write call in the cacheWrites.forEach loop\n                            // above), so field read functions have a chance to run for\n                            // fields within mutation result objects.\n                            const diff = cache.diff({\n                                id: \"ROOT_MUTATION\",\n                                // The cache complains if passed a mutation where it expects a\n                                // query, so we transform mutations and subscriptions to queries\n                                // (only once, thanks to this.transformCache).\n                                query: this.queryManager.getDocumentInfo(mutation.document).asQuery,\n                                variables: mutation.variables,\n                                optimistic: false,\n                                returnPartialData: true\n                            });\n                            if (diff.complete) {\n                                result = {\n                                    ...result,\n                                    data: diff.result\n                                };\n                            }\n                        }\n                        // If we've received the whole response, call the update function.\n                        if (!this.hasNext) {\n                            update(cache, result, {\n                                context: mutation.context,\n                                variables: mutation.variables\n                            });\n                        }\n                    }\n                    // TODO Do this with cache.evict({ id: 'ROOT_MUTATION' }) but make it\n                    // shallow to allow rolling back optimistic evictions.\n                    if (!skipCache && !mutation.keepRootFields && !this.hasNext) {\n                        cache.modify({\n                            id: \"ROOT_MUTATION\",\n                            fields (value, param) {\n                                let { fieldName, DELETE } = param;\n                                return fieldName === \"__typename\" ? value : DELETE;\n                            }\n                        });\n                    }\n                },\n                include: refetchQueries,\n                // Write the final mutation.result to the root layer of the cache.\n                optimistic: false,\n                // Remove the corresponding optimistic layer at the same time as we\n                // write the final non-optimistic result.\n                removeOptimistic: mutation.removeOptimistic,\n                // Let the caller of client.mutate optionally determine the refetching\n                // behavior for watched queries after the mutation.update function runs.\n                // If no onQueryUpdated function was provided for this mutation, pass\n                // null instead of undefined to disable the default refetching behavior.\n                onQueryUpdated: mutation.onQueryUpdated || null\n            }).forEach((result)=>results.push(result));\n            if (mutation.awaitRefetchQueries || mutation.onQueryUpdated) {\n                // Returning a promise here makes the mutation await that promise, so we\n                // include results in that promise's work if awaitRefetchQueries or an\n                // onQueryUpdated function was specified.\n                return Promise.all(results).then(()=>result);\n            }\n        }\n        return Promise.resolve(result);\n    }\n    markMutationOptimistic(optimisticResponse, mutation) {\n        const data = typeof optimisticResponse === \"function\" ? optimisticResponse(mutation.variables, {\n            IGNORE\n        }) : optimisticResponse;\n        if (data === IGNORE) {\n            return false;\n        }\n        this.cache.recordOptimisticTransaction((cache)=>{\n            try {\n                this.markMutationResult({\n                    data\n                }, mutation, cache);\n            } catch (error) {\n                _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_3__.invariant.error(error);\n            }\n        }, this.id);\n        return true;\n    }\n    markSubscriptionResult(result, param) {\n        let { document, variables, errorPolicy, cacheWriteBehavior } = param;\n        if (cacheWriteBehavior !== 0 /* CacheWriteBehavior.FORBID */ ) {\n            if (shouldWriteResult(result, errorPolicy)) {\n                this.cache.write({\n                    query: document,\n                    result: result.data,\n                    dataId: \"ROOT_SUBSCRIPTION\",\n                    variables: variables\n                });\n            }\n            this.queryManager.broadcastQueries();\n        }\n    }\n    constructor(queryManager, observableQuery){\n        // TODO remove soon - this should be able to be handled by cancelling old operations before starting new ones\n        this.lastRequestId = 1;\n        const cache = this.cache = queryManager.cache;\n        const id = (queryInfoIds.get(queryManager) || 0) + 1;\n        queryInfoIds.set(queryManager, id);\n        this.id = id + \"\";\n        this.observableQuery = observableQuery;\n        this.queryManager = queryManager;\n        // Track how often cache.evict is called, since we want eviction to\n        // override the feud-stopping logic in the markQueryResult method, by\n        // causing shouldWrite to return true. Wrapping the cache.evict method\n        // is a bit of a hack, but it saves us from having to make eviction\n        // counting an official part of the ApolloCache API.\n        if (!destructiveMethodCounts.has(cache)) {\n            destructiveMethodCounts.set(cache, 0);\n            wrapDestructiveCacheMethod(cache, \"evict\");\n            wrapDestructiveCacheMethod(cache, \"modify\");\n            wrapDestructiveCacheMethod(cache, \"reset\");\n        }\n    }\n}\nfunction shouldWriteResult(result) {\n    let errorPolicy = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"none\";\n    const ignoreErrors = errorPolicy === \"ignore\" || errorPolicy === \"all\";\n    let writeWithErrors = !(0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_1__.graphQLResultHasError)(result);\n    if (!writeWithErrors && ignoreErrors && result.data) {\n        writeWithErrors = true;\n    }\n    return writeWithErrors;\n} //# sourceMappingURL=QueryInfo.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/core/QueryInfo.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/core/QueryManager.js":
/*!**********************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/core/QueryManager.js ***!
  \**********************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QueryManager: () => (/* binding */ QueryManager)\n/* harmony export */ });\n/* harmony import */ var _wry_trie__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wry/trie */ \"(app-pages-browser)/../../node_modules/.pnpm/@wry+trie@0.5.0/node_modules/@wry/trie/lib/index.js\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! graphql */ \"(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/ast.mjs\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! graphql */ \"(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/visitor.mjs\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! graphql */ \"(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/kinds.mjs\");\n/* harmony import */ var _barrel_optimize_names_Observable_throwError_rxjs__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! __barrel_optimize__?names=Observable,throwError!=!rxjs */ \"(app-pages-browser)/../../node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/Observable.js\");\n/* harmony import */ var _barrel_optimize_names_Observable_throwError_rxjs__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! __barrel_optimize__?names=Observable,throwError!=!rxjs */ \"(app-pages-browser)/../../node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/observable/throwError.js\");\n/* harmony import */ var _barrel_optimize_names_EMPTY_Subject_catchError_concat_filter_finalize_from_lastValueFrom_map_materialize_mergeMap_of_share_shareReplay_tap_rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! __barrel_optimize__?names=EMPTY,Subject,catchError,concat,filter,finalize,from,lastValueFrom,map,materialize,mergeMap,of,share,shareReplay,tap!=!rxjs */ \"(app-pages-browser)/../../node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/operators/mergeMap.js\");\n/* harmony import */ var _barrel_optimize_names_EMPTY_Subject_catchError_concat_filter_finalize_from_lastValueFrom_map_materialize_mergeMap_of_share_shareReplay_tap_rxjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! __barrel_optimize__?names=EMPTY,Subject,catchError,concat,filter,finalize,from,lastValueFrom,map,materialize,mergeMap,of,share,shareReplay,tap!=!rxjs */ \"(app-pages-browser)/../../node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/observable/from.js\");\n/* harmony import */ var _barrel_optimize_names_EMPTY_Subject_catchError_concat_filter_finalize_from_lastValueFrom_map_materialize_mergeMap_of_share_shareReplay_tap_rxjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! __barrel_optimize__?names=EMPTY,Subject,catchError,concat,filter,finalize,from,lastValueFrom,map,materialize,mergeMap,of,share,shareReplay,tap!=!rxjs */ \"(app-pages-browser)/../../node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/operators/map.js\");\n/* harmony import */ var _barrel_optimize_names_EMPTY_Subject_catchError_concat_filter_finalize_from_lastValueFrom_map_materialize_mergeMap_of_share_shareReplay_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! __barrel_optimize__?names=EMPTY,Subject,catchError,concat,filter,finalize,from,lastValueFrom,map,materialize,mergeMap,of,share,shareReplay,tap!=!rxjs */ \"(app-pages-browser)/../../node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/lastValueFrom.js\");\n/* harmony import */ var _barrel_optimize_names_EMPTY_Subject_catchError_concat_filter_finalize_from_lastValueFrom_map_materialize_mergeMap_of_share_shareReplay_tap_rxjs__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! __barrel_optimize__?names=EMPTY,Subject,catchError,concat,filter,finalize,from,lastValueFrom,map,materialize,mergeMap,of,share,shareReplay,tap!=!rxjs */ \"(app-pages-browser)/../../node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/observable/of.js\");\n/* harmony import */ var _barrel_optimize_names_EMPTY_Subject_catchError_concat_filter_finalize_from_lastValueFrom_map_materialize_mergeMap_of_share_shareReplay_tap_rxjs__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! __barrel_optimize__?names=EMPTY,Subject,catchError,concat,filter,finalize,from,lastValueFrom,map,materialize,mergeMap,of,share,shareReplay,tap!=!rxjs */ \"(app-pages-browser)/../../node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/operators/catchError.js\");\n/* harmony import */ var _barrel_optimize_names_EMPTY_Subject_catchError_concat_filter_finalize_from_lastValueFrom_map_materialize_mergeMap_of_share_shareReplay_tap_rxjs__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! __barrel_optimize__?names=EMPTY,Subject,catchError,concat,filter,finalize,from,lastValueFrom,map,materialize,mergeMap,of,share,shareReplay,tap!=!rxjs */ \"(app-pages-browser)/../../node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/operators/filter.js\");\n/* harmony import */ var _barrel_optimize_names_EMPTY_Subject_catchError_concat_filter_finalize_from_lastValueFrom_map_materialize_mergeMap_of_share_shareReplay_tap_rxjs__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! __barrel_optimize__?names=EMPTY,Subject,catchError,concat,filter,finalize,from,lastValueFrom,map,materialize,mergeMap,of,share,shareReplay,tap!=!rxjs */ \"(app-pages-browser)/../../node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/operators/finalize.js\");\n/* harmony import */ var _barrel_optimize_names_EMPTY_Subject_catchError_concat_filter_finalize_from_lastValueFrom_map_materialize_mergeMap_of_share_shareReplay_tap_rxjs__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! __barrel_optimize__?names=EMPTY,Subject,catchError,concat,filter,finalize,from,lastValueFrom,map,materialize,mergeMap,of,share,shareReplay,tap!=!rxjs */ \"(app-pages-browser)/../../node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/operators/share.js\");\n/* harmony import */ var _barrel_optimize_names_EMPTY_Subject_catchError_concat_filter_finalize_from_lastValueFrom_map_materialize_mergeMap_of_share_shareReplay_tap_rxjs__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! __barrel_optimize__?names=EMPTY,Subject,catchError,concat,filter,finalize,from,lastValueFrom,map,materialize,mergeMap,of,share,shareReplay,tap!=!rxjs */ \"(app-pages-browser)/../../node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/operators/shareReplay.js\");\n/* harmony import */ var _barrel_optimize_names_EMPTY_Subject_catchError_concat_filter_finalize_from_lastValueFrom_map_materialize_mergeMap_of_share_shareReplay_tap_rxjs__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! __barrel_optimize__?names=EMPTY,Subject,catchError,concat,filter,finalize,from,lastValueFrom,map,materialize,mergeMap,of,share,shareReplay,tap!=!rxjs */ \"(app-pages-browser)/../../node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/Subject.js\");\n/* harmony import */ var _barrel_optimize_names_EMPTY_Subject_catchError_concat_filter_finalize_from_lastValueFrom_map_materialize_mergeMap_of_share_shareReplay_tap_rxjs__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! __barrel_optimize__?names=EMPTY,Subject,catchError,concat,filter,finalize,from,lastValueFrom,map,materialize,mergeMap,of,share,shareReplay,tap!=!rxjs */ \"(app-pages-browser)/../../node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/operators/materialize.js\");\n/* harmony import */ var _barrel_optimize_names_EMPTY_Subject_catchError_concat_filter_finalize_from_lastValueFrom_map_materialize_mergeMap_of_share_shareReplay_tap_rxjs__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! __barrel_optimize__?names=EMPTY,Subject,catchError,concat,filter,finalize,from,lastValueFrom,map,materialize,mergeMap,of,share,shareReplay,tap!=!rxjs */ \"(app-pages-browser)/../../node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/observable/concat.js\");\n/* harmony import */ var _barrel_optimize_names_EMPTY_Subject_catchError_concat_filter_finalize_from_lastValueFrom_map_materialize_mergeMap_of_share_shareReplay_tap_rxjs__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! __barrel_optimize__?names=EMPTY,Subject,catchError,concat,filter,finalize,from,lastValueFrom,map,materialize,mergeMap,of,share,shareReplay,tap!=!rxjs */ \"(app-pages-browser)/../../node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/observable/empty.js\");\n/* harmony import */ var _barrel_optimize_names_EMPTY_Subject_catchError_concat_filter_finalize_from_lastValueFrom_map_materialize_mergeMap_of_share_shareReplay_tap_rxjs__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! __barrel_optimize__?names=EMPTY,Subject,catchError,concat,filter,finalize,from,lastValueFrom,map,materialize,mergeMap,of,share,shareReplay,tap!=!rxjs */ \"(app-pages-browser)/../../node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/operators/tap.js\");\n/* harmony import */ var _apollo_client_cache__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! @apollo/client/cache */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/canonicalStringify.js\");\n/* harmony import */ var _apollo_client_errors__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @apollo/client/errors */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/errors/CombinedGraphQLErrors.js\");\n/* harmony import */ var _apollo_client_errors__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! @apollo/client/errors */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/errors/index.js\");\n/* harmony import */ var _apollo_client_errors__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! @apollo/client/errors */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/errors/LinkError.js\");\n/* harmony import */ var _apollo_client_link__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! @apollo/client/link */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/link/core/execute.js\");\n/* harmony import */ var _apollo_client_masking__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! @apollo/client/masking */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/masking/maskOperation.js\");\n/* harmony import */ var _apollo_client_masking__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! @apollo/client/masking */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/masking/maskFragment.js\");\n/* harmony import */ var _apollo_client_utilities__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @apollo/client/utilities */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/graphql/print.js\");\n/* harmony import */ var _apollo_client_utilities__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! @apollo/client/utilities */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/isNetworkRequestInFlight.js\");\n/* harmony import */ var _apollo_client_utilities__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! @apollo/client/utilities */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/caching/sizes.js\");\n/* harmony import */ var _apollo_client_utilities__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! @apollo/client/utilities */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/graphql/DocumentTransform.js\");\n/* harmony import */ var _apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @apollo/client/utilities/environment */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/environment/index.development.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getOperationName.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/graphQLResultHasError.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/checkDocument.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/filterMap.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/toQueryResult.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getOperationDefinition.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/hasDirectives.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/hasForcedResolvers.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/removeDirectivesFromDocument.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getDefaultValues.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/isDocumentNode.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/isNonNullObject.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/makeUniqueId.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/caches.js\");\n/* harmony import */ var _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @apollo/client/utilities/invariant */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/invariant/index.js\");\n/* harmony import */ var _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @apollo/client/utilities/invariant */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/invariant/index.development.js\");\n/* harmony import */ var _networkStatus_js__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./networkStatus.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/core/networkStatus.js\");\n/* harmony import */ var _ObservableQuery_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./ObservableQuery.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/core/ObservableQuery.js\");\n/* harmony import */ var _QueryInfo_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./QueryInfo.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/core/QueryInfo.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar _context_queryDeduplication;\nclass QueryManager {\n    get link() {\n        return this.client.link;\n    }\n    get cache() {\n        return this.client.cache;\n    }\n    /**\n     * Call this method to terminate any active query processes, making it safe\n     * to dispose of this QueryManager instance.\n     */ stop() {\n        this.obsQueries.forEach((oq)=>oq.stop());\n        this.cancelPendingFetches((0,_apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_1__.newInvariantError)(83));\n    }\n    cancelPendingFetches(error) {\n        this.fetchCancelFns.forEach((cancel)=>cancel(error));\n        this.fetchCancelFns.clear();\n    }\n    async mutate(param) {\n        let { mutation, variables, optimisticResponse, updateQueries, refetchQueries = [], awaitRefetchQueries = false, update: updateWithProxyFn, onQueryUpdated, fetchPolicy, errorPolicy, keepRootFields, context } = param;\n        const queryInfo = new _QueryInfo_js__WEBPACK_IMPORTED_MODULE_2__.QueryInfo(this);\n        mutation = this.cache.transformForLink(this.transform(mutation));\n        const { hasClientExports } = this.getDocumentInfo(mutation);\n        variables = this.getVariables(mutation, variables);\n        if (hasClientExports) {\n            if (_apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_3__.__DEV__) {\n                (0,_apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_4__.invariant)(this.localState, 84, (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_5__.getOperationName)(mutation, \"(anonymous)\"));\n            }\n            variables = await this.localState.getExportedVariables({\n                client: this.client,\n                document: mutation,\n                variables,\n                context\n            });\n        }\n        const mutationStoreValue = this.mutationStore && (this.mutationStore[queryInfo.id] = {\n            mutation,\n            variables,\n            loading: true,\n            error: null\n        });\n        const isOptimistic = optimisticResponse && queryInfo.markMutationOptimistic(optimisticResponse, {\n            document: mutation,\n            variables,\n            cacheWriteBehavior: fetchPolicy === \"no-cache\" ? 0 /* CacheWriteBehavior.FORBID */  : 2 /* CacheWriteBehavior.MERGE */ ,\n            errorPolicy,\n            context,\n            updateQueries,\n            update: updateWithProxyFn,\n            keepRootFields\n        });\n        this.broadcastQueries();\n        return new Promise((resolve, reject)=>{\n            const cause = {};\n            return this.getObservableFromLink(mutation, {\n                ...context,\n                optimisticResponse: isOptimistic ? optimisticResponse : void 0\n            }, variables, {}, false).observable.pipe(validateDidEmitValue(), (0,_barrel_optimize_names_EMPTY_Subject_catchError_concat_filter_finalize_from_lastValueFrom_map_materialize_mergeMap_of_share_shareReplay_tap_rxjs__WEBPACK_IMPORTED_MODULE_6__.mergeMap)((result)=>{\n                const storeResult = {\n                    ...result\n                };\n                return (0,_barrel_optimize_names_EMPTY_Subject_catchError_concat_filter_finalize_from_lastValueFrom_map_materialize_mergeMap_of_share_shareReplay_tap_rxjs__WEBPACK_IMPORTED_MODULE_7__.from)(queryInfo.markMutationResult(storeResult, {\n                    document: mutation,\n                    variables,\n                    cacheWriteBehavior: fetchPolicy === \"no-cache\" ? 0 /* CacheWriteBehavior.FORBID */  : 2 /* CacheWriteBehavior.MERGE */ ,\n                    errorPolicy,\n                    context,\n                    update: updateWithProxyFn,\n                    updateQueries,\n                    awaitRefetchQueries,\n                    refetchQueries,\n                    removeOptimistic: isOptimistic ? queryInfo.id : void 0,\n                    onQueryUpdated,\n                    keepRootFields\n                }));\n            })).pipe((0,_barrel_optimize_names_EMPTY_Subject_catchError_concat_filter_finalize_from_lastValueFrom_map_materialize_mergeMap_of_share_shareReplay_tap_rxjs__WEBPACK_IMPORTED_MODULE_8__.map)((storeResult)=>{\n                const hasErrors = (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_9__.graphQLResultHasError)(storeResult);\n                if (hasErrors && errorPolicy === \"none\") {\n                    throw new _apollo_client_errors__WEBPACK_IMPORTED_MODULE_10__.CombinedGraphQLErrors(storeResult);\n                }\n                if (mutationStoreValue) {\n                    mutationStoreValue.loading = false;\n                    mutationStoreValue.error = null;\n                }\n                return storeResult;\n            })).subscribe({\n                next: (storeResult)=>{\n                    this.broadcastQueries();\n                    // Since mutations might receive multiple payloads from the\n                    // ApolloLink chain (e.g. when used with @defer),\n                    // we resolve with a SingleExecutionResult or after the final\n                    // ExecutionPatchResult has arrived and we have assembled the\n                    // multipart response into a single result.\n                    if (!queryInfo.hasNext) {\n                        const result = {\n                            data: this.maskOperation({\n                                document: mutation,\n                                data: storeResult.data,\n                                fetchPolicy,\n                                cause\n                            })\n                        };\n                        if ((0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_9__.graphQLResultHasError)(storeResult)) {\n                            result.error = new _apollo_client_errors__WEBPACK_IMPORTED_MODULE_10__.CombinedGraphQLErrors(storeResult);\n                        }\n                        if (Object.keys(storeResult.extensions || {}).length) {\n                            result.extensions = storeResult.extensions;\n                        }\n                        resolve(result);\n                    }\n                },\n                error: (error)=>{\n                    if (mutationStoreValue) {\n                        mutationStoreValue.loading = false;\n                        mutationStoreValue.error = error;\n                    }\n                    if (isOptimistic) {\n                        this.cache.removeOptimistic(queryInfo.id);\n                    }\n                    this.broadcastQueries();\n                    if (errorPolicy === \"ignore\") {\n                        return resolve({\n                            data: undefined\n                        });\n                    }\n                    if (errorPolicy === \"all\") {\n                        return resolve({\n                            data: undefined,\n                            error\n                        });\n                    }\n                    reject(error);\n                }\n            });\n        });\n    }\n    fetchQuery(options, networkStatus) {\n        (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_11__.checkDocument)(options.query, graphql__WEBPACK_IMPORTED_MODULE_12__.OperationTypeNode.QUERY);\n        // do the rest asynchronously to keep the same rejection timing as\n        // checks further in `.mutate`\n        return (async ()=>(0,_barrel_optimize_names_EMPTY_Subject_catchError_concat_filter_finalize_from_lastValueFrom_map_materialize_mergeMap_of_share_shareReplay_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.lastValueFrom)(this.fetchObservableWithInfo(options, {\n                networkStatus\n            }).observable.pipe((0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_14__.filterMap)((value)=>{\n                switch(value.kind){\n                    case \"E\":\n                        throw value.error;\n                    case \"N\":\n                        {\n                            if (value.source !== \"newNetworkStatus\") return (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_15__.toQueryResult)(value.value);\n                        }\n                }\n            })), {\n                // This default is needed when a `standby` fetch policy is used to avoid\n                // an EmptyError from rejecting this promise.\n                defaultValue: {\n                    data: undefined\n                }\n            }))();\n    }\n    transform(document) {\n        return this.documentTransform.transformDocument(document);\n    }\n    getDocumentInfo(document) {\n        const { transformCache } = this;\n        if (!transformCache.has(document)) {\n            const operationDefinition = (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_16__.getOperationDefinition)(document);\n            const cacheEntry = {\n                // TODO These three calls (hasClientExports, shouldForceResolvers, and\n                // usesNonreactiveDirective) are performing independent full traversals\n                // of the transformed document. We should consider merging these\n                // traversals into a single pass in the future, though the work is\n                // cached after the first time.\n                hasClientExports: (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_17__.hasDirectives)([\n                    \"client\",\n                    \"export\"\n                ], document, true),\n                hasForcedResolvers: (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_18__.hasForcedResolvers)(document),\n                hasNonreactiveDirective: (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_17__.hasDirectives)([\n                    \"nonreactive\"\n                ], document),\n                hasIncrementalDirective: (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_17__.hasDirectives)([\n                    \"defer\"\n                ], document),\n                nonReactiveQuery: addNonReactiveToNamedFragments(document),\n                clientQuery: (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_17__.hasDirectives)([\n                    \"client\"\n                ], document) ? document : null,\n                serverQuery: (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_19__.removeDirectivesFromDocument)([\n                    {\n                        name: \"client\",\n                        remove: true\n                    },\n                    {\n                        name: \"connection\"\n                    },\n                    {\n                        name: \"nonreactive\"\n                    },\n                    {\n                        name: \"unmask\"\n                    }\n                ], document),\n                operationType: operationDefinition === null || operationDefinition === void 0 ? void 0 : operationDefinition.operation,\n                defaultVars: (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_20__.getDefaultValues)(operationDefinition),\n                // Transform any mutation or subscription operations to query operations\n                // so we can read/write them from/to the cache.\n                asQuery: {\n                    ...document,\n                    definitions: document.definitions.map((def)=>{\n                        if (def.kind === \"OperationDefinition\" && def.operation !== \"query\") {\n                            return {\n                                ...def,\n                                operation: \"query\"\n                            };\n                        }\n                        return def;\n                    })\n                }\n            };\n            transformCache.set(document, cacheEntry);\n        }\n        const entry = transformCache.get(document);\n        if (entry.violation) {\n            throw entry.violation;\n        }\n        return entry;\n    }\n    getVariables(document, variables) {\n        const defaultVars = this.getDocumentInfo(document).defaultVars;\n        const varsWithDefaults = Object.entries(variables !== null && variables !== void 0 ? variables : {}).map((param)=>{\n            let [key, value] = param;\n            return [\n                key,\n                value === undefined ? defaultVars[key] : value\n            ];\n        });\n        return {\n            ...defaultVars,\n            ...Object.fromEntries(varsWithDefaults)\n        };\n    }\n    watchQuery(options) {\n        (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_11__.checkDocument)(options.query, graphql__WEBPACK_IMPORTED_MODULE_12__.OperationTypeNode.QUERY);\n        const query = this.transform(options.query);\n        // assign variable default values if supplied\n        // NOTE: We don't modify options.query here with the transformed query to\n        // ensure observable.options.query is set to the raw untransformed query.\n        options = {\n            ...options,\n            variables: this.getVariables(query, options.variables)\n        };\n        if (typeof options.notifyOnNetworkStatusChange === \"undefined\") {\n            options.notifyOnNetworkStatusChange = true;\n        }\n        const observable = new _ObservableQuery_js__WEBPACK_IMPORTED_MODULE_21__.ObservableQuery({\n            queryManager: this,\n            options,\n            transformedQuery: query\n        });\n        return observable;\n    }\n    query(options) {\n        const query = this.transform(options.query);\n        return this.fetchQuery({\n            ...options,\n            query\n        }).then((value)=>({\n                ...value,\n                data: this.maskOperation({\n                    document: query,\n                    data: value === null || value === void 0 ? void 0 : value.data,\n                    fetchPolicy: options.fetchPolicy\n                })\n            }));\n    }\n    generateRequestId() {\n        return this.requestIdCounter++;\n    }\n    clearStore() {\n        let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {\n            discardWatches: true\n        };\n        // Before we have sent the reset action to the store, we can no longer\n        // rely on the results returned by in-flight requests since these may\n        // depend on values that previously existed in the data portion of the\n        // store. So, we cancel the promises and observers that we have issued\n        // so far and not yet resolved (in the case of queries).\n        this.cancelPendingFetches((0,_apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_1__.newInvariantError)(85));\n        this.obsQueries.forEach((observableQuery)=>{\n            // Set loading to true so listeners don't trigger unless they want\n            // results with partial data.\n            observableQuery.reset();\n        });\n        if (this.mutationStore) {\n            this.mutationStore = {};\n        }\n        // begin removing data from the store\n        return this.cache.reset(options);\n    }\n    getObservableQueries() {\n        let include = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"active\";\n        const queries = new Set();\n        const queryNames = new Map();\n        const queryNamesAndQueryStrings = new Map();\n        const legacyQueryOptions = new Set();\n        if (Array.isArray(include)) {\n            include.forEach((desc)=>{\n                if (typeof desc === \"string\") {\n                    queryNames.set(desc, desc);\n                    queryNamesAndQueryStrings.set(desc, false);\n                } else if ((0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_22__.isDocumentNode)(desc)) {\n                    const queryString = (0,_apollo_client_utilities__WEBPACK_IMPORTED_MODULE_23__.print)(this.transform(desc));\n                    queryNames.set(queryString, (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_5__.getOperationName)(desc));\n                    queryNamesAndQueryStrings.set(queryString, false);\n                } else if ((0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_24__.isNonNullObject)(desc) && desc.query) {\n                    legacyQueryOptions.add(desc);\n                }\n            });\n        }\n        this.obsQueries.forEach((oq)=>{\n            const document = (0,_apollo_client_utilities__WEBPACK_IMPORTED_MODULE_23__.print)(this.transform(oq.options.query));\n            if (include === \"all\") {\n                queries.add(oq);\n                return;\n            }\n            const { queryName, options: { fetchPolicy } } = oq;\n            if (include === \"active\" && fetchPolicy === \"standby\") {\n                return;\n            }\n            if (include === \"active\" || queryName && queryNamesAndQueryStrings.has(queryName) || document && queryNamesAndQueryStrings.has(document)) {\n                queries.add(oq);\n                if (queryName) queryNamesAndQueryStrings.set(queryName, true);\n                if (document) queryNamesAndQueryStrings.set(document, true);\n            }\n        });\n        if (legacyQueryOptions.size) {\n            legacyQueryOptions.forEach((options)=>{\n                const oq = new _ObservableQuery_js__WEBPACK_IMPORTED_MODULE_21__.ObservableQuery({\n                    queryManager: this,\n                    options: {\n                        ...options,\n                        fetchPolicy: \"network-only\"\n                    }\n                });\n                queries.add(oq);\n            });\n        }\n        if (_apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_3__.__DEV__ && queryNamesAndQueryStrings.size) {\n            queryNamesAndQueryStrings.forEach((included, nameOrQueryString)=>{\n                if (!included) {\n                    const queryName = queryNames.get(nameOrQueryString);\n                    if (queryName) {\n                        _apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_3__.__DEV__ && _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_4__.invariant.warn(86, queryName);\n                    } else {\n                        _apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_3__.__DEV__ && _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_4__.invariant.warn(87);\n                    }\n                }\n            });\n        }\n        return queries;\n    }\n    refetchObservableQueries() {\n        let includeStandby = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;\n        const observableQueryPromises = [];\n        this.getObservableQueries(includeStandby ? \"all\" : \"active\").forEach((observableQuery)=>{\n            const { fetchPolicy } = observableQuery.options;\n            if ((includeStandby || fetchPolicy !== \"standby\") && fetchPolicy !== \"cache-only\") {\n                observableQueryPromises.push(observableQuery.refetch());\n            }\n        });\n        this.broadcastQueries();\n        return Promise.all(observableQueryPromises);\n    }\n    startGraphQLSubscription(options) {\n        let { query, variables } = options;\n        const { fetchPolicy, errorPolicy = \"none\", context = {}, extensions = {} } = options;\n        (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_11__.checkDocument)(query, graphql__WEBPACK_IMPORTED_MODULE_12__.OperationTypeNode.SUBSCRIPTION);\n        query = this.transform(query);\n        variables = this.getVariables(query, variables);\n        let restart;\n        if (_apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_3__.__DEV__) {\n            (0,_apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_4__.invariant)(!this.getDocumentInfo(query).hasClientExports || this.localState, 88, (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_5__.getOperationName)(query, \"(anonymous)\"));\n        }\n        const observable = (this.getDocumentInfo(query).hasClientExports ? (0,_barrel_optimize_names_EMPTY_Subject_catchError_concat_filter_finalize_from_lastValueFrom_map_materialize_mergeMap_of_share_shareReplay_tap_rxjs__WEBPACK_IMPORTED_MODULE_7__.from)(this.localState.getExportedVariables({\n            client: this.client,\n            document: query,\n            variables,\n            context\n        })) : (0,_barrel_optimize_names_EMPTY_Subject_catchError_concat_filter_finalize_from_lastValueFrom_map_materialize_mergeMap_of_share_shareReplay_tap_rxjs__WEBPACK_IMPORTED_MODULE_25__.of)(variables)).pipe((0,_barrel_optimize_names_EMPTY_Subject_catchError_concat_filter_finalize_from_lastValueFrom_map_materialize_mergeMap_of_share_shareReplay_tap_rxjs__WEBPACK_IMPORTED_MODULE_6__.mergeMap)((variables)=>{\n            const { observable, restart: res } = this.getObservableFromLink(query, context, variables, extensions);\n            const queryInfo = new _QueryInfo_js__WEBPACK_IMPORTED_MODULE_2__.QueryInfo(this);\n            restart = res;\n            return observable.pipe((0,_barrel_optimize_names_EMPTY_Subject_catchError_concat_filter_finalize_from_lastValueFrom_map_materialize_mergeMap_of_share_shareReplay_tap_rxjs__WEBPACK_IMPORTED_MODULE_8__.map)((rawResult)=>{\n                queryInfo.markSubscriptionResult(rawResult, {\n                    document: query,\n                    variables,\n                    errorPolicy,\n                    cacheWriteBehavior: fetchPolicy === \"no-cache\" ? 0 /* CacheWriteBehavior.FORBID */  : 2 /* CacheWriteBehavior.MERGE */ \n                });\n                var _rawResult_data;\n                const result = {\n                    data: (_rawResult_data = rawResult.data) !== null && _rawResult_data !== void 0 ? _rawResult_data : undefined\n                };\n                if ((0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_9__.graphQLResultHasError)(rawResult)) {\n                    result.error = new _apollo_client_errors__WEBPACK_IMPORTED_MODULE_10__.CombinedGraphQLErrors(rawResult);\n                } else if ((0,_apollo_client_errors__WEBPACK_IMPORTED_MODULE_26__.graphQLResultHasProtocolErrors)(rawResult)) {\n                    result.error = rawResult.extensions[_apollo_client_errors__WEBPACK_IMPORTED_MODULE_26__.PROTOCOL_ERRORS_SYMBOL];\n                    // Don't emit protocol errors added by HttpLink\n                    delete rawResult.extensions[_apollo_client_errors__WEBPACK_IMPORTED_MODULE_26__.PROTOCOL_ERRORS_SYMBOL];\n                }\n                if (rawResult.extensions && Object.keys(rawResult.extensions).length) {\n                    result.extensions = rawResult.extensions;\n                }\n                if (result.error && errorPolicy === \"none\") {\n                    result.data = undefined;\n                }\n                if (errorPolicy === \"ignore\") {\n                    delete result.error;\n                }\n                return result;\n            }), (0,_barrel_optimize_names_EMPTY_Subject_catchError_concat_filter_finalize_from_lastValueFrom_map_materialize_mergeMap_of_share_shareReplay_tap_rxjs__WEBPACK_IMPORTED_MODULE_27__.catchError)((error)=>{\n                if (errorPolicy === \"ignore\") {\n                    return (0,_barrel_optimize_names_EMPTY_Subject_catchError_concat_filter_finalize_from_lastValueFrom_map_materialize_mergeMap_of_share_shareReplay_tap_rxjs__WEBPACK_IMPORTED_MODULE_25__.of)({\n                        data: undefined\n                    });\n                }\n                return (0,_barrel_optimize_names_EMPTY_Subject_catchError_concat_filter_finalize_from_lastValueFrom_map_materialize_mergeMap_of_share_shareReplay_tap_rxjs__WEBPACK_IMPORTED_MODULE_25__.of)({\n                    data: undefined,\n                    error\n                });\n            }), (0,_barrel_optimize_names_EMPTY_Subject_catchError_concat_filter_finalize_from_lastValueFrom_map_materialize_mergeMap_of_share_shareReplay_tap_rxjs__WEBPACK_IMPORTED_MODULE_28__.filter)((result)=>!!(result.data || result.error)));\n        }));\n        return Object.assign(observable, {\n            restart: ()=>restart === null || restart === void 0 ? void 0 : restart()\n        });\n    }\n    broadcastQueries() {\n        if (this.onBroadcast) this.onBroadcast();\n        this.obsQueries.forEach((observableQuery)=>observableQuery.notify());\n    }\n    getObservableFromLink(query, context, variables, extensions) {\n        let // Prefer context.queryDeduplication if specified.\n        deduplication = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : (_context_queryDeduplication = context === null || context === void 0 ? void 0 : context.queryDeduplication) !== null && _context_queryDeduplication !== void 0 ? _context_queryDeduplication : this.queryDeduplication;\n        let entry = {};\n        const { serverQuery, clientQuery, operationType, hasIncrementalDirective } = this.getDocumentInfo(query);\n        const operationName = (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_5__.getOperationName)(query);\n        const executeContext = {\n            client: this.client\n        };\n        if (serverQuery) {\n            const { inFlightLinkObservables, link } = this;\n            try {\n                const operation = this.incrementalHandler.prepareRequest({\n                    query: serverQuery,\n                    variables,\n                    context: {\n                        ...this.defaultContext,\n                        ...context,\n                        queryDeduplication: deduplication\n                    },\n                    extensions\n                });\n                context = operation.context;\n                function withRestart(source) {\n                    return new _barrel_optimize_names_Observable_throwError_rxjs__WEBPACK_IMPORTED_MODULE_29__.Observable((observer)=>{\n                        var _entry;\n                        function subscribe() {\n                            return source.subscribe({\n                                next: observer.next.bind(observer),\n                                complete: observer.complete.bind(observer),\n                                error: observer.error.bind(observer)\n                            });\n                        }\n                        let subscription = subscribe();\n                        (_entry = entry).restart || (_entry.restart = ()=>{\n                            subscription.unsubscribe();\n                            subscription = subscribe();\n                        });\n                        return ()=>{\n                            subscription.unsubscribe();\n                            entry.restart = undefined;\n                        };\n                    });\n                }\n                if (deduplication) {\n                    const printedServerQuery = (0,_apollo_client_utilities__WEBPACK_IMPORTED_MODULE_23__.print)(serverQuery);\n                    const varJson = (0,_apollo_client_cache__WEBPACK_IMPORTED_MODULE_30__.canonicalStringify)(variables);\n                    entry = inFlightLinkObservables.lookup(printedServerQuery, varJson);\n                    if (!entry.observable) {\n                        entry.observable = (0,_apollo_client_link__WEBPACK_IMPORTED_MODULE_31__.execute)(link, operation, executeContext).pipe(withRestart, (0,_barrel_optimize_names_EMPTY_Subject_catchError_concat_filter_finalize_from_lastValueFrom_map_materialize_mergeMap_of_share_shareReplay_tap_rxjs__WEBPACK_IMPORTED_MODULE_32__.finalize)(()=>{\n                            if (inFlightLinkObservables.peek(printedServerQuery, varJson) === entry) {\n                                inFlightLinkObservables.remove(printedServerQuery, varJson);\n                            }\n                        }), // We don't want to replay the last emitted value for\n                        // subscriptions and instead opt to wait to receive updates until\n                        // the subscription emits new values.\n                        operationType === graphql__WEBPACK_IMPORTED_MODULE_12__.OperationTypeNode.SUBSCRIPTION ? (0,_barrel_optimize_names_EMPTY_Subject_catchError_concat_filter_finalize_from_lastValueFrom_map_materialize_mergeMap_of_share_shareReplay_tap_rxjs__WEBPACK_IMPORTED_MODULE_33__.share)() : (0,_barrel_optimize_names_EMPTY_Subject_catchError_concat_filter_finalize_from_lastValueFrom_map_materialize_mergeMap_of_share_shareReplay_tap_rxjs__WEBPACK_IMPORTED_MODULE_34__.shareReplay)({\n                            refCount: true\n                        }));\n                    }\n                } else {\n                    entry.observable = (0,_apollo_client_link__WEBPACK_IMPORTED_MODULE_31__.execute)(link, operation, executeContext).pipe(withRestart);\n                }\n            } catch (error) {\n                entry.observable = (0,_barrel_optimize_names_Observable_throwError_rxjs__WEBPACK_IMPORTED_MODULE_35__.throwError)(()=>error);\n            }\n        } else {\n            entry.observable = (0,_barrel_optimize_names_EMPTY_Subject_catchError_concat_filter_finalize_from_lastValueFrom_map_materialize_mergeMap_of_share_shareReplay_tap_rxjs__WEBPACK_IMPORTED_MODULE_25__.of)({\n                data: {}\n            });\n        }\n        if (clientQuery) {\n            const { operation } = (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_16__.getOperationDefinition)(query);\n            if (_apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_3__.__DEV__) {\n                (0,_apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_4__.invariant)(this.localState, 89, operation[0].toUpperCase() + operation.slice(1), operationName !== null && operationName !== void 0 ? operationName : \"(anonymous)\");\n            }\n            (0,_apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_4__.invariant)(!hasIncrementalDirective, 90, operation[0].toUpperCase() + operation.slice(1), operationName !== null && operationName !== void 0 ? operationName : \"(anonymous)\");\n            entry.observable = entry.observable.pipe((0,_barrel_optimize_names_EMPTY_Subject_catchError_concat_filter_finalize_from_lastValueFrom_map_materialize_mergeMap_of_share_shareReplay_tap_rxjs__WEBPACK_IMPORTED_MODULE_6__.mergeMap)((result)=>{\n                return (0,_barrel_optimize_names_EMPTY_Subject_catchError_concat_filter_finalize_from_lastValueFrom_map_materialize_mergeMap_of_share_shareReplay_tap_rxjs__WEBPACK_IMPORTED_MODULE_7__.from)(this.localState.execute({\n                    client: this.client,\n                    document: clientQuery,\n                    remoteResult: result,\n                    context,\n                    variables\n                }));\n            }));\n        }\n        return {\n            restart: ()=>{\n                var _entry_restart;\n                return (_entry_restart = entry.restart) === null || _entry_restart === void 0 ? void 0 : _entry_restart.call(entry);\n            },\n            observable: entry.observable.pipe((0,_barrel_optimize_names_EMPTY_Subject_catchError_concat_filter_finalize_from_lastValueFrom_map_materialize_mergeMap_of_share_shareReplay_tap_rxjs__WEBPACK_IMPORTED_MODULE_27__.catchError)((error)=>{\n                error = (0,_apollo_client_errors__WEBPACK_IMPORTED_MODULE_26__.toErrorLike)(error);\n                (0,_apollo_client_errors__WEBPACK_IMPORTED_MODULE_36__.registerLinkError)(error);\n                throw error;\n            }))\n        };\n    }\n    getResultsFromLink(options, param) {\n        let { queryInfo, cacheWriteBehavior, observableQuery } = param;\n        const requestId = queryInfo.lastRequestId = this.generateRequestId();\n        const { errorPolicy } = options;\n        // Performing transformForLink here gives this.cache a chance to fill in\n        // missing fragment definitions (for example) before sending this document\n        // through the link chain.\n        const linkDocument = this.cache.transformForLink(options.query);\n        return this.getObservableFromLink(linkDocument, options.context, options.variables).observable.pipe((0,_barrel_optimize_names_EMPTY_Subject_catchError_concat_filter_finalize_from_lastValueFrom_map_materialize_mergeMap_of_share_shareReplay_tap_rxjs__WEBPACK_IMPORTED_MODULE_8__.map)((incoming)=>{\n            // Use linkDocument rather than queryInfo.document so the\n            // operation/fragments used to write the result are the same as the\n            // ones used to obtain it from the link.\n            const result = queryInfo.markQueryResult(incoming, {\n                ...options,\n                document: linkDocument,\n                cacheWriteBehavior\n            });\n            const hasErrors = (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_9__.graphQLResultHasError)(result);\n            if (hasErrors && errorPolicy === \"none\") {\n                queryInfo.resetLastWrite();\n                observableQuery === null || observableQuery === void 0 ? void 0 : observableQuery[\"resetNotifications\"]();\n                throw new _apollo_client_errors__WEBPACK_IMPORTED_MODULE_10__.CombinedGraphQLErrors(result);\n            }\n            const aqr = {\n                data: result.data,\n                ...queryInfo.hasNext ? {\n                    loading: true,\n                    networkStatus: _networkStatus_js__WEBPACK_IMPORTED_MODULE_37__.NetworkStatus.streaming,\n                    dataState: \"streaming\",\n                    partial: true\n                } : {\n                    dataState: result.data ? \"complete\" : \"empty\",\n                    loading: false,\n                    networkStatus: _networkStatus_js__WEBPACK_IMPORTED_MODULE_37__.NetworkStatus.ready,\n                    partial: !result.data\n                }\n            };\n            // In the case we start multiple network requests simulatenously, we\n            // want to ensure we properly set `data` if we're reporting on an old\n            // result which will not be caught by the conditional above that ends up\n            // throwing the markError result.\n            if (hasErrors) {\n                if (errorPolicy === \"none\") {\n                    aqr.data = void 0;\n                    aqr.dataState = \"empty\";\n                }\n                if (errorPolicy !== \"ignore\") {\n                    aqr.error = new _apollo_client_errors__WEBPACK_IMPORTED_MODULE_10__.CombinedGraphQLErrors(result);\n                    if (aqr.dataState !== \"streaming\") {\n                        aqr.networkStatus = _networkStatus_js__WEBPACK_IMPORTED_MODULE_37__.NetworkStatus.error;\n                    }\n                }\n            }\n            return aqr;\n        }), (0,_barrel_optimize_names_EMPTY_Subject_catchError_concat_filter_finalize_from_lastValueFrom_map_materialize_mergeMap_of_share_shareReplay_tap_rxjs__WEBPACK_IMPORTED_MODULE_27__.catchError)((error)=>{\n            // Avoid storing errors from older interrupted queries.\n            if (requestId >= queryInfo.lastRequestId && errorPolicy === \"none\") {\n                queryInfo.resetLastWrite();\n                observableQuery === null || observableQuery === void 0 ? void 0 : observableQuery[\"resetNotifications\"]();\n                throw error;\n            }\n            const aqr = {\n                data: undefined,\n                dataState: \"empty\",\n                loading: false,\n                networkStatus: _networkStatus_js__WEBPACK_IMPORTED_MODULE_37__.NetworkStatus.ready,\n                partial: true\n            };\n            if (errorPolicy !== \"ignore\") {\n                aqr.error = error;\n                aqr.networkStatus = _networkStatus_js__WEBPACK_IMPORTED_MODULE_37__.NetworkStatus.error;\n            }\n            return (0,_barrel_optimize_names_EMPTY_Subject_catchError_concat_filter_finalize_from_lastValueFrom_map_materialize_mergeMap_of_share_shareReplay_tap_rxjs__WEBPACK_IMPORTED_MODULE_25__.of)(aqr);\n        }));\n    }\n    fetchObservableWithInfo(options, param) {\n        let { // The initial networkStatus for this fetch, most often\n        // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,\n        // or setVariables.\n        networkStatus = _networkStatus_js__WEBPACK_IMPORTED_MODULE_37__.NetworkStatus.loading, query = options.query, fetchQueryOperator = (x)=>x, onCacheHit = ()=>{}, observableQuery } = param;\n        const variables = this.getVariables(query, options.variables);\n        const defaults = this.defaultOptions.watchQuery;\n        let { fetchPolicy = defaults && defaults.fetchPolicy || \"cache-first\", errorPolicy = defaults && defaults.errorPolicy || \"none\", returnPartialData = false, notifyOnNetworkStatusChange = true, context = {} } = options;\n        if (this.prioritizeCacheValues && (fetchPolicy === \"network-only\" || fetchPolicy === \"cache-and-network\")) {\n            fetchPolicy = \"cache-first\";\n        }\n        const normalized = Object.assign({}, options, {\n            query,\n            variables,\n            fetchPolicy,\n            errorPolicy,\n            returnPartialData,\n            notifyOnNetworkStatusChange,\n            context\n        });\n        const queryInfo = new _QueryInfo_js__WEBPACK_IMPORTED_MODULE_2__.QueryInfo(this, observableQuery);\n        const fromVariables = (variables)=>{\n            // Since normalized is always a fresh copy of options, it's safe to\n            // modify its properties here, rather than creating yet another new\n            // WatchQueryOptions object.\n            normalized.variables = variables;\n            const cacheWriteBehavior = fetchPolicy === \"no-cache\" ? 0 /* CacheWriteBehavior.FORBID */  : networkStatus === _networkStatus_js__WEBPACK_IMPORTED_MODULE_37__.NetworkStatus.refetch && normalized.refetchWritePolicy !== \"merge\" ? 1 /* CacheWriteBehavior.OVERWRITE */  : 2 /* CacheWriteBehavior.MERGE */ ;\n            const observableWithInfo = this.fetchQueryByPolicy(normalized, {\n                queryInfo,\n                cacheWriteBehavior,\n                onCacheHit,\n                observableQuery\n            });\n            observableWithInfo.observable = observableWithInfo.observable.pipe(fetchQueryOperator);\n            if (// If we're in standby, postpone advancing options.fetchPolicy using\n            // applyNextFetchPolicy.\n            normalized.fetchPolicy !== \"standby\") {\n                observableQuery === null || observableQuery === void 0 ? void 0 : observableQuery[\"applyNextFetchPolicy\"](\"after-fetch\", options);\n            }\n            return observableWithInfo;\n        };\n        // This cancel function needs to be set before the concast is created,\n        // in case concast creation synchronously cancels the request.\n        const cleanupCancelFn = ()=>{\n            this.fetchCancelFns.delete(queryInfo.id);\n        };\n        this.fetchCancelFns.set(queryInfo.id, (error)=>{\n            fetchCancelSubject.next({\n                kind: \"E\",\n                error,\n                source: \"network\"\n            });\n        });\n        const fetchCancelSubject = new _barrel_optimize_names_EMPTY_Subject_catchError_concat_filter_finalize_from_lastValueFrom_map_materialize_mergeMap_of_share_shareReplay_tap_rxjs__WEBPACK_IMPORTED_MODULE_38__.Subject();\n        let observable, containsDataFromLink;\n        // If the query has @export(as: ...) directives, then we need to\n        // process those directives asynchronously. When there are no\n        // @export directives (the common case), we deliberately avoid\n        // wrapping the result of this.fetchQueryByPolicy in a Promise,\n        // since the timing of result delivery is (unfortunately) important\n        // for backwards compatibility. TODO This code could be simpler if\n        // we deprecated and removed LocalState.\n        if (this.getDocumentInfo(normalized.query).hasClientExports) {\n            if (_apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_3__.__DEV__) {\n                (0,_apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_4__.invariant)(this.localState, 91, (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_5__.getOperationName)(normalized.query, \"(anonymous)\"));\n            }\n            observable = (0,_barrel_optimize_names_EMPTY_Subject_catchError_concat_filter_finalize_from_lastValueFrom_map_materialize_mergeMap_of_share_shareReplay_tap_rxjs__WEBPACK_IMPORTED_MODULE_7__.from)(this.localState.getExportedVariables({\n                client: this.client,\n                document: normalized.query,\n                variables: normalized.variables,\n                context: normalized.context\n            })).pipe((0,_barrel_optimize_names_EMPTY_Subject_catchError_concat_filter_finalize_from_lastValueFrom_map_materialize_mergeMap_of_share_shareReplay_tap_rxjs__WEBPACK_IMPORTED_MODULE_6__.mergeMap)((variables)=>fromVariables(variables).observable));\n            // there is just no way we can synchronously get the *right* value here,\n            // so we will assume `true`, which is the behaviour before the bug fix in\n            // #10597. This means that bug is not fixed in that case, and is probably\n            // un-fixable with reasonable effort for the edge case of @export as\n            // directives.\n            containsDataFromLink = true;\n        } else {\n            const sourcesWithInfo = fromVariables(normalized.variables);\n            containsDataFromLink = sourcesWithInfo.fromLink;\n            observable = sourcesWithInfo.observable;\n        }\n        return {\n            // Merge `observable` with `fetchCancelSubject`, in a way that completing or\n            // erroring either of them will complete the merged obserable.\n            observable: new _barrel_optimize_names_Observable_throwError_rxjs__WEBPACK_IMPORTED_MODULE_29__.Observable((observer)=>{\n                observer.add(cleanupCancelFn);\n                observable.subscribe(observer);\n                fetchCancelSubject.subscribe(observer);\n            }).pipe((0,_barrel_optimize_names_EMPTY_Subject_catchError_concat_filter_finalize_from_lastValueFrom_map_materialize_mergeMap_of_share_shareReplay_tap_rxjs__WEBPACK_IMPORTED_MODULE_33__.share)()),\n            fromLink: containsDataFromLink\n        };\n    }\n    refetchQueries(param) {\n        let { updateCache, include, optimistic = false, removeOptimistic = optimistic ? (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_39__.makeUniqueId)(\"refetchQueries\") : void 0, onQueryUpdated } = param;\n        const includedQueriesByOq = new Map();\n        if (include) {\n            this.getObservableQueries(include).forEach((oq)=>{\n                if (oq.options.fetchPolicy === \"cache-only\") {\n                    return;\n                }\n                const current = oq.getCurrentResult();\n                includedQueriesByOq.set(oq, {\n                    oq,\n                    lastDiff: {\n                        result: current === null || current === void 0 ? void 0 : current.data,\n                        complete: !(current === null || current === void 0 ? void 0 : current.partial)\n                    }\n                });\n            });\n        }\n        const results = new Map();\n        if (updateCache) {\n            const handled = new Set();\n            this.cache.batch({\n                update: updateCache,\n                // Since you can perform any combination of cache reads and/or writes in\n                // the cache.batch update function, its optimistic option can be either\n                // a boolean or a string, representing three distinct modes of\n                // operation:\n                //\n                // * false: read/write only the root layer\n                // * true: read/write the topmost layer\n                // * string: read/write a fresh optimistic layer with that ID string\n                //\n                // When typeof optimistic === \"string\", a new optimistic layer will be\n                // temporarily created within cache.batch with that string as its ID. If\n                // we then pass that same string as the removeOptimistic option, we can\n                // make cache.batch immediately remove the optimistic layer after\n                // running the updateCache function, triggering only one broadcast.\n                //\n                // However, the refetchQueries method accepts only true or false for its\n                // optimistic option (not string). We interpret true to mean a temporary\n                // optimistic layer should be created, to allow efficiently rolling back\n                // the effect of the updateCache function, which involves passing a\n                // string instead of true as the optimistic option to cache.batch, when\n                // refetchQueries receives optimistic: true.\n                //\n                // In other words, we are deliberately not supporting the use case of\n                // writing to an *existing* optimistic layer (using the refetchQueries\n                // updateCache function), since that would potentially interfere with\n                // other optimistic updates in progress. Instead, you can read/write\n                // only the root layer by passing optimistic: false to refetchQueries,\n                // or you can read/write a brand new optimistic layer that will be\n                // automatically removed by passing optimistic: true.\n                optimistic: optimistic && removeOptimistic || false,\n                // The removeOptimistic option can also be provided by itself, even if\n                // optimistic === false, to remove some previously-added optimistic\n                // layer safely and efficiently, like we do in markMutationResult.\n                //\n                // If an explicit removeOptimistic string is provided with optimistic:\n                // true, the removeOptimistic string will determine the ID of the\n                // temporary optimistic layer, in case that ever matters.\n                removeOptimistic,\n                onWatchUpdated (watch, diff, lastDiff) {\n                    const oq = watch.watcher;\n                    if (oq instanceof _ObservableQuery_js__WEBPACK_IMPORTED_MODULE_21__.ObservableQuery && !handled.has(oq)) {\n                        handled.add(oq);\n                        if (onQueryUpdated) {\n                            // Since we're about to handle this query now, remove it from\n                            // includedQueriesById, in case it was added earlier because of\n                            // options.include.\n                            includedQueriesByOq.delete(oq);\n                            let result = onQueryUpdated(oq, diff, lastDiff);\n                            if (result === true) {\n                                // The onQueryUpdated function requested the default refetching\n                                // behavior by returning true.\n                                result = oq.refetch().retain();\n                            }\n                            // Record the result in the results Map, as long as onQueryUpdated\n                            // did not return false to skip/ignore this result.\n                            if (result !== false) {\n                                results.set(oq, result);\n                            }\n                            // Allow the default cache broadcast to happen, except when\n                            // onQueryUpdated returns false.\n                            return result;\n                        }\n                        if (onQueryUpdated !== null && oq.options.fetchPolicy !== \"cache-only\") {\n                            // If we don't have an onQueryUpdated function, and onQueryUpdated\n                            // was not disabled by passing null, make sure this query is\n                            // \"included\" like any other options.include-specified query.\n                            includedQueriesByOq.set(oq, {\n                                oq,\n                                lastDiff,\n                                diff\n                            });\n                        }\n                    }\n                }\n            });\n        }\n        if (includedQueriesByOq.size) {\n            includedQueriesByOq.forEach((param)=>{\n                let { oq, lastDiff, diff } = param;\n                let result;\n                // If onQueryUpdated is provided, we want to use it for all included\n                // queries, even the QueryOptions ones.\n                if (onQueryUpdated) {\n                    if (!diff) {\n                        diff = oq.getCacheDiff();\n                    }\n                    result = onQueryUpdated(oq, diff, lastDiff);\n                }\n                // Otherwise, we fall back to refetching.\n                if (!onQueryUpdated || result === true) {\n                    result = oq.refetch().retain();\n                }\n                if (result !== false) {\n                    results.set(oq, result);\n                }\n            });\n        }\n        if (removeOptimistic) {\n            // In case no updateCache callback was provided (so cache.batch was not\n            // called above, and thus did not already remove the optimistic layer),\n            // remove it here. Since this is a no-op when the layer has already been\n            // removed, we do it even if we called cache.batch above, since it's\n            // possible this.cache is an instance of some ApolloCache subclass other\n            // than InMemoryCache, and does not fully support the removeOptimistic\n            // option for cache.batch.\n            this.cache.removeOptimistic(removeOptimistic);\n        }\n        return results;\n    }\n    maskOperation(options) {\n        const { document, data } = options;\n        if (_apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_3__.__DEV__) {\n            var _getOperationDefinition;\n            const { fetchPolicy, cause = {} } = options;\n            const operationType = (_getOperationDefinition = (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_16__.getOperationDefinition)(document)) === null || _getOperationDefinition === void 0 ? void 0 : _getOperationDefinition.operation;\n            if (this.dataMasking && fetchPolicy === \"no-cache\" && !isFullyUnmaskedOperation(document) && !this.noCacheWarningsByCause.has(cause)) {\n                this.noCacheWarningsByCause.add(cause);\n                _apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_3__.__DEV__ && _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_4__.invariant.warn(92, (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_5__.getOperationName)(document, \"Unnamed \".concat(operationType !== null && operationType !== void 0 ? operationType : \"operation\")));\n            }\n        }\n        return this.dataMasking ? (0,_apollo_client_masking__WEBPACK_IMPORTED_MODULE_40__.maskOperation)(data, document, this.cache) : data;\n    }\n    maskFragment(options) {\n        const { data, fragment, fragmentName } = options;\n        return this.dataMasking ? (0,_apollo_client_masking__WEBPACK_IMPORTED_MODULE_41__.maskFragment)(data, fragment, this.cache, fragmentName) : data;\n    }\n    fetchQueryByPolicy(param, param1) {\n        let { query, variables, fetchPolicy, errorPolicy, returnPartialData, context } = param, { cacheWriteBehavior, onCacheHit, queryInfo, observableQuery } = param1;\n        const readCache = ()=>this.cache.diff({\n                query,\n                variables,\n                returnPartialData: true,\n                optimistic: true\n            });\n        const resultsFromCache = (diff, networkStatus)=>{\n            const data = diff.result;\n            if (_apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_3__.__DEV__ && !returnPartialData && data !== null) {\n                (0,_ObservableQuery_js__WEBPACK_IMPORTED_MODULE_21__.logMissingFieldErrors)(diff.missing);\n            }\n            const toResult = (data)=>{\n                // TODO: Eventually we should move this handling into\n                // queryInfo.getDiff() directly. Since getDiff is updated to return null\n                // on returnPartialData: false, we should take advantage of that instead\n                // of having to patch it elsewhere.\n                if (!diff.complete && !returnPartialData) {\n                    data = undefined;\n                }\n                return {\n                    // TODO: Handle partial data\n                    data: data,\n                    dataState: diff.complete ? \"complete\" : data ? \"partial\" : \"empty\",\n                    loading: (0,_apollo_client_utilities__WEBPACK_IMPORTED_MODULE_42__.isNetworkRequestInFlight)(networkStatus),\n                    networkStatus,\n                    partial: !diff.complete\n                };\n            };\n            const fromData = (data)=>{\n                return (0,_barrel_optimize_names_EMPTY_Subject_catchError_concat_filter_finalize_from_lastValueFrom_map_materialize_mergeMap_of_share_shareReplay_tap_rxjs__WEBPACK_IMPORTED_MODULE_25__.of)({\n                    kind: \"N\",\n                    value: toResult(data),\n                    source: \"cache\"\n                });\n            };\n            if (// Don't attempt to run forced resolvers if we have incomplete cache\n            // data and partial isn't allowed since this result would get set to\n            // `undefined` anyways in `toResult`.\n            (diff.complete || returnPartialData) && this.getDocumentInfo(query).hasForcedResolvers) {\n                if (_apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_3__.__DEV__) {\n                    (0,_apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_4__.invariant)(this.localState, 93, (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_5__.getOperationName)(query, \"(anonymous)\"));\n                }\n                onCacheHit();\n                return (0,_barrel_optimize_names_EMPTY_Subject_catchError_concat_filter_finalize_from_lastValueFrom_map_materialize_mergeMap_of_share_shareReplay_tap_rxjs__WEBPACK_IMPORTED_MODULE_7__.from)(this.localState.execute({\n                    client: this.client,\n                    document: query,\n                    remoteResult: data ? {\n                        data\n                    } : undefined,\n                    context,\n                    variables,\n                    onlyRunForcedResolvers: true,\n                    returnPartialData: true\n                }).then((resolved)=>({\n                        kind: \"N\",\n                        value: toResult(resolved.data || void 0),\n                        source: \"cache\"\n                    })));\n            }\n            // Resolves https://github.com/apollographql/apollo-client/issues/10317.\n            // If errorPolicy is 'none' and notifyOnNetworkStatusChange is true,\n            // data was incorrectly returned from the cache on refetch:\n            // if diff.missing exists, we should not return cache data.\n            if (errorPolicy === \"none\" && networkStatus === _networkStatus_js__WEBPACK_IMPORTED_MODULE_37__.NetworkStatus.refetch && diff.missing) {\n                return fromData(void 0);\n            }\n            return fromData(data || undefined);\n        };\n        const resultsFromLink = ()=>this.getResultsFromLink({\n                query,\n                variables,\n                context,\n                fetchPolicy,\n                errorPolicy\n            }, {\n                cacheWriteBehavior,\n                queryInfo,\n                observableQuery\n            }).pipe(validateDidEmitValue(), (0,_barrel_optimize_names_EMPTY_Subject_catchError_concat_filter_finalize_from_lastValueFrom_map_materialize_mergeMap_of_share_shareReplay_tap_rxjs__WEBPACK_IMPORTED_MODULE_43__.materialize)(), (0,_barrel_optimize_names_EMPTY_Subject_catchError_concat_filter_finalize_from_lastValueFrom_map_materialize_mergeMap_of_share_shareReplay_tap_rxjs__WEBPACK_IMPORTED_MODULE_8__.map)((result)=>({\n                    ...result,\n                    source: \"network\"\n                })));\n        switch(fetchPolicy){\n            default:\n            case \"cache-first\":\n                {\n                    const diff = readCache();\n                    if (diff.complete) {\n                        return {\n                            fromLink: false,\n                            observable: resultsFromCache(diff, _networkStatus_js__WEBPACK_IMPORTED_MODULE_37__.NetworkStatus.ready)\n                        };\n                    }\n                    if (returnPartialData) {\n                        return {\n                            fromLink: true,\n                            observable: (0,_barrel_optimize_names_EMPTY_Subject_catchError_concat_filter_finalize_from_lastValueFrom_map_materialize_mergeMap_of_share_shareReplay_tap_rxjs__WEBPACK_IMPORTED_MODULE_44__.concat)(resultsFromCache(diff, _networkStatus_js__WEBPACK_IMPORTED_MODULE_37__.NetworkStatus.loading), resultsFromLink())\n                        };\n                    }\n                    return {\n                        fromLink: true,\n                        observable: resultsFromLink()\n                    };\n                }\n            case \"cache-and-network\":\n                {\n                    const diff = readCache();\n                    if (diff.complete || returnPartialData) {\n                        return {\n                            fromLink: true,\n                            observable: (0,_barrel_optimize_names_EMPTY_Subject_catchError_concat_filter_finalize_from_lastValueFrom_map_materialize_mergeMap_of_share_shareReplay_tap_rxjs__WEBPACK_IMPORTED_MODULE_44__.concat)(resultsFromCache(diff, _networkStatus_js__WEBPACK_IMPORTED_MODULE_37__.NetworkStatus.loading), resultsFromLink())\n                        };\n                    }\n                    return {\n                        fromLink: true,\n                        observable: resultsFromLink()\n                    };\n                }\n            case \"cache-only\":\n                return {\n                    fromLink: false,\n                    observable: (0,_barrel_optimize_names_EMPTY_Subject_catchError_concat_filter_finalize_from_lastValueFrom_map_materialize_mergeMap_of_share_shareReplay_tap_rxjs__WEBPACK_IMPORTED_MODULE_44__.concat)(resultsFromCache(readCache(), _networkStatus_js__WEBPACK_IMPORTED_MODULE_37__.NetworkStatus.ready))\n                };\n            case \"network-only\":\n                return {\n                    fromLink: true,\n                    observable: resultsFromLink()\n                };\n            case \"no-cache\":\n                return {\n                    fromLink: true,\n                    observable: resultsFromLink()\n                };\n            case \"standby\":\n                return {\n                    fromLink: false,\n                    observable: _barrel_optimize_names_EMPTY_Subject_catchError_concat_filter_finalize_from_lastValueFrom_map_materialize_mergeMap_of_share_shareReplay_tap_rxjs__WEBPACK_IMPORTED_MODULE_45__.EMPTY\n                };\n        }\n    }\n    constructor(options){\n        /**\n     * Whether to prioritize cache values over network results when\n     * `fetchObservableWithInfo` is called.\n     * This will essentially turn a `\"network-only\"` or `\"cache-and-network\"`\n     * fetchPolicy into a `\"cache-first\"` fetchPolicy, but without influencing\n     * the `fetchPolicy` of the `ObservableQuery`.\n     *\n     * This can e.g. be used to prioritize the cache during the first render after\n     * SSR.\n     */ this.prioritizeCacheValues = false;\n        /**\n     * All ObservableQueries that currently have at least one subscriber.\n     */ this.obsQueries = new Set();\n        // Maps from queryInfo.id strings to Promise rejection functions for\n        // currently active queries and fetches.\n        // Use protected instead of private field so\n        // @apollo/experimental-nextjs-app-support can access type info.\n        this.fetchCancelFns = new Map();\n        this.transformCache = new _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_46__.AutoCleanedWeakCache(_apollo_client_utilities__WEBPACK_IMPORTED_MODULE_47__.cacheSizes[\"queryManager.getDocumentInfo\"] || 2000 /* defaultCacheSizes[\"queryManager.getDocumentInfo\"] */ );\n        this.requestIdCounter = 1;\n        // Use protected instead of private field so\n        // @apollo/experimental-nextjs-app-support can access type info.\n        this.inFlightLinkObservables = new _wry_trie__WEBPACK_IMPORTED_MODULE_0__.Trie(false);\n        this.noCacheWarningsByCause = new WeakSet();\n        const defaultDocumentTransform = new _apollo_client_utilities__WEBPACK_IMPORTED_MODULE_48__.DocumentTransform((document)=>this.cache.transformDocument(document), // Allow the apollo cache to manage its own transform caches\n        {\n            cache: false\n        });\n        this.client = options.client;\n        this.defaultOptions = options.defaultOptions;\n        this.queryDeduplication = options.queryDeduplication;\n        this.clientOptions = options.clientOptions;\n        this.ssrMode = options.ssrMode;\n        this.assumeImmutableResults = options.assumeImmutableResults;\n        this.dataMasking = options.dataMasking;\n        this.localState = options.localState;\n        this.incrementalHandler = options.incrementalHandler;\n        const documentTransform = options.documentTransform;\n        this.documentTransform = documentTransform ? defaultDocumentTransform.concat(documentTransform)// The custom document transform may add new fragment spreads or new\n        // field selections, so we want to give the cache a chance to run\n        // again. For example, the InMemoryCache adds __typename to field\n        // selections and fragments from the fragment registry.\n        .concat(defaultDocumentTransform) : defaultDocumentTransform;\n        this.defaultContext = options.defaultContext || {};\n        if (this.onBroadcast = options.onBroadcast) {\n            this.mutationStore = {};\n        }\n    }\n}\nfunction validateDidEmitValue() {\n    let didEmitValue = false;\n    return (0,_barrel_optimize_names_EMPTY_Subject_catchError_concat_filter_finalize_from_lastValueFrom_map_materialize_mergeMap_of_share_shareReplay_tap_rxjs__WEBPACK_IMPORTED_MODULE_49__.tap)({\n        next () {\n            didEmitValue = true;\n        },\n        complete () {\n            (0,_apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_4__.invariant)(didEmitValue, 94);\n        }\n    });\n}\nfunction isFullyUnmaskedOperation(document) {\n    let isUnmasked = true;\n    (0,graphql__WEBPACK_IMPORTED_MODULE_50__.visit)(document, {\n        FragmentSpread: (node)=>{\n            isUnmasked = !!node.directives && node.directives.some((directive)=>directive.name.value === \"unmask\");\n            if (!isUnmasked) {\n                return graphql__WEBPACK_IMPORTED_MODULE_50__.BREAK;\n            }\n        }\n    });\n    return isUnmasked;\n}\nfunction addNonReactiveToNamedFragments(document) {\n    return (0,graphql__WEBPACK_IMPORTED_MODULE_50__.visit)(document, {\n        FragmentSpread: (node)=>{\n            var _node_directives;\n            // Do not add `@nonreactive` if the fragment is marked with `@unmask`\n            // since we want to react to changes in this fragment.\n            if ((_node_directives = node.directives) === null || _node_directives === void 0 ? void 0 : _node_directives.some((directive)=>directive.name.value === \"unmask\")) {\n                return;\n            }\n            return {\n                ...node,\n                directives: [\n                    ...node.directives || [],\n                    {\n                        kind: graphql__WEBPACK_IMPORTED_MODULE_51__.Kind.DIRECTIVE,\n                        name: {\n                            kind: graphql__WEBPACK_IMPORTED_MODULE_51__.Kind.NAME,\n                            value: \"nonreactive\"\n                        }\n                    }\n                ]\n            };\n        }\n    });\n} //# sourceMappingURL=QueryManager.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/core/QueryManager.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/core/networkStatus.js":
/*!***********************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/core/networkStatus.js ***!
  \***********************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NetworkStatus: () => (/* binding */ NetworkStatus)\n/* harmony export */ });\n/**\n * The current status of a query’s execution in our system.\n */ var NetworkStatus;\n(function(NetworkStatus) {\n    /**\n     * The query has never been run before and the query is now currently running. A query will still\n     * have this network status even if a partial data result was returned from the cache, but a\n     * query was dispatched anyway.\n     */ NetworkStatus[NetworkStatus[\"loading\"] = 1] = \"loading\";\n    /**\n     * If `setVariables` was called and a query was fired because of that then the network status\n     * will be `setVariables` until the result of that query comes back.\n     */ NetworkStatus[NetworkStatus[\"setVariables\"] = 2] = \"setVariables\";\n    /**\n     * Indicates that `fetchMore` was called on this query and that the query created is currently in\n     * flight.\n     */ NetworkStatus[NetworkStatus[\"fetchMore\"] = 3] = \"fetchMore\";\n    /**\n     * Similar to the `setVariables` network status. It means that `refetch` was called on a query\n     * and the refetch request is currently in flight.\n     */ NetworkStatus[NetworkStatus[\"refetch\"] = 4] = \"refetch\";\n    /**\n     * Indicates that a polling query is currently in flight. So for example if you are polling a\n     * query every 10 seconds then the network status will switch to `poll` every 10 seconds whenever\n     * a poll request has been sent but not resolved.\n     */ NetworkStatus[NetworkStatus[\"poll\"] = 6] = \"poll\";\n    /**\n     * No request is in flight for this query, and no errors happened. Everything is OK.\n     */ NetworkStatus[NetworkStatus[\"ready\"] = 7] = \"ready\";\n    /**\n     * No request is in flight for this query, but one or more errors were detected.\n     */ NetworkStatus[NetworkStatus[\"error\"] = 8] = \"error\";\n    /**\n     * Indicates that a `@defer` query has received at least the first chunk of\n     * the result but the full result has not yet been fully streamed to the\n     * client.\n     */ NetworkStatus[NetworkStatus[\"streaming\"] = 9] = \"streaming\";\n})(NetworkStatus || (NetworkStatus = {})); //# sourceMappingURL=networkStatus.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9jb3JlL25ldHdvcmtTdGF0dXMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOztHQUVHLENBQ0gsSUFBWSxhQWlEWDtBQWpERCxVQUFZLGFBQWE7SUFDdkI7Ozs7T0FJRyxDQUNILHVEQUFXO0lBRVg7OztPQUdHLENBQ0gsaUVBQWdCO0lBRWhCOzs7T0FHRyxDQUNILDJEQUFhO0lBRWI7OztPQUdHLENBQ0gsdURBQVc7SUFFWDs7OztPQUlHLENBQ0gsaURBQVE7SUFFUjs7T0FFRyxDQUNILG1EQUFTO0lBRVQ7O09BRUcsQ0FDSCxtREFBUztJQUVUOzs7O09BSUcsQ0FDSCwyREFBYTtDQUNmLENBQUMsQ0FqRFcsYUFBYSxLQUFiLGFBQWEsU0FpRHhCIiwic291cmNlcyI6WyIvaG9tZS91L1Byb2plY3RzL0NvbGRUcmFjZS9zcmMvY29yZS9uZXR3b3JrU3RhdHVzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhlIGN1cnJlbnQgc3RhdHVzIG9mIGEgcXVlcnnigJlzIGV4ZWN1dGlvbiBpbiBvdXIgc3lzdGVtLlxuICovXG5leHBvcnQgZW51bSBOZXR3b3JrU3RhdHVzIHtcbiAgLyoqXG4gICAqIFRoZSBxdWVyeSBoYXMgbmV2ZXIgYmVlbiBydW4gYmVmb3JlIGFuZCB0aGUgcXVlcnkgaXMgbm93IGN1cnJlbnRseSBydW5uaW5nLiBBIHF1ZXJ5IHdpbGwgc3RpbGxcbiAgICogaGF2ZSB0aGlzIG5ldHdvcmsgc3RhdHVzIGV2ZW4gaWYgYSBwYXJ0aWFsIGRhdGEgcmVzdWx0IHdhcyByZXR1cm5lZCBmcm9tIHRoZSBjYWNoZSwgYnV0IGFcbiAgICogcXVlcnkgd2FzIGRpc3BhdGNoZWQgYW55d2F5LlxuICAgKi9cbiAgbG9hZGluZyA9IDEsXG5cbiAgLyoqXG4gICAqIElmIGBzZXRWYXJpYWJsZXNgIHdhcyBjYWxsZWQgYW5kIGEgcXVlcnkgd2FzIGZpcmVkIGJlY2F1c2Ugb2YgdGhhdCB0aGVuIHRoZSBuZXR3b3JrIHN0YXR1c1xuICAgKiB3aWxsIGJlIGBzZXRWYXJpYWJsZXNgIHVudGlsIHRoZSByZXN1bHQgb2YgdGhhdCBxdWVyeSBjb21lcyBiYWNrLlxuICAgKi9cbiAgc2V0VmFyaWFibGVzID0gMixcblxuICAvKipcbiAgICogSW5kaWNhdGVzIHRoYXQgYGZldGNoTW9yZWAgd2FzIGNhbGxlZCBvbiB0aGlzIHF1ZXJ5IGFuZCB0aGF0IHRoZSBxdWVyeSBjcmVhdGVkIGlzIGN1cnJlbnRseSBpblxuICAgKiBmbGlnaHQuXG4gICAqL1xuICBmZXRjaE1vcmUgPSAzLFxuXG4gIC8qKlxuICAgKiBTaW1pbGFyIHRvIHRoZSBgc2V0VmFyaWFibGVzYCBuZXR3b3JrIHN0YXR1cy4gSXQgbWVhbnMgdGhhdCBgcmVmZXRjaGAgd2FzIGNhbGxlZCBvbiBhIHF1ZXJ5XG4gICAqIGFuZCB0aGUgcmVmZXRjaCByZXF1ZXN0IGlzIGN1cnJlbnRseSBpbiBmbGlnaHQuXG4gICAqL1xuICByZWZldGNoID0gNCxcblxuICAvKipcbiAgICogSW5kaWNhdGVzIHRoYXQgYSBwb2xsaW5nIHF1ZXJ5IGlzIGN1cnJlbnRseSBpbiBmbGlnaHQuIFNvIGZvciBleGFtcGxlIGlmIHlvdSBhcmUgcG9sbGluZyBhXG4gICAqIHF1ZXJ5IGV2ZXJ5IDEwIHNlY29uZHMgdGhlbiB0aGUgbmV0d29yayBzdGF0dXMgd2lsbCBzd2l0Y2ggdG8gYHBvbGxgIGV2ZXJ5IDEwIHNlY29uZHMgd2hlbmV2ZXJcbiAgICogYSBwb2xsIHJlcXVlc3QgaGFzIGJlZW4gc2VudCBidXQgbm90IHJlc29sdmVkLlxuICAgKi9cbiAgcG9sbCA9IDYsXG5cbiAgLyoqXG4gICAqIE5vIHJlcXVlc3QgaXMgaW4gZmxpZ2h0IGZvciB0aGlzIHF1ZXJ5LCBhbmQgbm8gZXJyb3JzIGhhcHBlbmVkLiBFdmVyeXRoaW5nIGlzIE9LLlxuICAgKi9cbiAgcmVhZHkgPSA3LFxuXG4gIC8qKlxuICAgKiBObyByZXF1ZXN0IGlzIGluIGZsaWdodCBmb3IgdGhpcyBxdWVyeSwgYnV0IG9uZSBvciBtb3JlIGVycm9ycyB3ZXJlIGRldGVjdGVkLlxuICAgKi9cbiAgZXJyb3IgPSA4LFxuXG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgdGhhdCBhIGBAZGVmZXJgIHF1ZXJ5IGhhcyByZWNlaXZlZCBhdCBsZWFzdCB0aGUgZmlyc3QgY2h1bmsgb2ZcbiAgICogdGhlIHJlc3VsdCBidXQgdGhlIGZ1bGwgcmVzdWx0IGhhcyBub3QgeWV0IGJlZW4gZnVsbHkgc3RyZWFtZWQgdG8gdGhlXG4gICAqIGNsaWVudC5cbiAgICovXG4gIHN0cmVhbWluZyA9IDksXG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/core/networkStatus.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/dev/loadDevMessages.js":
/*!************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/dev/loadDevMessages.js ***!
  \************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loadDevMessages: () => (/* binding */ loadDevMessages)\n/* harmony export */ });\n/* harmony import */ var _invariantErrorCodes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../invariantErrorCodes.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/invariantErrorCodes.js\");\n/* harmony import */ var _loadErrorMessageHandler_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loadErrorMessageHandler.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/dev/loadErrorMessageHandler.js\");\n\n\nfunction loadDevMessages() {\n    (0,_loadErrorMessageHandler_js__WEBPACK_IMPORTED_MODULE_0__.loadErrorMessageHandler)(_invariantErrorCodes_js__WEBPACK_IMPORTED_MODULE_1__.devDebug, _invariantErrorCodes_js__WEBPACK_IMPORTED_MODULE_1__.devError, _invariantErrorCodes_js__WEBPACK_IMPORTED_MODULE_1__.devLog, _invariantErrorCodes_js__WEBPACK_IMPORTED_MODULE_1__.devWarn);\n} //# sourceMappingURL=loadDevMessages.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9kZXYvbG9hZERldk1lc3NhZ2VzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFnRjtBQUVUO0FBRWpFLFNBQVUsZUFBZTtJQUM3QixvRkFBdUIsQ0FBQyw2REFBUSxFQUFFLDZEQUFRLEVBQUUsMkRBQU0sRUFBRSw0REFBTyxDQUFDLENBQUM7QUFDL0QsQ0FBQyIsInNvdXJjZXMiOlsiL2hvbWUvdS9Qcm9qZWN0cy9Db2xkVHJhY2Uvc3JjL2Rldi9sb2FkRGV2TWVzc2FnZXMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGV2RGVidWcsIGRldkVycm9yLCBkZXZMb2csIGRldldhcm4gfSBmcm9tIFwiLi4vaW52YXJpYW50RXJyb3JDb2Rlcy5qc1wiO1xuXG5pbXBvcnQgeyBsb2FkRXJyb3JNZXNzYWdlSGFuZGxlciB9IGZyb20gXCIuL2xvYWRFcnJvck1lc3NhZ2VIYW5kbGVyLmpzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBsb2FkRGV2TWVzc2FnZXMoKSB7XG4gIGxvYWRFcnJvck1lc3NhZ2VIYW5kbGVyKGRldkRlYnVnLCBkZXZFcnJvciwgZGV2TG9nLCBkZXZXYXJuKTtcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/dev/loadDevMessages.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/dev/loadErrorMessageHandler.js":
/*!********************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/dev/loadErrorMessageHandler.js ***!
  \********************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loadErrorMessageHandler: () => (/* binding */ loadErrorMessageHandler)\n/* harmony export */ });\n/* harmony import */ var _apollo_client_utilities_internal_globals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @apollo/client/utilities/internal/globals */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/globals/global.js\");\n/* harmony import */ var _setErrorMessageHandler_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./setErrorMessageHandler.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/dev/setErrorMessageHandler.js\");\n/* harmony import */ var _symbol_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./symbol.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/dev/symbol.js\");\n\n\n\n/**\n * Injects Apollo Client's default error message handler into the application and\n * also loads the error codes that are passed in as arguments.\n */ function loadErrorMessageHandler() {\n    for(var _len = arguments.length, errorCodes = new Array(_len), _key = 0; _key < _len; _key++){\n        errorCodes[_key] = arguments[_key];\n    }\n    (0,_setErrorMessageHandler_js__WEBPACK_IMPORTED_MODULE_0__.setErrorMessageHandler)(handler);\n    for (const codes of errorCodes){\n        Object.assign(handler, codes);\n    }\n    return handler;\n}\nconst handler = (message, args)=>{\n    if (typeof message === \"number\") {\n        const definition = _apollo_client_utilities_internal_globals__WEBPACK_IMPORTED_MODULE_1__[\"default\"][_symbol_js__WEBPACK_IMPORTED_MODULE_2__.ApolloErrorMessageHandler][message];\n        if (!message || !(definition === null || definition === void 0 ? void 0 : definition.message)) return;\n        message = definition.message;\n    }\n    return args.reduce((msg, arg)=>msg.replace(/%[sdfo]/, String(arg)), String(message));\n}; //# sourceMappingURL=loadErrorMessageHandler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9kZXYvbG9hZEVycm9yTWVzc2FnZUhhbmRsZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFtRTtBQUtFO0FBQ2I7QUFFeEQ7OztHQUdHLENBQ0csU0FBVSx1QkFBdUI7WUFBQyx5QkFBRzswQ0FBd0I7O0lBQ2pFLGtGQUFzQixDQUFDLE9BQXNDLENBQUMsQ0FBQztJQUUvRCxLQUFLLE1BQU0sS0FBSyxJQUFJLFVBQVUsQ0FBRSxDQUFDO1FBQy9CLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFRCxPQUFPLE9BQU8sQ0FBQztBQUNqQixDQUFDO0FBRUQsTUFBTSxPQUFPLEdBQUcsQ0FBRSxPQUF3QixFQUFFLElBQWUsRUFBRSxFQUFFO0lBQzdELElBQUksT0FBTyxPQUFPLEtBQUssUUFBUSxFQUFFLENBQUM7UUFDaEMsTUFBTSxVQUFVLEdBQUcsaUZBQU0sQ0FBQyxpRUFBeUIsQ0FBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQy9ELElBQUksQ0FBQyxPQUFPLElBQUksMERBQUMsVUFBVSxDQUFFLE9BQU8sR0FBRSxPQUFPO1FBQzdDLE9BQU8sR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDO0lBQy9CLENBQUM7SUFDRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQ2hCLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFHLENBQUQsRUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQ2pELE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FDaEIsQ0FBQztBQUNKLENBQUMsQ0FBcUMsQ0FBQyIsInNvdXJjZXMiOlsiL2hvbWUvdS9Qcm9qZWN0cy9Db2xkVHJhY2Uvc3JjL2Rldi9sb2FkRXJyb3JNZXNzYWdlSGFuZGxlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnbG9iYWwgfSBmcm9tIFwiQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2ludGVybmFsL2dsb2JhbHNcIjtcblxuaW1wb3J0IHR5cGUgeyBFcnJvckNvZGVzIH0gZnJvbSBcIi4uL2ludmFyaWFudEVycm9yQ29kZXMuanNcIjtcblxuaW1wb3J0IHR5cGUgeyBFcnJvck1lc3NhZ2VIYW5kbGVyIH0gZnJvbSBcIi4vc2V0RXJyb3JNZXNzYWdlSGFuZGxlci5qc1wiO1xuaW1wb3J0IHsgc2V0RXJyb3JNZXNzYWdlSGFuZGxlciB9IGZyb20gXCIuL3NldEVycm9yTWVzc2FnZUhhbmRsZXIuanNcIjtcbmltcG9ydCB7IEFwb2xsb0Vycm9yTWVzc2FnZUhhbmRsZXIgfSBmcm9tIFwiLi9zeW1ib2wuanNcIjtcblxuLyoqXG4gKiBJbmplY3RzIEFwb2xsbyBDbGllbnQncyBkZWZhdWx0IGVycm9yIG1lc3NhZ2UgaGFuZGxlciBpbnRvIHRoZSBhcHBsaWNhdGlvbiBhbmRcbiAqIGFsc28gbG9hZHMgdGhlIGVycm9yIGNvZGVzIHRoYXQgYXJlIHBhc3NlZCBpbiBhcyBhcmd1bWVudHMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsb2FkRXJyb3JNZXNzYWdlSGFuZGxlciguLi5lcnJvckNvZGVzOiBFcnJvckNvZGVzW10pIHtcbiAgc2V0RXJyb3JNZXNzYWdlSGFuZGxlcihoYW5kbGVyIGFzIHR5cGVvZiBoYW5kbGVyICYgRXJyb3JDb2Rlcyk7XG5cbiAgZm9yIChjb25zdCBjb2RlcyBvZiBlcnJvckNvZGVzKSB7XG4gICAgT2JqZWN0LmFzc2lnbihoYW5kbGVyLCBjb2Rlcyk7XG4gIH1cblxuICByZXR1cm4gaGFuZGxlcjtcbn1cblxuY29uc3QgaGFuZGxlciA9ICgobWVzc2FnZTogc3RyaW5nIHwgbnVtYmVyLCBhcmdzOiB1bmtub3duW10pID0+IHtcbiAgaWYgKHR5cGVvZiBtZXNzYWdlID09PSBcIm51bWJlclwiKSB7XG4gICAgY29uc3QgZGVmaW5pdGlvbiA9IGdsb2JhbFtBcG9sbG9FcnJvck1lc3NhZ2VIYW5kbGVyXSFbbWVzc2FnZV07XG4gICAgaWYgKCFtZXNzYWdlIHx8ICFkZWZpbml0aW9uPy5tZXNzYWdlKSByZXR1cm47XG4gICAgbWVzc2FnZSA9IGRlZmluaXRpb24ubWVzc2FnZTtcbiAgfVxuICByZXR1cm4gYXJncy5yZWR1Y2U8c3RyaW5nPihcbiAgICAobXNnLCBhcmcpID0+IG1zZy5yZXBsYWNlKC8lW3NkZm9dLywgU3RyaW5nKGFyZykpLFxuICAgIFN0cmluZyhtZXNzYWdlKVxuICApO1xufSkgYXMgRXJyb3JNZXNzYWdlSGFuZGxlciAmIEVycm9yQ29kZXM7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/dev/loadErrorMessageHandler.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/dev/loadErrorMessages.js":
/*!**************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/dev/loadErrorMessages.js ***!
  \**************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loadErrorMessages: () => (/* binding */ loadErrorMessages)\n/* harmony export */ });\n/* harmony import */ var _invariantErrorCodes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../invariantErrorCodes.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/invariantErrorCodes.js\");\n/* harmony import */ var _loadErrorMessageHandler_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loadErrorMessageHandler.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/dev/loadErrorMessageHandler.js\");\n\n\nfunction loadErrorMessages() {\n    (0,_loadErrorMessageHandler_js__WEBPACK_IMPORTED_MODULE_0__.loadErrorMessageHandler)(_invariantErrorCodes_js__WEBPACK_IMPORTED_MODULE_1__.errorCodes);\n} //# sourceMappingURL=loadErrorMessages.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9kZXYvbG9hZEVycm9yTWVzc2FnZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXVEO0FBRWdCO0FBRWpFLFNBQVUsaUJBQWlCO0lBQy9CLG9GQUF1QixDQUFDLCtEQUFVLENBQUMsQ0FBQztBQUN0QyxDQUFDIiwic291cmNlcyI6WyIvaG9tZS91L1Byb2plY3RzL0NvbGRUcmFjZS9zcmMvZGV2L2xvYWRFcnJvck1lc3NhZ2VzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGVycm9yQ29kZXMgfSBmcm9tIFwiLi4vaW52YXJpYW50RXJyb3JDb2Rlcy5qc1wiO1xuXG5pbXBvcnQgeyBsb2FkRXJyb3JNZXNzYWdlSGFuZGxlciB9IGZyb20gXCIuL2xvYWRFcnJvck1lc3NhZ2VIYW5kbGVyLmpzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBsb2FkRXJyb3JNZXNzYWdlcygpIHtcbiAgbG9hZEVycm9yTWVzc2FnZUhhbmRsZXIoZXJyb3JDb2Rlcyk7XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/dev/loadErrorMessages.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/dev/setErrorMessageHandler.js":
/*!*******************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/dev/setErrorMessageHandler.js ***!
  \*******************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   setErrorMessageHandler: () => (/* binding */ setErrorMessageHandler)\n/* harmony export */ });\n/* harmony import */ var _apollo_client_utilities_internal_globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @apollo/client/utilities/internal/globals */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/globals/global.js\");\n/* harmony import */ var _symbol_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./symbol.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/dev/symbol.js\");\n\n\n/**\n * Overrides the global \"Error Message Handler\" with a custom implementation.\n */ function setErrorMessageHandler(handler) {\n    _apollo_client_utilities_internal_globals__WEBPACK_IMPORTED_MODULE_0__[\"default\"][_symbol_js__WEBPACK_IMPORTED_MODULE_1__.ApolloErrorMessageHandler] = handler;\n} //# sourceMappingURL=setErrorMessageHandler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9kZXYvc2V0RXJyb3JNZXNzYWdlSGFuZGxlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBbUU7QUFJWDtBQWdDeEQ7O0dBRUcsQ0FDRyxTQUFVLHNCQUFzQixDQUFDLE9BQTRCO0lBQ2pFLGlGQUFNLENBQUMsaUVBQXlCLENBQUMsR0FBRyxPQUFzQyxDQUFDO0FBQzdFLENBQUMiLCJzb3VyY2VzIjpbIi9ob21lL3UvUHJvamVjdHMvQ29sZFRyYWNlL3NyYy9kZXYvc2V0RXJyb3JNZXNzYWdlSGFuZGxlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnbG9iYWwgfSBmcm9tIFwiQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2ludGVybmFsL2dsb2JhbHNcIjtcblxuaW1wb3J0IHR5cGUgeyBFcnJvckNvZGVzIH0gZnJvbSBcIi4uL2ludmFyaWFudEVycm9yQ29kZXMuanNcIjtcblxuaW1wb3J0IHsgQXBvbGxvRXJyb3JNZXNzYWdlSGFuZGxlciB9IGZyb20gXCIuL3N5bWJvbC5qc1wiO1xuXG4vKipcbiAqIFRoZSBlcnJvciBtZXNzYWdlIGhhbmRsZXIgaXMgYSBmdW5jdGlvbiB0aGF0IGlzIGNhbGxlZCB3aGVuIGEgbWVzc2FnZSBpc1xuICogbG9nZ2VkIG9yIGFuIGVycm9yIGlzIHRocm93biB0byBkZXRlcm1pbmUgdGhlIGNvbnRlbnRzIG9mIHRoZSBlcnJvciBtZXNzYWdlXG4gKiB0byBiZSBsb2dnZWQgb3IgdGhyb3duLlxuICovXG5leHBvcnQgdHlwZSBFcnJvck1lc3NhZ2VIYW5kbGVyID0ge1xuICAvKipcbiAgICogQHBhcmFtIG1lc3NhZ2UgLSBVc3VhbGx5IHRoZSBlcnJvciBtZXNzYWdlIG51bWJlciAoYXMgZGVmaW5lZCBpblxuICAgKiBgQGFwb2xsby9jbGllbnQvaW52YXJpYW50RXJyb3JDb2Rlcy5qc2ApLlxuICAgKiBJbiBzb21lIGVkZ2UgY2FzZXMsIHRoaXMgY2FuIGFscmVhZHkgYmUgYSBzdHJpbmcsIHRoYXQgY2FuIGJlIHBhc3NlZCB0aHJvdWdoXG4gICAqIGFzIGFuIGVycm9yIG1lc3NhZ2UuXG4gICAqXG4gICAqIEBwYXJhbSBhcmdzIC0gVGhlIHBsYWNlaG9sZGVycyB0aGF0IGNhbiBiZSBwYXNzZWQgaW50byB0aGUgZXJyb3IgbWVzc2FnZSAocHJlLXN0cmluZ2lmaWVkKS5cbiAgICogVGhlc2UgcmVsYXRlIHdpdGggdGhlIGAlc2AgYW5kIGAlZGAgW3N1YnN0aXR1dGlvbiBzdHJpbmdzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvY29uc29sZSN1c2luZ19zdHJpbmdfc3Vic3RpdHV0aW9ucylcbiAgICogaW4gdGhlIGVycm9yIG1lc3NhZ2UgZGVmaW5lZCBpbiBgQGFwb2xsby9jbGllbnQvaW52YXJpYW50RXJyb3JDb2Rlcy5qc2AuXG4gICAqXG4gICAqIOKaoO+4jyBOb3RlIHRoYXQgYXJndW1lbnRzIHdpbGwgb25seSBiZSBwYXNzZWQgaW4gZm9yIGVycm9yIG1lc3NhZ2VzLlxuICAgKiBGb3Igbm9ybWFsIGxvZyBtZXNzYWdlcywgeW91IHdpbGwgZ2V0IGFuIGVtcHR5IGFycmF5IGhlcmUgYW5kIHRoZXkgd2lsbCBkaXJlY3RseVxuICAgKiBiZSBwYXNzZWQgdG8gYGNvbnNvbGUubG9nYCBpbnN0ZWFkLCB0byBoYXZlIHRoZSBzdHJpbmcgc3Vic2l0dXRpb24gZG9uZSBieSB0aGVcbiAgICogZW5naW5lLCBhcyB0aGF0IGFsbG93cyBmb3IgbmljZXIgKGFuZCBpbiB0aGUgY2FzZSBvZiBhIGJyb3dzZXIsIGludGVyYWN0aXZlKVxuICAgKiBvdXRwdXQuXG4gICAqXG4gICAqIEByZXR1cm5zIFRoZSBlcnJvciBtZXNzYWdlIHRvIGJlIGxvZ2dlZCBvciB0aHJvd24uIElmIGl0IHJldHVybnMgYHVuZGVmaW5lZGAsXG4gICAqIHRoZSBtZWNoYW5pc20gd2lsbCBmYWxsIGJhY2sgdG8gdGhlIGRlZmF1bHQ6XG4gICAqIEEgbGluayB0byBodHRwczovL2dvLmFwb2xsby5kZXYvYy9lcnIgd2l0aCBBcG9sbG8gQ2xpZW50IHZlcnNpb24sXG4gICAqIHRoZSBlcnJvciBtZXNzYWdlIG51bWJlciwgYW5kIHRoZSBlcnJvciBtZXNzYWdlIGFyZ3VtZW50cyBlbmNvZGVkIGludG9cbiAgICogdGhlIFVSTCBoYXNoLlxuICAgKi8gKG1lc3NhZ2U6IHN0cmluZyB8IG51bWJlciwgYXJnczogc3RyaW5nW10pOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG59O1xuXG4vKipcbiAqIE92ZXJyaWRlcyB0aGUgZ2xvYmFsIFwiRXJyb3IgTWVzc2FnZSBIYW5kbGVyXCIgd2l0aCBhIGN1c3RvbSBpbXBsZW1lbnRhdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldEVycm9yTWVzc2FnZUhhbmRsZXIoaGFuZGxlcjogRXJyb3JNZXNzYWdlSGFuZGxlcikge1xuICBnbG9iYWxbQXBvbGxvRXJyb3JNZXNzYWdlSGFuZGxlcl0gPSBoYW5kbGVyIGFzIHR5cGVvZiBoYW5kbGVyICYgRXJyb3JDb2Rlcztcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/dev/setErrorMessageHandler.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/dev/symbol.js":
/*!***************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/dev/symbol.js ***!
  \***************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApolloErrorMessageHandler: () => (/* binding */ ApolloErrorMessageHandler)\n/* harmony export */ });\n/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../version.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/version.js\");\n\n// This is duplicated between `@apollo/client/dev` and `@apollo/client/utilities/invariant` to prevent circular references.\nconst ApolloErrorMessageHandler = Symbol.for(\"ApolloErrorMessageHandler_\" + _version_js__WEBPACK_IMPORTED_MODULE_0__.version); //# sourceMappingURL=symbol.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9kZXYvc3ltYm9sLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQ3dDO0FBRXhDLDJIQUEySDtBQUNwSCxNQUFNLHlCQUF5QixHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQ2pELDRCQUE0QixHQUFHLGdEQUFPLENBQ3ZDLENBQUMiLCJzb3VyY2VzIjpbIi9ob21lL3UvUHJvamVjdHMvQ29sZFRyYWNlL3NyYy9kZXYvc3ltYm9sLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgRXJyb3JDb2RlcyB9IGZyb20gXCIuLi9pbnZhcmlhbnRFcnJvckNvZGVzLmpzXCI7XG5pbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSBcIi4uL3ZlcnNpb24uanNcIjtcblxuLy8gVGhpcyBpcyBkdXBsaWNhdGVkIGJldHdlZW4gYEBhcG9sbG8vY2xpZW50L2RldmAgYW5kIGBAYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvaW52YXJpYW50YCB0byBwcmV2ZW50IGNpcmN1bGFyIHJlZmVyZW5jZXMuXG5leHBvcnQgY29uc3QgQXBvbGxvRXJyb3JNZXNzYWdlSGFuZGxlciA9IFN5bWJvbC5mb3IoXG4gIFwiQXBvbGxvRXJyb3JNZXNzYWdlSGFuZGxlcl9cIiArIHZlcnNpb25cbik7XG5kZWNsYXJlIGdsb2JhbCB7XG4gIGludGVyZmFjZSBXaW5kb3cge1xuICAgIFtBcG9sbG9FcnJvck1lc3NhZ2VIYW5kbGVyXT86IHtcbiAgICAgIChtZXNzYWdlOiBzdHJpbmcgfCBudW1iZXIsIGFyZ3M6IHN0cmluZ1tdKTogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICAgIH0gJiBFcnJvckNvZGVzO1xuICB9XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/dev/symbol.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/errors/CombinedGraphQLErrors.js":
/*!*********************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/errors/CombinedGraphQLErrors.js ***!
  \*********************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CombinedGraphQLErrors: () => (/* binding */ CombinedGraphQLErrors)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/errors/utils.js\");\n\nfunction defaultFormatMessage(errors) {\n    return errors// Handle non-spec-compliant servers: See #1185\n    .filter((e)=>e).map((e)=>e.message || \"Error message not found.\").join(\"\\n\");\n}\n/**\n * Represents the combined list of GraphQL errors returned from the server in a\n * GraphQL response. This error type is used when your GraphQL operation returns\n * errors in the `errors` field of the response.\n *\n * @remarks\n *\n * When your GraphQL operation encounters errors on the server side (such as\n * resolver errors, validation errors, or syntax errors), the server returns\n * these errors in the `errors` array of the GraphQL response. Apollo Client\n * wraps these errors in a `CombinedGraphQLErrors` object, which provides access\n * to the individual errors while maintaining additional context about the\n * response.\n *\n * @example\n *\n * ```ts\n * import { CombinedGraphQLErrors } from \"@apollo/client/errors\";\n *\n * // Check if an error is a CombinedGraphQLErrors object\n * if (CombinedGraphQLErrors.is(error)) {\n *   // Access individual GraphQL errors\n *   error.errors.forEach((graphQLError) => {\n *     console.log(graphQLError.message);\n *     console.log(graphQLError.path);\n *     console.log(graphQLError.locations);\n *   });\n *\n *   // Access the original GraphQL result\n *   console.log(error.result);\n * }\n * ```\n */ class CombinedGraphQLErrors extends Error {\n    /**\n    * A method that determines whether an error is a `CombinedGraphQLErrors`\n    * object. This method enables TypeScript to narrow the error type.\n    * \n    * @example\n    * \n    * ```ts\n    * if (CombinedGraphQLErrors.is(error)) {\n    *   // TypeScript now knows `error` is a `CombinedGraphQLErrors` object\n    *   console.log(error.errors);\n    * }\n    * ```\n    */ static is(error) {\n        return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isBranded)(error, \"CombinedGraphQLErrors\");\n    }\n    constructor(result, errors = result.errors || []){\n        super(CombinedGraphQLErrors.formatMessage(errors, {\n            result,\n            defaultFormatMessage\n        }));\n        this.errors = errors;\n        this.data = result.data;\n        this.extensions = result.extensions;\n        this.name = \"CombinedGraphQLErrors\";\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.brand)(this);\n        Object.setPrototypeOf(this, CombinedGraphQLErrors.prototype);\n    }\n} //# sourceMappingURL=CombinedGraphQLErrors.js.map\n/**\n    * A function that formats the error message used for the error's `message`\n    * property. Override this method to provide your own formatting.\n    * \n    * @remarks\n    * \n    * The `formatMessage` function is called by the `CombinedGraphQLErrors`\n    * constructor to provide a formatted message as the `message` property of the\n    * `CombinedGraphQLErrors` object. Follow the [\"Providing a custom message\n    * formatter\"](https://www.apollographql.com/docs/react/api/errors/CombinedGraphQLErrors#providing-a-custom-message-formatter) guide to learn how to modify the message format.\n    * \n    * @param errors - The array of GraphQL errors returned from the server in\n    * the `errors` field of the response.\n    * @param options - Additional context that could be useful when formatting\n    * the message.\n    */ CombinedGraphQLErrors.formatMessage = defaultFormatMessage;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9lcnJvcnMvQ29tYmluZWRHcmFwaFFMRXJyb3JzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBSTZDO0FBOEg3QyxTQUFTLENBQVQsbUJBQTZCLENBQUMsQ0FBOUIsS0FBMEUsRUFBMUU7SUFDRSxDQUFGLE1BQVMsQ0FBVCxLQUVNLENBQU47S0FDTyxDQUFQLEtBQWEsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFsQixDQUFzQixFQUNmLENBQVAsRUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQWYsQ0FBbUIsQ0FBQyxDQUFwQixVQUErQixDQUEvQix5QkFBeUQsRUFDbEQsQ0FBUCxHQUFXLENBQUMsQ0FBWixHQUFnQixDQUFDLENBQ2Q7QUFDSDtBQUVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQWdDQSxHQUNBLG9DQUEyQyxDQUEzQzs7Ozs7Ozs7Ozs7OztPQUlFLENBQUYsTUFBUyxDQUFULENBQVcsQ0FBQyxDQUFaLElBQTBCLEVBQTFCO1FBQ0ksQ0FBSixNQUFXLG9EQUFTLENBQUMsQ0FBckIsSUFBMEIsRUFBRSxDQUE1QixzQkFBbUQsQ0FBQztJQUNsRDtJQXFCQSxDQUFGLFdBQ0ksQ0FESixLQUNrRSxFQUM5RCxDQUZKLFFBRWMsQ0FGZCxLQUVzRCxDQUFDLENBRnZELFNBRWlFLENBRmpFLENBRW1FLENBRm5FO1FBSUksQ0FBSixJQUFTLENBQ0gsQ0FETixvQkFDMkIsQ0FBQyxDQUQ1QixZQUN5QyxDQUFDLENBRDFDLEtBQ2dELEVBQUU7WUFDMUMsQ0FBUixLQUFjO1lBQ04sQ0FBUixtQkFBNEI7UUFDNUIsQ0FBTyxDQUFDLENBQ0g7UUFDRCxDQUFKLEdBQVEsQ0FBQyxDQUFULFFBQWtCLENBQWxCLEtBQXdCO1FBQ3BCLENBQUosR0FBUSxDQUFDLENBQVQsTUFBaUIsQ0FBakIsS0FBNkQsQ0FBQyxDQUE5RCxHQUFrRTtRQUM5RCxDQUFKLEdBQVEsQ0FBQyxDQUFULFlBQXVCLENBQXZCLEtBQW1FLENBQUMsQ0FBcEUsU0FBOEU7UUFDMUUsQ0FBSixHQUFRLENBQUMsQ0FBVCxNQUFnQixDQUFoQixzQkFBdUM7UUFFbkMsZ0RBQUssQ0FBQyxDQUFWLEdBQWMsQ0FBQztRQUNYLENBQUosS0FBVSxDQUFDLENBQVgsYUFBeUIsQ0FBQyxDQUExQixHQUE4QixFQUFFLENBQWhDLG9CQUFxRCxDQUFDLENBQXRELFFBQStELENBQUM7SUFDOUQ7Ozs7Ozs7Ozs7Ozs7Ozs7O09BNUNXLENBQWIsdUJBU0EsQ0FUQSxHQVNBLFVBQ0ksQ0FESixtQkFDd0IiLCJzb3VyY2VzIjpbIi9ob21lL3UvUHJvamVjdHMvQ29sZFRyYWNlL3NyYy9lcnJvcnMvQ29tYmluZWRHcmFwaFFMRXJyb3JzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgRm9ybWF0dGVkRXhlY3V0aW9uUmVzdWx0LCBHcmFwaFFMRm9ybWF0dGVkRXJyb3IgfSBmcm9tIFwiZ3JhcGhxbFwiO1xuXG5pbXBvcnQgdHlwZSB7IEFwb2xsb0xpbmsgfSBmcm9tIFwiQGFwb2xsby9jbGllbnQvbGlua1wiO1xuXG5pbXBvcnQgeyBicmFuZCwgaXNCcmFuZGVkIH0gZnJvbSBcIi4vdXRpbHMuanNcIjtcblxuZXhwb3J0IGRlY2xhcmUgbmFtZXNwYWNlIENvbWJpbmVkR3JhcGhRTEVycm9ycyB7XG4gIGV4cG9ydCBpbnRlcmZhY2UgTWVzc2FnZUZvcm1hdHRlck9wdGlvbnMge1xuICAgIC8qKlxuICAgICAqIFRoZSByYXcgcmVzdWx0IHJldHVybmVkIGZyb20gdGhlIHNlcnZlci5cbiAgICAgKi9cbiAgICByZXN1bHQ6IEFwb2xsb0xpbmsuUmVzdWx0PHVua25vd24+O1xuXG4gICAgLyoqXG4gICAgICogVGhlIGRlZmF1bHQgbWVzc2FnZSBmb3JtYXR0ZXIuIENhbGwgdGhpcyB0byBnZXQgYSBzdHJpbmcgd2l0aCB0aGUgZGVmYXVsdFxuICAgICAqIGZvcm1hdHRlZCBtZXNzYWdlLlxuICAgICAqXG4gICAgICogQHJlbWFya3NcbiAgICAgKiBUbyBmb3JtYXQgcGFydCBvZiB0aGUgbWVzc2FnZSB1c2luZyB0aGUgZGVmYXVsdCBtZXNzYWdlIGZvcm1hdHRlciwgY2FsbFxuICAgICAqIHRoZSBgZGVmYXVsdEZvcm1hdE1lc3NhZ2VgIGZ1bmN0aW9uIHByb3ZpZGVkIHRvIHRoZSBgb3B0aW9uc2AgYXJndW1lbnQgb2ZcbiAgICAgKiB5b3VyIG1lc3NhZ2UgZm9ybWF0dGVyLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIFRoZSBmb2xsb3dpbmcgZXhhbXBsZSBwcmVwZW5kcyBhIHN0cmluZyB0byB0aGUgbWVzc2FnZSBhbmQgdXNlcyB0aGVcbiAgICAgKiBkZWZhdWx0IG1lc3NhZ2UgZm9ybWF0dGVyIHRvIGZvcm1hdCB0aGUgZXJyb3IgbWVzc2FnZXMuXG4gICAgICpcbiAgICAgKiBgYGB0c1xuICAgICAqIENvbWJpbmVkR3JhcGhRTEVycm9ycy5mb3JtYXRNZXNzYWdlID0gKGVycm9ycywgeyBkZWZhdWx0Rm9ybWF0TWVzc2FnZSB9KSA9PiB7XG4gICAgICogICByZXR1cm4gYFtHcmFwaFFMIGVycm9yc106ICR7ZGVmYXVsdEZvcm1hdE1lc3NhZ2UoZXJyb3JzKX1gO1xuICAgICAqIH07XG4gICAgICogYGBgXG4gICAgICovXG4gICAgZGVmYXVsdEZvcm1hdE1lc3NhZ2U6IChcbiAgICAgIGVycm9yczogUmVhZG9ubHlBcnJheTxHcmFwaFFMRm9ybWF0dGVkRXJyb3I+XG4gICAgKSA9PiBzdHJpbmc7XG4gIH1cblxuICAvKipcbiAgICogQnkgZGVmYXVsdCwgYENvbWJpbmVkR3JhcGhRTEVycm9yc2AgZm9ybWF0cyB0aGUgYG1lc3NhZ2VgIHByb3BlcnR5IGJ5XG4gICAqIGpvaW5pbmcgZWFjaCBlcnJvcidzIGBtZXNzYWdlYCBmaWVsZCB3aXRoIGEgbmV3bGluZS4gVG8gY3VzdG9taXplIHRoZVxuICAgKiBmb3JtYXQgb2YgdGhlIGBtZXNzYWdlYCwgc3VjaCBhcyBjaGFuZ2luZyB0aGUgZGVsaW1pdGVyIG9yIGFkZGluZyBhIG1lc3NhZ2VcbiAgICogcHJlZml4LCBvdmVycmlkZSB0aGUgc3RhdGljIGBmb3JtYXRNZXNzYWdlYCBtZXRob2QuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIFRoZSBmb2xsb3dpbmcgZXhhbXBsZSBkZW1vbnN0cmF0ZXMgaG93IHRvIGZvcm1hdCB0aGUgZXJyb3IgbWVzc2FnZSBieVxuICAgKiBqb2luaW5nIGVhY2ggZXJyb3Igd2l0aCBhIGNvbW1hLlxuICAgKlxuICAgKiBgYGB0c1xuICAgKiBpbXBvcnQgeyBDb21iaW5lZEdyYXBoUUxFcnJvcnMgfSBmcm9tIFwiQGFwb2xsby9jbGllbnQvZXJyb3JzXCI7XG4gICAqXG4gICAqIENvbWJpbmVkR3JhcGhRTEVycm9ycy5mb3JtYXRNZXNzYWdlID0gKGVycm9ycykgPT4ge1xuICAgKiAgIHJldHVybiBlcnJvcnMubWFwKChlcnJvcikgPT4gZXJyb3IubWVzc2FnZSkuam9pbihcIiwgXCIpO1xuICAgKiB9O1xuICAgKiBgYGBcbiAgICpcbiAgICogQHJlbWFya3NcbiAgICpcbiAgICogU2VlIHRoZSBbYGZvcm1hdE1lc3NhZ2VgXShodHRwczovL3d3dy5hcG9sbG9ncmFwaHFsLmNvbS9kb2NzL3JlYWN0L2FwaS9lcnJvcnMvQ29tYmluZWRHcmFwaFFMRXJyb3JzI2Zvcm1hdG1lc3NhZ2UpIGRvY3MgZm9yIGRldGFpbHMgYWJvdXQgdGhlIHBhcmFtZXRlcnMgcHJvdmlkZWQgdG8gdGhlIGBmb3JtYXRNZXNzYWdlYCBmdW5jdGlvbi5cbiAgICpcbiAgICogPiBbIU5PVEVdXG4gICAqID4gVGhlIG1lc3NhZ2UgZm9ybWF0dGVyIG5lZWRzIHRvIGJlIGNvbmZpZ3VyZWQgYmVmb3JlIGFueSBvcGVyYXRpb24gaXMgZXhlY3V0ZWQgYnkgQXBvbGxvIENsaWVudCwgb3RoZXJ3aXNlIHRoZSBkZWZhdWx0IG1lc3NhZ2UgZm9ybWF0dGVyIGlzIHVzZWQuIFdlIHJlY29tbWVuZCBjb25maWd1cmluZyB0aGUgbWVzc2FnZSBmb3JtYXR0ZXIgYmVmb3JlIGluaXRpYWxpemluZyB5b3VyIGBBcG9sbG9DbGllbnRgIGluc3RhbmNlLlxuICAgKlxuICAgKiBAcGFyYW0gZXJyb3JzIC0gVGhlIGFycmF5IG9mIEdyYXBoUUwgZXJyb3JzIHJldHVybmVkIGZyb20gdGhlIHNlcnZlciBpbiB0aGVcbiAgICogYGVycm9yc2AgZmllbGQgb2YgdGhlIHJlc3BvbnNlLlxuICAgKiBAcGFyYW0gb3B0aW9ucyAtIEFkZGl0aW9uYWwgY29udGV4dCB0aGF0IGNvdWxkIGJlIHVzZWZ1bCB3aGVuIGZvcm1hdHRpbmdcbiAgICogdGhlIG1lc3NhZ2UuXG4gICAqL1xuICBleHBvcnQgdHlwZSBNZXNzYWdlRm9ybWF0dGVyID0gKFxuICAgIGVycm9yczogUmVhZG9ubHlBcnJheTxHcmFwaFFMRm9ybWF0dGVkRXJyb3I+LFxuICAgIG9wdGlvbnM6IE1lc3NhZ2VGb3JtYXR0ZXJPcHRpb25zXG4gICkgPT4gc3RyaW5nO1xuXG4gIG5hbWVzcGFjZSBEb2N1bWVudGF0aW9uVHlwZXMge1xuICAgIC8qKlxuICAgICAqIEEgZnVuY3Rpb24gdGhhdCBmb3JtYXRzIHRoZSBlcnJvciBtZXNzYWdlIHVzZWQgZm9yIHRoZSBlcnJvcidzIGBtZXNzYWdlYFxuICAgICAqIHByb3BlcnR5LiBPdmVycmlkZSB0aGlzIG1ldGhvZCB0byBwcm92aWRlIHlvdXIgb3duIGZvcm1hdHRpbmcuXG4gICAgICpcbiAgICAgKiBAcmVtYXJrc1xuICAgICAqXG4gICAgICogVGhlIGBmb3JtYXRNZXNzYWdlYCBmdW5jdGlvbiBpcyBjYWxsZWQgYnkgdGhlIGBDb21iaW5lZEdyYXBoUUxFcnJvcnNgXG4gICAgICogY29uc3RydWN0b3IgdG8gcHJvdmlkZSBhIGZvcm1hdHRlZCBtZXNzYWdlIGFzIHRoZSBgbWVzc2FnZWAgcHJvcGVydHkgb2YgdGhlXG4gICAgICogYENvbWJpbmVkR3JhcGhRTEVycm9yc2Agb2JqZWN0LiBGb2xsb3cgdGhlIFtcIlByb3ZpZGluZyBhIGN1c3RvbSBtZXNzYWdlXG4gICAgICogZm9ybWF0dGVyXCJdKGh0dHBzOi8vd3d3LmFwb2xsb2dyYXBocWwuY29tL2RvY3MvcmVhY3QvYXBpL2Vycm9ycy9Db21iaW5lZEdyYXBoUUxFcnJvcnMjcHJvdmlkaW5nLWEtY3VzdG9tLW1lc3NhZ2UtZm9ybWF0dGVyKSBndWlkZSB0byBsZWFybiBob3cgdG8gbW9kaWZ5IHRoZSBtZXNzYWdlIGZvcm1hdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBlcnJvcnMgLSBUaGUgYXJyYXkgb2YgR3JhcGhRTCBlcnJvcnMgcmV0dXJuZWQgZnJvbSB0aGUgc2VydmVyIGluXG4gICAgICogdGhlIGBlcnJvcnNgIGZpZWxkIG9mIHRoZSByZXNwb25zZS5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIEFkZGl0aW9uYWwgY29udGV4dCB0aGF0IGNvdWxkIGJlIHVzZWZ1bCB3aGVuIGZvcm1hdHRpbmdcbiAgICAgKiB0aGUgbWVzc2FnZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JtYXRNZXNzYWdlKFxuICAgICAgZXJyb3JzOiBSZWFkb25seUFycmF5PEdyYXBoUUxGb3JtYXR0ZWRFcnJvcj4sXG4gICAgICBvcHRpb25zOiBNZXNzYWdlRm9ybWF0dGVyT3B0aW9uc1xuICAgICk6IHN0cmluZztcblxuICAgIGludGVyZmFjZSBJbnN0YW5jZVByb3BlcnRpZXMge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgcmF3IGxpc3Qgb2YgR3JhcGhRTCBlcnJvcnMgcmV0dXJuZWQgYnkgdGhlIGBlcnJvcnNgIGZpZWxkIGluIHRoZSBHcmFwaFFMIHJlc3BvbnNlLlxuICAgICAgICovXG4gICAgICByZWFkb25seSBlcnJvcnM6IFJlYWRvbmx5QXJyYXk8R3JhcGhRTEZvcm1hdHRlZEVycm9yPjtcblxuICAgICAgLyoqXG4gICAgICAgKiBQYXJ0aWFsIGRhdGEgcmV0dXJuZWQgaW4gdGhlIGBkYXRhYCBmaWVsZCBvZiB0aGUgR3JhcGhRTCByZXNwb25zZS5cbiAgICAgICAqL1xuICAgICAgcmVhZG9ubHkgZGF0YTogUmVjb3JkPHN0cmluZywgdW5rbm93bj4gfCBudWxsIHwgdW5kZWZpbmVkO1xuXG4gICAgICAvKipcbiAgICAgICAqIEV4dGVuc2lvbnMgcmV0dXJuZWQgYnkgdGhlIGBleHRlbnNpb25zYCBmaWVsZCBpbiB0aGUgR3JhcGhRTCByZXNwb25zZS5cbiAgICAgICAqL1xuICAgICAgcmVhZG9ubHkgZXh0ZW5zaW9uczogUmVjb3JkPHN0cmluZywgdW5rbm93bj4gfCB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBtZXRob2QgdGhhdCBkZXRlcm1pbmVzIHdoZXRoZXIgYW4gZXJyb3IgaXMgYSBge3tlcnJvckNsYXNzfX1gXG4gICAgICogb2JqZWN0LiBUaGlzIG1ldGhvZCBlbmFibGVzIFR5cGVTY3JpcHQgdG8gbmFycm93IHRoZSBlcnJvciB0eXBlLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGBgYHRzXG4gICAgICogaWYgKHt7ZXJyb3JDbGFzc319LmlzKGVycm9yKSkge1xuICAgICAqICAgLy8gVHlwZVNjcmlwdCBub3cga25vd3MgYGVycm9yYCBpcyBhIGB7e2Vycm9yQ2xhc3N9fWAgb2JqZWN0XG4gICAgICogICBjb25zb2xlLmxvZyhlcnJvci5lcnJvcnMpO1xuICAgICAqIH1cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpcyhlcnJvcjogdW5rbm93bik6IGJvb2xlYW47XG4gIH1cbn1cblxuZnVuY3Rpb24gZGVmYXVsdEZvcm1hdE1lc3NhZ2UoZXJyb3JzOiBSZWFkb25seUFycmF5PEdyYXBoUUxGb3JtYXR0ZWRFcnJvcj4pIHtcbiAgcmV0dXJuIChcbiAgICBlcnJvcnNcbiAgICAgIC8vIEhhbmRsZSBub24tc3BlYy1jb21wbGlhbnQgc2VydmVyczogU2VlICMxMTg1XG4gICAgICAuZmlsdGVyKChlKSA9PiBlKVxuICAgICAgLm1hcCgoZSkgPT4gZS5tZXNzYWdlIHx8IFwiRXJyb3IgbWVzc2FnZSBub3QgZm91bmQuXCIpXG4gICAgICAuam9pbihcIlxcblwiKVxuICApO1xufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIGNvbWJpbmVkIGxpc3Qgb2YgR3JhcGhRTCBlcnJvcnMgcmV0dXJuZWQgZnJvbSB0aGUgc2VydmVyIGluIGFcbiAqIEdyYXBoUUwgcmVzcG9uc2UuIFRoaXMgZXJyb3IgdHlwZSBpcyB1c2VkIHdoZW4geW91ciBHcmFwaFFMIG9wZXJhdGlvbiByZXR1cm5zXG4gKiBlcnJvcnMgaW4gdGhlIGBlcnJvcnNgIGZpZWxkIG9mIHRoZSByZXNwb25zZS5cbiAqXG4gKiBAcmVtYXJrc1xuICpcbiAqIFdoZW4geW91ciBHcmFwaFFMIG9wZXJhdGlvbiBlbmNvdW50ZXJzIGVycm9ycyBvbiB0aGUgc2VydmVyIHNpZGUgKHN1Y2ggYXNcbiAqIHJlc29sdmVyIGVycm9ycywgdmFsaWRhdGlvbiBlcnJvcnMsIG9yIHN5bnRheCBlcnJvcnMpLCB0aGUgc2VydmVyIHJldHVybnNcbiAqIHRoZXNlIGVycm9ycyBpbiB0aGUgYGVycm9yc2AgYXJyYXkgb2YgdGhlIEdyYXBoUUwgcmVzcG9uc2UuIEFwb2xsbyBDbGllbnRcbiAqIHdyYXBzIHRoZXNlIGVycm9ycyBpbiBhIGBDb21iaW5lZEdyYXBoUUxFcnJvcnNgIG9iamVjdCwgd2hpY2ggcHJvdmlkZXMgYWNjZXNzXG4gKiB0byB0aGUgaW5kaXZpZHVhbCBlcnJvcnMgd2hpbGUgbWFpbnRhaW5pbmcgYWRkaXRpb25hbCBjb250ZXh0IGFib3V0IHRoZVxuICogcmVzcG9uc2UuXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBgYGB0c1xuICogaW1wb3J0IHsgQ29tYmluZWRHcmFwaFFMRXJyb3JzIH0gZnJvbSBcIkBhcG9sbG8vY2xpZW50L2Vycm9yc1wiO1xuICpcbiAqIC8vIENoZWNrIGlmIGFuIGVycm9yIGlzIGEgQ29tYmluZWRHcmFwaFFMRXJyb3JzIG9iamVjdFxuICogaWYgKENvbWJpbmVkR3JhcGhRTEVycm9ycy5pcyhlcnJvcikpIHtcbiAqICAgLy8gQWNjZXNzIGluZGl2aWR1YWwgR3JhcGhRTCBlcnJvcnNcbiAqICAgZXJyb3IuZXJyb3JzLmZvckVhY2goKGdyYXBoUUxFcnJvcikgPT4ge1xuICogICAgIGNvbnNvbGUubG9nKGdyYXBoUUxFcnJvci5tZXNzYWdlKTtcbiAqICAgICBjb25zb2xlLmxvZyhncmFwaFFMRXJyb3IucGF0aCk7XG4gKiAgICAgY29uc29sZS5sb2coZ3JhcGhRTEVycm9yLmxvY2F0aW9ucyk7XG4gKiAgIH0pO1xuICpcbiAqICAgLy8gQWNjZXNzIHRoZSBvcmlnaW5hbCBHcmFwaFFMIHJlc3VsdFxuICogICBjb25zb2xlLmxvZyhlcnJvci5yZXN1bHQpO1xuICogfVxuICogYGBgXG4gKi9cbmV4cG9ydCBjbGFzcyBDb21iaW5lZEdyYXBoUUxFcnJvcnMgZXh0ZW5kcyBFcnJvciB7XG4gIC8qKlxuICAgKiB7QGluaGVyaXREb2MgQGFwb2xsby9jbGllbnQhQ29tYmluZWRHcmFwaFFMRXJyb3JzLkRvY3VtZW50YXRpb25UeXBlcy5pczpmdW5jdGlvbigxKSB7XCJlcnJvckNsYXNzXCI6XCJDb21iaW5lZEdyYXBoUUxFcnJvcnNcIn19XG4gICAqL1xuICBzdGF0aWMgaXMoZXJyb3I6IHVua25vd24pOiBlcnJvciBpcyBDb21iaW5lZEdyYXBoUUxFcnJvcnMge1xuICAgIHJldHVybiBpc0JyYW5kZWQoZXJyb3IsIFwiQ29tYmluZWRHcmFwaFFMRXJyb3JzXCIpO1xuICB9XG5cbiAgLyoqIHtAaW5oZXJpdERvYyBAYXBvbGxvL2NsaWVudCFDb21iaW5lZEdyYXBoUUxFcnJvcnMuRG9jdW1lbnRhdGlvblR5cGVzLmZvcm1hdE1lc3NhZ2U6ZnVuY3Rpb24oMSl9ICovXG4gIHN0YXRpYyBmb3JtYXRNZXNzYWdlOiBDb21iaW5lZEdyYXBoUUxFcnJvcnMuTWVzc2FnZUZvcm1hdHRlciA9XG4gICAgZGVmYXVsdEZvcm1hdE1lc3NhZ2U7XG5cbiAgLyoqIHtAaW5oZXJpdERvYyBAYXBvbGxvL2NsaWVudCFDb21iaW5lZEdyYXBoUUxFcnJvcnMuRG9jdW1lbnRhdGlvblR5cGVzLkluc3RhbmNlUHJvcGVydGllcyNlcnJvcnM6bWVtYmVyfSAqL1xuICByZWFkb25seSBlcnJvcnM6IFJlYWRvbmx5QXJyYXk8R3JhcGhRTEZvcm1hdHRlZEVycm9yPjtcblxuICAvKioge0Bpbmhlcml0RG9jIEBhcG9sbG8vY2xpZW50IUNvbWJpbmVkR3JhcGhRTEVycm9ycy5Eb2N1bWVudGF0aW9uVHlwZXMuSW5zdGFuY2VQcm9wZXJ0aWVzI2RhdGE6bWVtYmVyfSAqL1xuICByZWFkb25seSBkYXRhOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPiB8IG51bGwgfCB1bmRlZmluZWQ7XG5cbiAgLyoqIHtAaW5oZXJpdERvYyBAYXBvbGxvL2NsaWVudCFDb21iaW5lZEdyYXBoUUxFcnJvcnMuRG9jdW1lbnRhdGlvblR5cGVzLkluc3RhbmNlUHJvcGVydGllcyNleHRlbnNpb25zOm1lbWJlcn0gKi9cbiAgcmVhZG9ubHkgZXh0ZW5zaW9uczogUmVjb3JkPHN0cmluZywgdW5rbm93bj4gfCB1bmRlZmluZWQ7XG5cbiAgY29uc3RydWN0b3IocmVzdWx0OiBGb3JtYXR0ZWRFeGVjdXRpb25SZXN1bHQ8YW55Pik7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHJlc3VsdDogQXBvbGxvTGluay5SZXN1bHQ8YW55PixcbiAgICBlcnJvcnM6IFJlYWRvbmx5QXJyYXk8R3JhcGhRTEZvcm1hdHRlZEVycm9yPlxuICApO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHJlc3VsdDogQXBvbGxvTGluay5SZXN1bHQ8YW55PiB8IEZvcm1hdHRlZEV4ZWN1dGlvblJlc3VsdDxhbnk+LFxuICAgIGVycm9ycyA9IChyZXN1bHQgYXMgRm9ybWF0dGVkRXhlY3V0aW9uUmVzdWx0PGFueT4pLmVycm9ycyB8fCBbXVxuICApIHtcbiAgICBzdXBlcihcbiAgICAgIENvbWJpbmVkR3JhcGhRTEVycm9ycy5mb3JtYXRNZXNzYWdlKGVycm9ycywge1xuICAgICAgICByZXN1bHQsXG4gICAgICAgIGRlZmF1bHRGb3JtYXRNZXNzYWdlLFxuICAgICAgfSlcbiAgICApO1xuICAgIHRoaXMuZXJyb3JzID0gZXJyb3JzO1xuICAgIHRoaXMuZGF0YSA9IChyZXN1bHQgYXMgUGFydGlhbDxGb3JtYXR0ZWRFeGVjdXRpb25SZXN1bHQ+KS5kYXRhO1xuICAgIHRoaXMuZXh0ZW5zaW9ucyA9IChyZXN1bHQgYXMgUGFydGlhbDxGb3JtYXR0ZWRFeGVjdXRpb25SZXN1bHQ+KS5leHRlbnNpb25zO1xuICAgIHRoaXMubmFtZSA9IFwiQ29tYmluZWRHcmFwaFFMRXJyb3JzXCI7XG5cbiAgICBicmFuZCh0aGlzKTtcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgQ29tYmluZWRHcmFwaFFMRXJyb3JzLnByb3RvdHlwZSk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/errors/CombinedGraphQLErrors.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/errors/CombinedProtocolErrors.js":
/*!**********************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/errors/CombinedProtocolErrors.js ***!
  \**********************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CombinedProtocolErrors: () => (/* binding */ CombinedProtocolErrors)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/errors/utils.js\");\n\nfunction defaultFormatMessage(errors) {\n    return errors.map((e)=>e.message || \"Error message not found.\").join(\"\\n\");\n}\n/**\n * Fatal transport-level errors returned when executing a subscription using the\n * multipart HTTP subscription protocol. See the documentation on the\n * [multipart HTTP protocol for GraphQL Subscriptions](https://www.apollographql.com/docs/graphos/routing/operations/subscriptions/multipart-protocol) for more information on these errors.\n *\n * @remarks\n *\n * These errors indicate issues with the subscription transport itself, rather\n * than GraphQL-level errors. They typically occur when there are problems\n * communicating with subgraphs from the Apollo Router.\n *\n * @example\n *\n * ```ts\n * import { CombinedProtocolErrors } from \"@apollo/client/errors\";\n *\n * // Check if an error is a CombinedProtocolErrors instance\n * if (CombinedProtocolErrors.is(error)) {\n *   // Access individual protocol errors\n *   error.errors.forEach((protocolError) => {\n *     console.log(protocolError.message);\n *     console.log(protocolError.extensions);\n *   });\n * }\n * ```\n */ class CombinedProtocolErrors extends Error {\n    /**\n     * A method that determines whether an error is a `CombinedProtocolErrors`\n     * object. This method enables TypeScript to narrow the error type.\n     *\n     * @example\n     *\n     * ```ts\n     * if (CombinedProtocolErrors.is(error)) {\n     *   // TypeScript now knows `error` is a CombinedProtocolErrors object\n     *   console.log(error.errors);\n     * }\n     * ```\n     */ static is(error) {\n        return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isBranded)(error, \"CombinedProtocolErrors\");\n    }\n    constructor(protocolErrors){\n        super(CombinedProtocolErrors.formatMessage(protocolErrors, {\n            defaultFormatMessage\n        }));\n        this.name = \"CombinedProtocolErrors\";\n        this.errors = protocolErrors;\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.brand)(this);\n        Object.setPrototypeOf(this, CombinedProtocolErrors.prototype);\n    }\n} //# sourceMappingURL=CombinedProtocolErrors.js.map\n/**\n    * A function that formats the error message used for the error's `message`\n    * property. Override this method to provide your own formatting.\n    * \n    * @remarks\n    * \n    * The `formatMessage` function is called by the `CombinedProtocolErrors`\n    * constructor to provide a formatted message as the `message` property of the\n    * `CombinedProtocolErrors` object. Follow the [\"Providing a custom message\n    * formatter\"](https://www.apollographql.com/docs/react/api/errors/CombinedProtocolErrors#providing-a-custom-message-formatter) guide to learn how to modify the message format.\n    * \n    * @param errors - The array of GraphQL errors returned from the server in the\n    * `errors` field of the response.\n    * @param options - Additional context that could be useful when formatting\n    * the message.\n    */ CombinedProtocolErrors.formatMessage = defaultFormatMessage;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9lcnJvcnMvQ29tYmluZWRQcm90b2NvbEVycm9ycy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUU2QztBQWlHN0MsU0FBUyxDQUFULG1CQUE2QixDQUFDLENBQTlCLEtBQTBFLEVBQTFFO0lBQ0UsQ0FBRixNQUFTLENBQVQsS0FBZSxDQUFDLENBQWhCLEVBQW1CLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBeEIsQ0FBNEIsQ0FBQyxDQUE3QixVQUF3QyxDQUF4Qyx5QkFBa0UsQ0FBQyxDQUFDLENBQXBFLEdBQXdFLENBQUMsQ0FBekUsR0FBNkUsQ0FBQztBQUM5RTtBQUVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBeUJBLEdBQ0EscUNBQTRDLENBQTVDO0lBQ0UsQ0FBRjs7Ozs7Ozs7Ozs7O0tBWUEsR0FDRSxDQUFGLE1BQVMsQ0FBVCxDQUFXLENBQUMsQ0FBWixJQUEwQixFQUExQjtRQUNJLENBQUosTUFBVyxvREFBUyxDQUFDLENBQXJCLElBQTBCLEVBQUUsQ0FBNUIsdUJBQW9ELENBQUM7SUFDbkQ7SUFTQSxDQUFGLFdBQ0ksQ0FESixhQUc0QyxDQUg1QztRQUtJLENBQUosSUFBUyxDQUNILENBRE4scUJBQzRCLENBQUMsQ0FEN0IsWUFDMEMsQ0FBQyxDQUQzQyxhQUN5RCxFQUFFO1lBQ25ELENBQVIsbUJBQTRCO1FBQzVCLENBQU8sQ0FBQyxDQUNIO1FBQ0QsQ0FBSixHQUFRLENBQUMsQ0FBVCxNQUFnQixDQUFoQix1QkFBd0M7UUFDcEMsQ0FBSixHQUFRLENBQUMsQ0FBVCxRQUFrQixDQUFsQixhQUFnQztRQUU1QixnREFBSyxDQUFDLENBQVYsR0FBYyxDQUFDO1FBQ1gsQ0FBSixLQUFVLENBQUMsQ0FBWCxhQUF5QixDQUFDLENBQTFCLEdBQThCLEVBQUUsQ0FBaEMscUJBQXNELENBQUMsQ0FBdkQsUUFBZ0UsQ0FBQztJQUMvRDs7Ozs7Ozs7Ozs7Ozs7Ozs7T0F4Q1csQ0FBYixzQkFtQlMsQ0FBVCxLQW5CQSxDQW1CQSxTQUNJLENBREosbUJBQ3dCIiwic291cmNlcyI6WyIvaG9tZS91L1Byb2plY3RzL0NvbGRUcmFjZS9zcmMvZXJyb3JzL0NvbWJpbmVkUHJvdG9jb2xFcnJvcnMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBHcmFwaFFMRm9ybWF0dGVkRXJyb3IgfSBmcm9tIFwiZ3JhcGhxbFwiO1xuXG5pbXBvcnQgeyBicmFuZCwgaXNCcmFuZGVkIH0gZnJvbSBcIi4vdXRpbHMuanNcIjtcblxuZXhwb3J0IGRlY2xhcmUgbmFtZXNwYWNlIENvbWJpbmVkUHJvdG9jb2xFcnJvcnMge1xuICBleHBvcnQgaW50ZXJmYWNlIE1lc3NhZ2VGb3JtYXR0ZXJPcHRpb25zIHtcbiAgICAvKipcbiAgICAgKiBUaGUgZGVmYXVsdCBtZXNzYWdlIGZvcm1hdHRlci4gQ2FsbCB0aGlzIHRvIGdldCBhIHN0cmluZyB3aXRoIHRoZSBkZWZhdWx0XG4gICAgICogZm9ybWF0dGVkIG1lc3NhZ2UuXG4gICAgICpcbiAgICAgKiBAcmVtYXJrc1xuICAgICAqIFRvIGZvcm1hdCBwYXJ0IG9mIHRoZSBtZXNzYWdlIHVzaW5nIHRoZSBkZWZhdWx0IG1lc3NhZ2UgZm9ybWF0dGVyLCBjYWxsXG4gICAgICogdGhlIGBkZWZhdWx0Rm9ybWF0TWVzc2FnZWAgZnVuY3Rpb24gcHJvdmlkZWQgdG8gdGhlIGBvcHRpb25zYCBhcmd1bWVudCBvZlxuICAgICAqIHlvdXIgbWVzc2FnZSBmb3JtYXR0ZXIuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogVGhlIGZvbGxvd2luZyBleGFtcGxlIHByZXBlbmRzIGEgc3RyaW5nIHRvIHRoZSBtZXNzYWdlIGFuZCB1c2VzIHRoZVxuICAgICAqIGRlZmF1bHQgbWVzc2FnZSBmb3JtYXR0ZXIgdG8gZm9ybWF0IHRoZSBlcnJvciBtZXNzYWdlcy5cbiAgICAgKlxuICAgICAqIGBgYHRzXG4gICAgICogQ29tYmluZWRQcm90b2NvbEVycm9ycy5mb3JtYXRNZXNzYWdlID0gKGVycm9ycywgeyBkZWZhdWx0Rm9ybWF0TWVzc2FnZSB9KSA9PiB7XG4gICAgICogICByZXR1cm4gYFtQcm90b2NvbCBlcnJvcnNdOiAke2RlZmF1bHRGb3JtYXRNZXNzYWdlKGVycm9ycyl9YDtcbiAgICAgKiB9O1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGRlZmF1bHRGb3JtYXRNZXNzYWdlOiAoXG4gICAgICBlcnJvcnM6IFJlYWRvbmx5QXJyYXk8R3JhcGhRTEZvcm1hdHRlZEVycm9yPlxuICAgICkgPT4gc3RyaW5nO1xuICB9XG5cbiAgLyoqXG4gICAqIEJ5IGRlZmF1bHQsIGBDb21iaW5lZFByb3RvY29sRXJyb3JzYCBmb3JtYXRzIHRoZSBgbWVzc2FnZWAgcHJvcGVydHkgYnlcbiAgICogam9pbmluZyBlYWNoIGVycm9yJ3MgYG1lc3NhZ2VgIGZpZWxkIHdpdGggYSBuZXdsaW5lLiBUbyBjdXN0b21pemUgdGhlXG4gICAqIGZvcm1hdCBvZiB0aGUgYG1lc3NhZ2VgLCBzdWNoIGFzIGNoYW5naW5nIHRoZSBkZWxpbWl0ZXIgb3IgYWRkaW5nIGEgbWVzc2FnZVxuICAgKiBwcmVmaXgsIG92ZXJyaWRlIHRoZSBzdGF0aWMgYGZvcm1hdE1lc3NhZ2VgIG1ldGhvZC5cbiAgICpcbiAgICogQHJlbWFya3NcbiAgICpcbiAgICogU2VlIHRoZSBbYGZvcm1hdE1lc3NhZ2VgXShodHRwczovL3d3dy5hcG9sbG9ncmFwaHFsLmNvbS9kb2NzL3JlYWN0L2FwaS9lcnJvcnMvQ29tYmluZWRQcm90b2NvbEVycm9ycykgc2VjdGlvbiBmb3IgZGV0YWlscyBhYm91dCB0aGUgcGFyYW1ldGVycyBwcm92aWRlZCB0byB0aGUgYGZvcm1hdE1lc3NhZ2VgIGZ1bmN0aW9uLlxuICAgKlxuICAgKiA+IFshTk9URV1cbiAgICogPiBUaGUgbWVzc2FnZSBmb3JtYXR0ZXIgbmVlZHMgdG8gYmUgY29uZmlndXJlZCBiZWZvcmUgYW55IG9wZXJhdGlvbiBpcyBleGVjdXRlZCBieSBBcG9sbG8gQ2xpZW50LCBvdGhlcndpc2UgdGhlIGRlZmF1bHQgbWVzc2FnZSBmb3JtYXR0ZXIgaXMgdXNlZC4gV2UgcmVjb21tZW5kIGNvbmZpZ3VyaW5nIHRoZSBtZXNzYWdlIGZvcm1hdHRlciBiZWZvcmUgaW5pdGlhbGl6aW5nIHlvdXIgYEFwb2xsb0NsaWVudGAgaW5zdGFuY2UuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIFRoZSBmb2xsb3dpbmcgZXhhbXBsZSBkZW1vbnN0cmF0ZXMgaG93IHRvIGZvcm1hdCB0aGUgZXJyb3IgbWVzc2FnZSBieVxuICAgKiBqb2luaW5nIGVhY2ggZXJyb3Igd2l0aCBhIGNvbW1hLlxuICAgKlxuICAgKiBgYGB0c1xuICAgKiBpbXBvcnQgeyBDb21iaW5lZFByb3RvY29sRXJyb3JzIH0gZnJvbSBcIkBhcG9sbG8vY2xpZW50L2Vycm9yc1wiO1xuICAgKlxuICAgKiBDb21iaW5lZFByb3RvY29sRXJyb3JzLmZvcm1hdE1lc3NhZ2UgPSAoZXJyb3JzKSA9PiB7XG4gICAqICAgcmV0dXJuIGVycm9ycy5tYXAoKGVycm9yKSA9PiBlcnJvci5tZXNzYWdlKS5qb2luKFwiLCBcIik7XG4gICAqIH07XG4gICAqIGBgYFxuICAgKlxuICAgKiBAcGFyYW0gZXJyb3JzIC0gVGhlIGFycmF5IG9mIEdyYXBoUUwgZXJyb3JzIHJldHVybmVkIGZyb20gdGhlIHNlcnZlciBpbiB0aGVcbiAgICogYGVycm9yc2AgZmllbGQgb2YgdGhlIHJlc3BvbnNlLlxuICAgKiBAcGFyYW0gb3B0aW9ucyAtIEFkZGl0aW9uYWwgY29udGV4dCB0aGF0IGNvdWxkIGJlIHVzZWZ1bCB3aGVuIGZvcm1hdHRpbmdcbiAgICogdGhlIG1lc3NhZ2UuXG4gICAqL1xuICBleHBvcnQgdHlwZSBNZXNzYWdlRm9ybWF0dGVyID0gKFxuICAgIGVycm9yczogUmVhZG9ubHlBcnJheTxHcmFwaFFMRm9ybWF0dGVkRXJyb3I+LFxuICAgIG9wdGlvbnM6IE1lc3NhZ2VGb3JtYXR0ZXJPcHRpb25zXG4gICkgPT4gc3RyaW5nO1xuXG4gIG5hbWVzcGFjZSBEb2N1bWVudGF0aW9uVHlwZXMge1xuICAgIC8qKlxuICAgICAqIEEgZnVuY3Rpb24gdGhhdCBmb3JtYXRzIHRoZSBlcnJvciBtZXNzYWdlIHVzZWQgZm9yIHRoZSBlcnJvcidzIGBtZXNzYWdlYFxuICAgICAqIHByb3BlcnR5LiBPdmVycmlkZSB0aGlzIG1ldGhvZCB0byBwcm92aWRlIHlvdXIgb3duIGZvcm1hdHRpbmcuXG4gICAgICpcbiAgICAgKiBAcmVtYXJrc1xuICAgICAqXG4gICAgICogVGhlIGBmb3JtYXRNZXNzYWdlYCBmdW5jdGlvbiBpcyBjYWxsZWQgYnkgdGhlIGBDb21iaW5lZFByb3RvY29sRXJyb3JzYFxuICAgICAqIGNvbnN0cnVjdG9yIHRvIHByb3ZpZGUgYSBmb3JtYXR0ZWQgbWVzc2FnZSBhcyB0aGUgYG1lc3NhZ2VgIHByb3BlcnR5IG9mIHRoZVxuICAgICAqIGBDb21iaW5lZFByb3RvY29sRXJyb3JzYCBvYmplY3QuIEZvbGxvdyB0aGUgW1wiUHJvdmlkaW5nIGEgY3VzdG9tIG1lc3NhZ2VcbiAgICAgKiBmb3JtYXR0ZXJcIl0oaHR0cHM6Ly93d3cuYXBvbGxvZ3JhcGhxbC5jb20vZG9jcy9yZWFjdC9hcGkvZXJyb3JzL0NvbWJpbmVkUHJvdG9jb2xFcnJvcnMjcHJvdmlkaW5nLWEtY3VzdG9tLW1lc3NhZ2UtZm9ybWF0dGVyKSBndWlkZSB0byBsZWFybiBob3cgdG8gbW9kaWZ5IHRoZSBtZXNzYWdlIGZvcm1hdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBlcnJvcnMgLSBUaGUgYXJyYXkgb2YgR3JhcGhRTCBlcnJvcnMgcmV0dXJuZWQgZnJvbSB0aGUgc2VydmVyIGluIHRoZVxuICAgICAqIGBlcnJvcnNgIGZpZWxkIG9mIHRoZSByZXNwb25zZS5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIEFkZGl0aW9uYWwgY29udGV4dCB0aGF0IGNvdWxkIGJlIHVzZWZ1bCB3aGVuIGZvcm1hdHRpbmdcbiAgICAgKiB0aGUgbWVzc2FnZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JtYXRNZXNzYWdlKFxuICAgICAgZXJyb3JzOiBSZWFkb25seUFycmF5PEdyYXBoUUxGb3JtYXR0ZWRFcnJvcj4sXG4gICAgICBvcHRpb25zOiBNZXNzYWdlRm9ybWF0dGVyT3B0aW9uc1xuICAgICk6IHN0cmluZztcblxuICAgIGludGVyZmFjZSBJbnN0YW5jZVByb3BlcnRpZXMge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgcmF3IGxpc3Qgb2YgZXJyb3JzIHJldHVybmVkIGJ5IHRoZSB0b3AtbGV2ZWwgYGVycm9yc2AgZmllbGQgaW4gdGhlXG4gICAgICAgKiBtdWx0aXBhcnQgSFRUUCBzdWJzY3JpcHRpb24gcmVzcG9uc2UuXG4gICAgICAgKi9cbiAgICAgIHJlYWRvbmx5IGVycm9yczogUmVhZG9ubHlBcnJheTxHcmFwaFFMRm9ybWF0dGVkRXJyb3I+O1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0Rm9ybWF0TWVzc2FnZShlcnJvcnM6IFJlYWRvbmx5QXJyYXk8R3JhcGhRTEZvcm1hdHRlZEVycm9yPikge1xuICByZXR1cm4gZXJyb3JzLm1hcCgoZSkgPT4gZS5tZXNzYWdlIHx8IFwiRXJyb3IgbWVzc2FnZSBub3QgZm91bmQuXCIpLmpvaW4oXCJcXG5cIik7XG59XG5cbi8qKlxuICogRmF0YWwgdHJhbnNwb3J0LWxldmVsIGVycm9ycyByZXR1cm5lZCB3aGVuIGV4ZWN1dGluZyBhIHN1YnNjcmlwdGlvbiB1c2luZyB0aGVcbiAqIG11bHRpcGFydCBIVFRQIHN1YnNjcmlwdGlvbiBwcm90b2NvbC4gU2VlIHRoZSBkb2N1bWVudGF0aW9uIG9uIHRoZVxuICogW211bHRpcGFydCBIVFRQIHByb3RvY29sIGZvciBHcmFwaFFMIFN1YnNjcmlwdGlvbnNdKGh0dHBzOi8vd3d3LmFwb2xsb2dyYXBocWwuY29tL2RvY3MvZ3JhcGhvcy9yb3V0aW5nL29wZXJhdGlvbnMvc3Vic2NyaXB0aW9ucy9tdWx0aXBhcnQtcHJvdG9jb2wpIGZvciBtb3JlIGluZm9ybWF0aW9uIG9uIHRoZXNlIGVycm9ycy5cbiAqXG4gKiBAcmVtYXJrc1xuICpcbiAqIFRoZXNlIGVycm9ycyBpbmRpY2F0ZSBpc3N1ZXMgd2l0aCB0aGUgc3Vic2NyaXB0aW9uIHRyYW5zcG9ydCBpdHNlbGYsIHJhdGhlclxuICogdGhhbiBHcmFwaFFMLWxldmVsIGVycm9ycy4gVGhleSB0eXBpY2FsbHkgb2NjdXIgd2hlbiB0aGVyZSBhcmUgcHJvYmxlbXNcbiAqIGNvbW11bmljYXRpbmcgd2l0aCBzdWJncmFwaHMgZnJvbSB0aGUgQXBvbGxvIFJvdXRlci5cbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIGBgYHRzXG4gKiBpbXBvcnQgeyBDb21iaW5lZFByb3RvY29sRXJyb3JzIH0gZnJvbSBcIkBhcG9sbG8vY2xpZW50L2Vycm9yc1wiO1xuICpcbiAqIC8vIENoZWNrIGlmIGFuIGVycm9yIGlzIGEgQ29tYmluZWRQcm90b2NvbEVycm9ycyBpbnN0YW5jZVxuICogaWYgKENvbWJpbmVkUHJvdG9jb2xFcnJvcnMuaXMoZXJyb3IpKSB7XG4gKiAgIC8vIEFjY2VzcyBpbmRpdmlkdWFsIHByb3RvY29sIGVycm9yc1xuICogICBlcnJvci5lcnJvcnMuZm9yRWFjaCgocHJvdG9jb2xFcnJvcikgPT4ge1xuICogICAgIGNvbnNvbGUubG9nKHByb3RvY29sRXJyb3IubWVzc2FnZSk7XG4gKiAgICAgY29uc29sZS5sb2cocHJvdG9jb2xFcnJvci5leHRlbnNpb25zKTtcbiAqICAgfSk7XG4gKiB9XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGNsYXNzIENvbWJpbmVkUHJvdG9jb2xFcnJvcnMgZXh0ZW5kcyBFcnJvciB7XG4gIC8qKlxuICAgKiBBIG1ldGhvZCB0aGF0IGRldGVybWluZXMgd2hldGhlciBhbiBlcnJvciBpcyBhIGBDb21iaW5lZFByb3RvY29sRXJyb3JzYFxuICAgKiBvYmplY3QuIFRoaXMgbWV0aG9kIGVuYWJsZXMgVHlwZVNjcmlwdCB0byBuYXJyb3cgdGhlIGVycm9yIHR5cGUuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIGBgYHRzXG4gICAqIGlmIChDb21iaW5lZFByb3RvY29sRXJyb3JzLmlzKGVycm9yKSkge1xuICAgKiAgIC8vIFR5cGVTY3JpcHQgbm93IGtub3dzIGBlcnJvcmAgaXMgYSBDb21iaW5lZFByb3RvY29sRXJyb3JzIG9iamVjdFxuICAgKiAgIGNvbnNvbGUubG9nKGVycm9yLmVycm9ycyk7XG4gICAqIH1cbiAgICogYGBgXG4gICAqL1xuICBzdGF0aWMgaXMoZXJyb3I6IHVua25vd24pOiBlcnJvciBpcyBDb21iaW5lZFByb3RvY29sRXJyb3JzIHtcbiAgICByZXR1cm4gaXNCcmFuZGVkKGVycm9yLCBcIkNvbWJpbmVkUHJvdG9jb2xFcnJvcnNcIik7XG4gIH1cblxuICAvKioge0Bpbmhlcml0RG9jIEBhcG9sbG8vY2xpZW50IUNvbWJpbmVkUHJvdG9jb2xFcnJvcnMuRG9jdW1lbnRhdGlvblR5cGVzLmZvcm1hdE1lc3NhZ2U6ZnVuY3Rpb24oMSl9ICovXG4gIHN0YXRpYyBmb3JtYXRNZXNzYWdlOiBDb21iaW5lZFByb3RvY29sRXJyb3JzLk1lc3NhZ2VGb3JtYXR0ZXIgPVxuICAgIGRlZmF1bHRGb3JtYXRNZXNzYWdlO1xuXG4gIC8qKiB7QGluaGVyaXREb2MgQGFwb2xsby9jbGllbnQhQ29tYmluZWRQcm90b2NvbEVycm9ycy5Eb2N1bWVudGF0aW9uVHlwZXMuSW5zdGFuY2VQcm9wZXJ0aWVzI2Vycm9yczptZW1iZXJ9ICovXG4gIHJlYWRvbmx5IGVycm9yczogUmVhZG9ubHlBcnJheTxHcmFwaFFMRm9ybWF0dGVkRXJyb3I+O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RvY29sRXJyb3JzOlxuICAgICAgfCBBcnJheTxHcmFwaFFMRm9ybWF0dGVkRXJyb3I+XG4gICAgICB8IFJlYWRvbmx5QXJyYXk8R3JhcGhRTEZvcm1hdHRlZEVycm9yPlxuICApIHtcbiAgICBzdXBlcihcbiAgICAgIENvbWJpbmVkUHJvdG9jb2xFcnJvcnMuZm9ybWF0TWVzc2FnZShwcm90b2NvbEVycm9ycywge1xuICAgICAgICBkZWZhdWx0Rm9ybWF0TWVzc2FnZSxcbiAgICAgIH0pXG4gICAgKTtcbiAgICB0aGlzLm5hbWUgPSBcIkNvbWJpbmVkUHJvdG9jb2xFcnJvcnNcIjtcbiAgICB0aGlzLmVycm9ycyA9IHByb3RvY29sRXJyb3JzO1xuXG4gICAgYnJhbmQodGhpcyk7XG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIENvbWJpbmVkUHJvdG9jb2xFcnJvcnMucHJvdG90eXBlKTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/errors/CombinedProtocolErrors.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/errors/LinkError.js":
/*!*********************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/errors/LinkError.js ***!
  \*********************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LinkError: () => (/* binding */ LinkError),\n/* harmony export */   registerLinkError: () => (/* binding */ registerLinkError)\n/* harmony export */ });\nconst registry = new WeakSet();\n/**\n* @internal Please do not use directly.\n* \n* @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n*/ function registerLinkError(error) {\n    registry.add(error);\n}\n/**\n * A facade error type that keeps a registry of errors emitted from the link\n * chain. `LinkError` is not an error class itself but rather a utility to\n * detect whether an error originated from the link chain.\n *\n * @remarks\n *\n * Use `LinkError` to distinguish between errors from the link chain and custom\n * errors. This is helpful for retrying an operation at the call site only when\n * the error originates from the link chain.\n *\n * @example\n *\n * The following example creates a custom wrapped query function that detects\n * whether the query includes an operation name and throws if not.\n *\n * ```ts\n * import { LinkError } from \"@apollo/client/errors\";\n *\n * async function runQuery<TData>(query: TypedDocumentNode<TData>) {\n *   if (!hasOperationName(query)) {\n *     throw new Error(\"Queries should have operation names.\");\n *   }\n *\n *   return client.watchQuery({ query });\n * }\n *\n * try {\n *   const result = await runQuery(query);\n * } catch (error) {\n *   // Only log the error if the error wasn't our own custom thrown error\n *   if (LinkError.is(error)) {\n *     console.log(\"Got network error:\", error.message);\n *   }\n * }\n * ```\n */ const LinkError = {\n    /**\n     * A method that determines whether an error originated from the link chain.\n     * `is` does not provide any type narrowing.\n     *\n     * @example\n     *\n     * ```ts\n     * if (LinkError.is(error)) {\n     *   // The error originated from the link chain\n     *   console.log(\"Got network error:\", error.message);\n     * }\n     * ```\n     */ is: (error)=>registry.has(error)\n}; //# sourceMappingURL=LinkError.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9lcnJvcnMvTGlua0Vycm9yLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBRUEsTUFBTSxDQUFOLFVBQWlCLENBQWpCLEdBQXFCLENBQXJCLE1BQTRCLENBQTVCLENBQXlDOzs7OztHQUd6QyxTQUFnQixDQUFoQixnQkFBaUMsQ0FBQyxDQUFsQyxJQUFrRCxFQUFsRDtJQUNFLENBQUYsT0FBVSxDQUFDLENBQVgsRUFBYyxDQUFDLENBQWYsSUFBb0IsQ0FBQztBQUNyQjtBQUVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FvQ0EsR0FDTyxDQUFQLEtBQWEsQ0FBYixXQUF5QjtJQUN2QixDQUFGOzs7Ozs7Ozs7Ozs7S0FZQSxHQUNFLENBQUYsQ0FBSSxFQUFFLENBQUMsQ0FBUCxJQUFxQixFQUFFLENBQXZCLFFBQWtDLENBQUMsQ0FBbkMsRUFBc0MsQ0FBQyxDQUF2QyxJQUF5RCxDQUFDO0FBQzFELENBQUMiLCJzb3VyY2VzIjpbIi9ob21lL3UvUHJvamVjdHMvQ29sZFRyYWNlL3NyYy9lcnJvcnMvTGlua0Vycm9yLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgRXJyb3JMaWtlIH0gZnJvbSBcIkBhcG9sbG8vY2xpZW50XCI7XG5cbmNvbnN0IHJlZ2lzdHJ5ID0gbmV3IFdlYWtTZXQ8RXJyb3JMaWtlPigpO1xuXG4vKiogQGludGVybmFsIFBsZWFzZSBkbyBub3QgdXNlIGRpcmVjdGx5LiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyTGlua0Vycm9yKGVycm9yOiBFcnJvckxpa2UpIHtcbiAgcmVnaXN0cnkuYWRkKGVycm9yKTtcbn1cblxuLyoqXG4gKiBBIGZhY2FkZSBlcnJvciB0eXBlIHRoYXQga2VlcHMgYSByZWdpc3RyeSBvZiBlcnJvcnMgZW1pdHRlZCBmcm9tIHRoZSBsaW5rXG4gKiBjaGFpbi4gYExpbmtFcnJvcmAgaXMgbm90IGFuIGVycm9yIGNsYXNzIGl0c2VsZiBidXQgcmF0aGVyIGEgdXRpbGl0eSB0b1xuICogZGV0ZWN0IHdoZXRoZXIgYW4gZXJyb3Igb3JpZ2luYXRlZCBmcm9tIHRoZSBsaW5rIGNoYWluLlxuICpcbiAqIEByZW1hcmtzXG4gKlxuICogVXNlIGBMaW5rRXJyb3JgIHRvIGRpc3Rpbmd1aXNoIGJldHdlZW4gZXJyb3JzIGZyb20gdGhlIGxpbmsgY2hhaW4gYW5kIGN1c3RvbVxuICogZXJyb3JzLiBUaGlzIGlzIGhlbHBmdWwgZm9yIHJldHJ5aW5nIGFuIG9wZXJhdGlvbiBhdCB0aGUgY2FsbCBzaXRlIG9ubHkgd2hlblxuICogdGhlIGVycm9yIG9yaWdpbmF0ZXMgZnJvbSB0aGUgbGluayBjaGFpbi5cbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIFRoZSBmb2xsb3dpbmcgZXhhbXBsZSBjcmVhdGVzIGEgY3VzdG9tIHdyYXBwZWQgcXVlcnkgZnVuY3Rpb24gdGhhdCBkZXRlY3RzXG4gKiB3aGV0aGVyIHRoZSBxdWVyeSBpbmNsdWRlcyBhbiBvcGVyYXRpb24gbmFtZSBhbmQgdGhyb3dzIGlmIG5vdC5cbiAqXG4gKiBgYGB0c1xuICogaW1wb3J0IHsgTGlua0Vycm9yIH0gZnJvbSBcIkBhcG9sbG8vY2xpZW50L2Vycm9yc1wiO1xuICpcbiAqIGFzeW5jIGZ1bmN0aW9uIHJ1blF1ZXJ5PFREYXRhPihxdWVyeTogVHlwZWREb2N1bWVudE5vZGU8VERhdGE+KSB7XG4gKiAgIGlmICghaGFzT3BlcmF0aW9uTmFtZShxdWVyeSkpIHtcbiAqICAgICB0aHJvdyBuZXcgRXJyb3IoXCJRdWVyaWVzIHNob3VsZCBoYXZlIG9wZXJhdGlvbiBuYW1lcy5cIik7XG4gKiAgIH1cbiAqXG4gKiAgIHJldHVybiBjbGllbnQud2F0Y2hRdWVyeSh7IHF1ZXJ5IH0pO1xuICogfVxuICpcbiAqIHRyeSB7XG4gKiAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHJ1blF1ZXJ5KHF1ZXJ5KTtcbiAqIH0gY2F0Y2ggKGVycm9yKSB7XG4gKiAgIC8vIE9ubHkgbG9nIHRoZSBlcnJvciBpZiB0aGUgZXJyb3Igd2Fzbid0IG91ciBvd24gY3VzdG9tIHRocm93biBlcnJvclxuICogICBpZiAoTGlua0Vycm9yLmlzKGVycm9yKSkge1xuICogICAgIGNvbnNvbGUubG9nKFwiR290IG5ldHdvcmsgZXJyb3I6XCIsIGVycm9yLm1lc3NhZ2UpO1xuICogICB9XG4gKiB9XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGNvbnN0IExpbmtFcnJvciA9IHtcbiAgLyoqXG4gICAqIEEgbWV0aG9kIHRoYXQgZGV0ZXJtaW5lcyB3aGV0aGVyIGFuIGVycm9yIG9yaWdpbmF0ZWQgZnJvbSB0aGUgbGluayBjaGFpbi5cbiAgICogYGlzYCBkb2VzIG5vdCBwcm92aWRlIGFueSB0eXBlIG5hcnJvd2luZy5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogYGBgdHNcbiAgICogaWYgKExpbmtFcnJvci5pcyhlcnJvcikpIHtcbiAgICogICAvLyBUaGUgZXJyb3Igb3JpZ2luYXRlZCBmcm9tIHRoZSBsaW5rIGNoYWluXG4gICAqICAgY29uc29sZS5sb2coXCJHb3QgbmV0d29yayBlcnJvcjpcIiwgZXJyb3IubWVzc2FnZSk7XG4gICAqIH1cbiAgICogYGBgXG4gICAqL1xuICBpczogKGVycm9yOiB1bmtub3duKSA9PiByZWdpc3RyeS5oYXMoZXJyb3IgYXMgRXJyb3JMaWtlKSxcbn07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/errors/LinkError.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/errors/LocalStateError.js":
/*!***************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/errors/LocalStateError.js ***!
  \***************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LocalStateError: () => (/* binding */ LocalStateError)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/errors/utils.js\");\n\n/**\n * Represents a fatal error when executing `@client` fields from `LocalState`,\n * typically to indicate a problem with the `LocalState` configuration or\n * incorrect usage of a resolver function. This error does not represent user\n * errors thrown in a local resolver when resolving `@client` fields.\n *\n * @example\n *\n * ```ts\n * import { LocalStateError } from \"@apollo/client/errors\";\n *\n * // Check if an error is a LocalStateError instance\n * if (LocalStateError.is(error)) {\n *   console.log(\"Original error:\", error.cause);\n *\n *   // Determine which field caused the error\n *   if (error.path) {\n *     console.log(\"Error occurred at field path:\", error.path.join(\".\"));\n *   }\n * }\n * ```\n */ class LocalStateError extends Error {\n    /**\n     * A method that determines whether an error is a `LocalStateError`\n     * object. This method enables TypeScript to narrow the error type.\n     *\n     * @example\n     *\n     * ```ts\n     * if (LocalStateError.is(error)) {\n     *   // TypeScript now knows `error` is a LocalStateError object\n     *   console.log(error.path);\n     * }\n     * ```\n     */ static is(error) {\n        return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isBranded)(error, \"LocalStateError\");\n    }\n    constructor(message, options = {}){\n        super(message, {\n            cause: options.sourceError\n        });\n        this.name = \"LocalStateError\";\n        this.path = options.path;\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.brand)(this);\n        Object.setPrototypeOf(this, LocalStateError.prototype);\n    }\n} //# sourceMappingURL=LocalStateError.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9lcnJvcnMvTG9jYWxTdGF0ZUVycm9yLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTZDO0FBZ0I3Qzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBcUJBLEdBQ0EsTUFBYSxDQUFiLHVCQUFxQyxDQUFyQztJQUNFLENBQUY7Ozs7Ozs7Ozs7OztLQVlBLEdBQ0UsQ0FBRixNQUFTLENBQVQsQ0FBVyxDQUFDLENBQVosSUFBMEIsRUFBMUI7UUFDSSxDQUFKLE1BQVcsb0RBQVMsQ0FBQyxDQUFyQixJQUEwQixFQUFFLENBQTVCLGdCQUE2QyxDQUFDO0lBQzVDO0lBS0EsQ0FBRixXQUFjLENBQWQsTUFBNkIsRUFBRSxDQUEvQixTQUFrRSxDQUFsRSxDQUFvRSxDQUFwRTtRQUNJLENBQUosSUFBUyxDQUFDLENBQVYsTUFBaUIsRUFBRTtZQUFFLENBQXJCLElBQTBCLEVBQUUsQ0FBNUIsTUFBbUMsQ0FBQyxDQUFwQztRQUFBLENBQWlELENBQUM7UUFDOUMsQ0FBSixHQUFRLENBQUMsQ0FBVCxNQUFnQixDQUFoQixnQkFBaUM7UUFDN0IsQ0FBSixHQUFRLENBQUMsQ0FBVCxNQUFnQixDQUFoQixNQUF1QixDQUFDLENBQXhCLEdBQTRCO1FBRXhCLGdEQUFLLENBQUMsQ0FBVixHQUFjLENBQUM7UUFDWCxDQUFKLEtBQVUsQ0FBQyxDQUFYLGFBQXlCLENBQUMsQ0FBMUIsR0FBOEIsRUFBRSxDQUFoQyxjQUErQyxDQUFDLENBQWhELFFBQXlELENBQUM7SUFDeEQ7QUFDRiIsInNvdXJjZXMiOlsiL2hvbWUvdS9Qcm9qZWN0cy9Db2xkVHJhY2Uvc3JjL2Vycm9ycy9Mb2NhbFN0YXRlRXJyb3IudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYnJhbmQsIGlzQnJhbmRlZCB9IGZyb20gXCIuL3V0aWxzLmpzXCI7XG5cbmV4cG9ydCBkZWNsYXJlIG5hbWVzcGFjZSBMb2NhbFN0YXRlRXJyb3Ige1xuICBleHBvcnQgaW50ZXJmYWNlIE9wdGlvbnMge1xuICAgIHBhdGg/OiBBcnJheTxzdHJpbmcgfCBudW1iZXI+O1xuICAgIHNvdXJjZUVycm9yPzogdW5rbm93bjtcbiAgfVxuXG4gIG5hbWVzcGFjZSBEb2N1bWVudGF0aW9uVHlwZXMge1xuICAgIGludGVyZmFjZSBJbnN0YW5jZVByb3BlcnRpZXMge1xuICAgICAgLyoqIFRoZSBwYXRoIHRvIHRoZSBmaWVsZCB0aGF0IGNhdXNlZCB0aGUgZXJyb3IuICovXG4gICAgICByZWFkb25seSBwYXRoPzogQXJyYXk8c3RyaW5nIHwgbnVtYmVyPjtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgZmF0YWwgZXJyb3Igd2hlbiBleGVjdXRpbmcgYEBjbGllbnRgIGZpZWxkcyBmcm9tIGBMb2NhbFN0YXRlYCxcbiAqIHR5cGljYWxseSB0byBpbmRpY2F0ZSBhIHByb2JsZW0gd2l0aCB0aGUgYExvY2FsU3RhdGVgIGNvbmZpZ3VyYXRpb24gb3JcbiAqIGluY29ycmVjdCB1c2FnZSBvZiBhIHJlc29sdmVyIGZ1bmN0aW9uLiBUaGlzIGVycm9yIGRvZXMgbm90IHJlcHJlc2VudCB1c2VyXG4gKiBlcnJvcnMgdGhyb3duIGluIGEgbG9jYWwgcmVzb2x2ZXIgd2hlbiByZXNvbHZpbmcgYEBjbGllbnRgIGZpZWxkcy5cbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIGBgYHRzXG4gKiBpbXBvcnQgeyBMb2NhbFN0YXRlRXJyb3IgfSBmcm9tIFwiQGFwb2xsby9jbGllbnQvZXJyb3JzXCI7XG4gKlxuICogLy8gQ2hlY2sgaWYgYW4gZXJyb3IgaXMgYSBMb2NhbFN0YXRlRXJyb3IgaW5zdGFuY2VcbiAqIGlmIChMb2NhbFN0YXRlRXJyb3IuaXMoZXJyb3IpKSB7XG4gKiAgIGNvbnNvbGUubG9nKFwiT3JpZ2luYWwgZXJyb3I6XCIsIGVycm9yLmNhdXNlKTtcbiAqXG4gKiAgIC8vIERldGVybWluZSB3aGljaCBmaWVsZCBjYXVzZWQgdGhlIGVycm9yXG4gKiAgIGlmIChlcnJvci5wYXRoKSB7XG4gKiAgICAgY29uc29sZS5sb2coXCJFcnJvciBvY2N1cnJlZCBhdCBmaWVsZCBwYXRoOlwiLCBlcnJvci5wYXRoLmpvaW4oXCIuXCIpKTtcbiAqICAgfVxuICogfVxuICogYGBgXG4gKi9cbmV4cG9ydCBjbGFzcyBMb2NhbFN0YXRlRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIC8qKlxuICAgKiBBIG1ldGhvZCB0aGF0IGRldGVybWluZXMgd2hldGhlciBhbiBlcnJvciBpcyBhIGBMb2NhbFN0YXRlRXJyb3JgXG4gICAqIG9iamVjdC4gVGhpcyBtZXRob2QgZW5hYmxlcyBUeXBlU2NyaXB0IHRvIG5hcnJvdyB0aGUgZXJyb3IgdHlwZS5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogYGBgdHNcbiAgICogaWYgKExvY2FsU3RhdGVFcnJvci5pcyhlcnJvcikpIHtcbiAgICogICAvLyBUeXBlU2NyaXB0IG5vdyBrbm93cyBgZXJyb3JgIGlzIGEgTG9jYWxTdGF0ZUVycm9yIG9iamVjdFxuICAgKiAgIGNvbnNvbGUubG9nKGVycm9yLnBhdGgpO1xuICAgKiB9XG4gICAqIGBgYFxuICAgKi9cbiAgc3RhdGljIGlzKGVycm9yOiB1bmtub3duKTogZXJyb3IgaXMgTG9jYWxTdGF0ZUVycm9yIHtcbiAgICByZXR1cm4gaXNCcmFuZGVkKGVycm9yLCBcIkxvY2FsU3RhdGVFcnJvclwiKTtcbiAgfVxuXG4gIC8qKiB7QGluaGVyaXREb2MgQGFwb2xsby9jbGllbnQhTG9jYWxTdGF0ZUVycm9yLkRvY3VtZW50YXRpb25UeXBlcy5JbnN0YW5jZVByb3BlcnRpZXMjcGF0aDptZW1iZXJ9ICovXG4gIHJlYWRvbmx5IHBhdGg/OiBBcnJheTxzdHJpbmcgfCBudW1iZXI+O1xuXG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2U6IHN0cmluZywgb3B0aW9uczogTG9jYWxTdGF0ZUVycm9yLk9wdGlvbnMgPSB7fSkge1xuICAgIHN1cGVyKG1lc3NhZ2UsIHsgY2F1c2U6IG9wdGlvbnMuc291cmNlRXJyb3IgfSk7XG4gICAgdGhpcy5uYW1lID0gXCJMb2NhbFN0YXRlRXJyb3JcIjtcbiAgICB0aGlzLnBhdGggPSBvcHRpb25zLnBhdGg7XG5cbiAgICBicmFuZCh0aGlzKTtcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgTG9jYWxTdGF0ZUVycm9yLnByb3RvdHlwZSk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/errors/LocalStateError.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/errors/ServerError.js":
/*!***********************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/errors/ServerError.js ***!
  \***********************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ServerError: () => (/* binding */ ServerError)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/errors/utils.js\");\n\n/**\n * Represents an error when a non-200 HTTP status code is returned from the\n * server according to the [GraphQL Over HTTP specification](https://graphql.github.io/graphql-over-http/draft/). This error\n * contains the full server response, including status code and body text.\n *\n * @remarks\n *\n * This error occurs when your GraphQL server responds with an HTTP status code\n * other than 200 (such as 4xx or 5xx status codes) with any media type other\n * than [`application/graphql-response+json`](https://graphql.github.io/graphql-over-http/draft/#sec-application-graphql-response-json).\n *\n * Servers that return non-200 status codes with other media types are not\n * guaranteed to contain a well-formed GraphQL response and may indicate issues\n * at the HTTP level, such as authentication failures, server unavailability,\n * or other HTTP-level problems.\n *\n * @example\n *\n * ```ts\n * import { ServerError } from \"@apollo/client/errors\";\n *\n * // Check if an error is a ServerError instance\n * if (ServerError.is(error)) {\n *   console.log(`Server returned status: ${error.statusCode}`);\n *   console.log(`Response body: ${error.bodyText}`);\n *\n *   // Handle specific status codes\n *   if (error.statusCode === 401) {\n *     // Handle unauthorized access\n *   }\n * }\n * ```\n */ class ServerError extends Error {\n    /**\n     * A method that determines whether an error is a `ServerError` object. This\n     * method enables TypeScript to narrow the error type.\n     *\n     * @example\n     *\n     * ```ts\n     * if (ServerError.is(error)) {\n     *   // TypeScript now knows `error` is a ServerError object\n     *   console.log(error.errors);\n     * }\n     * ```\n     */ static is(error) {\n        return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isBranded)(error, \"ServerError\");\n    }\n    constructor(message, options){\n        super(message);\n        this.name = \"ServerError\";\n        this.response = options.response;\n        this.statusCode = options.response.status;\n        this.bodyText = options.bodyText;\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.brand)(this);\n        Object.setPrototypeOf(this, ServerError.prototype);\n    }\n} //# sourceMappingURL=ServerError.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9lcnJvcnMvU2VydmVyRXJyb3IuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBNkM7QUE0QjdDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQWdDQSxHQUNBLE1BQWEsQ0FBYixtQkFBaUMsQ0FBakM7SUFDRSxDQUFGOzs7Ozs7Ozs7Ozs7S0FZQSxHQUNFLENBQUYsTUFBUyxDQUFULENBQVcsQ0FBQyxDQUFaLElBQTBCLEVBQTFCO1FBQ0ksQ0FBSixNQUFXLG9EQUFTLENBQUMsQ0FBckIsSUFBMEIsRUFBRSxDQUE1QixZQUF5QyxDQUFDO0lBQ3hDO0lBV0EsQ0FBRixXQUFjLENBQWQsTUFBNkIsRUFBRSxDQUEvQixNQUEyRCxDQUEzRDtRQUNJLENBQUosSUFBUyxDQUFDLENBQVYsTUFBaUIsQ0FBQztRQUNkLENBQUosR0FBUSxDQUFDLENBQVQsTUFBZ0IsQ0FBaEIsWUFBNkI7UUFDekIsQ0FBSixHQUFRLENBQUMsQ0FBVCxVQUFvQixDQUFwQixNQUEyQixDQUFDLENBQTVCLE9BQW9DO1FBQ2hDLENBQUosR0FBUSxDQUFDLENBQVQsWUFBc0IsQ0FBdEIsTUFBNkIsQ0FBQyxDQUE5QixPQUFzQyxDQUFDLENBQXZDLEtBQTZDO1FBQ3pDLENBQUosR0FBUSxDQUFDLENBQVQsVUFBb0IsQ0FBcEIsTUFBMkIsQ0FBQyxDQUE1QixPQUFvQztRQUVoQyxnREFBSyxDQUFDLENBQVYsR0FBYyxDQUFDO1FBQ1gsQ0FBSixLQUFVLENBQUMsQ0FBWCxhQUF5QixDQUFDLENBQTFCLEdBQThCLEVBQUUsQ0FBaEMsVUFBMkMsQ0FBQyxDQUE1QyxRQUFxRCxDQUFDO0lBQ3BEO0FBQ0YiLCJzb3VyY2VzIjpbIi9ob21lL3UvUHJvamVjdHMvQ29sZFRyYWNlL3NyYy9lcnJvcnMvU2VydmVyRXJyb3IudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYnJhbmQsIGlzQnJhbmRlZCB9IGZyb20gXCIuL3V0aWxzLmpzXCI7XG5cbmV4cG9ydCBkZWNsYXJlIG5hbWVzcGFjZSBTZXJ2ZXJFcnJvciB7XG4gIGV4cG9ydCBpbnRlcmZhY2UgT3B0aW9ucyB7XG4gICAgcmVzcG9uc2U6IFJlc3BvbnNlO1xuICAgIGJvZHlUZXh0OiBzdHJpbmc7XG4gIH1cblxuICBuYW1lc3BhY2UgRG9jdW1lbnRhdGlvblR5cGVzIHtcbiAgICBpbnRlcmZhY2UgSW5zdGFuY2VQcm9wZXJ0aWVzIHtcbiAgICAgIC8qKlxuICAgICAgICogVGhlIHJhdyBbYFJlc3BvbnNlYF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1Jlc3BvbnNlKSBvYmplY3QgcHJvdmlkZWQgYnkgdGhlIFtGZXRjaCBBUEldKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9GZXRjaF9BUEkpLlxuICAgICAgICovXG4gICAgICByZWFkb25seSByZXNwb25zZTogUmVzcG9uc2U7XG4gICAgICAvKipcbiAgICAgICAqIFRoZSBzdGF0dXMgY29kZSByZXR1cm5lZCBieSB0aGUgc2VydmVyIGluIHRoZSByZXNwb25zZS4gVGhpcyBpcyBwcm92aWRlZCBhc1xuICAgICAgICogYSBzaG9ydGN1dCBmb3IgYHJlc3BvbnNlLnN0YXR1c2AuXG4gICAgICAgKi9cbiAgICAgIHJlYWRvbmx5IHN0YXR1c0NvZGU6IG51bWJlcjtcblxuICAgICAgLyoqXG4gICAgICAgKiBUaGUgcmF3IHJlc3BvbnNlIGJvZHkgdGV4dC5cbiAgICAgICAqL1xuICAgICAgcmVhZG9ubHkgYm9keVRleHQ6IHN0cmluZztcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGFuIGVycm9yIHdoZW4gYSBub24tMjAwIEhUVFAgc3RhdHVzIGNvZGUgaXMgcmV0dXJuZWQgZnJvbSB0aGVcbiAqIHNlcnZlciBhY2NvcmRpbmcgdG8gdGhlIFtHcmFwaFFMIE92ZXIgSFRUUCBzcGVjaWZpY2F0aW9uXShodHRwczovL2dyYXBocWwuZ2l0aHViLmlvL2dyYXBocWwtb3Zlci1odHRwL2RyYWZ0LykuIFRoaXMgZXJyb3JcbiAqIGNvbnRhaW5zIHRoZSBmdWxsIHNlcnZlciByZXNwb25zZSwgaW5jbHVkaW5nIHN0YXR1cyBjb2RlIGFuZCBib2R5IHRleHQuXG4gKlxuICogQHJlbWFya3NcbiAqXG4gKiBUaGlzIGVycm9yIG9jY3VycyB3aGVuIHlvdXIgR3JhcGhRTCBzZXJ2ZXIgcmVzcG9uZHMgd2l0aCBhbiBIVFRQIHN0YXR1cyBjb2RlXG4gKiBvdGhlciB0aGFuIDIwMCAoc3VjaCBhcyA0eHggb3IgNXh4IHN0YXR1cyBjb2Rlcykgd2l0aCBhbnkgbWVkaWEgdHlwZSBvdGhlclxuICogdGhhbiBbYGFwcGxpY2F0aW9uL2dyYXBocWwtcmVzcG9uc2UranNvbmBdKGh0dHBzOi8vZ3JhcGhxbC5naXRodWIuaW8vZ3JhcGhxbC1vdmVyLWh0dHAvZHJhZnQvI3NlYy1hcHBsaWNhdGlvbi1ncmFwaHFsLXJlc3BvbnNlLWpzb24pLlxuICpcbiAqIFNlcnZlcnMgdGhhdCByZXR1cm4gbm9uLTIwMCBzdGF0dXMgY29kZXMgd2l0aCBvdGhlciBtZWRpYSB0eXBlcyBhcmUgbm90XG4gKiBndWFyYW50ZWVkIHRvIGNvbnRhaW4gYSB3ZWxsLWZvcm1lZCBHcmFwaFFMIHJlc3BvbnNlIGFuZCBtYXkgaW5kaWNhdGUgaXNzdWVzXG4gKiBhdCB0aGUgSFRUUCBsZXZlbCwgc3VjaCBhcyBhdXRoZW50aWNhdGlvbiBmYWlsdXJlcywgc2VydmVyIHVuYXZhaWxhYmlsaXR5LFxuICogb3Igb3RoZXIgSFRUUC1sZXZlbCBwcm9ibGVtcy5cbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIGBgYHRzXG4gKiBpbXBvcnQgeyBTZXJ2ZXJFcnJvciB9IGZyb20gXCJAYXBvbGxvL2NsaWVudC9lcnJvcnNcIjtcbiAqXG4gKiAvLyBDaGVjayBpZiBhbiBlcnJvciBpcyBhIFNlcnZlckVycm9yIGluc3RhbmNlXG4gKiBpZiAoU2VydmVyRXJyb3IuaXMoZXJyb3IpKSB7XG4gKiAgIGNvbnNvbGUubG9nKGBTZXJ2ZXIgcmV0dXJuZWQgc3RhdHVzOiAke2Vycm9yLnN0YXR1c0NvZGV9YCk7XG4gKiAgIGNvbnNvbGUubG9nKGBSZXNwb25zZSBib2R5OiAke2Vycm9yLmJvZHlUZXh0fWApO1xuICpcbiAqICAgLy8gSGFuZGxlIHNwZWNpZmljIHN0YXR1cyBjb2Rlc1xuICogICBpZiAoZXJyb3Iuc3RhdHVzQ29kZSA9PT0gNDAxKSB7XG4gKiAgICAgLy8gSGFuZGxlIHVuYXV0aG9yaXplZCBhY2Nlc3NcbiAqICAgfVxuICogfVxuICogYGBgXG4gKi9cbmV4cG9ydCBjbGFzcyBTZXJ2ZXJFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgLyoqXG4gICAqIEEgbWV0aG9kIHRoYXQgZGV0ZXJtaW5lcyB3aGV0aGVyIGFuIGVycm9yIGlzIGEgYFNlcnZlckVycm9yYCBvYmplY3QuIFRoaXNcbiAgICogbWV0aG9kIGVuYWJsZXMgVHlwZVNjcmlwdCB0byBuYXJyb3cgdGhlIGVycm9yIHR5cGUuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIGBgYHRzXG4gICAqIGlmIChTZXJ2ZXJFcnJvci5pcyhlcnJvcikpIHtcbiAgICogICAvLyBUeXBlU2NyaXB0IG5vdyBrbm93cyBgZXJyb3JgIGlzIGEgU2VydmVyRXJyb3Igb2JqZWN0XG4gICAqICAgY29uc29sZS5sb2coZXJyb3IuZXJyb3JzKTtcbiAgICogfVxuICAgKiBgYGBcbiAgICovXG4gIHN0YXRpYyBpcyhlcnJvcjogdW5rbm93bik6IGVycm9yIGlzIFNlcnZlckVycm9yIHtcbiAgICByZXR1cm4gaXNCcmFuZGVkKGVycm9yLCBcIlNlcnZlckVycm9yXCIpO1xuICB9XG5cbiAgLyoqIHtAaW5oZXJpdERvYyBAYXBvbGxvL2NsaWVudCFTZXJ2ZXJFcnJvci5Eb2N1bWVudGF0aW9uVHlwZXMuSW5zdGFuY2VQcm9wZXJ0aWVzI3Jlc3BvbnNlOm1lbWJlcn0gKi9cbiAgcmVhZG9ubHkgcmVzcG9uc2U6IFJlc3BvbnNlO1xuXG4gIC8qKiB7QGluaGVyaXREb2MgQGFwb2xsby9jbGllbnQhU2VydmVyRXJyb3IuRG9jdW1lbnRhdGlvblR5cGVzLkluc3RhbmNlUHJvcGVydGllcyNzdGF0dXNDb2RlOm1lbWJlcn0gKi9cbiAgcmVhZG9ubHkgc3RhdHVzQ29kZTogbnVtYmVyO1xuXG4gIC8qKiB7QGluaGVyaXREb2MgQGFwb2xsby9jbGllbnQhU2VydmVyRXJyb3IuRG9jdW1lbnRhdGlvblR5cGVzLkluc3RhbmNlUHJvcGVydGllcyNib2R5VGV4dDptZW1iZXJ9ICovXG4gIHJlYWRvbmx5IGJvZHlUZXh0OiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nLCBvcHRpb25zOiBTZXJ2ZXJFcnJvci5PcHRpb25zKSB7XG4gICAgc3VwZXIobWVzc2FnZSk7XG4gICAgdGhpcy5uYW1lID0gXCJTZXJ2ZXJFcnJvclwiO1xuICAgIHRoaXMucmVzcG9uc2UgPSBvcHRpb25zLnJlc3BvbnNlO1xuICAgIHRoaXMuc3RhdHVzQ29kZSA9IG9wdGlvbnMucmVzcG9uc2Uuc3RhdHVzO1xuICAgIHRoaXMuYm9keVRleHQgPSBvcHRpb25zLmJvZHlUZXh0O1xuXG4gICAgYnJhbmQodGhpcyk7XG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIFNlcnZlckVycm9yLnByb3RvdHlwZSk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/errors/ServerError.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/errors/ServerParseError.js":
/*!****************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/errors/ServerParseError.js ***!
  \****************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ServerParseError: () => (/* binding */ ServerParseError)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/errors/utils.js\");\n\n/**\n * Represents a failure to parse the response as JSON from the server. This\n * error helps debug issues where the server returns malformed JSON or non-JSON\n * content.\n *\n * @remarks\n *\n * This error occurs when Apollo Client receives a response from the server but\n * cannot parse it as valid JSON. This typically happens when the server returns\n * HTML error pages, plain text responses, or malformed JSON instead of the\n * expected GraphQL JSON response format.\n *\n * @example\n *\n * ```ts\n * import { ServerParseError } from \"@apollo/client/errors\";\n *\n * // Check if an error is a ServerParseError instance\n * if (ServerParseError.is(error)) {\n *   console.log(`Failed to parse response from ${error.response.url}`);\n *   console.log(`Raw response: ${error.bodyText}`);\n *   console.log(`Status code: ${error.statusCode}`);\n *\n *   // Access the original parse error\n *   console.log(`Parse error: ${error.cause}`);\n * }\n * ```\n */ class ServerParseError extends Error {\n    /**\n     * A method that determines whether an error is a `ServerParseError`\n     * object. This method enables TypeScript to narrow the error type.\n     *\n     * @example\n     *\n     * ```ts\n     * if (ServerParseError.is(error)) {\n     *   // TypeScript now knows `error` is a ServerParseError object\n     *   console.log(error.statusCode);\n     * }\n     * ```\n     */ static is(error) {\n        return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isBranded)(error, \"ServerParseError\");\n    }\n    constructor(originalParseError, options){\n        super(originalParseError instanceof Error ? originalParseError.message : \"Could not parse server response\", {\n            cause: originalParseError\n        });\n        this.name = \"ServerParseError\";\n        this.response = options.response;\n        this.statusCode = options.response.status;\n        this.bodyText = options.bodyText;\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.brand)(this);\n        Object.setPrototypeOf(this, ServerParseError.prototype);\n    }\n} //# sourceMappingURL=ServerParseError.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9lcnJvcnMvU2VydmVyUGFyc2VFcnJvci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUE2QztBQTJCN0M7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQTJCQSxHQUNBLE1BQWEsQ0FBYix3QkFBc0MsQ0FBdEM7SUFDRSxDQUFGOzs7Ozs7Ozs7Ozs7S0FZQSxHQUNFLENBQUYsTUFBUyxDQUFULENBQVcsQ0FBQyxDQUFaLElBQTBCLEVBQTFCO1FBQ0ksQ0FBSixNQUFXLG9EQUFTLENBQUMsQ0FBckIsSUFBMEIsRUFBRSxDQUE1QixpQkFBOEMsQ0FBQztJQUM3QztJQVVBLENBQUYsV0FBYyxDQUFkLGlCQUF5QyxFQUFFLENBQTNDLE1BQTRFLENBQTVFO1FBQ0ksQ0FBSixJQUFTLENBQ0gsQ0FETiw2QkFDb0MsQ0FEcEMsS0FDMEMsRUFDbEMsQ0FBUixpQkFBMEIsQ0FBQyxDQUEzQixTQUNRLENBQVIsZ0NBQXlDLEVBQ25DO1lBQUUsQ0FEUixJQUNhLEVBQUUsQ0FEZjtRQUFBLENBQ21DLENBQzlCO1FBQ0QsQ0FBSixHQUFRLENBQUMsQ0FBVCxNQUFnQixDQUFoQixpQkFBa0M7UUFDOUIsQ0FBSixHQUFRLENBQUMsQ0FBVCxVQUFvQixDQUFwQixNQUEyQixDQUFDLENBQTVCLE9BQW9DO1FBQ2hDLENBQUosR0FBUSxDQUFDLENBQVQsWUFBc0IsQ0FBdEIsTUFBNkIsQ0FBQyxDQUE5QixPQUFzQyxDQUFDLENBQXZDLEtBQTZDO1FBQ3pDLENBQUosR0FBUSxDQUFDLENBQVQsVUFBb0IsQ0FBcEIsTUFBMkIsQ0FBQyxDQUE1QixPQUFvQztRQUVoQyxnREFBSyxDQUFDLENBQVYsR0FBYyxDQUFDO1FBQ1gsQ0FBSixLQUFVLENBQUMsQ0FBWCxhQUF5QixDQUFDLENBQTFCLEdBQThCLEVBQUUsQ0FBaEMsZUFBZ0QsQ0FBQyxDQUFqRCxRQUEwRCxDQUFDO0lBQ3pEO0FBQ0YiLCJzb3VyY2VzIjpbIi9ob21lL3UvUHJvamVjdHMvQ29sZFRyYWNlL3NyYy9lcnJvcnMvU2VydmVyUGFyc2VFcnJvci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBicmFuZCwgaXNCcmFuZGVkIH0gZnJvbSBcIi4vdXRpbHMuanNcIjtcblxuZXhwb3J0IGRlY2xhcmUgbmFtZXNwYWNlIFNlcnZlclBhcnNlRXJyb3Ige1xuICBleHBvcnQgaW50ZXJmYWNlIE9wdGlvbnMge1xuICAgIHJlc3BvbnNlOiBSZXNwb25zZTtcbiAgICBib2R5VGV4dDogc3RyaW5nO1xuICB9XG5cbiAgbmFtZXNwYWNlIERvY3VtZW50YXRpb25UeXBlcyB7XG4gICAgaW50ZXJmYWNlIEluc3RhbmNlUHJvcGVydGllcyB7XG4gICAgICAvKipcbiAgICAgICAqIFRoZSByYXcgW2BSZXNwb25zZWBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9SZXNwb25zZSkgb2JqZWN0IHByb3ZpZGVkIGJ5IHRoZSBbRmV0Y2ggQVBJXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRmV0Y2hfQVBJKS5cbiAgICAgICAqL1xuICAgICAgcmVhZG9ubHkgcmVzcG9uc2U6IFJlc3BvbnNlO1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgc3RhdHVzIGNvZGUgcmV0dXJuZWQgYnkgdGhlIHNlcnZlciBpbiB0aGUgcmVzcG9uc2UuIFRoaXMgaXMgcHJvdmlkZWRcbiAgICAgICAqIGFzIGEgc2hvcnRjdXQgZm9yIGByZXNwb25zZS5zdGF0dXNgLlxuICAgICAgICovXG4gICAgICByZWFkb25seSBzdGF0dXNDb2RlOiBudW1iZXI7XG4gICAgICAvKipcbiAgICAgICAqIFRoZSByYXcgcmVzcG9uc2UgYm9keSB0ZXh0LlxuICAgICAgICovXG4gICAgICByZWFkb25seSBib2R5VGV4dDogc3RyaW5nO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBmYWlsdXJlIHRvIHBhcnNlIHRoZSByZXNwb25zZSBhcyBKU09OIGZyb20gdGhlIHNlcnZlci4gVGhpc1xuICogZXJyb3IgaGVscHMgZGVidWcgaXNzdWVzIHdoZXJlIHRoZSBzZXJ2ZXIgcmV0dXJucyBtYWxmb3JtZWQgSlNPTiBvciBub24tSlNPTlxuICogY29udGVudC5cbiAqXG4gKiBAcmVtYXJrc1xuICpcbiAqIFRoaXMgZXJyb3Igb2NjdXJzIHdoZW4gQXBvbGxvIENsaWVudCByZWNlaXZlcyBhIHJlc3BvbnNlIGZyb20gdGhlIHNlcnZlciBidXRcbiAqIGNhbm5vdCBwYXJzZSBpdCBhcyB2YWxpZCBKU09OLiBUaGlzIHR5cGljYWxseSBoYXBwZW5zIHdoZW4gdGhlIHNlcnZlciByZXR1cm5zXG4gKiBIVE1MIGVycm9yIHBhZ2VzLCBwbGFpbiB0ZXh0IHJlc3BvbnNlcywgb3IgbWFsZm9ybWVkIEpTT04gaW5zdGVhZCBvZiB0aGVcbiAqIGV4cGVjdGVkIEdyYXBoUUwgSlNPTiByZXNwb25zZSBmb3JtYXQuXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBgYGB0c1xuICogaW1wb3J0IHsgU2VydmVyUGFyc2VFcnJvciB9IGZyb20gXCJAYXBvbGxvL2NsaWVudC9lcnJvcnNcIjtcbiAqXG4gKiAvLyBDaGVjayBpZiBhbiBlcnJvciBpcyBhIFNlcnZlclBhcnNlRXJyb3IgaW5zdGFuY2VcbiAqIGlmIChTZXJ2ZXJQYXJzZUVycm9yLmlzKGVycm9yKSkge1xuICogICBjb25zb2xlLmxvZyhgRmFpbGVkIHRvIHBhcnNlIHJlc3BvbnNlIGZyb20gJHtlcnJvci5yZXNwb25zZS51cmx9YCk7XG4gKiAgIGNvbnNvbGUubG9nKGBSYXcgcmVzcG9uc2U6ICR7ZXJyb3IuYm9keVRleHR9YCk7XG4gKiAgIGNvbnNvbGUubG9nKGBTdGF0dXMgY29kZTogJHtlcnJvci5zdGF0dXNDb2RlfWApO1xuICpcbiAqICAgLy8gQWNjZXNzIHRoZSBvcmlnaW5hbCBwYXJzZSBlcnJvclxuICogICBjb25zb2xlLmxvZyhgUGFyc2UgZXJyb3I6ICR7ZXJyb3IuY2F1c2V9YCk7XG4gKiB9XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGNsYXNzIFNlcnZlclBhcnNlRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIC8qKlxuICAgKiBBIG1ldGhvZCB0aGF0IGRldGVybWluZXMgd2hldGhlciBhbiBlcnJvciBpcyBhIGBTZXJ2ZXJQYXJzZUVycm9yYFxuICAgKiBvYmplY3QuIFRoaXMgbWV0aG9kIGVuYWJsZXMgVHlwZVNjcmlwdCB0byBuYXJyb3cgdGhlIGVycm9yIHR5cGUuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIGBgYHRzXG4gICAqIGlmIChTZXJ2ZXJQYXJzZUVycm9yLmlzKGVycm9yKSkge1xuICAgKiAgIC8vIFR5cGVTY3JpcHQgbm93IGtub3dzIGBlcnJvcmAgaXMgYSBTZXJ2ZXJQYXJzZUVycm9yIG9iamVjdFxuICAgKiAgIGNvbnNvbGUubG9nKGVycm9yLnN0YXR1c0NvZGUpO1xuICAgKiB9XG4gICAqIGBgYFxuICAgKi9cbiAgc3RhdGljIGlzKGVycm9yOiB1bmtub3duKTogZXJyb3IgaXMgU2VydmVyUGFyc2VFcnJvciB7XG4gICAgcmV0dXJuIGlzQnJhbmRlZChlcnJvciwgXCJTZXJ2ZXJQYXJzZUVycm9yXCIpO1xuICB9XG4gIC8qKiB7QGluaGVyaXREb2MgQGFwb2xsby9jbGllbnQhU2VydmVyUGFyc2VFcnJvci5Eb2N1bWVudGF0aW9uVHlwZXMuSW5zdGFuY2VQcm9wZXJ0aWVzI3Jlc3BvbnNlOm1lbWJlcn0gKi9cbiAgcmVhZG9ubHkgcmVzcG9uc2U6IFJlc3BvbnNlO1xuXG4gIC8qKiB7QGluaGVyaXREb2MgQGFwb2xsby9jbGllbnQhU2VydmVyUGFyc2VFcnJvci5Eb2N1bWVudGF0aW9uVHlwZXMuSW5zdGFuY2VQcm9wZXJ0aWVzI3N0YXR1c0NvZGU6bWVtYmVyfSAqL1xuICByZWFkb25seSBzdGF0dXNDb2RlOiBudW1iZXI7XG5cbiAgLyoqIHtAaW5oZXJpdERvYyBAYXBvbGxvL2NsaWVudCFTZXJ2ZXJQYXJzZUVycm9yLkRvY3VtZW50YXRpb25UeXBlcy5JbnN0YW5jZVByb3BlcnRpZXMjYm9keVRleHQ6bWVtYmVyfSAqL1xuICByZWFkb25seSBib2R5VGV4dDogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKG9yaWdpbmFsUGFyc2VFcnJvcjogdW5rbm93biwgb3B0aW9uczogU2VydmVyUGFyc2VFcnJvci5PcHRpb25zKSB7XG4gICAgc3VwZXIoXG4gICAgICBvcmlnaW5hbFBhcnNlRXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/XG4gICAgICAgIG9yaWdpbmFsUGFyc2VFcnJvci5tZXNzYWdlXG4gICAgICA6IFwiQ291bGQgbm90IHBhcnNlIHNlcnZlciByZXNwb25zZVwiLFxuICAgICAgeyBjYXVzZTogb3JpZ2luYWxQYXJzZUVycm9yIH1cbiAgICApO1xuICAgIHRoaXMubmFtZSA9IFwiU2VydmVyUGFyc2VFcnJvclwiO1xuICAgIHRoaXMucmVzcG9uc2UgPSBvcHRpb25zLnJlc3BvbnNlO1xuICAgIHRoaXMuc3RhdHVzQ29kZSA9IG9wdGlvbnMucmVzcG9uc2Uuc3RhdHVzO1xuICAgIHRoaXMuYm9keVRleHQgPSBvcHRpb25zLmJvZHlUZXh0O1xuXG4gICAgYnJhbmQodGhpcyk7XG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIFNlcnZlclBhcnNlRXJyb3IucHJvdG90eXBlKTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/errors/ServerParseError.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/errors/UnconventionalError.js":
/*!*******************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/errors/UnconventionalError.js ***!
  \*******************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UnconventionalError: () => (/* binding */ UnconventionalError)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/errors/utils.js\");\n\n/**\n * A wrapper error type that represents a non-standard error thrown from a\n * A wrapper error type that represents a non-error value thrown from the\n * link chain, such as a symbol, primitive or plain object. Read the `cause` property to\n * determine the source of the error.\n *\n * @remarks\n *\n * This error is used to standardize error handling when non-Error values are\n * thrown in the Apollo Client link chain or other parts of the system.\n * JavaScript allows throwing any value (not just Error instances), and this\n * wrapper ensures that all thrown values can be handled consistently as\n * Error-like objects while preserving the original thrown value.\n *\n * > [!NOTE]\n * > Plain strings thrown as errors are wrapped in regular [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) objects instead of `UnconventionalError` objects since strings can be safely used as the error's `message`.\n *\n * @example\n *\n * ```ts\n * import { UnconventionalError } from \"@apollo/client/errors\";\n *\n * // Check if an error is an UnconventionalError instance\n * if (UnconventionalError.is(error)) {\n *   console.log(\"Non-standard error thrown:\", error.cause);\n *\n *   // Check the type of the original thrown value\n *   if (typeof error.cause === \"symbol\") {\n *     console.log(\"A symbol was thrown:\", error.cause.toString());\n *   } else if (typeof error.cause === \"object\") {\n *     console.log(\"An object was thrown:\", error.cause);\n *   } else {\n *     console.log(\"Unexpected value thrown:\", error.cause);\n *   }\n * }\n * ```\n */ class UnconventionalError extends Error {\n    /**\n     * A method that determines whether an error is an `UnconventionalError`\n     * object. This method enables TypeScript to narrow the error type.\n     *\n     * @example\n     *\n     * ```ts\n     * if (UnconventionalError.is(error)) {\n     *   // TypeScript now knows `error` is a UnconventionalError object\n     *   console.log(\"What caused this?\", error.cause);\n     * }\n     * ```\n     */ static is(error) {\n        return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isBranded)(error, \"UnconventionalError\");\n    }\n    constructor(errorType){\n        super(\"An error of unexpected shape occurred.\", {\n            cause: errorType\n        });\n        this.name = \"UnconventionalError\";\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.brand)(this);\n        Object.setPrototypeOf(this, UnconventionalError.prototype);\n    }\n} //# sourceMappingURL=UnconventionalError.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9lcnJvcnMvVW5jb252ZW50aW9uYWxFcnJvci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUE4QztBQUU5Qzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBb0NHLENBQ0csTUFBTyxtQkFBb0IsU0FBUSxLQUFLO0lBQzVDOzs7Ozs7Ozs7Ozs7T0FZRyxDQUNILE1BQU0sQ0FBQyxFQUFFLENBQUMsS0FBYztRQUN0QixPQUFPLG9EQUFTLENBQUMsS0FBSyxFQUFFLHFCQUFxQixDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVELFlBQVksU0FBa0I7UUFDNUIsS0FBSyxDQUFDLHdDQUF3QyxFQUFFO1lBQUUsS0FBSyxFQUFFLFNBQVM7UUFBQSxDQUFFLENBQUMsQ0FBQztRQUN0RSxJQUFJLENBQUMsSUFBSSxHQUFHLHFCQUFxQixDQUFDO1FBRWxDLGdEQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDWixNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUM3RCxDQUFDO0NBQ0YiLCJzb3VyY2VzIjpbIi9ob21lL3UvUHJvamVjdHMvQ29sZFRyYWNlL3NyYy9lcnJvcnMvVW5jb252ZW50aW9uYWxFcnJvci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBicmFuZCwgaXNCcmFuZGVkIH0gZnJvbSBcIi4vdXRpbHMuanNcIjtcblxuLyoqXG4gKiBBIHdyYXBwZXIgZXJyb3IgdHlwZSB0aGF0IHJlcHJlc2VudHMgYSBub24tc3RhbmRhcmQgZXJyb3IgdGhyb3duIGZyb20gYVxuICogQSB3cmFwcGVyIGVycm9yIHR5cGUgdGhhdCByZXByZXNlbnRzIGEgbm9uLWVycm9yIHZhbHVlIHRocm93biBmcm9tIHRoZVxuICogbGluayBjaGFpbiwgc3VjaCBhcyBhIHN5bWJvbCwgcHJpbWl0aXZlIG9yIHBsYWluIG9iamVjdC4gUmVhZCB0aGUgYGNhdXNlYCBwcm9wZXJ0eSB0b1xuICogZGV0ZXJtaW5lIHRoZSBzb3VyY2Ugb2YgdGhlIGVycm9yLlxuICpcbiAqIEByZW1hcmtzXG4gKlxuICogVGhpcyBlcnJvciBpcyB1c2VkIHRvIHN0YW5kYXJkaXplIGVycm9yIGhhbmRsaW5nIHdoZW4gbm9uLUVycm9yIHZhbHVlcyBhcmVcbiAqIHRocm93biBpbiB0aGUgQXBvbGxvIENsaWVudCBsaW5rIGNoYWluIG9yIG90aGVyIHBhcnRzIG9mIHRoZSBzeXN0ZW0uXG4gKiBKYXZhU2NyaXB0IGFsbG93cyB0aHJvd2luZyBhbnkgdmFsdWUgKG5vdCBqdXN0IEVycm9yIGluc3RhbmNlcyksIGFuZCB0aGlzXG4gKiB3cmFwcGVyIGVuc3VyZXMgdGhhdCBhbGwgdGhyb3duIHZhbHVlcyBjYW4gYmUgaGFuZGxlZCBjb25zaXN0ZW50bHkgYXNcbiAqIEVycm9yLWxpa2Ugb2JqZWN0cyB3aGlsZSBwcmVzZXJ2aW5nIHRoZSBvcmlnaW5hbCB0aHJvd24gdmFsdWUuXG4gKlxuICogPiBbIU5PVEVdXG4gKiA+IFBsYWluIHN0cmluZ3MgdGhyb3duIGFzIGVycm9ycyBhcmUgd3JhcHBlZCBpbiByZWd1bGFyIFtgRXJyb3JgXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9FcnJvcikgb2JqZWN0cyBpbnN0ZWFkIG9mIGBVbmNvbnZlbnRpb25hbEVycm9yYCBvYmplY3RzIHNpbmNlIHN0cmluZ3MgY2FuIGJlIHNhZmVseSB1c2VkIGFzIHRoZSBlcnJvcidzIGBtZXNzYWdlYC5cbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIGBgYHRzXG4gKiBpbXBvcnQgeyBVbmNvbnZlbnRpb25hbEVycm9yIH0gZnJvbSBcIkBhcG9sbG8vY2xpZW50L2Vycm9yc1wiO1xuICpcbiAqIC8vIENoZWNrIGlmIGFuIGVycm9yIGlzIGFuIFVuY29udmVudGlvbmFsRXJyb3IgaW5zdGFuY2VcbiAqIGlmIChVbmNvbnZlbnRpb25hbEVycm9yLmlzKGVycm9yKSkge1xuICogICBjb25zb2xlLmxvZyhcIk5vbi1zdGFuZGFyZCBlcnJvciB0aHJvd246XCIsIGVycm9yLmNhdXNlKTtcbiAqXG4gKiAgIC8vIENoZWNrIHRoZSB0eXBlIG9mIHRoZSBvcmlnaW5hbCB0aHJvd24gdmFsdWVcbiAqICAgaWYgKHR5cGVvZiBlcnJvci5jYXVzZSA9PT0gXCJzeW1ib2xcIikge1xuICogICAgIGNvbnNvbGUubG9nKFwiQSBzeW1ib2wgd2FzIHRocm93bjpcIiwgZXJyb3IuY2F1c2UudG9TdHJpbmcoKSk7XG4gKiAgIH0gZWxzZSBpZiAodHlwZW9mIGVycm9yLmNhdXNlID09PSBcIm9iamVjdFwiKSB7XG4gKiAgICAgY29uc29sZS5sb2coXCJBbiBvYmplY3Qgd2FzIHRocm93bjpcIiwgZXJyb3IuY2F1c2UpO1xuICogICB9IGVsc2Uge1xuICogICAgIGNvbnNvbGUubG9nKFwiVW5leHBlY3RlZCB2YWx1ZSB0aHJvd246XCIsIGVycm9yLmNhdXNlKTtcbiAqICAgfVxuICogfVxuICogYGBgXG4gKi9cbmV4cG9ydCBjbGFzcyBVbmNvbnZlbnRpb25hbEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAvKipcbiAgICogQSBtZXRob2QgdGhhdCBkZXRlcm1pbmVzIHdoZXRoZXIgYW4gZXJyb3IgaXMgYW4gYFVuY29udmVudGlvbmFsRXJyb3JgXG4gICAqIG9iamVjdC4gVGhpcyBtZXRob2QgZW5hYmxlcyBUeXBlU2NyaXB0IHRvIG5hcnJvdyB0aGUgZXJyb3IgdHlwZS5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogYGBgdHNcbiAgICogaWYgKFVuY29udmVudGlvbmFsRXJyb3IuaXMoZXJyb3IpKSB7XG4gICAqICAgLy8gVHlwZVNjcmlwdCBub3cga25vd3MgYGVycm9yYCBpcyBhIFVuY29udmVudGlvbmFsRXJyb3Igb2JqZWN0XG4gICAqICAgY29uc29sZS5sb2coXCJXaGF0IGNhdXNlZCB0aGlzP1wiLCBlcnJvci5jYXVzZSk7XG4gICAqIH1cbiAgICogYGBgXG4gICAqL1xuICBzdGF0aWMgaXMoZXJyb3I6IHVua25vd24pOiBlcnJvciBpcyBVbmNvbnZlbnRpb25hbEVycm9yIHtcbiAgICByZXR1cm4gaXNCcmFuZGVkKGVycm9yLCBcIlVuY29udmVudGlvbmFsRXJyb3JcIik7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihlcnJvclR5cGU6IHVua25vd24pIHtcbiAgICBzdXBlcihcIkFuIGVycm9yIG9mIHVuZXhwZWN0ZWQgc2hhcGUgb2NjdXJyZWQuXCIsIHsgY2F1c2U6IGVycm9yVHlwZSB9KTtcbiAgICB0aGlzLm5hbWUgPSBcIlVuY29udmVudGlvbmFsRXJyb3JcIjtcblxuICAgIGJyYW5kKHRoaXMpO1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBVbmNvbnZlbnRpb25hbEVycm9yLnByb3RvdHlwZSk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/errors/UnconventionalError.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/errors/index.js":
/*!*****************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/errors/index.js ***!
  \*****************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CombinedGraphQLErrors: () => (/* reexport safe */ _CombinedGraphQLErrors_js__WEBPACK_IMPORTED_MODULE_3__.CombinedGraphQLErrors),\n/* harmony export */   CombinedProtocolErrors: () => (/* reexport safe */ _CombinedProtocolErrors_js__WEBPACK_IMPORTED_MODULE_0__.CombinedProtocolErrors),\n/* harmony export */   LinkError: () => (/* reexport safe */ _LinkError_js__WEBPACK_IMPORTED_MODULE_4__.LinkError),\n/* harmony export */   LocalStateError: () => (/* reexport safe */ _LocalStateError_js__WEBPACK_IMPORTED_MODULE_5__.LocalStateError),\n/* harmony export */   PROTOCOL_ERRORS_SYMBOL: () => (/* binding */ PROTOCOL_ERRORS_SYMBOL),\n/* harmony export */   ServerError: () => (/* reexport safe */ _ServerError_js__WEBPACK_IMPORTED_MODULE_6__.ServerError),\n/* harmony export */   ServerParseError: () => (/* reexport safe */ _ServerParseError_js__WEBPACK_IMPORTED_MODULE_7__.ServerParseError),\n/* harmony export */   UnconventionalError: () => (/* reexport safe */ _UnconventionalError_js__WEBPACK_IMPORTED_MODULE_2__.UnconventionalError),\n/* harmony export */   graphQLResultHasProtocolErrors: () => (/* binding */ graphQLResultHasProtocolErrors),\n/* harmony export */   isErrorLike: () => (/* reexport safe */ _isErrorLike_js__WEBPACK_IMPORTED_MODULE_1__.isErrorLike),\n/* harmony export */   registerLinkError: () => (/* reexport safe */ _LinkError_js__WEBPACK_IMPORTED_MODULE_4__.registerLinkError),\n/* harmony export */   toErrorLike: () => (/* binding */ toErrorLike)\n/* harmony export */ });\n/* harmony import */ var _CombinedProtocolErrors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CombinedProtocolErrors.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/errors/CombinedProtocolErrors.js\");\n/* harmony import */ var _isErrorLike_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isErrorLike.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/errors/isErrorLike.js\");\n/* harmony import */ var _UnconventionalError_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./UnconventionalError.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/errors/UnconventionalError.js\");\n/* harmony import */ var _CombinedGraphQLErrors_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./CombinedGraphQLErrors.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/errors/CombinedGraphQLErrors.js\");\n/* harmony import */ var _LinkError_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./LinkError.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/errors/LinkError.js\");\n/* harmony import */ var _LocalStateError_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./LocalStateError.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/errors/LocalStateError.js\");\n/* harmony import */ var _ServerError_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ServerError.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/errors/ServerError.js\");\n/* harmony import */ var _ServerParseError_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ServerParseError.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/errors/ServerParseError.js\");\n\n\n\n// This Symbol allows us to pass transport-specific errors from the link chain\n// into QueryManager/client internals without risking a naming collision within\n// extensions (which implementers can use as they see fit).\nconst PROTOCOL_ERRORS_SYMBOL = Symbol();\nfunction graphQLResultHasProtocolErrors(result) {\n    if (\"extensions\" in result) {\n        return _CombinedProtocolErrors_js__WEBPACK_IMPORTED_MODULE_0__.CombinedProtocolErrors.is(result.extensions[PROTOCOL_ERRORS_SYMBOL]);\n    }\n    return false;\n}\nfunction toErrorLike(error) {\n    if ((0,_isErrorLike_js__WEBPACK_IMPORTED_MODULE_1__.isErrorLike)(error)) {\n        return error;\n    }\n    if (typeof error === \"string\") {\n        return new Error(error, {\n            cause: error\n        });\n    }\n    return new _UnconventionalError_js__WEBPACK_IMPORTED_MODULE_2__.UnconventionalError(error);\n}\n\n\n\n\n\n\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9lcnJvcnMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBcUU7QUFDdEI7QUFDZ0I7QUFFL0QsOEVBQThFO0FBQzlFLCtFQUErRTtBQUMvRSwyREFBMkQ7QUFDcEQsTUFBTSxzQkFBc0IsR0FBa0IsTUFBTSxFQUFFLENBQUM7QUFNeEQsU0FBVSw4QkFBOEIsQ0FDNUMsTUFBUztJQUlULElBQUksWUFBWSxJQUFJLE1BQU0sRUFBRSxDQUFDO1FBQzNCLE9BQU8sOEVBQXNCLENBQUMsRUFBRSxDQUM3QixNQUFrQyxDQUFDLFVBQVUsQ0FBQyxzQkFBc0IsQ0FBQyxDQUN2RSxDQUFDO0lBQ0osQ0FBQztJQUNELE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQztBQUVLLFNBQVUsV0FBVyxDQUFDLEtBQWM7SUFDeEMsSUFBSSw0REFBVyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7UUFDdkIsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRUQsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUUsQ0FBQztRQUM5QixPQUFPLElBQUksS0FBSyxDQUFDLEtBQUssRUFBRTtZQUFFLEtBQUssRUFBRSxLQUFLO1FBQUEsQ0FBRSxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVELE9BQU8sSUFBSSx3RUFBbUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN4QyxDQUFDO0FBRWtFO0FBQ0U7QUFDdEI7QUFDZTtBQUNQO0FBQ1I7QUFDVTtBQUNNIiwic291cmNlcyI6WyIvaG9tZS91L1Byb2plY3RzL0NvbGRUcmFjZS9zcmMvZXJyb3JzL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbWJpbmVkUHJvdG9jb2xFcnJvcnMgfSBmcm9tIFwiLi9Db21iaW5lZFByb3RvY29sRXJyb3JzLmpzXCI7XG5pbXBvcnQgeyBpc0Vycm9yTGlrZSB9IGZyb20gXCIuL2lzRXJyb3JMaWtlLmpzXCI7XG5pbXBvcnQgeyBVbmNvbnZlbnRpb25hbEVycm9yIH0gZnJvbSBcIi4vVW5jb252ZW50aW9uYWxFcnJvci5qc1wiO1xuXG4vLyBUaGlzIFN5bWJvbCBhbGxvd3MgdXMgdG8gcGFzcyB0cmFuc3BvcnQtc3BlY2lmaWMgZXJyb3JzIGZyb20gdGhlIGxpbmsgY2hhaW5cbi8vIGludG8gUXVlcnlNYW5hZ2VyL2NsaWVudCBpbnRlcm5hbHMgd2l0aG91dCByaXNraW5nIGEgbmFtaW5nIGNvbGxpc2lvbiB3aXRoaW5cbi8vIGV4dGVuc2lvbnMgKHdoaWNoIGltcGxlbWVudGVycyBjYW4gdXNlIGFzIHRoZXkgc2VlIGZpdCkuXG5leHBvcnQgY29uc3QgUFJPVE9DT0xfRVJST1JTX1NZTUJPTDogdW5pcXVlIHN5bWJvbCA9IFN5bWJvbCgpO1xuXG50eXBlIFdpdGhTeW1ib2xFeHRlbnNpb25zPFQ+ID0gVCAmIHtcbiAgZXh0ZW5zaW9uczogUmVjb3JkPHN0cmluZyB8IHN5bWJvbCwgYW55Pjtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBncmFwaFFMUmVzdWx0SGFzUHJvdG9jb2xFcnJvcnM8VCBleHRlbmRzIHt9PihcbiAgcmVzdWx0OiBUXG4pOiByZXN1bHQgaXMgVCAmIHtcbiAgZXh0ZW5zaW9uczogUmVjb3JkPHN0cmluZyB8IHN5bWJvbCwgYW55Pjtcbn0ge1xuICBpZiAoXCJleHRlbnNpb25zXCIgaW4gcmVzdWx0KSB7XG4gICAgcmV0dXJuIENvbWJpbmVkUHJvdG9jb2xFcnJvcnMuaXMoXG4gICAgICAocmVzdWx0IGFzIFdpdGhTeW1ib2xFeHRlbnNpb25zPFQ+KS5leHRlbnNpb25zW1BST1RPQ09MX0VSUk9SU19TWU1CT0xdXG4gICAgKTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0b0Vycm9yTGlrZShlcnJvcjogdW5rbm93bikge1xuICBpZiAoaXNFcnJvckxpa2UoZXJyb3IpKSB7XG4gICAgcmV0dXJuIGVycm9yO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBlcnJvciA9PT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiBuZXcgRXJyb3IoZXJyb3IsIHsgY2F1c2U6IGVycm9yIH0pO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBVbmNvbnZlbnRpb25hbEVycm9yKGVycm9yKTtcbn1cblxuZXhwb3J0IHsgQ29tYmluZWRHcmFwaFFMRXJyb3JzIH0gZnJvbSBcIi4vQ29tYmluZWRHcmFwaFFMRXJyb3JzLmpzXCI7XG5leHBvcnQgeyBDb21iaW5lZFByb3RvY29sRXJyb3JzIH0gZnJvbSBcIi4vQ29tYmluZWRQcm90b2NvbEVycm9ycy5qc1wiO1xuZXhwb3J0IHsgaXNFcnJvckxpa2UgfSBmcm9tIFwiLi9pc0Vycm9yTGlrZS5qc1wiO1xuZXhwb3J0IHsgTGlua0Vycm9yLCByZWdpc3RlckxpbmtFcnJvciB9IGZyb20gXCIuL0xpbmtFcnJvci5qc1wiO1xuZXhwb3J0IHsgTG9jYWxTdGF0ZUVycm9yIH0gZnJvbSBcIi4vTG9jYWxTdGF0ZUVycm9yLmpzXCI7XG5leHBvcnQgeyBTZXJ2ZXJFcnJvciB9IGZyb20gXCIuL1NlcnZlckVycm9yLmpzXCI7XG5leHBvcnQgeyBTZXJ2ZXJQYXJzZUVycm9yIH0gZnJvbSBcIi4vU2VydmVyUGFyc2VFcnJvci5qc1wiO1xuZXhwb3J0IHsgVW5jb252ZW50aW9uYWxFcnJvciB9IGZyb20gXCIuL1VuY29udmVudGlvbmFsRXJyb3IuanNcIjtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/errors/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/errors/isErrorLike.js":
/*!***********************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/errors/isErrorLike.js ***!
  \***********************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isErrorLike: () => (/* binding */ isErrorLike)\n/* harmony export */ });\nfunction isErrorLike(error) {\n    return error !== null && typeof error === \"object\" && typeof error.message === \"string\" && typeof error.name === \"string\" && (typeof error.stack === \"string\" || typeof error.stack === \"undefined\");\n} //# sourceMappingURL=isErrorLike.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9lcnJvcnMvaXNFcnJvckxpa2UuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUVNLFNBQVUsV0FBVyxDQUFDLEtBQWM7SUFDeEMsT0FBTyxLQUNBLEtBQUssSUFBSSxJQUNkLE9BQU8sS0FBSyxLQUFLLFFBQVEsSUFDekIsT0FBUSxLQUFtQixDQUFDLE9BQU8sS0FBSyxRQUFRLElBQ2hELE9BQVEsS0FBbUIsQ0FBQyxJQUFJLEtBQUssUUFBUSxLQUM1QyxPQUFRLEtBQW1CLENBQUMsS0FBSyxLQUFLLFFBQVEsSUFDN0MsT0FBUSxLQUFtQixDQUFDLEtBQUssS0FBSyxZQUFXLENBQUM7QUFFeEQsQ0FBQyIsInNvdXJjZXMiOlsiL2hvbWUvdS9Qcm9qZWN0cy9Db2xkVHJhY2Uvc3JjL2Vycm9ycy9pc0Vycm9yTGlrZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEVycm9yTGlrZSB9IGZyb20gXCJAYXBvbGxvL2NsaWVudFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gaXNFcnJvckxpa2UoZXJyb3I6IHVua25vd24pOiBlcnJvciBpcyBFcnJvckxpa2Uge1xuICByZXR1cm4gKFxuICAgIGVycm9yICE9PSBudWxsICYmXG4gICAgdHlwZW9mIGVycm9yID09PSBcIm9iamVjdFwiICYmXG4gICAgdHlwZW9mIChlcnJvciBhcyBFcnJvckxpa2UpLm1lc3NhZ2UgPT09IFwic3RyaW5nXCIgJiZcbiAgICB0eXBlb2YgKGVycm9yIGFzIEVycm9yTGlrZSkubmFtZSA9PT0gXCJzdHJpbmdcIiAmJlxuICAgICh0eXBlb2YgKGVycm9yIGFzIEVycm9yTGlrZSkuc3RhY2sgPT09IFwic3RyaW5nXCIgfHxcbiAgICAgIHR5cGVvZiAoZXJyb3IgYXMgRXJyb3JMaWtlKS5zdGFjayA9PT0gXCJ1bmRlZmluZWRcIilcbiAgKTtcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/errors/isErrorLike.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/errors/utils.js":
/*!*****************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/errors/utils.js ***!
  \*****************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   brand: () => (/* binding */ brand),\n/* harmony export */   isBranded: () => (/* binding */ isBranded)\n/* harmony export */ });\nfunction isBranded(error, name) {\n    return typeof error === \"object\" && error !== null && error[Symbol.for(\"apollo.error\")] === name;\n}\nfunction brand(error) {\n    Object.defineProperty(error, Symbol.for(\"apollo.error\"), {\n        value: error.name,\n        enumerable: false,\n        writable: false,\n        configurable: false\n    });\n} //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9lcnJvcnMvdXRpbHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBTSxTQUFVLFNBQVMsQ0FBQyxLQUFjLEVBQUUsSUFBWTtJQUNwRCxPQUFPLE9BQ0UsS0FBSyxLQUFLLFFBQVEsSUFDekIsS0FBSyxLQUFLLElBQUksSUFDYixLQUFhLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FDcEQ7QUFDSCxDQUFDO0FBRUssU0FBVSxLQUFLLENBQUMsS0FBWTtJQUNoQyxNQUFNLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxFQUFFO1FBQ3ZELEtBQUssRUFBRSxLQUFLLENBQUMsSUFBSTtRQUNqQixVQUFVLEVBQUUsS0FBSztRQUNqQixRQUFRLEVBQUUsS0FBSztRQUNmLFlBQVksRUFBRSxLQUFLO0tBQ3BCLENBQUMsQ0FBQztBQUNMLENBQUMiLCJzb3VyY2VzIjpbIi9ob21lL3UvUHJvamVjdHMvQ29sZFRyYWNlL3NyYy9lcnJvcnMvdXRpbHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGlzQnJhbmRlZChlcnJvcjogdW5rbm93biwgbmFtZTogc3RyaW5nKSB7XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIGVycm9yID09PSBcIm9iamVjdFwiICYmXG4gICAgZXJyb3IgIT09IG51bGwgJiZcbiAgICAoZXJyb3IgYXMgYW55KVtTeW1ib2wuZm9yKFwiYXBvbGxvLmVycm9yXCIpXSA9PT0gbmFtZVxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYnJhbmQoZXJyb3I6IEVycm9yKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlcnJvciwgU3ltYm9sLmZvcihcImFwb2xsby5lcnJvclwiKSwge1xuICAgIHZhbHVlOiBlcnJvci5uYW1lLFxuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICB9KTtcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/errors/utils.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/incremental/handlers/notImplemented.js":
/*!****************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/incremental/handlers/notImplemented.js ***!
  \****************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NotImplementedHandler: () => (/* binding */ NotImplementedHandler)\n/* harmony export */ });\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/hasDirectives.js\");\n/* harmony import */ var _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @apollo/client/utilities/invariant */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/invariant/index.development.js\");\n\n\nclass NotImplementedHandler {\n    isIncrementalResult(_) {\n        return false;\n    }\n    prepareRequest(request) {\n        (0,_apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(!(0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_1__.hasDirectives)([\n            \"defer\"\n        ], request.query), 64);\n        return request;\n    }\n    extractErrors() {}\n    constructor(){\n        // This code path can never be reached, so we won't implement it.\n        this.startRequest = undefined;\n    }\n} //# sourceMappingURL=notImplemented.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9pbmNyZW1lbnRhbC9oYW5kbGVycy9ub3RJbXBsZW1lbnRlZC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFFaUU7QUFDSDtBQWU5RCxNQUFhLENBQWI7SUFDRSxDQUFGLGtCQUFxQixDQUFDLENBQU0sRUFBNUI7UUFDSSxDQUFKLE1BQVcsQ0FBWCxJQUFnQjtJQUNkO0lBQ0EsQ0FBRixhQUFnQixDQUFDLENBQWpCLE1BQTRDLEVBQTVDO1FBQ0ksNkVBQUosQ0FDTSxDQUFDLGdGQUFhLENBQUM7WUFBQyxDQUR0QixNQUM2QjtTQUFDLEVBQUUsQ0FEaEMsTUFDdUMsQ0FBQyxDQUR4QyxJQUM2QyxNQUV4QztRQUVELENBQUosTUFBVyxDQUFYLE1BQWtCO0lBQ2hCO0lBQ0EsQ0FBRixZQUFlLENBQWYsR0FBbUI7O1FBQ2pCLENBQUY7YUFDRSxDQUFGLGNBQWlCLENBQWpCLFFBQWlDOztBQUNqQyIsInNvdXJjZXMiOlsiL2hvbWUvdS9Qcm9qZWN0cy9zcmMvaW5jcmVtZW50YWwvaGFuZGxlcnMvbm90SW1wbGVtZW50ZWQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBBcG9sbG9MaW5rIH0gZnJvbSBcIkBhcG9sbG8vY2xpZW50L2xpbmtcIjtcbmltcG9ydCB0eXBlIHsgSEtUIH0gZnJvbSBcIkBhcG9sbG8vY2xpZW50L3V0aWxpdGllc1wiO1xuaW1wb3J0IHsgaGFzRGlyZWN0aXZlcyB9IGZyb20gXCJAYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvaW50ZXJuYWxcIjtcbmltcG9ydCB7IGludmFyaWFudCB9IGZyb20gXCJAYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvaW52YXJpYW50XCI7XG5cbmltcG9ydCB0eXBlIHsgSW5jcmVtZW50YWwgfSBmcm9tIFwiLi4vdHlwZXMuanNcIjtcblxuZXhwb3J0IGRlY2xhcmUgbmFtZXNwYWNlIE5vdEltcGxlbWVudGVkSGFuZGxlciB7XG4gIGludGVyZmFjZSBOb3RJbXBsZW1lbnRlZFJlc3VsdCBleHRlbmRzIEhLVCB7XG4gICAgYXJnMTogdW5rbm93bjsgLy8gVERhdGFcbiAgICBhcmcyOiB1bmtub3duOyAvLyBURXh0ZW5zaW9uc1xuICAgIHJldHVybjogbmV2ZXI7XG4gIH1cbiAgZXhwb3J0IGludGVyZmFjZSBUeXBlT3ZlcnJpZGVzIHtcbiAgICBBZGRpdGlvbmFsQXBvbGxvTGlua1Jlc3VsdFR5cGVzOiBOb3RJbXBsZW1lbnRlZFJlc3VsdDtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgTm90SW1wbGVtZW50ZWRIYW5kbGVyIGltcGxlbWVudHMgSW5jcmVtZW50YWwuSGFuZGxlcjxuZXZlcj4ge1xuICBpc0luY3JlbWVudGFsUmVzdWx0KF86IGFueSk6IF8gaXMgbmV2ZXIge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBwcmVwYXJlUmVxdWVzdChyZXF1ZXN0OiBBcG9sbG9MaW5rLlJlcXVlc3QpIHtcbiAgICBpbnZhcmlhbnQoXG4gICAgICAhaGFzRGlyZWN0aXZlcyhbXCJkZWZlclwiXSwgcmVxdWVzdC5xdWVyeSksXG4gICAgICBcImBAZGVmZXJgIGlzIG5vdCBzdXBwb3J0ZWQgd2l0aG91dCBzcGVjaWZ5aW5nIGFuIGluY3JlbWVudGFsIGhhbmRsZXIuIFBsZWFzZSBwYXNzIGEgaGFuZGxlciBhcyB0aGUgYGluY3JlbWVudGFsSGFuZGxlcmAgb3B0aW9uIHRvIHRoZSBgQXBvbGxvQ2xpZW50YCBjb25zdHJ1Y3Rvci5cIlxuICAgICk7XG5cbiAgICByZXR1cm4gcmVxdWVzdDtcbiAgfVxuICBleHRyYWN0RXJyb3JzKCkge31cbiAgLy8gVGhpcyBjb2RlIHBhdGggY2FuIG5ldmVyIGJlIHJlYWNoZWQsIHNvIHdlIHdvbid0IGltcGxlbWVudCBpdC5cbiAgc3RhcnRSZXF1ZXN0ID0gdW5kZWZpbmVkIGFzIGFueTtcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/incremental/handlers/notImplemented.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/invariantErrorCodes.js":
/*!************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/invariantErrorCodes.js ***!
  \************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   devDebug: () => (/* binding */ devDebug),\n/* harmony export */   devError: () => (/* binding */ devError),\n/* harmony export */   devLog: () => (/* binding */ devLog),\n/* harmony export */   devWarn: () => (/* binding */ devWarn),\n/* harmony export */   errorCodes: () => (/* binding */ errorCodes)\n/* harmony export */ });\n// This file is used by the error message display website and the\n// @apollo/client/includeErrors entry point.\n// This file is not meant to be imported manually.\nconst errorCodes = {\n    1: {\n        file: \"@apollo/client/utilities/internal/checkDocument.js\",\n        condition: \"doc && doc.kind === \\\"Document\\\"\",\n        message: 'Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \"gql\" tag? http://docs.apollostack.com/apollo-client/core.html#gql'\n    },\n    2: {\n        file: \"@apollo/client/utilities/internal/checkDocument.js\",\n        message: 'Schema type definitions not allowed in queries. Found: \"%s\"'\n    },\n    3: {\n        file: \"@apollo/client/utilities/internal/checkDocument.js\",\n        condition: \"operations.length <= 1\",\n        message: \"Ambiguous GraphQL document: contains %s operations\"\n    },\n    4: {\n        file: \"@apollo/client/utilities/internal/checkDocument.js\",\n        condition: \"operations.length == 1 && operations[0].operation === expectedType\",\n        message: \"Running a %s requires a graphql \" + \"%s, but a %s was used instead.\"\n    },\n    5: {\n        file: \"@apollo/client/utilities/internal/checkDocument.js\",\n        message: '`%s` is a forbidden field alias name in the selection set for field `%s` in %s \"%s\".'\n    },\n    6: {\n        file: \"@apollo/client/utilities/internal/getFragmentDefinition.js\",\n        condition: \"doc.kind === \\\"Document\\\"\",\n        message: 'Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \"gql\" tag? http://docs.apollostack.com/apollo-client/core.html#gql'\n    },\n    7: {\n        file: \"@apollo/client/utilities/internal/getFragmentDefinition.js\",\n        condition: \"doc.definitions.length <= 1\",\n        message: \"Fragment must have exactly one definition.\"\n    },\n    8: {\n        file: \"@apollo/client/utilities/internal/getFragmentDefinition.js\",\n        condition: \"fragmentDef.kind === \\\"FragmentDefinition\\\"\",\n        message: \"Must be a fragment definition.\"\n    },\n    9: {\n        file: \"@apollo/client/utilities/internal/getFragmentFromSelection.js\",\n        condition: \"fragment\",\n        message: \"No fragment named %s\"\n    },\n    10: {\n        file: \"@apollo/client/utilities/internal/getFragmentQueryDocument.js\",\n        message: \"Found a %s operation%s. \" + \"No operations are allowed when using a fragment as a query. Only fragments are allowed.\"\n    },\n    11: {\n        file: \"@apollo/client/utilities/internal/getFragmentQueryDocument.js\",\n        condition: \"fragments.length === 1\",\n        message: \"Found %s fragments. `fragmentName` must be provided when there is not exactly 1 fragment.\"\n    },\n    12: {\n        file: \"@apollo/client/utilities/internal/getMainDefinition.js\",\n        message: \"Expected a parsed GraphQL query with a query, mutation, subscription, or a fragment.\"\n    },\n    13: {\n        file: \"@apollo/client/utilities/internal/getQueryDefinition.js\",\n        condition: \"queryDef && queryDef.operation === \\\"query\\\"\",\n        message: \"Must contain a query definition.\"\n    },\n    15: {\n        file: \"@apollo/client/utilities/internal/shouldInclude.js\",\n        condition: \"evaledValue !== void 0\",\n        message: \"Invalid variable referenced in @%s directive.\"\n    },\n    16: {\n        file: \"@apollo/client/utilities/internal/shouldInclude.js\",\n        condition: \"directiveArguments && directiveArguments.length === 1\",\n        message: \"Incorrect number of arguments for the @%s directive.\"\n    },\n    17: {\n        file: \"@apollo/client/utilities/internal/shouldInclude.js\",\n        condition: \"ifArgument.name && ifArgument.name.value === \\\"if\\\"\",\n        message: \"Invalid argument for the @%s directive.\"\n    },\n    18: {\n        file: \"@apollo/client/utilities/internal/shouldInclude.js\",\n        condition: \"ifValue &&\\n    (ifValue.kind === \\\"Variable\\\" || ifValue.kind === \\\"BooleanValue\\\")\",\n        message: \"Argument for the @%s directive must be a variable or a boolean value.\"\n    },\n    19: {\n        file: \"@apollo/client/utilities/internal/valueToObjectRepresentation.js\",\n        message: 'The inline argument \"%s\" of kind \"%s\"' + \"is not supported. Use variables instead of inline arguments to \" + \"overcome this limitation.\"\n    },\n    20: {\n        file: \"@apollo/client/utilities/graphql/DocumentTransform.js\",\n        condition: \"Array.isArray(cacheKeys)\",\n        message: \"`getCacheKey` must return an array or undefined\"\n    },\n    21: {\n        file: \"@apollo/client/testing/core/mocking/mockLink.js\",\n        condition: \"max > min\",\n        message: \"realisticDelay: `min` must be less than `max`\"\n    },\n    22: {\n        file: \"@apollo/client/testing/core/mocking/mockLink.js\",\n        condition: \"queryWithoutClientOnlyDirectives\",\n        message: \"query is required\"\n    },\n    23: {\n        file: \"@apollo/client/testing/core/mocking/mockLink.js\",\n        condition: \"serverQuery\",\n        message: \"Cannot mock a client-only query. Mocked responses should contain at least one non-client field.\"\n    },\n    24: {\n        file: \"@apollo/client/testing/core/mocking/mockLink.js\",\n        condition: \"(mock.maxUsageCount ?? 1) > 0\",\n        message: \"Mocked response `maxUsageCount` must be greater than 0. Given %s\"\n    },\n    25: {\n        file: \"@apollo/client/react/ssr/prerenderStatic.js\",\n        condition: \"renderCount <= maxRerenders\",\n        message: \"Exceeded maximum rerender count of %d.\\nThis either means you have very deep `useQuery` waterfalls in your application\\nand need to increase the `maxRerender` option to `prerenderStatic`, or that\\nyou have an infinite render loop in your application.\"\n    },\n    26: {\n        file: \"@apollo/client/react/ssr/prerenderStatic.js\",\n        condition: \"!signal?.aborted\",\n        message: \"The operation was aborted before it could be attempted.\"\n    },\n    27: {\n        file: \"@apollo/client/react/internal/cache/QueryReference.js\",\n        condition: \"!queryRef || QUERY_REFERENCE_SYMBOL in queryRef\",\n        message: \"Expected a QueryRef object, but got something else instead.\"\n    },\n    28: {\n        file: \"@apollo/client/react/hooks/useApolloClient.js\",\n        condition: \"!!client\",\n        message: 'Could not find \"client\" in the context or passed in as an option. ' + \"Wrap the root component in an <ApolloProvider>, or pass an ApolloClient \" + \"instance in via options.\"\n    },\n    29: {\n        file: \"@apollo/client/react/hooks/useLazyQuery.js\",\n        condition: \"resultRef.current\",\n        message: \"useLazyQuery: '%s' cannot be called before executing the query.\"\n    },\n    30: {\n        file: \"@apollo/client/react/hooks/useLazyQuery.js\",\n        condition: \"!calledDuringRender()\",\n        message: \"useLazyQuery: 'execute' should not be called during render. To start a query during render, use the 'useQuery' hook.\"\n    },\n    31: {\n        file: \"@apollo/client/react/hooks/useLoadableQuery.js\",\n        condition: \"!calledDuringRender()\",\n        message: \"useLoadableQuery: 'loadQuery' should not be called during render. To start a query during render, use the 'useBackgroundQuery' hook.\"\n    },\n    32: {\n        file: \"@apollo/client/react/hooks/useLoadableQuery.js\",\n        condition: \"internalQueryRef\",\n        message: \"The query has not been loaded. Please load the query.\"\n    },\n    33: {\n        file: \"@apollo/client/react/hooks/useSubscription.js\",\n        condition: \"!optionsRef.current.skip\",\n        message: \"A subscription that is skipped cannot be restarted.\"\n    },\n    35: {\n        file: \"@apollo/client/react/hooks/internal/validateSuspenseHookOptions.js\",\n        condition: \"supportedFetchPolicies.includes(fetchPolicy)\",\n        message: \"The fetch policy `%s` is not supported with suspense.\"\n    },\n    37: {\n        file: \"@apollo/client/react/context/ApolloContext.js\",\n        condition: \"\\\"createContext\\\" in React\",\n        message: \"Invoking `getApolloContext` in an environment where `React.createContext` is not available.\\n\" + \"The Apollo Client functionality you are trying to use is only available in React Client Components.\\n\" + 'Please make sure to add \"use client\" at the top of your file.\\n' + // TODO: change to React documentation once React documentation contains information about Client Components\n        \"For more information, see https://nextjs.org/docs/getting-started/react-essentials#client-components\"\n    },\n    38: {\n        file: \"@apollo/client/react/context/ApolloProvider.js\",\n        condition: \"context.client\",\n        message: \"ApolloProvider was not passed a client instance. Make \" + 'sure you pass in your client via the \"client\" prop.'\n    },\n    39: {\n        file: \"@apollo/client/masking/maskDefinition.js\",\n        condition: \"fragment\",\n        message: \"Could not find fragment with name '%s'.\"\n    },\n    41: {\n        file: \"@apollo/client/masking/maskFragment.js\",\n        condition: \"fragments.length === 1\",\n        message: \"Found %s fragments. `fragmentName` must be provided when there is not exactly 1 fragment.\"\n    },\n    42: {\n        file: \"@apollo/client/masking/maskFragment.js\",\n        condition: \"!!fragment\",\n        message: 'Could not find fragment with name \"%s\".'\n    },\n    43: {\n        file: \"@apollo/client/masking/maskOperation.js\",\n        condition: \"definition\",\n        message: \"Expected a parsed GraphQL document with a query, mutation, or subscription.\"\n    },\n    47: {\n        file: \"@apollo/client/local-state/LocalState.js\",\n        condition: \"hasDirectives([\\\"client\\\"], document)\",\n        message: \"Expected document to contain `@client` fields.\"\n    },\n    48: {\n        file: \"@apollo/client/local-state/LocalState.js\",\n        condition: \"hasDirectives([\\\"client\\\"], document)\",\n        message: \"Expected document to contain `@client` fields.\"\n    },\n    49: {\n        file: \"@apollo/client/local-state/LocalState.js\",\n        condition: \"fragment\",\n        message: \"No fragment named %s\"\n    },\n    53: {\n        file: \"@apollo/client/local-state/LocalState.js\",\n        message: \"Could not resolve __typename on object %o returned from resolver '%s'. '__typename' needs to be returned to properly resolve child fields.\"\n    },\n    54: {\n        file: \"@apollo/client/local-state/LocalState.js\",\n        condition: \"fragment\",\n        message: \"No fragment named %s\"\n    },\n    55: {\n        file: \"@apollo/client/local-state/LocalState.js\",\n        condition: \"cache.fragmentMatches\",\n        message: \"The configured cache does not support fragment matching which will lead to incorrect results when executing local resolvers. Please use a cache that implements `fragmetMatches`.\"\n    },\n    57: {\n        file: \"@apollo/client/link/persisted-queries/index.js\",\n        condition: \"options &&\\n    (typeof options.sha256 === \\\"function\\\" ||\\n        typeof options.generateHash === \\\"function\\\")\",\n        message: 'Missing/invalid \"sha256\" or \"generateHash\" function. Please ' + 'configure one using the \"createPersistedQueryLink(options)\" options ' + \"parameter.\"\n    },\n    58: {\n        file: \"@apollo/client/link/persisted-queries/index.js\",\n        condition: \"forward\",\n        message: \"PersistedQueryLink cannot be the last link in the chain.\"\n    },\n    59: {\n        file: \"@apollo/client/link/http/checkFetcher.js\",\n        condition: \"fetcher || typeof fetch !== \\\"undefined\\\"\",\n        message: \"\\n\\\"fetch\\\" has not been found globally and no fetcher has been configured. To fix this, install a fetch package (like https://www.npmjs.com/package/cross-fetch), instantiate the fetcher, and pass it into your HttpLink constructor. For example:\\n\\nimport fetch from 'cross-fetch';\\nimport { ApolloClient, HttpLink } from '@apollo/client';\\nconst client = new ApolloClient({\\n  link: new HttpLink({ uri: '/graphql', fetch })\\n});\\n    \"\n    },\n    60: {\n        file: \"@apollo/client/link/http/parseAndCheckHttpResponse.js\",\n        condition: \"response.body && typeof response.body.getReader === \\\"function\\\"\",\n        message: \"Unknown type for `response.body`. Please use a `fetch` implementation that is WhatWG-compliant and that uses WhatWG ReadableStreams for `body`.\"\n    },\n    63: {\n        file: \"@apollo/client/link/core/ApolloLink.js\",\n        message: \"request is not implemented\"\n    },\n    64: {\n        file: \"@apollo/client/incremental/handlers/notImplemented.js\",\n        condition: \"!hasDirectives([\\\"defer\\\"], request.query)\",\n        message: \"`@defer` is not supported without specifying an incremental handler. Please pass a handler as the `incrementalHandler` option to the `ApolloClient` constructor.\"\n    },\n    65: {\n        file: \"@apollo/client/core/ApolloClient.js\",\n        condition: \"options.cache\",\n        message: \"To initialize Apollo Client, you must specify a 'cache' property \" + \"in the options object. \\n\" + \"For more information, please visit: https://go.apollo.dev/c/docs\"\n    },\n    66: {\n        file: \"@apollo/client/core/ApolloClient.js\",\n        condition: \"options.link\",\n        message: \"To initialize Apollo Client, you must specify a 'link' property \" + \"in the options object. \\n\" + \"For more information, please visit: https://go.apollo.dev/c/docs\"\n    },\n    67: {\n        file: \"@apollo/client/core/ApolloClient.js\",\n        condition: \"options.fetchPolicy !== \\\"cache-and-network\\\"\",\n        message: \"The cache-and-network fetchPolicy does not work with client.query, because \" + \"client.query can only return a single result. Please use client.watchQuery \" + \"to receive multiple results from the cache and the network, or consider \" + \"using a different fetchPolicy, such as cache-first or network-only.\"\n    },\n    68: {\n        file: \"@apollo/client/core/ApolloClient.js\",\n        condition: \"options.fetchPolicy !== \\\"standby\\\"\",\n        message: \"The standby fetchPolicy does not work with client.query, because \" + \"standby does not fetch. Consider using a different fetchPolicy, such \" + \"as cache-first or network-only.\"\n    },\n    69: {\n        file: \"@apollo/client/core/ApolloClient.js\",\n        condition: \"options.query\",\n        message: \"query option is required. You must specify your GraphQL document \" + \"in the query option.\"\n    },\n    70: {\n        file: \"@apollo/client/core/ApolloClient.js\",\n        condition: \"options.query.kind === \\\"Document\\\"\",\n        message: 'You must wrap the query string in a \"gql\" tag.'\n    },\n    71: {\n        file: \"@apollo/client/core/ApolloClient.js\",\n        condition: \"!options.returnPartialData\",\n        message: \"returnPartialData option only supported on watchQuery.\"\n    },\n    72: {\n        file: \"@apollo/client/core/ApolloClient.js\",\n        condition: \"!options.pollInterval\",\n        message: \"pollInterval option only supported on watchQuery.\"\n    },\n    73: {\n        file: \"@apollo/client/core/ApolloClient.js\",\n        condition: \"!options.notifyOnNetworkStatusChange\",\n        message: \"notifyOnNetworkStatusChange option only supported on watchQuery.\"\n    },\n    74: {\n        file: \"@apollo/client/core/ApolloClient.js\",\n        condition: \"optionsWithDefaults.mutation\",\n        message: \"The `mutation` option is required. Please provide a GraphQL document in the `mutation` option.\"\n    },\n    75: {\n        file: \"@apollo/client/core/ApolloClient.js\",\n        condition: \"optionsWithDefaults.fetchPolicy === \\\"network-only\\\" ||\\n    optionsWithDefaults.fetchPolicy === \\\"no-cache\\\"\",\n        message: \"Mutations only support 'network-only' or 'no-cache' fetch policies. The default 'network-only' behavior automatically writes mutation results to the cache. Passing 'no-cache' skips the cache write.\"\n    },\n    78: {\n        file: \"@apollo/client/core/ObservableQuery.js\",\n        condition: \"this.options.fetchPolicy !== \\\"cache-only\\\"\",\n        message: \"Cannot execute `fetchMore` for 'cache-only' query '%s'. Please use a different fetch policy.\"\n    },\n    79: {\n        file: \"@apollo/client/core/ObservableQuery.js\",\n        condition: \"updateQuery\",\n        message: \"You must provide an `updateQuery` function when using `fetchMore` with a `no-cache` fetch policy.\"\n    },\n    83: {\n        file: \"@apollo/client/core/QueryManager.js\",\n        message: \"QueryManager stopped while query was in flight\"\n    },\n    84: {\n        file: \"@apollo/client/core/QueryManager.js\",\n        condition: \"this.localState\",\n        message: \"Mutation '%s' contains `@client` fields with variables provided by `@export` but local state has not been configured.\"\n    },\n    85: {\n        file: \"@apollo/client/core/QueryManager.js\",\n        message: \"Store reset while query was in flight (not completed in link chain)\"\n    },\n    88: {\n        file: \"@apollo/client/core/QueryManager.js\",\n        condition: \"!this.getDocumentInfo(query).hasClientExports || this.localState\",\n        message: \"Subscription '%s' contains `@client` fields with variables provided by `@export` but local state has not been configured.\"\n    },\n    89: {\n        file: \"@apollo/client/core/QueryManager.js\",\n        condition: \"this.localState\",\n        message: \"%s '%s' contains `@client` fields but local state has not been configured.\"\n    },\n    90: {\n        file: \"@apollo/client/core/QueryManager.js\",\n        condition: \"!hasIncrementalDirective\",\n        message: \"%s '%s' contains `@client` and `@defer` directives. These cannot be used together.\"\n    },\n    91: {\n        file: \"@apollo/client/core/QueryManager.js\",\n        condition: \"this.localState\",\n        message: \"Query '%s' contains `@client` fields with variables provided by `@export` but local state has not been configured.\"\n    },\n    93: {\n        file: \"@apollo/client/core/QueryManager.js\",\n        condition: \"this.localState\",\n        message: \"Query '%s' contains `@client` fields but local state has not been configured.\"\n    },\n    94: {\n        file: \"@apollo/client/core/QueryManager.js\",\n        condition: \"didEmitValue\",\n        message: \"The link chain completed without emitting a value. This is likely unintentional and should be updated to emit a value before completing.\"\n    },\n    95: {\n        file: \"@apollo/client/cache/inmemory/entityStore.js\",\n        condition: \"typeof dataId === \\\"string\\\"\",\n        message: \"store.merge expects a string ID\"\n    },\n    98: {\n        file: \"@apollo/client/cache/inmemory/key-extractor.js\",\n        condition: \"extracted !== void 0\",\n        message: \"Missing field '%s' while extracting keyFields from %s\"\n    },\n    99: {\n        file: \"@apollo/client/cache/inmemory/policies.js\",\n        condition: \"!old || old === which\",\n        message: \"Cannot change root %s __typename more than once\"\n    },\n    102: {\n        file: \"@apollo/client/cache/inmemory/policies.js\",\n        message: \"Cannot automatically merge arrays\"\n    },\n    103: {\n        file: \"@apollo/client/cache/inmemory/readFromStore.js\",\n        message: \"No fragment named %s\"\n    },\n    104: {\n        file: \"@apollo/client/cache/inmemory/readFromStore.js\",\n        condition: \"!isReference(value)\",\n        message: \"Missing selection set for object of type %s returned for query field %s\"\n    },\n    105: {\n        file: \"@apollo/client/cache/inmemory/writeToStore.js\",\n        message: \"Could not identify object %s\"\n    },\n    107: {\n        file: \"@apollo/client/cache/inmemory/writeToStore.js\",\n        message: \"No fragment named %s\"\n    }\n};\nconst devDebug = {\n    76: {\n        file: \"@apollo/client/core/ApolloClient.js\",\n        message: \"In client.refetchQueries, Promise.all promise rejected with error %o\"\n    },\n    82: {\n        file: \"@apollo/client/core/ObservableQuery.js\",\n        message: \"Missing cache result fields: %o\"\n    }\n};\nconst devLog = {};\nconst devWarn = {\n    36: {\n        file: \"@apollo/client/react/hooks/internal/validateSuspenseHookOptions.js\",\n        message: \"Using `returnPartialData` with a `no-cache` fetch policy has no effect. To read partial data from the cache, consider using an alternate fetch policy.\"\n    },\n    40: {\n        file: \"@apollo/client/masking/maskDefinition.js\",\n        message: \"Accessing unmasked field on %s at path '%s'. This field will not be available when masking is enabled. Please read the field from the fragment instead.\"\n    },\n    44: {\n        file: \"@apollo/client/masking/utils.js\",\n        message: \"@unmask 'mode' argument does not support variables.\"\n    },\n    45: {\n        file: \"@apollo/client/masking/utils.js\",\n        message: \"@unmask 'mode' argument must be of type string.\"\n    },\n    46: {\n        file: \"@apollo/client/masking/utils.js\",\n        message: \"@unmask 'mode' argument does not recognize value '%s'.\"\n    },\n    50: {\n        file: \"@apollo/client/local-state/LocalState.js\",\n        message: \"The '%s' resolver returned `undefined` instead of a value. This is likely a bug in the resolver. If you didn't mean to return a value, return `null` instead.\"\n    },\n    51: {\n        file: \"@apollo/client/local-state/LocalState.js\",\n        message: \"The '%s' field had no cached value and only forced resolvers were run. The value was set to `null`.\"\n    },\n    52: {\n        file: \"@apollo/client/local-state/LocalState.js\",\n        message: \"The '%s' field on object %o returned `undefined` instead of a value. The parent resolver did not include the property in the returned value and there was no resolver defined for the field.\"\n    },\n    56: {\n        file: \"@apollo/client/link/ws/index.js\",\n        message: \"`WebSocketLink` uses the deprecated and unmaintained `subscriptions-transport-ws` library. This link is no longer maintained and will be removed in a future major version of Apollo Client. We recommend switching to `GraphQLWsLink` which uses the `graphql-ws` library to send GraphQL operations through WebSocket connections (https://the-guild.dev/graphql/ws).\"\n    },\n    61: {\n        file: \"@apollo/client/link/core/ApolloLink.js\",\n        message: \"[ApolloLink.split]: The test function returned a non-boolean value which could result in subtle bugs (e.g. such as using an `async` function which always returns a truthy value). Got `%o`.\"\n    },\n    62: {\n        file: \"@apollo/client/link/core/ApolloLink.js\",\n        message: \"The terminating link provided to `ApolloLink.execute` called `forward` instead of handling the request. \" + \"This results in an observable that immediately completes and does not emit a value. \" + \"Please provide a terminating link that properly handles the request.\\n\\n\" + \"If you are using a split link, ensure each branch contains a terminating link that handles the request.\"\n    },\n    77: {\n        file: \"@apollo/client/core/ObservableQuery.js\",\n        message: \"Called refetch(%o) for query %o, which does not declare a $variables variable.\\nDid you mean to call refetch(variables) instead of refetch({ variables })?\"\n    },\n    81: {\n        file: \"@apollo/client/core/ObservableQuery.js\",\n        message: \"Cannot poll on 'cache-only' query '%s' and as such, polling is disabled. Please use a different fetch policy.\"\n    },\n    86: {\n        file: \"@apollo/client/core/QueryManager.js\",\n        message: 'Unknown query named \"%s\" requested in refetchQueries options.include array'\n    },\n    87: {\n        file: \"@apollo/client/core/QueryManager.js\",\n        message: \"Unknown anonymous query requested in refetchQueries options.include array\"\n    },\n    92: {\n        file: \"@apollo/client/core/QueryManager.js\",\n        message: '[%s]: Fragments masked by data masking are inaccessible when using fetch policy \"no-cache\". Please add `@unmask` to each fragment spread to access the data.'\n    },\n    96: {\n        file: \"@apollo/client/cache/inmemory/entityStore.js\",\n        message: \"cache.modify: You are trying to write a Reference that is not part of the store: %o\\n\" + \"Please make sure to set the `mergeIntoStore` parameter to `true` when creating a Reference that is not part of the store yet:\\n\" + \"`toReference(object, true)`\"\n    },\n    97: {\n        file: \"@apollo/client/cache/inmemory/entityStore.js\",\n        message: \"cache.modify: Writing an array with a mix of both References and Objects will not result in the Objects being normalized correctly.\\n\" + \"Please convert the object instance %o to a Reference before writing it to the cache by calling `toReference(object, true)`.\"\n    },\n    100: {\n        file: \"@apollo/client/cache/inmemory/policies.js\",\n        message: \"Inferring subtype %s of supertype %s\"\n    },\n    101: {\n        file: \"@apollo/client/cache/inmemory/policies.js\",\n        message: \"Undefined 'from' passed to readField with arguments %s\"\n    },\n    108: {\n        file: \"@apollo/client/cache/inmemory/writeToStore.js\",\n        message: \"Cache data may be lost when replacing the %s field of a %s object.\\n\\nThis could cause additional (usually avoidable) network requests to fetch data that were otherwise cached.\\n\\nTo address this problem (which is not a bug in Apollo Client), %sdefine a custom merge function for the %s field, so InMemoryCache can safely merge these objects:\\n\\n  existing: %o\\n  incoming: %o\\n\\nFor more information about these options, please refer to the documentation:\\n\\n  * Ensuring entity objects have IDs: https://go.apollo.dev/c/generating-unique-identifiers\\n  * Defining custom merge functions: https://go.apollo.dev/c/merging-non-normalized-objects\\n\"\n    },\n    109: {\n        file: \"@apollo/client/cache/core/cache.js\",\n        message: \"Could not identify object passed to `from` for '%s' fragment, either because the object is non-normalized or the key fields are missing. If you are masking this object, please ensure the key fields are requested by the parent object.\"\n    }\n};\nconst devError = {\n    14: {\n        file: \"@apollo/client/utilities/internal/removeDirectivesFromDocument.js\",\n        message: \"Could not find operation or fragment\"\n    },\n    34: {\n        file: \"@apollo/client/react/hooks/useSyncExternalStore.js\",\n        message: \"The result of getSnapshot should be cached to avoid an infinite loop\"\n    },\n    80: {\n        file: \"@apollo/client/core/ObservableQuery.js\",\n        message: \"Unhandled GraphQL subscription error\"\n    },\n    106: {\n        file: \"@apollo/client/cache/inmemory/writeToStore.js\",\n        message: \"Missing field '%s' while writing result %o\"\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9pbnZhcmlhbnRFcnJvckNvZGVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBSUEsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFlLEVBQUUsQ0FBQztBQUN6QyxNQUFNLENBQUMsTUFBTSxRQUFRLEdBQWUsRUFBRSxDQUFDO0FBQ3ZDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBZSxFQUFFLENBQUM7QUFDOUIsTUFBTSxPQUFPLEdBQWUsRUFBRSxDQUFDO0lBQ3RDLElBQU0iLCJzb3VyY2VzIjpbIi9ob21lL3UvUHJvamVjdHMvQ29sZFRyYWNlL2FwcHMvc3JjL2ludmFyaWFudEVycm9yQ29kZXMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGludGVyZmFjZSBFcnJvckNvZGVzIHtcbiAgW2tleTogbnVtYmVyXTogeyBmaWxlOiBzdHJpbmc7IGNvbmRpdGlvbj86IHN0cmluZzsgbWVzc2FnZT86IHN0cmluZyB9O1xufVxuXG5leHBvcnQgY29uc3QgZXJyb3JDb2RlczogRXJyb3JDb2RlcyA9IHt9O1xuZXhwb3J0IGNvbnN0IGRldkRlYnVnOiBFcnJvckNvZGVzID0ge307XG5leHBvcnQgY29uc3QgZGV2TG9nOiBFcnJvckNvZGVzID0ge307XG5leHBvcnQgY29uc3QgZGV2V2FybjogRXJyb3JDb2RlcyA9IHt9O1xuZXhwb3J0IGNvbnN0IGRldkVycm9yOiBFcnJvckNvZGVzID0ge307XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/invariantErrorCodes.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/link/client-awareness/ClientAwarenessLink.js":
/*!**********************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/link/client-awareness/ClientAwarenessLink.js ***!
  \**********************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ClientAwarenessLink: () => (/* binding */ ClientAwarenessLink)\n/* harmony export */ });\n/* harmony import */ var _apollo_client_link__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @apollo/client/link */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/link/core/ApolloLink.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/compact.js\");\n\n\n/**\n * `ClientAwarenessLink` provides support for providing client awareness\n * features.\n *\n * @remarks\n *\n * Client awareness adds identifying information about the client to HTTP\n * requests for use with metrics reporting tools, such as [Apollo GraphOS](https://apollographql.com/docs/graphos/platform).\n * It is included in the functionality of [`HttpLink`](https://apollographql.com/docs/react/api/link/apollo-link-http) by default.\n *\n * Client awareness distinguishes between user-provided client awareness\n * (provided by the `clientAwareness` option) and enhanced client awareness\n * (provided by the `enhancedClientAwareness` option). User-provided client\n * awareness enables you to set a customized client name and version for\n * identification in metrics reporting tools. Enhanced client awareness enables\n * the identification of the Apollo Client package name and version.\n *\n * @example\n *\n * ```ts\n * import { ClientAwarenessLink } from \"@apollo/client/link/client-awareness\";\n *\n * const link = new ClientAwarenessLink({\n *   clientAwareness: {\n *     name: \"My Client\",\n *     version: \"1\",\n *   },\n *   enhancedClientAwareness: {\n *     transport: \"extensions\",\n *   },\n * });\n * ```\n */ class ClientAwarenessLink extends _apollo_client_link__WEBPACK_IMPORTED_MODULE_0__.ApolloLink {\n    constructor(options = {}){\n        super((operation, forward)=>{\n            const client = operation.client;\n            const clientOptions = client[\"queryManager\"].clientOptions;\n            const context = operation.getContext();\n            {\n                const { name, version, transport = \"headers\" } = (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_1__.compact)({}, clientOptions.clientAwareness, options.clientAwareness, context.clientAwareness);\n                if (transport === \"headers\") {\n                    operation.setContext((param)=>{\n                        let { headers, extensions } = param;\n                        return {\n                            headers: (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_1__.compact)(// setting these first so that they can be overridden by user-provided headers\n                            {\n                                \"apollographql-client-name\": name,\n                                \"apollographql-client-version\": version\n                            }, headers)\n                        };\n                    });\n                }\n            }\n            {\n                const { transport = \"extensions\" } = (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_1__.compact)({}, clientOptions.enhancedClientAwareness, options.enhancedClientAwareness);\n                if (transport === \"extensions\") {\n                    operation.extensions = (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_1__.compact)(// setting these first so that it can be overridden by user-provided extensions\n                    {\n                        clientLibrary: {\n                            name: \"@apollo/client\",\n                            version: client.version\n                        }\n                    }, operation.extensions);\n                }\n            }\n            return forward(operation);\n        });\n    }\n} //# sourceMappingURL=ClientAwarenessLink.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/link/client-awareness/ClientAwarenessLink.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/link/core/ApolloLink.js":
/*!*************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/link/core/ApolloLink.js ***!
  \*************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApolloLink: () => (/* binding */ ApolloLink)\n/* harmony export */ });\n/* harmony import */ var _barrel_optimize_names_EMPTY_rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! __barrel_optimize__?names=EMPTY!=!rxjs */ \"(app-pages-browser)/../../node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/observable/empty.js\");\n/* harmony import */ var _apollo_client_link_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @apollo/client/link/utils */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/link/utils/createOperation.js\");\n/* harmony import */ var _apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @apollo/client/utilities/environment */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/environment/index.development.js\");\n/* harmony import */ var _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @apollo/client/utilities/invariant */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/invariant/index.development.js\");\n/* harmony import */ var _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @apollo/client/utilities/invariant */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/invariant/index.js\");\n\n\n\n\n/**\n * The base class for all links in Apollo Client. A link represents either a\n * self-contained modification to a GraphQL operation or a side effect (such as\n * logging).\n *\n * @remarks\n *\n * Links enable you to customize Apollo Client's request flow by composing\n * together different pieces of functionality into a chain of links. Each\n * link represents a specific capability, such as adding authentication headers,\n * retrying failed requests, batching operations, or sending requests to a\n * GraphQL server.\n *\n * Every link must define a request handler via its constructor or by extending\n * this class and implementing the `request` method.\n *\n * @example\n *\n * ```ts\n * import { ApolloLink } from \"@apollo/client\";\n *\n * const link = new ApolloLink((operation, forward) => {\n *   console.log(\"Operation:\", operation.operationName);\n *   return forward(operation);\n * });\n * ```\n */ class ApolloLink {\n    /**\n     * Creates a link that completes immediately and does not emit a result.\n     *\n     * @example\n     *\n     * ```ts\n     * const link = ApolloLink.empty();\n     * ```\n     */ static empty() {\n        return new ApolloLink(()=>_barrel_optimize_names_EMPTY_rxjs__WEBPACK_IMPORTED_MODULE_0__.EMPTY);\n    }\n    /**\n     * Composes multiple links into a single composed link that executes each\n     * provided link in serial order.\n     *\n     * @example\n     *\n     * ```ts\n     * import { from, HttpLink, ApolloLink } from \"@apollo/client\";\n     * import { RetryLink } from \"@apollo/client/link/retry\";\n     * import MyAuthLink from \"../auth\";\n     *\n     * const link = ApolloLink.from([\n     *   new RetryLink(),\n     *   new MyAuthLink(),\n     *   new HttpLink({ uri: \"http://localhost:4000/graphql\" }),\n     * ]);\n     * ```\n     *\n     * @param links - An array of `ApolloLink` instances or request handlers that\n     * are executed in serial order.\n     */ static from(links) {\n        if (links.length === 0) return ApolloLink.empty();\n        const [first, ...rest] = links;\n        return first.concat(...rest);\n    }\n    /**\n     * Creates a link that conditionally routes a request to different links.\n     *\n     * @example\n     *\n     * ```ts\n     * import { ApolloLink, HttpLink } from \"@apollo/client\";\n     *\n     * const link = ApolloLink.split(\n     *   (operation) => operation.getContext().version === 1,\n     *   new HttpLink({ uri: \"http://localhost:4000/v1/graphql\" }),\n     *   new HttpLink({ uri: \"http://localhost:4000/v2/graphql\" })\n     * );\n     * ```\n     *\n     * @param test - A predicate function that receives the current `operation`\n     * and returns a boolean indicating which link to execute. Returning `true`\n     * executes the `left` link. Returning `false` executes the `right` link.\n     *\n     * @param left - The link that executes when the `test` function returns\n     * `true`.\n     *\n     * @param right - The link that executes when the `test` function returns\n     * `false`. If the `right` link is not provided, the request is forwarded to\n     * the next link in the chain.\n     */ static split(test, left) {\n        let right = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : new ApolloLink((op, forward)=>forward(op));\n        const link = new ApolloLink((operation, forward)=>{\n            const result = test(operation);\n            if (_apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_1__.__DEV__) {\n                if (typeof result !== \"boolean\") {\n                    _apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_1__.__DEV__ && _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant.warn(61, result);\n                }\n            }\n            return result ? left.request(operation, forward) : right.request(operation, forward);\n        });\n        return Object.assign(link, {\n            left,\n            right\n        });\n    }\n    /**\n     * Executes a GraphQL request against a link. The `execute` function begins\n     * the request by calling the request handler of the link.\n     *\n     * @example\n     *\n     * ```ts\n     * const observable = ApolloLink.execute(link, { query, variables }, { client });\n     *\n     * observable.subscribe({\n     *   next(value) {\n     *     console.log(\"Received\", value);\n     *   },\n     *   error(error) {\n     *     console.error(\"Oops got error\", error);\n     *   },\n     *   complete() {\n     *     console.log(\"Request complete\");\n     *   },\n     * });\n     * ```\n     *\n     * @param link - The `ApolloLink` instance to execute the request.\n     *\n     * @param request - The GraphQL request details, such as the `query` and\n     * `variables`.\n     *\n     * @param context - The execution context for the request, such as the\n     * `client` making the request.\n     */ static execute(link, request, context) {\n        return link.request((0,_apollo_client_link_utils__WEBPACK_IMPORTED_MODULE_3__.createOperation)(request, context), ()=>{\n            if (_apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_1__.__DEV__) {\n                _apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_1__.__DEV__ && _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant.warn(62);\n            }\n            return _barrel_optimize_names_EMPTY_rxjs__WEBPACK_IMPORTED_MODULE_0__.EMPTY;\n        });\n    }\n    /**\n     * Combines multiple links into a single composed link.\n     *\n     * @example\n     *\n     * ```ts\n     * const link = ApolloLink.concat(firstLink, secondLink, thirdLink);\n     * ```\n     *\n     * @param links - The links to concatenate into a single link. Each link will\n     * execute in serial order.\n     *\n     * @deprecated Use `ApolloLink.from` instead. `ApolloLink.concat` will be\n     * removed in a future major version.\n     */ static concat() {\n        for(var _len = arguments.length, links = new Array(_len), _key = 0; _key < _len; _key++){\n            links[_key] = arguments[_key];\n        }\n        return ApolloLink.from(links);\n    }\n    /**\n     * Concatenates a link that conditionally routes a request to different links.\n     *\n     * @example\n     *\n     * ```ts\n     * import { ApolloLink, HttpLink } from \"@apollo/client\";\n     *\n     * const previousLink = new ApolloLink((operation, forward) => {\n     *   // Handle the request\n     *\n     *   return forward(operation);\n     * });\n     *\n     * const link = previousLink.split(\n     *   (operation) => operation.getContext().version === 1,\n     *   new HttpLink({ uri: \"http://localhost:4000/v1/graphql\" }),\n     *   new HttpLink({ uri: \"http://localhost:4000/v2/graphql\" })\n     * );\n     * ```\n     *\n     * @param test - A predicate function that receives the current `operation`\n     * and returns a boolean indicating which link to execute. Returning `true`\n     * executes the `left` link. Returning `false` executes the `right` link.\n     *\n     * @param left - The link that executes when the `test` function returns\n     * `true`.\n     *\n     * @param right - The link that executes when the `test` function returns\n     * `false`. If the `right` link is not provided, the request is forwarded to\n     * the next link in the chain.\n     */ split(test, left, right) {\n        return this.concat(ApolloLink.split(test, left, right));\n    }\n    /**\n     * Combines the link with other links into a single composed link.\n     *\n     * @example\n     *\n     * ```ts\n     * import { ApolloLink, HttpLink } from \"@apollo/client\";\n     *\n     * const previousLink = new ApolloLink((operation, forward) => {\n     *   // Handle the request\n     *\n     *   return forward(operation);\n     * });\n     *\n     * const link = previousLink.concat(\n     *   link1,\n     *   link2,\n     *   new HttpLink({ uri: \"http://localhost:4000/graphql\" })\n     * );\n     * ```\n     */ concat() {\n        for(var _len = arguments.length, links = new Array(_len), _key = 0; _key < _len; _key++){\n            links[_key] = arguments[_key];\n        }\n        if (links.length === 0) {\n            return this;\n        }\n        return links.reduce(this.combine.bind(this), this);\n    }\n    combine(left, right) {\n        const link = new ApolloLink((operation, forward)=>{\n            return left.request(operation, (op)=>right.request(op, forward));\n        });\n        return Object.assign(link, {\n            left,\n            right\n        });\n    }\n    /**\n     * Runs the request handler for the provided operation.\n     *\n     * > [!NOTE]\n     * > This is called by the `ApolloLink.execute` function for you and should\n     * > not be called directly. Prefer using `ApolloLink.execute` to make the\n     * > request instead.\n     */ request(operation, forward) {\n        throw (0,_apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_4__.newInvariantError)(63);\n    }\n    constructor(request){\n        if (request) this.request = request;\n    }\n} //# sourceMappingURL=ApolloLink.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/link/core/ApolloLink.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/link/core/execute.js":
/*!**********************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/link/core/execute.js ***!
  \**********************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   execute: () => (/* binding */ execute)\n/* harmony export */ });\n/* harmony import */ var _ApolloLink_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ApolloLink.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/link/core/ApolloLink.js\");\n\nconst execute = _ApolloLink_js__WEBPACK_IMPORTED_MODULE_0__.ApolloLink.execute; //# sourceMappingURL=execute.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9saW5rL2NvcmUvZXhlY3V0ZS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUE2QztBQUV0QyxNQUFNLE9BQU8sR0FBRyxzREFBVSxDQUFDLE9BQU8sQ0FBQyIsInNvdXJjZXMiOlsiL2hvbWUvdS9Qcm9qZWN0cy9zcmMvbGluay9jb3JlL2V4ZWN1dGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBvbGxvTGluayB9IGZyb20gXCIuL0Fwb2xsb0xpbmsuanNcIjtcblxuZXhwb3J0IGNvbnN0IGV4ZWN1dGUgPSBBcG9sbG9MaW5rLmV4ZWN1dGU7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/link/core/execute.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/link/http/BaseHttpLink.js":
/*!***************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/link/http/BaseHttpLink.js ***!
  \***************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseHttpLink: () => (/* binding */ BaseHttpLink)\n/* harmony export */ });\n/* harmony import */ var _barrel_optimize_names_Observable_rxjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! __barrel_optimize__?names=Observable!=!rxjs */ \"(app-pages-browser)/../../node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/Observable.js\");\n/* harmony import */ var _apollo_client_link__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @apollo/client/link */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/link/core/ApolloLink.js\");\n/* harmony import */ var _apollo_client_link_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @apollo/client/link/utils */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/link/utils/filterOperationVariables.js\");\n/* harmony import */ var _apollo_client_utilities__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @apollo/client/utilities */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/graphql/operations.js\");\n/* harmony import */ var _apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @apollo/client/utilities/environment */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/environment/index.development.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/compact.js\");\n/* harmony import */ var _apollo_client_utilities_internal_globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @apollo/client/utilities/internal/globals */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/globals/maybe.js\");\n/* harmony import */ var _checkFetcher_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./checkFetcher.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/link/http/checkFetcher.js\");\n/* harmony import */ var _parseAndCheckHttpResponse_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./parseAndCheckHttpResponse.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/link/http/parseAndCheckHttpResponse.js\");\n/* harmony import */ var _rewriteURIForGET_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./rewriteURIForGET.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/link/http/rewriteURIForGET.js\");\n/* harmony import */ var _selectHttpOptionsAndBody_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./selectHttpOptionsAndBody.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/link/http/selectHttpOptionsAndBody.js\");\n/* harmony import */ var _selectURI_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./selectURI.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/link/http/selectURI.js\");\n\n\n\n\n\n\n\n\n\n\n\n\nconst backupFetch = (0,_apollo_client_utilities_internal_globals__WEBPACK_IMPORTED_MODULE_0__.maybe)(()=>fetch);\nfunction noop() {}\n/**\n * `BaseHttpLink` is a terminating link that sends a GraphQL operation to a\n * remote endpoint over HTTP. It serves as a base link to `HttpLink`.\n *\n * @remarks\n *\n * `BaseHttpLink` supports both POST and GET requests, and you can configure\n * HTTP options on a per-operation basis. You can use these options for\n * authentication, persisted queries, dynamic URIs, and other granular updates.\n *\n * > [!NOTE]\n * > Prefer using `HttpLink` over `BaseHttpLink`. Use `BaseHttpLink` when you\n * > need to disable client awareness features and would like to tree-shake\n * > the implementation of `ClientAwarenessLink` out of your app bundle.\n *\n * @example\n *\n * ```ts\n * import { BaseHttpLink } from \"@apollo/client/link/http\";\n *\n * const link = new BaseHttpLink({\n *   uri: \"http://localhost:4000/graphql\",\n *   headers: {\n *     authorization: `Bearer ${token}`,\n *   },\n * });\n * ```\n */ class BaseHttpLink extends _apollo_client_link__WEBPACK_IMPORTED_MODULE_1__.ApolloLink {\n    constructor(options = {}){\n        let { uri = \"/graphql\", // use default global fetch if nothing passed in\n        fetch: preferredFetch, print = _selectHttpOptionsAndBody_js__WEBPACK_IMPORTED_MODULE_2__.defaultPrinter, includeExtensions, preserveHeaderCase, useGETForQueries, includeUnusedVariables = false, ...requestOptions } = options;\n        if (_apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_3__.__DEV__) {\n            // Make sure at least one of preferredFetch, window.fetch, or backupFetch is\n            // defined, so requests won't fail at runtime.\n            (0,_checkFetcher_js__WEBPACK_IMPORTED_MODULE_4__.checkFetcher)(preferredFetch || backupFetch);\n        }\n        const linkConfig = {\n            http: (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_5__.compact)({\n                includeExtensions,\n                preserveHeaderCase\n            }),\n            options: requestOptions.fetchOptions,\n            credentials: requestOptions.credentials,\n            headers: requestOptions.headers\n        };\n        super((operation)=>{\n            let chosenURI = (0,_selectURI_js__WEBPACK_IMPORTED_MODULE_6__.selectURI)(operation, uri);\n            const context = operation.getContext();\n            const http = {\n                ...context.http\n            };\n            if ((0,_apollo_client_utilities__WEBPACK_IMPORTED_MODULE_7__.isSubscriptionOperation)(operation.query)) {\n                http.accept = [\n                    \"multipart/mixed;boundary=graphql;subscriptionSpec=1.0\",\n                    ...http.accept || []\n                ];\n            }\n            const contextConfig = {\n                http,\n                options: context.fetchOptions,\n                credentials: context.credentials,\n                headers: context.headers\n            };\n            //uses fallback, link, and then context to build options\n            const { options, body } = (0,_selectHttpOptionsAndBody_js__WEBPACK_IMPORTED_MODULE_2__.selectHttpOptionsAndBodyInternal)(operation, print, _selectHttpOptionsAndBody_js__WEBPACK_IMPORTED_MODULE_2__.fallbackHttpConfig, linkConfig, contextConfig);\n            if (body.variables && !includeUnusedVariables) {\n                body.variables = (0,_apollo_client_link_utils__WEBPACK_IMPORTED_MODULE_8__.filterOperationVariables)(body.variables, operation.query);\n            }\n            let controller = new AbortController();\n            let cleanupController = ()=>{\n                controller = undefined;\n            };\n            if (options.signal) {\n                const externalSignal = options.signal;\n                // in an ideal world we could use `AbortSignal.any` here, but\n                // React Native uses https://github.com/mysticatea/abort-controller as\n                // a polyfill for `AbortController`, and it does not support `AbortSignal.any`.\n                const listener = ()=>{\n                    controller === null || controller === void 0 ? void 0 : controller.abort(externalSignal.reason);\n                };\n                externalSignal.addEventListener(\"abort\", listener, {\n                    once: true\n                });\n                cleanupController = ()=>{\n                    controller === null || controller === void 0 ? void 0 : controller.signal.removeEventListener(\"abort\", cleanupController);\n                    controller = undefined;\n                    // on cleanup, we need to stop listening to `options.signal` to avoid memory leaks\n                    externalSignal.removeEventListener(\"abort\", listener);\n                    cleanupController = noop;\n                };\n                // react native also does not support the addEventListener `signal` option\n                // so we have to simulate that ourself\n                controller.signal.addEventListener(\"abort\", cleanupController, {\n                    once: true\n                });\n            }\n            options.signal = controller.signal;\n            if (useGETForQueries && !(0,_apollo_client_utilities__WEBPACK_IMPORTED_MODULE_7__.isMutationOperation)(operation.query)) {\n                options.method = \"GET\";\n            }\n            return new _barrel_optimize_names_Observable_rxjs__WEBPACK_IMPORTED_MODULE_9__.Observable((observer)=>{\n                if (options.method === \"GET\") {\n                    const { newURI, parseError } = (0,_rewriteURIForGET_js__WEBPACK_IMPORTED_MODULE_10__.rewriteURIForGET)(chosenURI, body);\n                    if (parseError) {\n                        throw parseError;\n                    }\n                    chosenURI = newURI;\n                } else {\n                    options.body = JSON.stringify(body);\n                }\n                // Prefer linkOptions.fetch (preferredFetch) if provided, and otherwise\n                // fall back to the *current* global window.fetch function (see issue\n                // #7832), or (if all else fails) the backupFetch function we saved when\n                // this module was first evaluated. This last option protects against the\n                // removal of window.fetch, which is unlikely but not impossible.\n                const currentFetch = preferredFetch || (0,_apollo_client_utilities_internal_globals__WEBPACK_IMPORTED_MODULE_0__.maybe)(()=>fetch) || backupFetch;\n                const observerNext = observer.next.bind(observer);\n                currentFetch(chosenURI, options).then((response)=>{\n                    var _response_headers;\n                    operation.setContext({\n                        response\n                    });\n                    const ctype = (_response_headers = response.headers) === null || _response_headers === void 0 ? void 0 : _response_headers.get(\"content-type\");\n                    if (ctype !== null && /^multipart\\/mixed/i.test(ctype)) {\n                        return (0,_parseAndCheckHttpResponse_js__WEBPACK_IMPORTED_MODULE_11__.readMultipartBody)(response, observerNext);\n                    } else {\n                        return (0,_parseAndCheckHttpResponse_js__WEBPACK_IMPORTED_MODULE_11__.parseAndCheckHttpResponse)(operation)(response).then(observerNext);\n                    }\n                }).then(()=>{\n                    cleanupController();\n                    observer.complete();\n                }).catch((err)=>{\n                    cleanupController();\n                    observer.error(err);\n                });\n                return ()=>{\n                    // XXX support canceling this request\n                    // https://developers.google.com/web/updates/2017/09/abortable-fetch\n                    if (controller) controller.abort();\n                };\n            });\n        });\n    }\n} //# sourceMappingURL=BaseHttpLink.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/link/http/BaseHttpLink.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/link/http/HttpLink.js":
/*!***********************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/link/http/HttpLink.js ***!
  \***********************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HttpLink: () => (/* binding */ HttpLink),\n/* harmony export */   createHttpLink: () => (/* binding */ createHttpLink)\n/* harmony export */ });\n/* harmony import */ var _apollo_client_link__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @apollo/client/link */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/link/core/ApolloLink.js\");\n/* harmony import */ var _apollo_client_link_client_awareness__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @apollo/client/link/client-awareness */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/link/client-awareness/ClientAwarenessLink.js\");\n/* harmony import */ var _BaseHttpLink_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./BaseHttpLink.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/link/http/BaseHttpLink.js\");\n\n\n\n/**\n * `HttpLink` is a terminating link that sends a GraphQL operation to a remote\n * endpoint over HTTP. It combines the functionality of `BaseHttpLink` and\n * `ClientAwarenessLink` into a single link.\n *\n * @remarks\n *\n * `HttpLink` supports both POST and GET requests, and you can configure HTTP\n * options on a per-operation basis. You can use these options for\n * authentication, persisted queries, dynamic URIs, and other granular updates.\n *\n * @example\n *\n * ```ts\n * import { HttpLink } from \"@apollo/client\";\n *\n * const link = new HttpLink({\n *   uri: \"http://localhost:4000/graphql\",\n *   // Additional options\n * });\n * ```\n */ class HttpLink extends _apollo_client_link__WEBPACK_IMPORTED_MODULE_0__.ApolloLink {\n    constructor(options = {}){\n        const { left, right, request } = _apollo_client_link__WEBPACK_IMPORTED_MODULE_0__.ApolloLink.from([\n            new _apollo_client_link_client_awareness__WEBPACK_IMPORTED_MODULE_1__.ClientAwarenessLink(options),\n            new _BaseHttpLink_js__WEBPACK_IMPORTED_MODULE_2__.BaseHttpLink(options)\n        ]);\n        super(request);\n        Object.assign(this, {\n            left,\n            right\n        });\n    }\n}\n/**\n * @deprecated\n * Use `HttpLink` from `@apollo/client/link/http` instead.\n */ const createHttpLink = function() {\n    let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    return new HttpLink(options);\n}; //# sourceMappingURL=HttpLink.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9saW5rL2h0dHAvSHR0cExpbmsuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBaUQ7QUFDMEI7QUFFMUI7QUE0QmpEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FxQkcsQ0FDRyxNQUFPLFFBQVMsU0FBUSwyREFBVTtJQUN0QyxZQUFZLFVBQTRCLEVBQUU7UUFDeEMsTUFBTSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLEdBQUcsMkRBQVUsQ0FBQyxJQUFJLENBQUM7WUFDL0MsSUFBSSxxRkFBbUIsQ0FBQyxPQUFPLENBQUM7WUFDaEMsSUFBSSwwREFBWSxDQUFDLE9BQU8sQ0FBQztTQUMxQixDQUFDLENBQUM7UUFDSCxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDZixNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRTtZQUFFLElBQUk7WUFBRSxLQUFLO1FBQUEsQ0FBRSxDQUFDLENBQUM7SUFDdkMsQ0FBQztDQUNGO0FBRUQ7OztHQUdHLENBQ0ksTUFBTSxjQUFjLEdBQUc7UUFBQywyRUFBNEIsRUFBRTtXQUMzRCxJQUFJLFFBQVEsQ0FBQyxPQUFPLENBQUM7RUFBQyIsInNvdXJjZXMiOlsiL2hvbWUvdS9Qcm9qZWN0cy9zcmMvbGluay9odHRwL0h0dHBMaW5rLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwb2xsb0xpbmsgfSBmcm9tIFwiQGFwb2xsby9jbGllbnQvbGlua1wiO1xuaW1wb3J0IHsgQ2xpZW50QXdhcmVuZXNzTGluayB9IGZyb20gXCJAYXBvbGxvL2NsaWVudC9saW5rL2NsaWVudC1hd2FyZW5lc3NcIjtcblxuaW1wb3J0IHsgQmFzZUh0dHBMaW5rIH0gZnJvbSBcIi4vQmFzZUh0dHBMaW5rLmpzXCI7XG5cbmV4cG9ydCBkZWNsYXJlIG5hbWVzcGFjZSBIdHRwTGluayB7XG4gIC8qKlxuICAgKiBPcHRpb25zIHBhc3NlZCB0byBgSHR0cExpbmtgIHRocm91Z2ggW3JlcXVlc3QgY29udGV4dF0oaHR0cHM6Ly9hcG9sbG9ncmFwaHFsLmNvbS9kb2NzL3JlYWN0L2FwaS9saW5rL2ludHJvZHVjdGlvbiNtYW5hZ2luZy1jb250ZXh0KS4gUHJldmlvdXNcbiAgICogbm9uLXRlcm1pbmF0aW5nIGxpbmtzIGluIHRoZSBsaW5rIGNoYWluIGFsc28gY2FuIHNldCB0aGVzZSB2YWx1ZXMgdG9cbiAgICogY3VzdG9taXplIHRoZSBiZWhhdmlvciBvZiBgSHR0cExpbmtgIGZvciBlYWNoIG9wZXJhdGlvbi5cbiAgICpcbiAgICogPiBbIU5PVEVdXG4gICAqID4gU29tZSBvZiB0aGVzZSB2YWx1ZXMgY2FuIGFsc28gYmUgcHJvdmlkZWQgdG8gdGhlIGBIdHRwTGlua2AgY29uc3RydWN0b3IuXG4gICAqID4gSWYgYSB2YWx1ZSBpcyBwcm92aWRlZCB0byBib3RoLCB0aGUgdmFsdWUgaW4gYGNvbnRleHRgIHRha2VzIHByZWNlZGVuY2UuXG4gICAqL1xuICBpbnRlcmZhY2UgQ29udGV4dE9wdGlvbnNcbiAgICBleHRlbmRzIEJhc2VIdHRwTGluay5Db250ZXh0T3B0aW9ucyxcbiAgICAgIENsaWVudEF3YXJlbmVzc0xpbmsuQ29udGV4dE9wdGlvbnMge31cblxuICAvKipcbiAgICogT3B0aW9ucyBwcm92aWRlZCB0byB0aGUgYEh0dHBMaW5rYCBjb25zdHJ1Y3Rvci5cbiAgICpcbiAgICogPiBbIU5PVEVdXG4gICAqID4gU29tZSBvZiB0aGVzZSBvcHRpb25zIGFyZSBhbHNvIGF2YWlsYWJsZSB0byBvdmVycmlkZSBpbiBbcmVxdWVzdCBjb250ZXh0XShodHRwczovL2Fwb2xsb2dyYXBocWwuY29tL2RvY3MvcmVhY3QvYXBpL2xpbmsvaW50cm9kdWN0aW9uI21hbmFnaW5nLWNvbnRleHQpLlxuICAgKiA+IENvbnRleHQgb3B0aW9ucyBvdmVycmlkZSB0aGUgb3B0aW9ucyBwYXNzZWQgdG8gdGhlIGNvbnN0cnVjdG9yLiBUcmVhdFxuICAgKiA+IHRoZXNlIG9wdGlvbnMgYXMgZGVmYXVsdCB2YWx1ZXMgdGhhdCBhcmUgdXNlZCB3aGVuIHRoZSByZXF1ZXN0IGNvbnRleHRcbiAgICogPiBkb2VzIG5vdCBvdmVycmlkZSB0aGUgdmFsdWUuXG4gICAqL1xuICBpbnRlcmZhY2UgT3B0aW9ucyBleHRlbmRzIEJhc2VIdHRwTGluay5PcHRpb25zLCBDbGllbnRBd2FyZW5lc3NMaW5rLk9wdGlvbnMge31cbn1cblxuLyoqXG4gKiBgSHR0cExpbmtgIGlzIGEgdGVybWluYXRpbmcgbGluayB0aGF0IHNlbmRzIGEgR3JhcGhRTCBvcGVyYXRpb24gdG8gYSByZW1vdGVcbiAqIGVuZHBvaW50IG92ZXIgSFRUUC4gSXQgY29tYmluZXMgdGhlIGZ1bmN0aW9uYWxpdHkgb2YgYEJhc2VIdHRwTGlua2AgYW5kXG4gKiBgQ2xpZW50QXdhcmVuZXNzTGlua2AgaW50byBhIHNpbmdsZSBsaW5rLlxuICpcbiAqIEByZW1hcmtzXG4gKlxuICogYEh0dHBMaW5rYCBzdXBwb3J0cyBib3RoIFBPU1QgYW5kIEdFVCByZXF1ZXN0cywgYW5kIHlvdSBjYW4gY29uZmlndXJlIEhUVFBcbiAqIG9wdGlvbnMgb24gYSBwZXItb3BlcmF0aW9uIGJhc2lzLiBZb3UgY2FuIHVzZSB0aGVzZSBvcHRpb25zIGZvclxuICogYXV0aGVudGljYXRpb24sIHBlcnNpc3RlZCBxdWVyaWVzLCBkeW5hbWljIFVSSXMsIGFuZCBvdGhlciBncmFudWxhciB1cGRhdGVzLlxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogYGBgdHNcbiAqIGltcG9ydCB7IEh0dHBMaW5rIH0gZnJvbSBcIkBhcG9sbG8vY2xpZW50XCI7XG4gKlxuICogY29uc3QgbGluayA9IG5ldyBIdHRwTGluayh7XG4gKiAgIHVyaTogXCJodHRwOi8vbG9jYWxob3N0OjQwMDAvZ3JhcGhxbFwiLFxuICogICAvLyBBZGRpdGlvbmFsIG9wdGlvbnNcbiAqIH0pO1xuICogYGBgXG4gKi9cbmV4cG9ydCBjbGFzcyBIdHRwTGluayBleHRlbmRzIEFwb2xsb0xpbmsge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zOiBIdHRwTGluay5PcHRpb25zID0ge30pIHtcbiAgICBjb25zdCB7IGxlZnQsIHJpZ2h0LCByZXF1ZXN0IH0gPSBBcG9sbG9MaW5rLmZyb20oW1xuICAgICAgbmV3IENsaWVudEF3YXJlbmVzc0xpbmsob3B0aW9ucyksXG4gICAgICBuZXcgQmFzZUh0dHBMaW5rKG9wdGlvbnMpLFxuICAgIF0pO1xuICAgIHN1cGVyKHJlcXVlc3QpO1xuICAgIE9iamVjdC5hc3NpZ24odGhpcywgeyBsZWZ0LCByaWdodCB9KTtcbiAgfVxufVxuXG4vKipcbiAqIEBkZXByZWNhdGVkXG4gKiBVc2UgYEh0dHBMaW5rYCBmcm9tIGBAYXBvbGxvL2NsaWVudC9saW5rL2h0dHBgIGluc3RlYWQuXG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGVIdHRwTGluayA9IChvcHRpb25zOiBIdHRwTGluay5PcHRpb25zID0ge30pID0+XG4gIG5ldyBIdHRwTGluayhvcHRpb25zKTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/link/http/HttpLink.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/link/http/checkFetcher.js":
/*!***************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/link/http/checkFetcher.js ***!
  \***************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkFetcher: () => (/* binding */ checkFetcher)\n/* harmony export */ });\n/* harmony import */ var _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @apollo/client/utilities/invariant */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/invariant/index.development.js\");\n\nconst checkFetcher = (fetcher)=>{\n    (0,_apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(fetcher || typeof fetch !== \"undefined\", 59);\n}; //# sourceMappingURL=checkFetcher.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9saW5rL2h0dHAvY2hlY2tGZXRjaGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQThEO0FBRXZELENBQVAsS0FBYSxDQUFiLGNBQTRCLENBQUMsQ0FBN0IsTUFBOEQsRUFBRSxDQUFoRTtJQUNFLDZFQUFGLENBQ0ksQ0FESixVQUNlLENBRGYsTUFDc0IsQ0FEdEIsU0FDZ0MsQ0FEaEMsZUFjRztBQUNILENBQUMiLCJzb3VyY2VzIjpbIi9ob21lL3UvUHJvamVjdHMvc3JjL2xpbmsvaHR0cC9jaGVja0ZldGNoZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW52YXJpYW50IH0gZnJvbSBcIkBhcG9sbG8vY2xpZW50L3V0aWxpdGllcy9pbnZhcmlhbnRcIjtcblxuZXhwb3J0IGNvbnN0IGNoZWNrRmV0Y2hlciA9IChmZXRjaGVyOiB0eXBlb2YgZmV0Y2ggfCB1bmRlZmluZWQpID0+IHtcbiAgaW52YXJpYW50KFxuICAgIGZldGNoZXIgfHwgdHlwZW9mIGZldGNoICE9PSBcInVuZGVmaW5lZFwiLFxuICAgIGBcblwiZmV0Y2hcIiBoYXMgbm90IGJlZW4gZm91bmQgZ2xvYmFsbHkgYW5kIG5vIGZldGNoZXIgaGFzIGJlZW4gXFxcbmNvbmZpZ3VyZWQuIFRvIGZpeCB0aGlzLCBpbnN0YWxsIGEgZmV0Y2ggcGFja2FnZSAobGlrZSBcXFxuaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvY3Jvc3MtZmV0Y2gpLCBpbnN0YW50aWF0ZSB0aGUgXFxcbmZldGNoZXIsIGFuZCBwYXNzIGl0IGludG8geW91ciBIdHRwTGluayBjb25zdHJ1Y3Rvci4gRm9yIGV4YW1wbGU6XG5cbmltcG9ydCBmZXRjaCBmcm9tICdjcm9zcy1mZXRjaCc7XG5pbXBvcnQgeyBBcG9sbG9DbGllbnQsIEh0dHBMaW5rIH0gZnJvbSAnQGFwb2xsby9jbGllbnQnO1xuY29uc3QgY2xpZW50ID0gbmV3IEFwb2xsb0NsaWVudCh7XG4gIGxpbms6IG5ldyBIdHRwTGluayh7IHVyaTogJy9ncmFwaHFsJywgZmV0Y2ggfSlcbn0pO1xuICAgIGBcbiAgKTtcbn07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/link/http/checkFetcher.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/link/http/parseAndCheckHttpResponse.js":
/*!****************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/link/http/parseAndCheckHttpResponse.js ***!
  \****************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseAndCheckHttpResponse: () => (/* binding */ parseAndCheckHttpResponse),\n/* harmony export */   readMultipartBody: () => (/* binding */ readMultipartBody)\n/* harmony export */ });\n/* harmony import */ var _apollo_client_errors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @apollo/client/errors */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/errors/index.js\");\n/* harmony import */ var _apollo_client_errors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @apollo/client/errors */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/errors/CombinedProtocolErrors.js\");\n/* harmony import */ var _apollo_client_errors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @apollo/client/errors */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/errors/ServerError.js\");\n/* harmony import */ var _apollo_client_errors__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @apollo/client/errors */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/errors/ServerParseError.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/isNonNullObject.js\");\n/* harmony import */ var _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @apollo/client/utilities/invariant */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/invariant/index.development.js\");\n\n\n\nconst { hasOwnProperty } = Object.prototype;\n/**\n * This function detects an Apollo payload result before it is transformed\n * into a FetchResult via HttpLink; it cannot detect an ApolloPayloadResult\n * once it leaves the link chain.\n */ function isApolloPayloadResult(value) {\n    return (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_0__.isNonNullObject)(value) && \"payload\" in value;\n}\nasync function* consumeMultipartBody(response) {\n    var _response_headers;\n    const decoder = new TextDecoder(\"utf-8\");\n    const contentType = (_response_headers = response.headers) === null || _response_headers === void 0 ? void 0 : _response_headers.get(\"content-type\");\n    // parse boundary value and ignore any subsequent name/value pairs after ;\n    // https://www.rfc-editor.org/rfc/rfc9110.html#name-parameters\n    // e.g. multipart/mixed;boundary=\"graphql\";deferSpec=20220824\n    // if no boundary is specified, default to -\n    const match = contentType === null || contentType === void 0 ? void 0 : contentType.match(/*\n      ;\\s*boundary=                # Match the boundary parameter\n      (?:                          # either\n        '([^']*)'                  # a string starting with ' doesn't contain ', ends with '\n        |                          # or\n        \"([^\"]*)\"                  # a string starting with \" doesn't contain \", ends with \"\n        |                          # or\n        ([^\"'].*?)                 # a string that doesn't start with ' or \", parsed non-greedily\n        )                          # end of the group\n      \\s*                          # optional whitespace\n      (?:;|$)                        # match a semicolon or end of string\n    */ /;\\s*boundary=(?:'([^']+)'|\"([^\"]+)\"|([^\"'].+?))\\s*(?:;|$)/i);\n    const boundary = \"\\r\\n--\" + ((match === null || match === void 0 ? void 0 : match.findLast((val)=>!!val)) || \"-\");\n    let buffer = \"\";\n    (0,_apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(response.body && typeof response.body.getReader === \"function\", 60);\n    const stream = response.body;\n    const reader = stream.getReader();\n    let done = false;\n    let encounteredBoundary = false;\n    let value;\n    // check to see if we received the final boundary, which is a normal boundary followed by \"--\"\n    // as described in https://www.rfc-editor.org/rfc/rfc2046#section-5.1.1\n    const passedFinalBoundary = ()=>encounteredBoundary && buffer[0] == \"-\" && buffer[1] == \"-\";\n    try {\n        while(!done){\n            ({ value, done } = await reader.read());\n            const chunk = typeof value === \"string\" ? value : decoder.decode(value);\n            const searchFrom = buffer.length - boundary.length + 1;\n            buffer += chunk;\n            let bi = buffer.indexOf(boundary, searchFrom);\n            while(bi > -1 && !passedFinalBoundary()){\n                encounteredBoundary = true;\n                let message;\n                [message, buffer] = [\n                    buffer.slice(0, bi),\n                    buffer.slice(bi + boundary.length)\n                ];\n                const i = message.indexOf(\"\\r\\n\\r\\n\");\n                const headers = parseHeaders(message.slice(0, i));\n                const contentType = headers[\"content-type\"];\n                if (contentType && contentType.toLowerCase().indexOf(\"application/json\") === -1) {\n                    throw new Error(\"Unsupported patch content type: application/json is required.\");\n                }\n                // nb: Technically you'd want to slice off the beginning \"\\r\\n\" but since\n                // this is going to be `JSON.parse`d there is no need.\n                const body = message.slice(i);\n                if (body) {\n                    yield body;\n                }\n                bi = buffer.indexOf(boundary);\n            }\n            if (passedFinalBoundary()) {\n                return;\n            }\n        }\n        throw new Error(\"premature end of multipart body\");\n    } finally{\n        reader.cancel();\n    }\n}\nasync function readMultipartBody(response, nextValue) {\n    for await (const body of consumeMultipartBody(response)){\n        const result = parseJsonEncoding(response, body);\n        if (Object.keys(result).length == 0) continue;\n        if (isApolloPayloadResult(result)) {\n            if (Object.keys(result).length === 1 && result.payload === null) {\n                return;\n            }\n            let next = {\n                ...result.payload\n            };\n            if (\"errors\" in result) {\n                var _result_errors;\n                next.extensions = {\n                    ...next.extensions,\n                    [_apollo_client_errors__WEBPACK_IMPORTED_MODULE_2__.PROTOCOL_ERRORS_SYMBOL]: new _apollo_client_errors__WEBPACK_IMPORTED_MODULE_3__.CombinedProtocolErrors((_result_errors = result.errors) !== null && _result_errors !== void 0 ? _result_errors : [])\n                };\n            }\n            nextValue(next);\n        } else {\n            nextValue(result);\n        }\n    }\n}\nfunction parseHeaders(headerText) {\n    const headersInit = {};\n    headerText.split(\"\\n\").forEach((line)=>{\n        const i = line.indexOf(\":\");\n        if (i > -1) {\n            // normalize headers to lowercase\n            const name = line.slice(0, i).trim().toLowerCase();\n            const value = line.slice(i + 1).trim();\n            headersInit[name] = value;\n        }\n    });\n    return headersInit;\n}\nfunction parseJsonEncoding(response, bodyText) {\n    if (response.status >= 300) {\n        throw new _apollo_client_errors__WEBPACK_IMPORTED_MODULE_4__.ServerError(\"Response not successful: Received status code \".concat(response.status), {\n            response,\n            bodyText\n        });\n    }\n    try {\n        return JSON.parse(bodyText);\n    } catch (err) {\n        throw new _apollo_client_errors__WEBPACK_IMPORTED_MODULE_5__.ServerParseError(err, {\n            response,\n            bodyText\n        });\n    }\n}\nfunction parseGraphQLResponseJsonEncoding(response, bodyText) {\n    try {\n        return JSON.parse(bodyText);\n    } catch (err) {\n        throw new _apollo_client_errors__WEBPACK_IMPORTED_MODULE_5__.ServerParseError(err, {\n            response,\n            bodyText\n        });\n    }\n}\nfunction parseResponse(response, bodyText) {\n    const contentType = response.headers.get(\"content-type\");\n    if (contentType === null || contentType === void 0 ? void 0 : contentType.includes(\"application/graphql-response+json\")) {\n        return parseGraphQLResponseJsonEncoding(response, bodyText);\n    }\n    return parseJsonEncoding(response, bodyText);\n}\nfunction parseAndCheckHttpResponse(operations) {\n    return (response)=>response.text().then((bodyText)=>{\n            const result = parseResponse(response, bodyText);\n            if (!Array.isArray(result) && !hasOwnProperty.call(result, \"data\") && !hasOwnProperty.call(result, \"errors\")) {\n                throw new _apollo_client_errors__WEBPACK_IMPORTED_MODULE_4__.ServerError(\"Server response was malformed for query '\".concat(Array.isArray(operations) ? operations.map((op)=>op.operationName) : operations.operationName, \"'.\"), {\n                    response,\n                    bodyText\n                });\n            }\n            return result;\n        });\n} //# sourceMappingURL=parseAndCheckHttpResponse.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/link/http/parseAndCheckHttpResponse.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/link/http/rewriteURIForGET.js":
/*!*******************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/link/http/rewriteURIForGET.js ***!
  \*******************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   rewriteURIForGET: () => (/* binding */ rewriteURIForGET)\n/* harmony export */ });\n// For GET operations, returns the given URI rewritten with parameters, or a\n// parse error.\nfunction rewriteURIForGET(chosenURI, body) {\n    // Implement the standard HTTP GET serialization, plus 'extensions'. Note\n    // the extra level of JSON serialization!\n    const queryParams = [];\n    const addQueryParam = (key, value)=>{\n        queryParams.push(\"\".concat(key, \"=\").concat(encodeURIComponent(value)));\n    };\n    if (\"query\" in body) {\n        addQueryParam(\"query\", body.query);\n    }\n    if (body.operationName) {\n        addQueryParam(\"operationName\", body.operationName);\n    }\n    if (body.variables) {\n        let serializedVariables;\n        try {\n            serializedVariables = JSON.stringify(body.variables);\n        } catch (parseError) {\n            return {\n                parseError\n            };\n        }\n        addQueryParam(\"variables\", serializedVariables);\n    }\n    if (body.extensions) {\n        let serializedExtensions;\n        try {\n            serializedExtensions = JSON.stringify(body.extensions);\n        } catch (parseError) {\n            return {\n                parseError\n            };\n        }\n        addQueryParam(\"extensions\", serializedExtensions);\n    }\n    // Reconstruct the URI with added query params.\n    // XXX This assumes that the URI is well-formed and that it doesn't\n    //     already contain any of these query params. We could instead use the\n    //     URL API and take a polyfill (whatwg-url@6) for older browsers that\n    //     don't support URLSearchParams. Note that some browsers (and\n    //     versions of whatwg-url) support URL but not URLSearchParams!\n    let fragment = \"\", preFragment = chosenURI;\n    const fragmentStart = chosenURI.indexOf(\"#\");\n    if (fragmentStart !== -1) {\n        fragment = chosenURI.substr(fragmentStart);\n        preFragment = chosenURI.substr(0, fragmentStart);\n    }\n    const queryParamsPrefix = preFragment.indexOf(\"?\") === -1 ? \"?\" : \"&\";\n    const newURI = preFragment + queryParamsPrefix + queryParams.join(\"&\") + fragment;\n    return {\n        newURI\n    };\n} //# sourceMappingURL=rewriteURIForGET.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9saW5rL2h0dHAvcmV3cml0ZVVSSUZvckdFVC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBRUEsNEVBQTRFO0FBQzVFLGVBQWU7QUFDVCxTQUFVLGdCQUFnQixDQUFDLFNBQWlCLEVBQUUsSUFBdUI7SUFDekUseUVBQXlFO0lBQ3pFLHlDQUF5QztJQUN6QyxNQUFNLFdBQVcsR0FBYSxFQUFFLENBQUM7SUFDakMsTUFBTSxhQUFhLEdBQUcsQ0FBQyxHQUFXLEVBQUUsS0FBYSxFQUFFLEVBQUU7UUFDbkQsV0FBVyxDQUFDLElBQUksQ0FBQyxVQUFHLEdBQUcsT0FBNkIsQ0FBRSxDQUFDLENBQUMsSUFBN0Isa0JBQWtCLENBQUMsS0FBSyxDQUFDO0lBQ3RELENBQUMsQ0FBQztJQUVGLElBQUksT0FBTyxJQUFJLElBQUksRUFBRSxDQUFDO1FBQ3BCLGFBQWEsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLEtBQU0sQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFDRCxJQUFJLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUN2QixhQUFhLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBQ0QsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDbkIsSUFBSSxtQkFBbUIsQ0FBQztRQUN4QixJQUFJLENBQUM7WUFDSCxtQkFBbUIsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN2RCxDQUFDLENBQUMsT0FBTyxVQUFVLEVBQUUsQ0FBQztZQUNwQixPQUFPO2dCQUFFLFVBQVU7WUFBQSxDQUFFLENBQUM7UUFDeEIsQ0FBQztRQUNELGFBQWEsQ0FBQyxXQUFXLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBQ0QsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDcEIsSUFBSSxvQkFBb0IsQ0FBQztRQUN6QixJQUFJLENBQUM7WUFDSCxvQkFBb0IsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUN6RCxDQUFDLENBQUMsT0FBTyxVQUFVLEVBQUUsQ0FBQztZQUNwQixPQUFPO2dCQUFFLFVBQVU7WUFBQSxDQUFFLENBQUM7UUFDeEIsQ0FBQztRQUNELGFBQWEsQ0FBQyxZQUFZLEVBQUUsb0JBQW9CLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBRUQsK0NBQStDO0lBQy9DLG1FQUFtRTtJQUNuRSwwRUFBMEU7SUFDMUUseUVBQXlFO0lBQ3pFLGtFQUFrRTtJQUNsRSxtRUFBbUU7SUFDbkUsSUFBSSxRQUFRLEdBQUcsRUFBRSxFQUNmLFdBQVcsR0FBRyxTQUFTLENBQUM7SUFDMUIsTUFBTSxhQUFhLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM3QyxJQUFJLGFBQWEsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ3pCLFFBQVEsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQzNDLFdBQVcsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxhQUFhLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBQ0QsTUFBTSxpQkFBaUIsR0FBRyxXQUFXLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztJQUN0RSxNQUFNLE1BQU0sR0FDVixXQUFXLEdBQUcsaUJBQWlCLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxRQUFRLENBQUM7SUFDckUsT0FBTztRQUFFLE1BQU07SUFBQSxDQUFFLENBQUM7QUFDcEIsQ0FBQyIsInNvdXJjZXMiOlsiL2hvbWUvdS9Qcm9qZWN0cy9zcmMvbGluay9odHRwL3Jld3JpdGVVUklGb3JHRVQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBCYXNlSHR0cExpbmsgfSBmcm9tIFwiLi9CYXNlSHR0cExpbmsuanNcIjtcblxuLy8gRm9yIEdFVCBvcGVyYXRpb25zLCByZXR1cm5zIHRoZSBnaXZlbiBVUkkgcmV3cml0dGVuIHdpdGggcGFyYW1ldGVycywgb3IgYVxuLy8gcGFyc2UgZXJyb3IuXG5leHBvcnQgZnVuY3Rpb24gcmV3cml0ZVVSSUZvckdFVChjaG9zZW5VUkk6IHN0cmluZywgYm9keTogQmFzZUh0dHBMaW5rLkJvZHkpIHtcbiAgLy8gSW1wbGVtZW50IHRoZSBzdGFuZGFyZCBIVFRQIEdFVCBzZXJpYWxpemF0aW9uLCBwbHVzICdleHRlbnNpb25zJy4gTm90ZVxuICAvLyB0aGUgZXh0cmEgbGV2ZWwgb2YgSlNPTiBzZXJpYWxpemF0aW9uIVxuICBjb25zdCBxdWVyeVBhcmFtczogc3RyaW5nW10gPSBbXTtcbiAgY29uc3QgYWRkUXVlcnlQYXJhbSA9IChrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZykgPT4ge1xuICAgIHF1ZXJ5UGFyYW1zLnB1c2goYCR7a2V5fT0ke2VuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSl9YCk7XG4gIH07XG5cbiAgaWYgKFwicXVlcnlcIiBpbiBib2R5KSB7XG4gICAgYWRkUXVlcnlQYXJhbShcInF1ZXJ5XCIsIGJvZHkucXVlcnkhKTtcbiAgfVxuICBpZiAoYm9keS5vcGVyYXRpb25OYW1lKSB7XG4gICAgYWRkUXVlcnlQYXJhbShcIm9wZXJhdGlvbk5hbWVcIiwgYm9keS5vcGVyYXRpb25OYW1lKTtcbiAgfVxuICBpZiAoYm9keS52YXJpYWJsZXMpIHtcbiAgICBsZXQgc2VyaWFsaXplZFZhcmlhYmxlcztcbiAgICB0cnkge1xuICAgICAgc2VyaWFsaXplZFZhcmlhYmxlcyA9IEpTT04uc3RyaW5naWZ5KGJvZHkudmFyaWFibGVzKTtcbiAgICB9IGNhdGNoIChwYXJzZUVycm9yKSB7XG4gICAgICByZXR1cm4geyBwYXJzZUVycm9yIH07XG4gICAgfVxuICAgIGFkZFF1ZXJ5UGFyYW0oXCJ2YXJpYWJsZXNcIiwgc2VyaWFsaXplZFZhcmlhYmxlcyk7XG4gIH1cbiAgaWYgKGJvZHkuZXh0ZW5zaW9ucykge1xuICAgIGxldCBzZXJpYWxpemVkRXh0ZW5zaW9ucztcbiAgICB0cnkge1xuICAgICAgc2VyaWFsaXplZEV4dGVuc2lvbnMgPSBKU09OLnN0cmluZ2lmeShib2R5LmV4dGVuc2lvbnMpO1xuICAgIH0gY2F0Y2ggKHBhcnNlRXJyb3IpIHtcbiAgICAgIHJldHVybiB7IHBhcnNlRXJyb3IgfTtcbiAgICB9XG4gICAgYWRkUXVlcnlQYXJhbShcImV4dGVuc2lvbnNcIiwgc2VyaWFsaXplZEV4dGVuc2lvbnMpO1xuICB9XG5cbiAgLy8gUmVjb25zdHJ1Y3QgdGhlIFVSSSB3aXRoIGFkZGVkIHF1ZXJ5IHBhcmFtcy5cbiAgLy8gWFhYIFRoaXMgYXNzdW1lcyB0aGF0IHRoZSBVUkkgaXMgd2VsbC1mb3JtZWQgYW5kIHRoYXQgaXQgZG9lc24ndFxuICAvLyAgICAgYWxyZWFkeSBjb250YWluIGFueSBvZiB0aGVzZSBxdWVyeSBwYXJhbXMuIFdlIGNvdWxkIGluc3RlYWQgdXNlIHRoZVxuICAvLyAgICAgVVJMIEFQSSBhbmQgdGFrZSBhIHBvbHlmaWxsICh3aGF0d2ctdXJsQDYpIGZvciBvbGRlciBicm93c2VycyB0aGF0XG4gIC8vICAgICBkb24ndCBzdXBwb3J0IFVSTFNlYXJjaFBhcmFtcy4gTm90ZSB0aGF0IHNvbWUgYnJvd3NlcnMgKGFuZFxuICAvLyAgICAgdmVyc2lvbnMgb2Ygd2hhdHdnLXVybCkgc3VwcG9ydCBVUkwgYnV0IG5vdCBVUkxTZWFyY2hQYXJhbXMhXG4gIGxldCBmcmFnbWVudCA9IFwiXCIsXG4gICAgcHJlRnJhZ21lbnQgPSBjaG9zZW5VUkk7XG4gIGNvbnN0IGZyYWdtZW50U3RhcnQgPSBjaG9zZW5VUkkuaW5kZXhPZihcIiNcIik7XG4gIGlmIChmcmFnbWVudFN0YXJ0ICE9PSAtMSkge1xuICAgIGZyYWdtZW50ID0gY2hvc2VuVVJJLnN1YnN0cihmcmFnbWVudFN0YXJ0KTtcbiAgICBwcmVGcmFnbWVudCA9IGNob3NlblVSSS5zdWJzdHIoMCwgZnJhZ21lbnRTdGFydCk7XG4gIH1cbiAgY29uc3QgcXVlcnlQYXJhbXNQcmVmaXggPSBwcmVGcmFnbWVudC5pbmRleE9mKFwiP1wiKSA9PT0gLTEgPyBcIj9cIiA6IFwiJlwiO1xuICBjb25zdCBuZXdVUkkgPVxuICAgIHByZUZyYWdtZW50ICsgcXVlcnlQYXJhbXNQcmVmaXggKyBxdWVyeVBhcmFtcy5qb2luKFwiJlwiKSArIGZyYWdtZW50O1xuICByZXR1cm4geyBuZXdVUkkgfTtcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/link/http/rewriteURIForGET.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/link/http/selectHttpOptionsAndBody.js":
/*!***************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/link/http/selectHttpOptionsAndBody.js ***!
  \***************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultPrinter: () => (/* binding */ defaultPrinter),\n/* harmony export */   fallbackHttpConfig: () => (/* binding */ fallbackHttpConfig),\n/* harmony export */   selectHttpOptionsAndBody: () => (/* binding */ selectHttpOptionsAndBody),\n/* harmony export */   selectHttpOptionsAndBodyInternal: () => (/* binding */ selectHttpOptionsAndBodyInternal)\n/* harmony export */ });\n/* harmony import */ var _apollo_client_utilities__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @apollo/client/utilities */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/graphql/print.js\");\n\nconst defaultHttpOptions = {\n    includeQuery: true,\n    includeExtensions: true,\n    preserveHeaderCase: false\n};\nconst defaultHeaders = {\n    // headers are case insensitive (https://stackoverflow.com/a/5259004)\n    accept: \"application/graphql-response+json,application/json;q=0.9\",\n    // The content-type header describes the type of the body of the request, and\n    // so it typically only is sent with requests that actually have bodies. One\n    // could imagine that Apollo Client would remove this header when constructing\n    // a GET request (which has no body), but we historically have not done that.\n    // This means that browsers will preflight all Apollo Client requests (even\n    // GET requests). Apollo Server's CSRF prevention feature (introduced in\n    // AS3.7) takes advantage of this fact and does not block requests with this\n    // header. If you want to drop this header from GET requests, then you should\n    // probably replace it with a `apollo-require-preflight` header, or servers\n    // with CSRF prevention enabled might block your GET request. See\n    // https://www.apollographql.com/docs/apollo-server/security/cors/#preventing-cross-site-request-forgery-csrf\n    // for more details.\n    \"content-type\": \"application/json\"\n};\nconst defaultOptions = {\n    method: \"POST\"\n};\nconst fallbackHttpConfig = {\n    http: defaultHttpOptions,\n    headers: defaultHeaders,\n    options: defaultOptions\n};\nconst defaultPrinter = (ast, printer)=>printer(ast);\nfunction selectHttpOptionsAndBody(operation, fallbackConfig) {\n    for(var _len = arguments.length, configs = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++){\n        configs[_key - 2] = arguments[_key];\n    }\n    configs.unshift(fallbackConfig);\n    return selectHttpOptionsAndBodyInternal(operation, defaultPrinter, ...configs);\n}\nfunction selectHttpOptionsAndBodyInternal(operation, printer) {\n    for(var _len = arguments.length, configs = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++){\n        configs[_key - 2] = arguments[_key];\n    }\n    let options = {};\n    let http = {};\n    configs.forEach((config)=>{\n        var _config_http;\n        options = {\n            ...options,\n            ...config.options,\n            headers: {\n                ...options.headers,\n                ...config.headers\n            }\n        };\n        if (config.credentials) {\n            options.credentials = config.credentials;\n        }\n        options.headers.accept = (((_config_http = config.http) === null || _config_http === void 0 ? void 0 : _config_http.accept) || []).concat(options.headers.accept).join(\",\");\n        http = {\n            ...http,\n            ...config.http\n        };\n    });\n    options.headers = removeDuplicateHeaders(options.headers, http.preserveHeaderCase);\n    //The body depends on the http options\n    const { operationName, extensions, variables, query } = operation;\n    const body = {\n        operationName,\n        variables\n    };\n    if (http.includeExtensions && Object.keys(extensions || {}).length) body.extensions = extensions;\n    // not sending the query (i.e persisted queries)\n    if (http.includeQuery) body.query = printer(query, _apollo_client_utilities__WEBPACK_IMPORTED_MODULE_0__.print);\n    return {\n        options,\n        body\n    };\n}\n// Remove potential duplicate header names, preserving last (by insertion order).\n// This is done to prevent unintentionally duplicating a header instead of\n// overwriting it (See #8447 and #8449).\nfunction removeDuplicateHeaders(headers, preserveHeaderCase) {\n    // If we're not preserving the case, just remove duplicates w/ normalization.\n    if (!preserveHeaderCase) {\n        const normalizedHeaders = {};\n        Object.keys(Object(headers)).forEach((name)=>{\n            normalizedHeaders[name.toLowerCase()] = headers[name];\n        });\n        return normalizedHeaders;\n    }\n    // If we are preserving the case, remove duplicates w/ normalization,\n    // preserving the original name.\n    // This allows for non-http-spec-compliant servers that expect intentionally\n    // capitalized header names (See #6741).\n    const headerData = {};\n    Object.keys(Object(headers)).forEach((name)=>{\n        headerData[name.toLowerCase()] = {\n            originalName: name,\n            value: headers[name]\n        };\n    });\n    const normalizedHeaders = {};\n    Object.keys(headerData).forEach((name)=>{\n        normalizedHeaders[headerData[name].originalName] = headerData[name].value;\n    });\n    return normalizedHeaders;\n} //# sourceMappingURL=selectHttpOptionsAndBody.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/link/http/selectHttpOptionsAndBody.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/link/http/selectURI.js":
/*!************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/link/http/selectURI.js ***!
  \************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   selectURI: () => (/* binding */ selectURI)\n/* harmony export */ });\nconst selectURI = (operation, fallbackURI)=>{\n    const context = operation.getContext();\n    const contextURI = context.uri;\n    if (contextURI) {\n        return contextURI;\n    } else if (typeof fallbackURI === \"function\") {\n        return fallbackURI(operation);\n    } else {\n        return fallbackURI || \"/graphql\";\n    }\n}; //# sourceMappingURL=selectURI.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9saW5rL2h0dHAvc2VsZWN0VVJJLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFFTyxNQUFNLFNBQVMsR0FBRyxDQUN2QixTQUErQixFQUMvQixXQUFvRSxFQUNwRSxFQUFFO0lBQ0YsTUFBTSxPQUFPLEdBQUcsU0FBUyxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUM7SUFFL0IsSUFBSSxVQUFVLEVBQUUsQ0FBQztRQUNmLE9BQU8sVUFBVSxDQUFDO0lBQ3BCLENBQUMsTUFBTSxJQUFJLE9BQU8sV0FBVyxLQUFLLFVBQVUsRUFBRSxDQUFDO1FBQzdDLE9BQU8sV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ2hDLENBQUMsTUFBTSxDQUFDO1FBQ04sT0FBUSxXQUFzQixJQUFJLFVBQVUsQ0FBQztJQUMvQyxDQUFDO0FBQ0gsQ0FBQyxDQUFDIiwic291cmNlcyI6WyIvaG9tZS91L1Byb2plY3RzL3NyYy9saW5rL2h0dHAvc2VsZWN0VVJJLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgQXBvbGxvTGluayB9IGZyb20gXCJAYXBvbGxvL2NsaWVudC9saW5rXCI7XG5cbmV4cG9ydCBjb25zdCBzZWxlY3RVUkkgPSAoXG4gIG9wZXJhdGlvbjogQXBvbGxvTGluay5PcGVyYXRpb24sXG4gIGZhbGxiYWNrVVJJPzogc3RyaW5nIHwgKChvcGVyYXRpb246IEFwb2xsb0xpbmsuT3BlcmF0aW9uKSA9PiBzdHJpbmcpXG4pID0+IHtcbiAgY29uc3QgY29udGV4dCA9IG9wZXJhdGlvbi5nZXRDb250ZXh0KCk7XG4gIGNvbnN0IGNvbnRleHRVUkkgPSBjb250ZXh0LnVyaTtcblxuICBpZiAoY29udGV4dFVSSSkge1xuICAgIHJldHVybiBjb250ZXh0VVJJO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBmYWxsYmFja1VSSSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgcmV0dXJuIGZhbGxiYWNrVVJJKG9wZXJhdGlvbik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIChmYWxsYmFja1VSSSBhcyBzdHJpbmcpIHx8IFwiL2dyYXBocWxcIjtcbiAgfVxufTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/link/http/selectURI.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/link/subscriptions/index.js":
/*!*****************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/link/subscriptions/index.js ***!
  \*****************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GraphQLWsLink: () => (/* binding */ GraphQLWsLink)\n/* harmony export */ });\n/* harmony import */ var _barrel_optimize_names_Observable_rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! __barrel_optimize__?names=Observable!=!rxjs */ \"(app-pages-browser)/../../node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/Observable.js\");\n/* harmony import */ var _apollo_client_errors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @apollo/client/errors */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/errors/CombinedGraphQLErrors.js\");\n/* harmony import */ var _apollo_client_link__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @apollo/client/link */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/link/core/ApolloLink.js\");\n/* harmony import */ var _apollo_client_utilities__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @apollo/client/utilities */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/graphql/print.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/isNonNullObject.js\");\n// This file is adapted from the graphql-ws npm package:\n// https://github.com/enisdenjo/graphql-ws\n//\n// Most of the file comes from that package's README; some other parts (such as\n// isLikeCloseEvent) come from its source.\n//\n// Here's the license of the original code:\n//\n// The MIT License (MIT)\n//\n// Copyright (c) 2020-2021 Denis Badurina\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\n\n\n\n// https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/close_event\nfunction isLikeCloseEvent(val) {\n    return (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_0__.isNonNullObject)(val) && \"code\" in val && \"reason\" in val;\n}\n// https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/error_event\nfunction isLikeErrorEvent(err) {\n    var _err_target;\n    return (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_0__.isNonNullObject)(err) && ((_err_target = err.target) === null || _err_target === void 0 ? void 0 : _err_target.readyState) === WebSocket.CLOSED;\n}\n/**\n * The `GraphQLWsLink` is a terminating link sends GraphQL operations over a\n * WebSocket connection using the [`graphql-ws`](https://www.npmjs.com/package/graphql-ws) library. It's used most\n * commonly with GraphQL [subscriptions](https://apollographql.com/docs/react/data/subscriptions/),\n *\n * > [!NOTE]\n * > This link works with the `graphql-ws` library. If your server uses\n * > the deprecated `subscriptions-transport-ws` library, use the deprecated\n * > [`WebSocketLink`](https://apollographql.com/docs/react/api/link/apollo-link-ws) link instead.\n *\n * @example\n *\n * ```ts\n * import { GraphQLWsLink } from \"@apollo/client/link/subscriptions\";\n * import { createClient } from \"graphql-ws\";\n *\n * const link = new GraphQLWsLink(\n *   createClient({\n *     url: \"ws://localhost:3000/subscriptions\",\n *   })\n * );\n * ```\n */ class GraphQLWsLink extends _apollo_client_link__WEBPACK_IMPORTED_MODULE_1__.ApolloLink {\n    request(operation) {\n        return new _barrel_optimize_names_Observable_rxjs__WEBPACK_IMPORTED_MODULE_2__.Observable((observer)=>{\n            return this.client.subscribe({\n                ...operation,\n                query: (0,_apollo_client_utilities__WEBPACK_IMPORTED_MODULE_3__.print)(operation.query)\n            }, {\n                next: observer.next.bind(observer),\n                complete: observer.complete.bind(observer),\n                error: (err)=>{\n                    if (err instanceof Error) {\n                        return observer.error(err);\n                    }\n                    const likeClose = isLikeCloseEvent(err);\n                    if (likeClose || isLikeErrorEvent(err)) {\n                        return observer.error(// reason will be available on clean closes\n                        new Error(\"Socket closed\".concat(likeClose ? \" with event \".concat(err.code) : \"\").concat(likeClose ? \" \".concat(err.reason) : \"\")));\n                    }\n                    return observer.error(new _apollo_client_errors__WEBPACK_IMPORTED_MODULE_4__.CombinedGraphQLErrors({\n                        errors: Array.isArray(err) ? err : [\n                            err\n                        ]\n                    }));\n                }\n            });\n        });\n    }\n    constructor(client){\n        super();\n        this.client = client;\n    }\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/link/subscriptions/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/link/utils/createOperation.js":
/*!*******************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/link/utils/createOperation.js ***!
  \*******************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createOperation: () => (/* binding */ createOperation)\n/* harmony export */ });\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getOperationName.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getOperationDefinition.js\");\n\nfunction createOperation(request, param) {\n    let { client } = param;\n    const operation = {\n        query: request.query,\n        variables: request.variables || {},\n        extensions: request.extensions || {},\n        operationName: (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_0__.getOperationName)(request.query),\n        operationType: (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_1__.getOperationDefinition)(request.query).operation\n    };\n    let context = {\n        ...request.context\n    };\n    const setContext = (next)=>{\n        if (typeof next === \"function\") {\n            context = {\n                ...context,\n                ...next(getContext())\n            };\n        } else {\n            context = {\n                ...context,\n                ...next\n            };\n        }\n    };\n    const getContext = ()=>Object.freeze({\n            ...context\n        });\n    Object.defineProperty(operation, \"setContext\", {\n        enumerable: false,\n        value: setContext\n    });\n    Object.defineProperty(operation, \"getContext\", {\n        enumerable: false,\n        value: getContext\n    });\n    Object.defineProperty(operation, \"client\", {\n        enumerable: false,\n        value: client\n    });\n    return operation;\n} //# sourceMappingURL=createOperation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9saW5rL3V0aWxzL2NyZWF0ZU9wZXJhdGlvbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFJMkM7QUFFckMsU0FBVSxlQUFlLENBQzdCLE9BQTJCO1VBQ3pCLE1BQU0sRUFBNkIsR0FBckM7SUFFQSxNQUFNLFNBQVMsR0FBRztRQUNoQixLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUs7UUFDcEIsU0FBUyxFQUFFLE9BQU8sQ0FBQyxTQUFTLElBQUksRUFBRTtRQUNsQyxVQUFVLEVBQUUsT0FBTyxDQUFDLFVBQVUsSUFBSSxFQUFFO1FBQ3BDLGFBQWEsRUFBRSxtRkFBZ0IsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDO1FBQzlDLGFBQWEsRUFBRSx5RkFBc0IsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFFLENBQUMsU0FBUztLQUl4QyxDQUFDO0lBRTFCLElBQUksT0FBTyxHQUFHO1FBQUUsR0FBRyxPQUFPLENBQUMsT0FBTztJQUFBLENBQUUsQ0FBQztJQUVyQyxNQUFNLFVBQVUsR0FBdUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtRQUM5RCxJQUFJLE9BQU8sSUFBSSxLQUFLLFVBQVUsRUFBRSxDQUFDO1lBQy9CLE9BQU8sR0FBRztnQkFBRSxHQUFHLE9BQU87Z0JBQUUsR0FBRyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7WUFBQSxDQUFFLENBQUM7UUFDbEQsQ0FBQyxNQUFNLENBQUM7WUFDTixPQUFPLEdBQUc7Z0JBQUUsR0FBRyxPQUFPO2dCQUFFLEdBQUcsSUFBSTtZQUFBLENBQUUsQ0FBQztRQUNwQyxDQUFDO0lBQ0gsQ0FBQyxDQUFDO0lBQ0YsTUFBTSxVQUFVLEdBQXVDLEdBQUcsQ0FDeEQsQ0FEMEQsS0FDcEQsQ0FBQyxNQUFNLENBQUM7WUFBRSxHQUFHLE9BQU87UUFBQSxDQUFFLENBQUMsQ0FBQztJQUVoQyxNQUFNLENBQUMsY0FBYyxDQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUU7UUFDN0MsVUFBVSxFQUFFLEtBQUs7UUFDakIsS0FBSyxFQUFFLFVBQVU7S0FDbEIsQ0FBQyxDQUFDO0lBRUgsTUFBTSxDQUFDLGNBQWMsQ0FBQyxTQUFTLEVBQUUsWUFBWSxFQUFFO1FBQzdDLFVBQVUsRUFBRSxLQUFLO1FBQ2pCLEtBQUssRUFBRSxVQUFVO0tBQ2xCLENBQUMsQ0FBQztJQUVILE1BQU0sQ0FBQyxjQUFjLENBQUMsU0FBUyxFQUFFLFFBQVEsRUFBRTtRQUN6QyxVQUFVLEVBQUUsS0FBSztRQUNqQixLQUFLLEVBQUUsTUFBTTtLQUNkLENBQUMsQ0FBQztJQUVILE9BQU8sU0FBUyxDQUFDO0FBQ25CLENBQUMiLCJzb3VyY2VzIjpbIi9ob21lL3UvUHJvamVjdHMvc3JjL2xpbmsvdXRpbHMvY3JlYXRlT3BlcmF0aW9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgQXBvbGxvTGluayB9IGZyb20gXCJAYXBvbGxvL2NsaWVudC9saW5rXCI7XG5pbXBvcnQge1xuICBnZXRPcGVyYXRpb25EZWZpbml0aW9uLFxuICBnZXRPcGVyYXRpb25OYW1lLFxufSBmcm9tIFwiQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2ludGVybmFsXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVPcGVyYXRpb24oXG4gIHJlcXVlc3Q6IEFwb2xsb0xpbmsuUmVxdWVzdCxcbiAgeyBjbGllbnQgfTogQXBvbGxvTGluay5FeGVjdXRlQ29udGV4dFxuKTogQXBvbGxvTGluay5PcGVyYXRpb24ge1xuICBjb25zdCBvcGVyYXRpb24gPSB7XG4gICAgcXVlcnk6IHJlcXVlc3QucXVlcnksXG4gICAgdmFyaWFibGVzOiByZXF1ZXN0LnZhcmlhYmxlcyB8fCB7fSxcbiAgICBleHRlbnNpb25zOiByZXF1ZXN0LmV4dGVuc2lvbnMgfHwge30sXG4gICAgb3BlcmF0aW9uTmFtZTogZ2V0T3BlcmF0aW9uTmFtZShyZXF1ZXN0LnF1ZXJ5KSxcbiAgICBvcGVyYXRpb25UeXBlOiBnZXRPcGVyYXRpb25EZWZpbml0aW9uKHJlcXVlc3QucXVlcnkpIS5vcGVyYXRpb24sXG4gIH0gc2F0aXNmaWVzIE9taXQ8XG4gICAgQXBvbGxvTGluay5PcGVyYXRpb24sXG4gICAgXCJjbGllbnRcIiB8IFwiZ2V0Q29udGV4dFwiIHwgXCJzZXRDb250ZXh0XCJcbiAgPiBhcyBBcG9sbG9MaW5rLk9wZXJhdGlvbjtcblxuICBsZXQgY29udGV4dCA9IHsgLi4ucmVxdWVzdC5jb250ZXh0IH07XG5cbiAgY29uc3Qgc2V0Q29udGV4dDogQXBvbGxvTGluay5PcGVyYXRpb25bXCJzZXRDb250ZXh0XCJdID0gKG5leHQpID0+IHtcbiAgICBpZiAodHlwZW9mIG5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgY29udGV4dCA9IHsgLi4uY29udGV4dCwgLi4ubmV4dChnZXRDb250ZXh0KCkpIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnRleHQgPSB7IC4uLmNvbnRleHQsIC4uLm5leHQgfTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGdldENvbnRleHQ6IEFwb2xsb0xpbmsuT3BlcmF0aW9uW1wiZ2V0Q29udGV4dFwiXSA9ICgpID0+XG4gICAgT2JqZWN0LmZyZWV6ZSh7IC4uLmNvbnRleHQgfSk7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9wZXJhdGlvbiwgXCJzZXRDb250ZXh0XCIsIHtcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICB2YWx1ZTogc2V0Q29udGV4dCxcbiAgfSk7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9wZXJhdGlvbiwgXCJnZXRDb250ZXh0XCIsIHtcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICB2YWx1ZTogZ2V0Q29udGV4dCxcbiAgfSk7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9wZXJhdGlvbiwgXCJjbGllbnRcIiwge1xuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIHZhbHVlOiBjbGllbnQsXG4gIH0pO1xuXG4gIHJldHVybiBvcGVyYXRpb247XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/link/utils/createOperation.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/link/utils/filterOperationVariables.js":
/*!****************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/link/utils/filterOperationVariables.js ***!
  \****************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   filterOperationVariables: () => (/* binding */ filterOperationVariables)\n/* harmony export */ });\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! graphql */ \"(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/visitor.mjs\");\n\nfunction filterOperationVariables(variables, query) {\n    const result = {\n        ...variables\n    };\n    const unusedNames = new Set(Object.keys(variables));\n    (0,graphql__WEBPACK_IMPORTED_MODULE_0__.visit)(query, {\n        Variable (node, _key, parent) {\n            // A variable type definition at the top level of a query is not\n            // enough to silence server-side errors about the variable being\n            // unused, so variable definitions do not count as usage.\n            // https://spec.graphql.org/draft/#sec-All-Variables-Used\n            if (parent && parent.kind !== \"VariableDefinition\") {\n                unusedNames.delete(node.name.value);\n            }\n        }\n    });\n    unusedNames.forEach((name)=>{\n        delete result[name];\n    });\n    return result;\n} //# sourceMappingURL=filterOperationVariables.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9saW5rL3V0aWxzL2ZpbHRlck9wZXJhdGlvblZhcmlhYmxlcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUNnQztBQUUxQixTQUFVLHdCQUF3QixDQUN0QyxTQUE4QixFQUM5QixLQUFtQjtJQUVuQixNQUFNLE1BQU0sR0FBRztRQUFFLEdBQUcsU0FBUztJQUFBLENBQUUsQ0FBQztJQUNoQyxNQUFNLFdBQVcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7SUFDcEQsOENBQUssQ0FBQyxLQUFLLEVBQUU7UUFDWCxRQUFRLEVBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxNQUFNO1lBQ3pCLGdFQUFnRTtZQUNoRSxnRUFBZ0U7WUFDaEUseURBQXlEO1lBQ3pELHlEQUF5RDtZQUN6RCxJQUNFLE1BQU0sSUFDTCxNQUFpQyxDQUFDLElBQUksS0FBSyxvQkFBb0IsRUFDaEUsQ0FBQztnQkFDRCxXQUFXLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDdEMsQ0FBQztRQUNILENBQUM7S0FDRixDQUFDLENBQUM7SUFDSCxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7UUFDM0IsT0FBTyxNQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdkIsQ0FBQyxDQUFDLENBQUM7SUFDSCxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDIiwic291cmNlcyI6WyIvaG9tZS91L1Byb2plY3RzL3NyYy9saW5rL3V0aWxzL2ZpbHRlck9wZXJhdGlvblZhcmlhYmxlcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IERvY3VtZW50Tm9kZSwgVmFyaWFibGVEZWZpbml0aW9uTm9kZSB9IGZyb20gXCJncmFwaHFsXCI7XG5pbXBvcnQgeyB2aXNpdCB9IGZyb20gXCJncmFwaHFsXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBmaWx0ZXJPcGVyYXRpb25WYXJpYWJsZXMoXG4gIHZhcmlhYmxlczogUmVjb3JkPHN0cmluZywgYW55PixcbiAgcXVlcnk6IERvY3VtZW50Tm9kZVxuKSB7XG4gIGNvbnN0IHJlc3VsdCA9IHsgLi4udmFyaWFibGVzIH07XG4gIGNvbnN0IHVudXNlZE5hbWVzID0gbmV3IFNldChPYmplY3Qua2V5cyh2YXJpYWJsZXMpKTtcbiAgdmlzaXQocXVlcnksIHtcbiAgICBWYXJpYWJsZShub2RlLCBfa2V5LCBwYXJlbnQpIHtcbiAgICAgIC8vIEEgdmFyaWFibGUgdHlwZSBkZWZpbml0aW9uIGF0IHRoZSB0b3AgbGV2ZWwgb2YgYSBxdWVyeSBpcyBub3RcbiAgICAgIC8vIGVub3VnaCB0byBzaWxlbmNlIHNlcnZlci1zaWRlIGVycm9ycyBhYm91dCB0aGUgdmFyaWFibGUgYmVpbmdcbiAgICAgIC8vIHVudXNlZCwgc28gdmFyaWFibGUgZGVmaW5pdGlvbnMgZG8gbm90IGNvdW50IGFzIHVzYWdlLlxuICAgICAgLy8gaHR0cHM6Ly9zcGVjLmdyYXBocWwub3JnL2RyYWZ0LyNzZWMtQWxsLVZhcmlhYmxlcy1Vc2VkXG4gICAgICBpZiAoXG4gICAgICAgIHBhcmVudCAmJlxuICAgICAgICAocGFyZW50IGFzIFZhcmlhYmxlRGVmaW5pdGlvbk5vZGUpLmtpbmQgIT09IFwiVmFyaWFibGVEZWZpbml0aW9uXCJcbiAgICAgICkge1xuICAgICAgICB1bnVzZWROYW1lcy5kZWxldGUobm9kZS5uYW1lLnZhbHVlKTtcbiAgICAgIH1cbiAgICB9LFxuICB9KTtcbiAgdW51c2VkTmFtZXMuZm9yRWFjaCgobmFtZSkgPT4ge1xuICAgIGRlbGV0ZSByZXN1bHQhW25hbWVdO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/link/utils/filterOperationVariables.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/masking/maskDefinition.js":
/*!***************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/masking/maskDefinition.js ***!
  \***************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   maskDefinition: () => (/* binding */ maskDefinition)\n/* harmony export */ });\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! graphql */ \"(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/kinds.mjs\");\n/* harmony import */ var _apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @apollo/client/utilities/environment */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/environment/index.development.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/maybeDeepFreeze.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/resultKeyNameFromField.js\");\n/* harmony import */ var _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @apollo/client/utilities/invariant */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/invariant/index.development.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/masking/utils.js\");\n\n\n\n\n\nfunction maskDefinition(data, selectionSet, context) {\n    return _utils_js__WEBPACK_IMPORTED_MODULE_0__.disableWarningsSlot.withValue(true, ()=>{\n        const masked = maskSelectionSet(data, selectionSet, context, false);\n        if (Object.isFrozen(data)) {\n            (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_1__.maybeDeepFreeze)(masked);\n        }\n        return masked;\n    });\n}\nfunction getMutableTarget(data, mutableTargets) {\n    if (mutableTargets.has(data)) {\n        return mutableTargets.get(data);\n    }\n    const mutableTarget = Array.isArray(data) ? [] : {};\n    mutableTargets.set(data, mutableTarget);\n    return mutableTarget;\n}\nfunction maskSelectionSet(data, selectionSet, context, migration, path) {\n    const { knownChanged } = context;\n    const memo = getMutableTarget(data, context.mutableTargets);\n    if (Array.isArray(data)) {\n        for (const [index, item] of Array.from(data.entries())){\n            if (item === null) {\n                memo[index] = null;\n                continue;\n            }\n            const masked = maskSelectionSet(item, selectionSet, context, migration, _apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_2__.__DEV__ ? \"\".concat(path || \"\", \"[\").concat(index, \"]\") : void 0);\n            if (knownChanged.has(masked)) {\n                knownChanged.add(memo);\n            }\n            memo[index] = masked;\n        }\n        return knownChanged.has(memo) ? memo : data;\n    }\n    for (const selection of selectionSet.selections){\n        let value;\n        // we later want to add acessor warnings to the final result\n        // so we need a new object to add the accessor warning to\n        if (migration) {\n            knownChanged.add(memo);\n        }\n        if (selection.kind === graphql__WEBPACK_IMPORTED_MODULE_3__.Kind.FIELD) {\n            const keyName = (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_4__.resultKeyNameFromField)(selection);\n            const childSelectionSet = selection.selectionSet;\n            value = memo[keyName] || data[keyName];\n            if (value === void 0) {\n                continue;\n            }\n            if (childSelectionSet && value !== null) {\n                const masked = maskSelectionSet(data[keyName], childSelectionSet, context, migration, _apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_2__.__DEV__ ? \"\".concat(path || \"\", \".\").concat(keyName) : void 0);\n                if (knownChanged.has(masked)) {\n                    value = masked;\n                }\n            }\n            if (!_apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_2__.__DEV__) {\n                memo[keyName] = value;\n            }\n            if (_apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_2__.__DEV__) {\n                var _Object_getOwnPropertyDescriptor;\n                if (migration && keyName !== \"__typename\" && // either the field is not present in the memo object\n                // or it has a `get` descriptor, not a `value` descriptor\n                // => it is a warning accessor and we can overwrite it\n                // with another accessor\n                !((_Object_getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor(memo, keyName)) === null || _Object_getOwnPropertyDescriptor === void 0 ? void 0 : _Object_getOwnPropertyDescriptor.value)) {\n                    Object.defineProperty(memo, keyName, getAccessorWarningDescriptor(keyName, value, path || \"\", context.operationName, context.operationType));\n                } else {\n                    delete memo[keyName];\n                    memo[keyName] = value;\n                }\n            }\n        }\n        if (selection.kind === graphql__WEBPACK_IMPORTED_MODULE_3__.Kind.INLINE_FRAGMENT && (!selection.typeCondition || context.cache.fragmentMatches(selection, data.__typename))) {\n            value = maskSelectionSet(data, selection.selectionSet, context, migration, path);\n        }\n        if (selection.kind === graphql__WEBPACK_IMPORTED_MODULE_3__.Kind.FRAGMENT_SPREAD) {\n            const fragmentName = selection.name.value;\n            const fragment = context.fragmentMap[fragmentName] || (context.fragmentMap[fragmentName] = context.cache.lookupFragment(fragmentName));\n            (0,_apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_5__.invariant)(fragment, 39, fragmentName);\n            const mode = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.getFragmentMaskMode)(selection);\n            if (mode !== \"mask\") {\n                value = maskSelectionSet(data, fragment.selectionSet, context, mode === \"migrate\", path);\n            }\n        }\n        if (knownChanged.has(value)) {\n            knownChanged.add(memo);\n        }\n    }\n    if (\"__typename\" in data && !(\"__typename\" in memo)) {\n        memo.__typename = data.__typename;\n    }\n    // This check prevents cases where masked fields may accidentally be\n    // returned as part of this object when the fragment also selects\n    // additional fields from the same child selection.\n    if (Object.keys(memo).length !== Object.keys(data).length) {\n        knownChanged.add(memo);\n    }\n    return knownChanged.has(memo) ? memo : data;\n}\nfunction getAccessorWarningDescriptor(fieldName, value, path, operationName, operationType) {\n    let getValue = ()=>{\n        if (_utils_js__WEBPACK_IMPORTED_MODULE_0__.disableWarningsSlot.getValue()) {\n            return value;\n        }\n        _apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_2__.__DEV__ && _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_5__.invariant.warn(40, operationName ? \"\".concat(operationType, \" '\").concat(operationName, \"'\") : \"anonymous \".concat(operationType), \"\".concat(path, \".\").concat(fieldName).replace(/^\\./, \"\"));\n        getValue = ()=>value;\n        return value;\n    };\n    return {\n        get () {\n            return getValue();\n        },\n        set (newValue) {\n            getValue = ()=>newValue;\n        },\n        enumerable: true,\n        configurable: true\n    };\n} //# sourceMappingURL=maskDefinition.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/masking/maskDefinition.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/masking/maskFragment.js":
/*!*************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/masking/maskFragment.js ***!
  \*************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   maskFragment: () => (/* binding */ maskFragment)\n/* harmony export */ });\n/* harmony import */ var _wry_equality__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wry/equality */ \"(app-pages-browser)/../../node_modules/.pnpm/@wry+equality@0.5.7/node_modules/@wry/equality/lib/index.js\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! graphql */ \"(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/kinds.mjs\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/createFragmentMap.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getFragmentDefinitions.js\");\n/* harmony import */ var _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @apollo/client/utilities/invariant */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/invariant/index.development.js\");\n/* harmony import */ var _maskDefinition_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./maskDefinition.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/masking/maskDefinition.js\");\n\n\n\n\n\n/**\n* @internal\n* \n* @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n*/ function maskFragment(data, document, cache, fragmentName) {\n    const fragments = document.definitions.filter((node)=>node.kind === graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.FRAGMENT_DEFINITION);\n    if (typeof fragmentName === \"undefined\") {\n        (0,_apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(fragments.length === 1, 41, fragments.length);\n        fragmentName = fragments[0].name.value;\n    }\n    const fragment = fragments.find((fragment)=>fragment.name.value === fragmentName);\n    (0,_apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(!!fragment, 42, fragmentName);\n    if (data == null) {\n        // Maintain the original `null` or `undefined` value\n        return data;\n    }\n    if ((0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(data, {})) {\n        // Return early and skip the masking algorithm if we don't have any data\n        // yet. This can happen when cache.diff returns an empty object which is\n        // used from watchFragment.\n        return data;\n    }\n    return (0,_maskDefinition_js__WEBPACK_IMPORTED_MODULE_3__.maskDefinition)(data, fragment.selectionSet, {\n        operationType: \"fragment\",\n        operationName: fragment.name.value,\n        fragmentMap: (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_4__.createFragmentMap)((0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_5__.getFragmentDefinitions)(document)),\n        cache,\n        mutableTargets: new WeakMap(),\n        knownChanged: new WeakSet()\n    });\n} //# sourceMappingURL=maskFragment.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9tYXNraW5nL21hc2tGcmFnbWVudC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQWlDO0FBRUg7QUFXWTtBQUNvQjtBQUVWOzs7OztHQUdwRCxTQUFnQixDQUFoQixXQUE0QixDQUMxQixDQURGLEdBQ2EsRUFDWCxDQUZGLE9BRW1ELEVBQ2pELENBSEYsSUFHb0IsRUFDbEIsQ0FKRixXQUl1QixFQUp2QjtJQU1FLENBQUYsS0FBUSxDQUFSLFdBQW9CLENBQXBCLE9BQTRCLENBQUMsQ0FBN0IsVUFBd0MsQ0FBQyxDQUF6QyxLQUErQyxDQUMzQyxDQUFDLENBREwsR0FDUyxFQUFrQyxDQUQzQyxJQUVVLENBQUMsQ0FGWCxRQUVvQix5Q0FBSSxDQUFDLENBRnpCLGtCQUU0QyxDQUN6QztJQUVELENBQUYsR0FBTSxDQUFOLE1BQWEsQ0FBYixnQkFBOEIsQ0FBOUIsVUFBeUMsRUFBRTtRQUN2Qyw2RUFBSixDQUNNLENBRE4sUUFDZSxDQUFDLENBRGhCLFVBQzJCLE9BRXJCLENBSE4sUUFHZSxDQUFDLENBSGhCLE1BSUs7UUFDRCxDQUFKLGNBQW1CLENBQW5CLFFBQTRCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBaEMsR0FBb0MsQ0FBQyxDQUFyQyxJQUEwQztJQUN4QztJQUVBLENBQUYsS0FBUSxDQUFSLFVBQW1CLENBQW5CLFFBQTRCLENBQUMsQ0FBN0IsR0FBaUMsQ0FDN0IsQ0FBQyxDQURMLE9BQ2EsRUFBRSxDQURmLFFBQzBCLENBQUMsQ0FEM0IsR0FDK0IsQ0FBQyxDQURoQyxTQUMwQyxDQUQxQyxXQUNzRCxDQUNuRDtJQUVELDZFQUFGLENBQ0ksQ0FBQyxDQUFDLENBRE4sYUFHSSxDQUhKLFlBSUc7SUFFRCxDQUFGLEdBQU0sQ0FBTixPQUFjLENBQWQsR0FBa0IsRUFBRTtRQUNoQixDQUFKO1FBQ0ksQ0FBSixNQUFXLENBQVgsR0FBZTtJQUNiO0lBRUEsQ0FBRixHQUFNLHlEQUFLLENBQUMsQ0FBWixHQUFnQixFQUFFLENBQWxCLENBQW9CLENBQUMsRUFBRTtRQUNuQixDQUFKO1FBQ0ksQ0FBSjtRQUNJLENBQUo7UUFDSSxDQUFKLE1BQVcsQ0FBWCxHQUFlO0lBQ2I7SUFFQSxDQUFGLE1BQVMsa0VBQWMsQ0FBQyxDQUF4QixHQUE0QixFQUFFLENBQTlCLE9BQXNDLENBQUMsQ0FBdkMsV0FBbUQsRUFBRTtRQUNqRCxDQUFKLFlBQWlCLEVBQUUsQ0FBbkIsU0FBNkI7UUFDekIsQ0FBSixZQUFpQixFQUFFLENBQW5CLE9BQTJCLENBQUMsQ0FBNUIsR0FBZ0MsQ0FBQyxDQUFqQyxJQUFzQztRQUNsQyxDQUFKLFVBQWUsRUFBRSxvRkFBaUIsQ0FBQyx5RkFBc0IsQ0FBQyxDQUExRCxPQUFrRSxDQUFDLENBQUM7UUFDaEUsQ0FBSixJQUFTO1FBQ0wsQ0FBSixhQUFrQixFQUFFLENBQXBCLEdBQXdCLENBQXhCLE1BQStCLENBQS9CLENBQWlDO1FBQzdCLENBQUosV0FBZ0IsRUFBRSxDQUFsQixHQUFzQixDQUF0QixNQUE2QixDQUE3QixDQUErQjtJQUMvQixDQUFHLENBQUM7QUFDSiIsInNvdXJjZXMiOlsiL2hvbWUvdS9Qcm9qZWN0cy9Db2xkVHJhY2Uvc3JjL21hc2tpbmcvbWFza0ZyYWdtZW50LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBlcXVhbCBmcm9tIFwiQHdyeS9lcXVhbGl0eVwiO1xuaW1wb3J0IHR5cGUgeyBGcmFnbWVudERlZmluaXRpb25Ob2RlIH0gZnJvbSBcImdyYXBocWxcIjtcbmltcG9ydCB7IEtpbmQgfSBmcm9tIFwiZ3JhcGhxbFwiO1xuXG5pbXBvcnQgdHlwZSB7XG4gIEFwb2xsb0NhY2hlLFxuICBEb2N1bWVudE5vZGUsXG4gIFR5cGVkRG9jdW1lbnROb2RlLFxufSBmcm9tIFwiQGFwb2xsby9jbGllbnRcIjtcbmltcG9ydCB7IF9fREVWX18gfSBmcm9tIFwiQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2Vudmlyb25tZW50XCI7XG5pbXBvcnQge1xuICBjcmVhdGVGcmFnbWVudE1hcCxcbiAgZ2V0RnJhZ21lbnREZWZpbml0aW9ucyxcbn0gZnJvbSBcIkBhcG9sbG8vY2xpZW50L3V0aWxpdGllcy9pbnRlcm5hbFwiO1xuaW1wb3J0IHsgaW52YXJpYW50IH0gZnJvbSBcIkBhcG9sbG8vY2xpZW50L3V0aWxpdGllcy9pbnZhcmlhbnRcIjtcblxuaW1wb3J0IHsgbWFza0RlZmluaXRpb24gfSBmcm9tIFwiLi9tYXNrRGVmaW5pdGlvbi5qc1wiO1xuXG4vKiogQGludGVybmFsICovXG5leHBvcnQgZnVuY3Rpb24gbWFza0ZyYWdtZW50PFREYXRhID0gdW5rbm93bj4oXG4gIGRhdGE6IFREYXRhLFxuICBkb2N1bWVudDogVHlwZWREb2N1bWVudE5vZGU8VERhdGE+IHwgRG9jdW1lbnROb2RlLFxuICBjYWNoZTogQXBvbGxvQ2FjaGUsXG4gIGZyYWdtZW50TmFtZT86IHN0cmluZ1xuKTogVERhdGEge1xuICBjb25zdCBmcmFnbWVudHMgPSBkb2N1bWVudC5kZWZpbml0aW9ucy5maWx0ZXIoXG4gICAgKG5vZGUpOiBub2RlIGlzIEZyYWdtZW50RGVmaW5pdGlvbk5vZGUgPT5cbiAgICAgIG5vZGUua2luZCA9PT0gS2luZC5GUkFHTUVOVF9ERUZJTklUSU9OXG4gICk7XG5cbiAgaWYgKHR5cGVvZiBmcmFnbWVudE5hbWUgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBpbnZhcmlhbnQoXG4gICAgICBmcmFnbWVudHMubGVuZ3RoID09PSAxLFxuICAgICAgYEZvdW5kICVzIGZyYWdtZW50cy4gXFxgZnJhZ21lbnROYW1lXFxgIG11c3QgYmUgcHJvdmlkZWQgd2hlbiB0aGVyZSBpcyBub3QgZXhhY3RseSAxIGZyYWdtZW50LmAsXG4gICAgICBmcmFnbWVudHMubGVuZ3RoXG4gICAgKTtcbiAgICBmcmFnbWVudE5hbWUgPSBmcmFnbWVudHNbMF0ubmFtZS52YWx1ZTtcbiAgfVxuXG4gIGNvbnN0IGZyYWdtZW50ID0gZnJhZ21lbnRzLmZpbmQoXG4gICAgKGZyYWdtZW50KSA9PiBmcmFnbWVudC5uYW1lLnZhbHVlID09PSBmcmFnbWVudE5hbWVcbiAgKTtcblxuICBpbnZhcmlhbnQoXG4gICAgISFmcmFnbWVudCxcbiAgICBgQ291bGQgbm90IGZpbmQgZnJhZ21lbnQgd2l0aCBuYW1lIFwiJXNcIi5gLFxuICAgIGZyYWdtZW50TmFtZVxuICApO1xuXG4gIGlmIChkYXRhID09IG51bGwpIHtcbiAgICAvLyBNYWludGFpbiB0aGUgb3JpZ2luYWwgYG51bGxgIG9yIGB1bmRlZmluZWRgIHZhbHVlXG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICBpZiAoZXF1YWwoZGF0YSwge30pKSB7XG4gICAgLy8gUmV0dXJuIGVhcmx5IGFuZCBza2lwIHRoZSBtYXNraW5nIGFsZ29yaXRobSBpZiB3ZSBkb24ndCBoYXZlIGFueSBkYXRhXG4gICAgLy8geWV0LiBUaGlzIGNhbiBoYXBwZW4gd2hlbiBjYWNoZS5kaWZmIHJldHVybnMgYW4gZW1wdHkgb2JqZWN0IHdoaWNoIGlzXG4gICAgLy8gdXNlZCBmcm9tIHdhdGNoRnJhZ21lbnQuXG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICByZXR1cm4gbWFza0RlZmluaXRpb24oZGF0YSwgZnJhZ21lbnQuc2VsZWN0aW9uU2V0LCB7XG4gICAgb3BlcmF0aW9uVHlwZTogXCJmcmFnbWVudFwiLFxuICAgIG9wZXJhdGlvbk5hbWU6IGZyYWdtZW50Lm5hbWUudmFsdWUsXG4gICAgZnJhZ21lbnRNYXA6IGNyZWF0ZUZyYWdtZW50TWFwKGdldEZyYWdtZW50RGVmaW5pdGlvbnMoZG9jdW1lbnQpKSxcbiAgICBjYWNoZSxcbiAgICBtdXRhYmxlVGFyZ2V0czogbmV3IFdlYWtNYXAoKSxcbiAgICBrbm93bkNoYW5nZWQ6IG5ldyBXZWFrU2V0KCksXG4gIH0pO1xufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/masking/maskFragment.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/masking/maskOperation.js":
/*!**************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/masking/maskOperation.js ***!
  \**************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   maskOperation: () => (/* binding */ maskOperation)\n/* harmony export */ });\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getOperationDefinition.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/createFragmentMap.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getFragmentDefinitions.js\");\n/* harmony import */ var _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @apollo/client/utilities/invariant */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/invariant/index.development.js\");\n/* harmony import */ var _maskDefinition_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./maskDefinition.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/masking/maskDefinition.js\");\n\n\n\n/**\n* @internal\n* \n* @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n*/ function maskOperation(data, document, cache) {\n    var _definition_name;\n    const definition = (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_0__.getOperationDefinition)(document);\n    (0,_apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(definition, 43);\n    if (data == null) {\n        // Maintain the original `null` or `undefined` value\n        return data;\n    }\n    return (0,_maskDefinition_js__WEBPACK_IMPORTED_MODULE_2__.maskDefinition)(data, definition.selectionSet, {\n        operationType: definition.operation,\n        operationName: (_definition_name = definition.name) === null || _definition_name === void 0 ? void 0 : _definition_name.value,\n        fragmentMap: (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_3__.createFragmentMap)((0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_4__.getFragmentDefinitions)(document)),\n        cache,\n        mutableTargets: new WeakMap(),\n        knownChanged: new WeakSet()\n    });\n} //# sourceMappingURL=maskOperation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9tYXNraW5nL21hc2tPcGVyYXRpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBVTBDO0FBQ29CO0FBRVY7Ozs7O0dBR3BELFNBQWdCLENBQWhCLFlBQTZCLENBQzNCLENBREYsR0FDYSxFQUNYLENBRkYsT0FFbUQsRUFDakQsQ0FIRixJQUdvQixFQUhwQjs7SUFLRSxDQUFGLEtBQVEsQ0FBUixZQUFxQix5RkFBc0IsQ0FBQyxDQUE1QyxPQUFvRCxDQUFDO0lBRW5ELDZFQUFGLENBQ0ksQ0FESixjQUdHO0lBRUQsQ0FBRixHQUFNLENBQU4sT0FBYyxDQUFkLEdBQWtCLEVBQUU7UUFDaEIsQ0FBSjtRQUNJLENBQUosTUFBVyxDQUFYLEdBQWU7SUFDYjtJQUVBLENBQUYsTUFBUyxrRUFBYyxDQUFDLENBQXhCLEdBQTRCLEVBQUUsQ0FBOUIsU0FBd0MsQ0FBQyxDQUF6QyxXQUFxRCxFQUFFO1FBQ25ELENBQUosWUFBaUIsRUFBRSxDQUFuQixTQUE2QixDQUFDLENBQTlCLFFBQXVDO1FBQ25DLENBQUosWUFBaUIsaUNBQWEsQ0FBOUIsR0FBa0MsQ0FBbEMsb0RBQW1CLENBQW5CLFNBQTZCLE9BQU8sQ0FBcEMsSUFBeUM7UUFDckMsQ0FBSixVQUFlLEVBQUUsb0ZBQWlCLENBQUMseUZBQXNCLENBQUMsQ0FBMUQsT0FBa0UsQ0FBQyxDQUFDO1FBQ2hFLENBQUosSUFBUztRQUNMLENBQUosYUFBa0IsRUFBRSxDQUFwQixHQUF3QixDQUF4QixNQUErQixDQUEvQixDQUFpQztRQUM3QixDQUFKLFdBQWdCLEVBQUUsQ0FBbEIsR0FBc0IsQ0FBdEIsTUFBNkIsQ0FBN0IsQ0FBK0I7SUFDL0IsQ0FBRyxDQUFDO0FBQ0oiLCJzb3VyY2VzIjpbIi9ob21lL3UvUHJvamVjdHMvQ29sZFRyYWNlL3NyYy9tYXNraW5nL21hc2tPcGVyYXRpb24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUge1xuICBBcG9sbG9DYWNoZSxcbiAgRG9jdW1lbnROb2RlLFxuICBUeXBlZERvY3VtZW50Tm9kZSxcbn0gZnJvbSBcIkBhcG9sbG8vY2xpZW50XCI7XG5pbXBvcnQgeyBfX0RFVl9fIH0gZnJvbSBcIkBhcG9sbG8vY2xpZW50L3V0aWxpdGllcy9lbnZpcm9ubWVudFwiO1xuaW1wb3J0IHtcbiAgY3JlYXRlRnJhZ21lbnRNYXAsXG4gIGdldEZyYWdtZW50RGVmaW5pdGlvbnMsXG4gIGdldE9wZXJhdGlvbkRlZmluaXRpb24sXG59IGZyb20gXCJAYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvaW50ZXJuYWxcIjtcbmltcG9ydCB7IGludmFyaWFudCB9IGZyb20gXCJAYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvaW52YXJpYW50XCI7XG5cbmltcG9ydCB7IG1hc2tEZWZpbml0aW9uIH0gZnJvbSBcIi4vbWFza0RlZmluaXRpb24uanNcIjtcblxuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1hc2tPcGVyYXRpb248VERhdGEgPSB1bmtub3duPihcbiAgZGF0YTogVERhdGEsXG4gIGRvY3VtZW50OiBEb2N1bWVudE5vZGUgfCBUeXBlZERvY3VtZW50Tm9kZTxURGF0YT4sXG4gIGNhY2hlOiBBcG9sbG9DYWNoZVxuKTogVERhdGEge1xuICBjb25zdCBkZWZpbml0aW9uID0gZ2V0T3BlcmF0aW9uRGVmaW5pdGlvbihkb2N1bWVudCk7XG5cbiAgaW52YXJpYW50KFxuICAgIGRlZmluaXRpb24sXG4gICAgXCJFeHBlY3RlZCBhIHBhcnNlZCBHcmFwaFFMIGRvY3VtZW50IHdpdGggYSBxdWVyeSwgbXV0YXRpb24sIG9yIHN1YnNjcmlwdGlvbi5cIlxuICApO1xuXG4gIGlmIChkYXRhID09IG51bGwpIHtcbiAgICAvLyBNYWludGFpbiB0aGUgb3JpZ2luYWwgYG51bGxgIG9yIGB1bmRlZmluZWRgIHZhbHVlXG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICByZXR1cm4gbWFza0RlZmluaXRpb24oZGF0YSwgZGVmaW5pdGlvbi5zZWxlY3Rpb25TZXQsIHtcbiAgICBvcGVyYXRpb25UeXBlOiBkZWZpbml0aW9uLm9wZXJhdGlvbixcbiAgICBvcGVyYXRpb25OYW1lOiBkZWZpbml0aW9uLm5hbWU/LnZhbHVlLFxuICAgIGZyYWdtZW50TWFwOiBjcmVhdGVGcmFnbWVudE1hcChnZXRGcmFnbWVudERlZmluaXRpb25zKGRvY3VtZW50KSksXG4gICAgY2FjaGUsXG4gICAgbXV0YWJsZVRhcmdldHM6IG5ldyBXZWFrTWFwKCksXG4gICAga25vd25DaGFuZ2VkOiBuZXcgV2Vha1NldCgpLFxuICB9KTtcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/masking/maskOperation.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/masking/utils.js":
/*!******************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/masking/utils.js ***!
  \******************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   disableWarningsSlot: () => (/* binding */ disableWarningsSlot),\n/* harmony export */   getFragmentMaskMode: () => (/* binding */ getFragmentMaskMode)\n/* harmony export */ });\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! graphql */ \"(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/kinds.mjs\");\n/* harmony import */ var optimism__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! optimism */ \"(app-pages-browser)/../../node_modules/.pnpm/optimism@0.18.1/node_modules/optimism/lib/index.js\");\n/* harmony import */ var _apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @apollo/client/utilities/environment */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/environment/index.development.js\");\n/* harmony import */ var _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @apollo/client/utilities/invariant */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/invariant/index.development.js\");\n\n\n\n\n// Contextual slot that allows us to disable accessor warnings on fields when in\n// migrate mode.\n/**\n* @internal\n* \n* @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n*/ const disableWarningsSlot = new optimism__WEBPACK_IMPORTED_MODULE_0__.Slot();\nfunction getFragmentMaskMode(fragment) {\n    var _fragment_directives, _directive_arguments;\n    const directive = (_fragment_directives = fragment.directives) === null || _fragment_directives === void 0 ? void 0 : _fragment_directives.find((param)=>{\n        let { name } = param;\n        return name.value === \"unmask\";\n    });\n    if (!directive) {\n        return \"mask\";\n    }\n    const modeArg = (_directive_arguments = directive.arguments) === null || _directive_arguments === void 0 ? void 0 : _directive_arguments.find((param)=>{\n        let { name } = param;\n        return name.value === \"mode\";\n    });\n    if (_apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_1__.__DEV__) {\n        if (modeArg) {\n            if (modeArg.value.kind === graphql__WEBPACK_IMPORTED_MODULE_2__.Kind.VARIABLE) {\n                _apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_1__.__DEV__ && _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_3__.invariant.warn(44);\n            } else if (modeArg.value.kind !== graphql__WEBPACK_IMPORTED_MODULE_2__.Kind.STRING) {\n                _apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_1__.__DEV__ && _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_3__.invariant.warn(45);\n            } else if (modeArg.value.value !== \"migrate\") {\n                _apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_1__.__DEV__ && _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_3__.invariant.warn(46, modeArg.value.value);\n            }\n        }\n    }\n    if (modeArg && \"value\" in modeArg.value && modeArg.value.value === \"migrate\") {\n        return \"migrate\";\n    }\n    return \"unmask\";\n} //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9tYXNraW5nL3V0aWxzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUM4QjtBQUNDO0FBRStCO0FBQ0E7QUFFOUQ7QUFDQTs7Ozs7R0FFTyxDQUFQLEtBQWEsQ0FBYixxQkFBbUMsQ0FBbkMsR0FBdUMsMENBQUksQ0FBM0MsQ0FBc0Q7QUFFdEQsU0FBZ0IsQ0FBaEIsa0JBQW1DLENBQ2pDLENBREYsT0FDOEIsRUFEOUI7OEJBV2tCLENBQWxCLFFBQTJCO0lBUnpCLENBQUYsS0FBUSxDQUFSLDRDQUE2QixDQUE3QixTQUF1QyxDQUF2Qyx3REFBb0IsQ0FBcEIsT0FBNEIsYUFBYSxDQUF6QyxHQUE2QyxDQUN6QztZQUFDLEVBQUUsQ0FEUCxLQUNhLEVBQUUsQ0FEZjtlQUNrQixDQURsQixHQUNzQixDQUFDLENBRHZCLFNBQ2lDLENBRGpDLE9BQ3lDLENBQ3RDOztJQUVELENBQUYsR0FBTSxDQUFDLENBQVAsUUFBZ0IsRUFBRTtRQUNkLENBQUosTUFBVyxDQUFYLEtBQWlCO0lBQ2Y7SUFFQSxDQUFGLEtBQVEsQ0FBUiwyQ0FBNEIsQ0FBNUIsUUFBcUMsQ0FBckMsNkVBQXVDLENBQXZDLEdBQTJDLENBQ3ZDO1lBQUMsRUFBRSxDQURQLEtBQ2EsRUFBRSxDQURmO2VBQ2tCLENBRGxCLEdBQ3NCLENBQUMsQ0FEdkIsU0FDaUMsQ0FEakMsS0FDdUMsQ0FDcEM7O0lBRUQsQ0FBRixHQUFNLHlFQUFPLEVBQUU7UUFDWCxDQUFKLEdBQVEsQ0FBUixNQUFlLEVBQUU7WUFDWCxDQUFOLEdBQVUsQ0FBVixNQUFpQixDQUFDLENBQWxCLElBQXVCLENBQUMsQ0FBeEIsUUFBaUMseUNBQUksQ0FBQyxDQUF0QyxPQUE4QyxFQUFFOzZGQUN4Qyx5RUFBUyxDQUFDLENBQWxCLE9BQTZFO1lBQ3ZFLE9BQU8sQ0FBYixHQUFpQixDQUFqQixNQUF3QixDQUFDLENBQXpCLElBQThCLENBQUMsQ0FBL0IsUUFBd0MseUNBQUksQ0FBQyxDQUE3QyxLQUFtRCxFQUFFOzZGQUM3Qyx5RUFBUyxDQUFDLENBQWxCLE9BQXlFO1lBQ25FLE9BQU8sQ0FBYixHQUFpQixDQUFqQixNQUF3QixDQUFDLENBQXpCLElBQThCLENBQUMsQ0FBL0IsU0FBeUMsQ0FBekMsUUFBa0QsRUFBRTs2RkFDNUMseUVBQVMsQ0FBQyxDQUFsQixRQUVVLENBRlYsTUFFaUIsQ0FBQyxDQUZsQixJQUV1QixDQUFDLENBRnhCLEtBR1M7WUFDSDtRQUNGO0lBQ0Y7SUFFQSxDQUFGLEdBQ0ksQ0FESixVQUVJLENBQUosVUFBZSxDQUFmLE1BQXNCLENBQUMsQ0FBdkIsUUFDSSxDQUFKLE1BQVcsQ0FBQyxDQUFaLElBQWlCLENBQUMsQ0FBbEIsU0FBNEIsQ0FBNUIsUUFBcUMsRUFDakM7UUFDQSxDQUFKLE1BQVcsQ0FBWCxRQUFvQjtJQUNsQjtJQUVBLENBQUYsTUFBUyxDQUFULE9BQWlCO0FBQ2pCIiwic291cmNlcyI6WyIvaG9tZS91L1Byb2plY3RzL0NvbGRUcmFjZS9zcmMvbWFza2luZy91dGlscy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEZyYWdtZW50U3ByZWFkTm9kZSB9IGZyb20gXCJncmFwaHFsXCI7XG5pbXBvcnQgeyBLaW5kIH0gZnJvbSBcImdyYXBocWxcIjtcbmltcG9ydCB7IFNsb3QgfSBmcm9tIFwib3B0aW1pc21cIjtcblxuaW1wb3J0IHsgX19ERVZfXyB9IGZyb20gXCJAYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvZW52aXJvbm1lbnRcIjtcbmltcG9ydCB7IGludmFyaWFudCB9IGZyb20gXCJAYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvaW52YXJpYW50XCI7XG5cbi8vIENvbnRleHR1YWwgc2xvdCB0aGF0IGFsbG93cyB1cyB0byBkaXNhYmxlIGFjY2Vzc29yIHdhcm5pbmdzIG9uIGZpZWxkcyB3aGVuIGluXG4vLyBtaWdyYXRlIG1vZGUuXG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgZGlzYWJsZVdhcm5pbmdzU2xvdCA9IG5ldyBTbG90PGJvb2xlYW4+KCk7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRGcmFnbWVudE1hc2tNb2RlKFxuICBmcmFnbWVudDogRnJhZ21lbnRTcHJlYWROb2RlXG4pOiBcIm1hc2tcIiB8IFwibWlncmF0ZVwiIHwgXCJ1bm1hc2tcIiB7XG4gIGNvbnN0IGRpcmVjdGl2ZSA9IGZyYWdtZW50LmRpcmVjdGl2ZXM/LmZpbmQoXG4gICAgKHsgbmFtZSB9KSA9PiBuYW1lLnZhbHVlID09PSBcInVubWFza1wiXG4gICk7XG5cbiAgaWYgKCFkaXJlY3RpdmUpIHtcbiAgICByZXR1cm4gXCJtYXNrXCI7XG4gIH1cblxuICBjb25zdCBtb2RlQXJnID0gZGlyZWN0aXZlLmFyZ3VtZW50cz8uZmluZChcbiAgICAoeyBuYW1lIH0pID0+IG5hbWUudmFsdWUgPT09IFwibW9kZVwiXG4gICk7XG5cbiAgaWYgKF9fREVWX18pIHtcbiAgICBpZiAobW9kZUFyZykge1xuICAgICAgaWYgKG1vZGVBcmcudmFsdWUua2luZCA9PT0gS2luZC5WQVJJQUJMRSkge1xuICAgICAgICBpbnZhcmlhbnQud2FybihcIkB1bm1hc2sgJ21vZGUnIGFyZ3VtZW50IGRvZXMgbm90IHN1cHBvcnQgdmFyaWFibGVzLlwiKTtcbiAgICAgIH0gZWxzZSBpZiAobW9kZUFyZy52YWx1ZS5raW5kICE9PSBLaW5kLlNUUklORykge1xuICAgICAgICBpbnZhcmlhbnQud2FybihcIkB1bm1hc2sgJ21vZGUnIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBzdHJpbmcuXCIpO1xuICAgICAgfSBlbHNlIGlmIChtb2RlQXJnLnZhbHVlLnZhbHVlICE9PSBcIm1pZ3JhdGVcIikge1xuICAgICAgICBpbnZhcmlhbnQud2FybihcbiAgICAgICAgICBcIkB1bm1hc2sgJ21vZGUnIGFyZ3VtZW50IGRvZXMgbm90IHJlY29nbml6ZSB2YWx1ZSAnJXMnLlwiLFxuICAgICAgICAgIG1vZGVBcmcudmFsdWUudmFsdWVcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoXG4gICAgbW9kZUFyZyAmJlxuICAgIFwidmFsdWVcIiBpbiBtb2RlQXJnLnZhbHVlICYmXG4gICAgbW9kZUFyZy52YWx1ZS52YWx1ZSA9PT0gXCJtaWdyYXRlXCJcbiAgKSB7XG4gICAgcmV0dXJuIFwibWlncmF0ZVwiO1xuICB9XG5cbiAgcmV0dXJuIFwidW5tYXNrXCI7XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/masking/utils.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/react/context/ApolloContext.js":
/*!********************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/react/context/ApolloContext.js ***!
  \********************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("var react__WEBPACK_IMPORTED_MODULE_0___namespace_cache;\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getApolloContext: () => (/* binding */ getApolloContext)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/../../node_modules/.pnpm/next@15.5.2_react-dom@19.1.1_react@19.1.1__react@19.1.1/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @apollo/client/utilities/invariant */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/invariant/index.development.js\");\n\n\n// To make sure Apollo Client doesn't create more than one React context\n// (which can lead to problems like having an Apollo Client instance added\n// in one context, then attempting to retrieve it from another different\n// context), a single Apollo context is created and tracked in global state.\nconst contextKey = Symbol.for(\"__APOLLO_CONTEXT__\");\nfunction getApolloContext() {\n    (0,_apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(\"createContext\" in /*#__PURE__*/ (react__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (react__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(react__WEBPACK_IMPORTED_MODULE_0__, 2))), 37);\n    let context = react__WEBPACK_IMPORTED_MODULE_0__.createContext[contextKey];\n    if (!context) {\n        Object.defineProperty(react__WEBPACK_IMPORTED_MODULE_0__.createContext, contextKey, {\n            value: context = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({}),\n            enumerable: false,\n            writable: false,\n            configurable: true\n        });\n        context.displayName = \"ApolloContext\";\n    }\n    return context;\n} //# sourceMappingURL=ApolloContext.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9yZWFjdC9jb250ZXh0L0Fwb2xsb0NvbnRleHQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUM4QjtBQU9nQztBQU85RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sQ0FBTixZQUFtQixDQUFuQixLQUF5QixDQUFDLENBQTFCLEVBQTZCLENBQUMsQ0FBOUIsbUJBQWtELENBQUM7QUFFbkQsU0FBZ0IsQ0FBaEIsZUFBZ0MsQ0FBaEM7SUFDRSw2RUFBRixDQUNJLDRNQURKLEtBT0c7SUFFRCxDQUFGLEdBQU0sQ0FBTixTQUFpQixnREFBMkIsQ0FDeEMsQ0FESixTQUNjLENBQzBCO0lBQ3RDLENBQUYsR0FBTSxDQUFDLENBQVAsTUFBYyxFQUFFO1FBQ1osQ0FBSixLQUFVLENBQUMsQ0FBWCxhQUF5QixDQUFDLGdEQUFtQixFQUFFLENBQS9DLFNBQXlELEVBQUU7WUFDckQsQ0FBTixJQUFXLEVBQUUsQ0FBYix1QkFBd0IsZ0RBQW1CLENBQXFCLENBQWhFLENBQWtFLENBQUMsQ0FBQztZQUM5RCxDQUFOLFNBQWdCLEVBQUUsQ0FBbEIsSUFBdUI7WUFDakIsQ0FBTixPQUFjLEVBQUUsQ0FBaEIsSUFBcUI7WUFDZixDQUFOLFdBQWtCLEVBQUUsQ0FBcEIsR0FBd0I7UUFDeEIsQ0FBSyxDQUFDO1FBQ0YsQ0FBSixNQUFXLENBQUMsQ0FBWixhQUEwQixDQUExQixjQUF5QztJQUN2QztJQUNBLENBQUYsTUFBUyxDQUFULE1BQWdCO0FBQ2hCIiwic291cmNlcyI6WyIvaG9tZS91L1Byb2plY3RzL3NyYy9yZWFjdC9jb250ZXh0L0Fwb2xsb0NvbnRleHQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgKiBhcyBSZWFjdFR5cGVzIGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCB0eXBlIHsgQXBvbGxvQ2xpZW50IH0gZnJvbSBcIkBhcG9sbG8vY2xpZW50XCI7XG5pbXBvcnQgdHlwZSB7XG4gIEhvb2tXcmFwcGVycyxcbiAgd3JhcHBlclN5bWJvbCxcbn0gZnJvbSBcIkBhcG9sbG8vY2xpZW50L3JlYWN0L2ludGVybmFsXCI7XG5pbXBvcnQgeyBpbnZhcmlhbnQgfSBmcm9tIFwiQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2ludmFyaWFudFwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIEFwb2xsb0NvbnRleHRWYWx1ZSB7XG4gIGNsaWVudD86IEFwb2xsb0NsaWVudDtcbiAgW3dyYXBwZXJTeW1ib2xdPzogSG9va1dyYXBwZXJzO1xufVxuXG4vLyBUbyBtYWtlIHN1cmUgQXBvbGxvIENsaWVudCBkb2Vzbid0IGNyZWF0ZSBtb3JlIHRoYW4gb25lIFJlYWN0IGNvbnRleHRcbi8vICh3aGljaCBjYW4gbGVhZCB0byBwcm9ibGVtcyBsaWtlIGhhdmluZyBhbiBBcG9sbG8gQ2xpZW50IGluc3RhbmNlIGFkZGVkXG4vLyBpbiBvbmUgY29udGV4dCwgdGhlbiBhdHRlbXB0aW5nIHRvIHJldHJpZXZlIGl0IGZyb20gYW5vdGhlciBkaWZmZXJlbnRcbi8vIGNvbnRleHQpLCBhIHNpbmdsZSBBcG9sbG8gY29udGV4dCBpcyBjcmVhdGVkIGFuZCB0cmFja2VkIGluIGdsb2JhbCBzdGF0ZS5cbmNvbnN0IGNvbnRleHRLZXkgPSBTeW1ib2wuZm9yKFwiX19BUE9MTE9fQ09OVEVYVF9fXCIpO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QXBvbGxvQ29udGV4dCgpOiBSZWFjdFR5cGVzLkNvbnRleHQ8QXBvbGxvQ29udGV4dFZhbHVlPiB7XG4gIGludmFyaWFudChcbiAgICBcImNyZWF0ZUNvbnRleHRcIiBpbiBSZWFjdCxcbiAgICBcIkludm9raW5nIGBnZXRBcG9sbG9Db250ZXh0YCBpbiBhbiBlbnZpcm9ubWVudCB3aGVyZSBgUmVhY3QuY3JlYXRlQ29udGV4dGAgaXMgbm90IGF2YWlsYWJsZS5cXG5cIiArXG4gICAgICBcIlRoZSBBcG9sbG8gQ2xpZW50IGZ1bmN0aW9uYWxpdHkgeW91IGFyZSB0cnlpbmcgdG8gdXNlIGlzIG9ubHkgYXZhaWxhYmxlIGluIFJlYWN0IENsaWVudCBDb21wb25lbnRzLlxcblwiICtcbiAgICAgICdQbGVhc2UgbWFrZSBzdXJlIHRvIGFkZCBcInVzZSBjbGllbnRcIiBhdCB0aGUgdG9wIG9mIHlvdXIgZmlsZS5cXG4nICtcbiAgICAgIC8vIFRPRE86IGNoYW5nZSB0byBSZWFjdCBkb2N1bWVudGF0aW9uIG9uY2UgUmVhY3QgZG9jdW1lbnRhdGlvbiBjb250YWlucyBpbmZvcm1hdGlvbiBhYm91dCBDbGllbnQgQ29tcG9uZW50c1xuICAgICAgXCJGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIGh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL2dldHRpbmctc3RhcnRlZC9yZWFjdC1lc3NlbnRpYWxzI2NsaWVudC1jb21wb25lbnRzXCJcbiAgKTtcblxuICBsZXQgY29udGV4dCA9IChSZWFjdC5jcmVhdGVDb250ZXh0IGFzIGFueSlbXG4gICAgY29udGV4dEtleVxuICBdIGFzIFJlYWN0LkNvbnRleHQ8QXBvbGxvQ29udGV4dFZhbHVlPjtcbiAgaWYgKCFjb250ZXh0KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlYWN0LmNyZWF0ZUNvbnRleHQsIGNvbnRleHRLZXksIHtcbiAgICAgIHZhbHVlOiAoY29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQ8QXBvbGxvQ29udGV4dFZhbHVlPih7fSkpLFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgfSk7XG4gICAgY29udGV4dC5kaXNwbGF5TmFtZSA9IFwiQXBvbGxvQ29udGV4dFwiO1xuICB9XG4gIHJldHVybiBjb250ZXh0O1xufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/react/context/ApolloContext.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/react/context/ApolloProvider.js":
/*!*********************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/react/context/ApolloProvider.js ***!
  \*********************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApolloProvider: () => (/* binding */ ApolloProvider)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/../../node_modules/.pnpm/next@15.5.2_react-dom@19.1.1_react@19.1.1__react@19.1.1/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @apollo/client/utilities/invariant */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/invariant/index.development.js\");\n/* harmony import */ var _ApolloContext_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ApolloContext.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/react/context/ApolloContext.js\");\nvar _s = $RefreshSig$();\n\n\n\nconst ApolloProvider = (param)=>{\n    let { client, children } = param;\n    _s();\n    const ApolloContext = (0,_ApolloContext_js__WEBPACK_IMPORTED_MODULE_1__.getApolloContext)();\n    const parentContext = react__WEBPACK_IMPORTED_MODULE_0__.useContext(ApolloContext);\n    const context = react__WEBPACK_IMPORTED_MODULE_0__.useMemo({\n        \"ApolloProvider.useMemo[context]\": ()=>{\n            return {\n                ...parentContext,\n                client: client || parentContext.client\n            };\n        }\n    }[\"ApolloProvider.useMemo[context]\"], [\n        parentContext,\n        client\n    ]);\n    (0,_apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(context.client, 38);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ApolloContext.Provider, {\n        value: context\n    }, children);\n}; //# sourceMappingURL=ApolloProvider.js.map\n_s(ApolloProvider, \"ck7GEjiLIKXtOy41mdYuYYszi2A=\");\n_c = ApolloProvider;\nvar _c;\n$RefreshReg$(_c, \"ApolloProvider\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9yZWFjdC9jb250ZXh0L0Fwb2xsb1Byb3ZpZGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQzhCO0FBR2dDO0FBRVQ7QUFTOUMsQ0FBUCxzQkFBbUU7UUFBQyxFQUNsRSxDQURGLEtBQ1EsRUFDTixDQUZGLE9BRVUsRUFGVixFQUdHLENBSEg7O0lBSUUsQ0FBRixLQUFRLENBQVIsZUFBd0IsbUVBQWdCLENBQXhDLENBQTBDO0lBQ3hDLENBQUYsS0FBUSxDQUFSLGVBQXdCLDZDQUFnQixDQUFDLENBQXpDLFlBQXNELENBQUM7SUFFckQsQ0FBRixLQUFRLENBQVIsU0FBa0IsMENBQWE7MkNBQUMsQ0FBaEMsRUFBbUMsQ0FBbkM7WUFDSSxDQUFKLE1BQVc7Z0JBQ0wsQ0FBTixFQUFTLENBQVQsWUFBc0I7Z0JBQ2hCLENBQU4sS0FBWSxFQUFFLENBQWQsU0FBd0IsQ0FBeEIsWUFBcUMsQ0FBQyxDQUF0QyxLQUE0QztZQUM1QyxDQUFLO1FBQ0gsQ0FBQzswQ0FBRTtRQUFDLENBQU4sWUFBbUI7UUFBRSxDQUFyQixLQUEyQjtLQUFDLENBQUM7SUFFM0IsNkVBQUYsQ0FDSSxDQURKLE1BQ1csQ0FBQyxDQURaLFVBSUc7SUFFRCxDQUFGLE1BQVMsY0FDTCxnREFESixDQUNLLENBREwsWUFDa0IsQ0FBQyxDQURuQixPQUMyQixFQUQzQjtRQUM0QixDQUQ1QixJQUNpQyxFQUFFLENBRG5DO0lBQUEsR0FDNkMsQ0FEN0MsT0FDcUQsQ0FBMEIsQ0FDNUU7QUFDSCxDQUFDOztLQXZCWSxDQUFiIiwic291cmNlcyI6WyIvaG9tZS91L1Byb2plY3RzL3NyYy9yZWFjdC9jb250ZXh0L0Fwb2xsb1Byb3ZpZGVyLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSAqIGFzIFJlYWN0VHlwZXMgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IHR5cGUgeyBBcG9sbG9DbGllbnQgfSBmcm9tIFwiQGFwb2xsby9jbGllbnRcIjtcbmltcG9ydCB7IGludmFyaWFudCB9IGZyb20gXCJAYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvaW52YXJpYW50XCI7XG5cbmltcG9ydCB7IGdldEFwb2xsb0NvbnRleHQgfSBmcm9tIFwiLi9BcG9sbG9Db250ZXh0LmpzXCI7XG5cbmV4cG9ydCBkZWNsYXJlIG5hbWVzcGFjZSBBcG9sbG9Qcm92aWRlciB7XG4gIGludGVyZmFjZSBQcm9wcyB7XG4gICAgY2xpZW50OiBBcG9sbG9DbGllbnQ7XG4gICAgY2hpbGRyZW46IFJlYWN0VHlwZXMuUmVhY3ROb2RlIHwgUmVhY3RUeXBlcy5SZWFjdE5vZGVbXSB8IG51bGw7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IEFwb2xsb1Byb3ZpZGVyOiBSZWFjdFR5cGVzLkZDPEFwb2xsb1Byb3ZpZGVyLlByb3BzPiA9ICh7XG4gIGNsaWVudCxcbiAgY2hpbGRyZW4sXG59KSA9PiB7XG4gIGNvbnN0IEFwb2xsb0NvbnRleHQgPSBnZXRBcG9sbG9Db250ZXh0KCk7XG4gIGNvbnN0IHBhcmVudENvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KEFwb2xsb0NvbnRleHQpO1xuXG4gIGNvbnN0IGNvbnRleHQgPSBSZWFjdC51c2VNZW1vKCgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgLi4ucGFyZW50Q29udGV4dCxcbiAgICAgIGNsaWVudDogY2xpZW50IHx8IHBhcmVudENvbnRleHQuY2xpZW50LFxuICAgIH07XG4gIH0sIFtwYXJlbnRDb250ZXh0LCBjbGllbnRdKTtcblxuICBpbnZhcmlhbnQoXG4gICAgY29udGV4dC5jbGllbnQsXG4gICAgXCJBcG9sbG9Qcm92aWRlciB3YXMgbm90IHBhc3NlZCBhIGNsaWVudCBpbnN0YW5jZS4gTWFrZSBcIiArXG4gICAgICAnc3VyZSB5b3UgcGFzcyBpbiB5b3VyIGNsaWVudCB2aWEgdGhlIFwiY2xpZW50XCIgcHJvcC4nXG4gICk7XG5cbiAgcmV0dXJuIChcbiAgICA8QXBvbGxvQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17Y29udGV4dH0+e2NoaWxkcmVufTwvQXBvbGxvQ29udGV4dC5Qcm92aWRlcj5cbiAgKTtcbn07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/react/context/ApolloProvider.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/react/hooks/internal/useDeepMemo.js":
/*!*************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/react/hooks/internal/useDeepMemo.js ***!
  \*************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useDeepMemo: () => (/* binding */ useDeepMemo)\n/* harmony export */ });\n/* harmony import */ var _wry_equality__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wry/equality */ \"(app-pages-browser)/../../node_modules/.pnpm/@wry+equality@0.5.7/node_modules/@wry/equality/lib/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/../../node_modules/.pnpm/next@15.5.2_react-dom@19.1.1_react@19.1.1__react@19.1.1/node_modules/next/dist/compiled/react/index.js\");\nvar _s = $RefreshSig$();\n\n\nfunction useDeepMemo(memoFn, deps) {\n    _s();\n    const ref = react__WEBPACK_IMPORTED_MODULE_1__.useRef(void 0);\n    if (!ref.current || !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(ref.current.deps, deps)) {\n        ref.current = {\n            value: memoFn(),\n            deps\n        };\n    }\n    return ref.current.value;\n} //# sourceMappingURL=useDeepMemo.js.map\n_s(useDeepMemo, \"QMBuJFIdzLIeqBcFwhMf246mjOM=\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9yZWFjdC9ob29rcy9pbnRlcm5hbC91c2VEZWVwTWVtby5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXNDO0FBRVA7QUFFekIscUJBQ0osTUFBb0IsRUFDcEIsSUFBb0I7O0lBRXBCLE1BQU0sR0FBRyxHQUFHLHlDQUFZLENBQTBDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDMUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLElBQUksQ0FBQyxvREFBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUM7UUFDbkQsR0FBRyxDQUFDLE9BQU8sR0FBRztZQUFFLEtBQUssRUFBRSxNQUFNLEVBQUU7WUFBRSxJQUFJO1FBQUEsQ0FBRSxDQUFDO0lBQzFDLENBQUM7SUFDRCxPQUFPLEdBQUcsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDO0FBQzNCLENBQUM7R0FUZSxXQUFXIiwic291cmNlcyI6WyIvaG9tZS91L3NyYy9yZWFjdC9ob29rcy9pbnRlcm5hbC91c2VEZWVwTWVtby50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBlcXVhbCB9IGZyb20gXCJAd3J5L2VxdWFsaXR5XCI7XG5pbXBvcnQgdHlwZSB7IERlcGVuZGVuY3lMaXN0IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZURlZXBNZW1vPFRWYWx1ZT4oXG4gIG1lbW9GbjogKCkgPT4gVFZhbHVlLFxuICBkZXBzOiBEZXBlbmRlbmN5TGlzdFxuKSB7XG4gIGNvbnN0IHJlZiA9IFJlYWN0LnVzZVJlZjx7IGRlcHM6IERlcGVuZGVuY3lMaXN0OyB2YWx1ZTogVFZhbHVlIH0+KHZvaWQgMCk7XG4gIGlmICghcmVmLmN1cnJlbnQgfHwgIWVxdWFsKHJlZi5jdXJyZW50LmRlcHMsIGRlcHMpKSB7XG4gICAgcmVmLmN1cnJlbnQgPSB7IHZhbHVlOiBtZW1vRm4oKSwgZGVwcyB9O1xuICB9XG4gIHJldHVybiByZWYuY3VycmVudC52YWx1ZTtcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/react/hooks/internal/useDeepMemo.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/react/hooks/internal/useIsomorphicLayoutEffect.js":
/*!***************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/react/hooks/internal/useIsomorphicLayoutEffect.js ***!
  \***************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useIsomorphicLayoutEffect: () => (/* binding */ useIsomorphicLayoutEffect)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/../../node_modules/.pnpm/next@15.5.2_react-dom@19.1.1_react@19.1.1__react@19.1.1/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/canUseDOM.js\");\n\n\n// use canUseDOM here instead of canUseLayoutEffect because we want to be able\n// to use useLayoutEffect in our jest tests. useLayoutEffect seems to work fine\n// in useSuspenseQuery tests, but to honor the original comment about the\n// warnings for useSyncExternalStore implementation, canUseLayoutEffect is left\n// alone.\nconst useIsomorphicLayoutEffect = _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_1__.canUseDOM ? react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect : react__WEBPACK_IMPORTED_MODULE_0__.useEffect; //# sourceMappingURL=useIsomorphicLayoutEffect.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9yZWFjdC9ob29rcy9pbnRlcm5hbC91c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUErQjtBQUUrQjtBQUU5RCw4RUFBOEU7QUFDOUUsK0VBQStFO0FBQy9FLHlFQUF5RTtBQUN6RSwrRUFBK0U7QUFDL0UsU0FBUztBQUNGLE1BQU0seUJBQXlCLEdBQ3BDLHdFQUFTLENBQUMsQ0FBQyxDQUFDLGtEQUFxQixDQUFDLENBQUMsQ0FBQyw0Q0FBZSxDQUFDIiwic291cmNlcyI6WyIvaG9tZS91L3NyYy9yZWFjdC9ob29rcy9pbnRlcm5hbC91c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG5pbXBvcnQgeyBjYW5Vc2VET00gfSBmcm9tIFwiQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2ludGVybmFsXCI7XG5cbi8vIHVzZSBjYW5Vc2VET00gaGVyZSBpbnN0ZWFkIG9mIGNhblVzZUxheW91dEVmZmVjdCBiZWNhdXNlIHdlIHdhbnQgdG8gYmUgYWJsZVxuLy8gdG8gdXNlIHVzZUxheW91dEVmZmVjdCBpbiBvdXIgamVzdCB0ZXN0cy4gdXNlTGF5b3V0RWZmZWN0IHNlZW1zIHRvIHdvcmsgZmluZVxuLy8gaW4gdXNlU3VzcGVuc2VRdWVyeSB0ZXN0cywgYnV0IHRvIGhvbm9yIHRoZSBvcmlnaW5hbCBjb21tZW50IGFib3V0IHRoZVxuLy8gd2FybmluZ3MgZm9yIHVzZVN5bmNFeHRlcm5hbFN0b3JlIGltcGxlbWVudGF0aW9uLCBjYW5Vc2VMYXlvdXRFZmZlY3QgaXMgbGVmdFxuLy8gYWxvbmUuXG5leHBvcnQgY29uc3QgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCA9XG4gIGNhblVzZURPTSA/IFJlYWN0LnVzZUxheW91dEVmZmVjdCA6IFJlYWN0LnVzZUVmZmVjdDtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/react/hooks/internal/useIsomorphicLayoutEffect.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/react/hooks/internal/wrapHook.js":
/*!**********************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/react/hooks/internal/wrapHook.js ***!
  \**********************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   wrapHook: () => (/* binding */ wrapHook)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/../../node_modules/.pnpm/next@15.5.2_react-dom@19.1.1_react@19.1.1__react@19.1.1/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var _apollo_client_react_internal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @apollo/client/react/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/react/internal/index.js\");\n/* harmony import */ var _context_ApolloContext_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../context/ApolloContext.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/react/context/ApolloContext.js\");\nvar _s = $RefreshSig$();\n\n\n// direct import to avoid circular dependency\n\n/**\n* @internal\n*\n* Makes an Apollo Client hook \"wrappable\".\n* That means that the Apollo Client instance can expose a \"wrapper\" that will be\n* used to wrap the original hook implementation with additional logic.\n* @example\n*\n* ```tsx\n* // this is already done in `@apollo/client` for all wrappable hooks (see `WrappableHooks`)\n* // following this pattern\n* function useQuery() {\n*   return wrapHook('useQuery', _useQuery, options.client)(query, options);\n* }\n* function _useQuery(query, options) {\n*   // original implementation\n* }\n*\n* // this is what a library like `@apollo/client-react-streaming` would do\n* class ApolloClientWithStreaming extends ApolloClient {\n*   constructor(options) {\n*     super(options);\n*     this.queryManager[Symbol.for(\"apollo.hook.wrappers\")] = {\n*       useQuery: (original) => (query, options) => {\n*         console.log(\"useQuery was called with options\", options);\n*         return original(query, options);\n*       }\n*     }\n*   }\n* }\n*\n* // this will now log the options and then call the original `useQuery`\n* const client = new ApolloClientWithStreaming({ ... });\n* useQuery(query, { client });\n* ```\n* \n* @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n*/ function wrapHook(hookName, useHook, clientOrObsQuery) {\n    _s();\n    // Priority-wise, the later entries in this array wrap\n    // previous entries and could prevent them (and in the end,\n    // even the original hook) from running\n    const wrapperSources = [\n        clientOrObsQuery[\"queryManager\"],\n        // if we are a hook (not `preloadQuery`), we are guaranteed to be inside of\n        // a React render and can use context\n        hookName.startsWith(\"use\") ? // eslint-disable-next-line react-hooks/rules-of-hooks\n        react__WEBPACK_IMPORTED_MODULE_0__.useContext((0,_context_ApolloContext_js__WEBPACK_IMPORTED_MODULE_1__.getApolloContext)()) : undefined\n    ];\n    let wrapped = useHook;\n    for (const source of wrapperSources){\n        var _source_wrapperSymbol;\n        const wrapper = source === null || source === void 0 ? void 0 : (_source_wrapperSymbol = source[_apollo_client_react_internal__WEBPACK_IMPORTED_MODULE_2__.wrapperSymbol]) === null || _source_wrapperSymbol === void 0 ? void 0 : _source_wrapperSymbol[hookName];\n        if (wrapper) {\n            wrapped = wrapper(wrapped);\n        }\n    }\n    return wrapped;\n} //# sourceMappingURL=wrapHook.js.map\n_s(wrapHook, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9yZWFjdC9ob29rcy9pbnRlcm5hbC93cmFwSG9vay5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUE4QjtBQWMrQjtBQUU3RDtBQUNpRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FtRWpFLGtCQUNFLENBREYsT0FDZ0MsRUFDOUIsQ0FGRixNQUVlLEVBQ2IsQ0FIRixlQUd1RCxFQUh2RDs7SUFLRSxDQUFGO0lBQ0UsQ0FBRjtJQUNFLENBQUY7SUFDRSxDQUFGLEtBQVEsQ0FBUixnQkFBeUI7UUFFbkIsQ0FBTixlQUtLLENBQUMsQ0FMTixhQUtvQixDQUFDO1FBQ2pCLENBQUo7UUFDSSxDQUFKO1FBQ0ksQ0FBSixPQUFZLENBQUMsQ0FBYixTQUF1QixDQUFDLENBQXhCLElBQTZCLEVBQUUsRUFDekIsQ0FBTjtRQUNNLDZDQUFnQixDQUFDLDJFQUFnQixDQUF2QyxDQUF5QyxJQUNuQyxDQUFOLFFBQWU7S0FDWjtJQUVELENBQUYsR0FBTSxDQUFOLFNBQWdCLENBQWhCLE1BQXVCO0lBQ3JCLENBQUYsSUFBTyxDQUFQLEtBQWEsQ0FBYixTQUF1QixDQUF2QixhQUFxQyxDQUFFOztRQUNuQyxDQUFKLEtBQVUsQ0FBVixTQUFvQixDQUFwQixLQUEwQixDQUExQix3RUFBNEIsQ0FBQyx3RUFBYSxDQUFDLENBQTNDLDhFQUE2QyxDQUFDLENBQTlDLE9BQXNELENBQUM7UUFDbkQsQ0FBSixHQUFRLENBQVIsTUFBZSxFQUFFO1lBQ1gsQ0FBTixTQUFnQixDQUFoQixNQUF1QixDQUFDLENBQXhCLE1BQStCLENBQVM7UUFDcEM7SUFDRjtJQUVBLENBQUYsTUFBUyxDQUFULE1BQWdCO0FBQ2hCO0dBakNnQixDQUFoQixPQUF3QiIsInNvdXJjZXMiOlsiL2hvbWUvdS9zcmMvcmVhY3QvaG9va3MvaW50ZXJuYWwvd3JhcEhvb2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCB0eXBlIHsgQXBvbGxvQ2xpZW50LCBJbnRlcm5hbFR5cGVzIH0gZnJvbSBcIkBhcG9sbG8vY2xpZW50XCI7XG5pbXBvcnQgdHlwZSB7IE9ic2VydmFibGVRdWVyeSB9IGZyb20gXCJAYXBvbGxvL2NsaWVudFwiO1xuaW1wb3J0IHR5cGUgeyBjcmVhdGVRdWVyeVByZWxvYWRlciB9IGZyb20gXCJAYXBvbGxvL2NsaWVudC9yZWFjdFwiO1xuaW1wb3J0IHR5cGUge1xuICB1c2VCYWNrZ3JvdW5kUXVlcnksXG4gIHVzZUZyYWdtZW50LFxuICB1c2VRdWVyeSxcbiAgdXNlUXVlcnlSZWZIYW5kbGVycyxcbiAgdXNlUmVhZFF1ZXJ5LFxuICB1c2VTdXNwZW5zZUZyYWdtZW50LFxuICB1c2VTdXNwZW5zZVF1ZXJ5LFxufSBmcm9tIFwiQGFwb2xsby9jbGllbnQvcmVhY3RcIjtcbmltcG9ydCB7IHdyYXBwZXJTeW1ib2wgfSBmcm9tIFwiQGFwb2xsby9jbGllbnQvcmVhY3QvaW50ZXJuYWxcIjtcblxuLy8gZGlyZWN0IGltcG9ydCB0byBhdm9pZCBjaXJjdWxhciBkZXBlbmRlbmN5XG5pbXBvcnQgeyBnZXRBcG9sbG9Db250ZXh0IH0gZnJvbSBcIi4uLy4uL2NvbnRleHQvQXBvbGxvQ29udGV4dC5qc1wiO1xuXG50eXBlIEZ1bmN0aW9uU2lnbmF0dXJlPFQ+ID1cbiAgVCBleHRlbmRzICguLi5hcmdzOiBpbmZlciBBKSA9PiBpbmZlciBSID8gKC4uLmFyZ3M6IEEpID0+IFIgOiBuZXZlcjtcblxuaW50ZXJmYWNlIFdyYXBwYWJsZUhvb2tzIHtcbiAgY3JlYXRlUXVlcnlQcmVsb2FkZXI6IEZ1bmN0aW9uU2lnbmF0dXJlPHR5cGVvZiBjcmVhdGVRdWVyeVByZWxvYWRlcj47XG4gIHVzZVF1ZXJ5OiBGdW5jdGlvblNpZ25hdHVyZTx0eXBlb2YgdXNlUXVlcnk+O1xuICB1c2VTdXNwZW5zZVF1ZXJ5OiBGdW5jdGlvblNpZ25hdHVyZTx0eXBlb2YgdXNlU3VzcGVuc2VRdWVyeT47XG4gIHVzZVN1c3BlbnNlRnJhZ21lbnQ6IEZ1bmN0aW9uU2lnbmF0dXJlPHR5cGVvZiB1c2VTdXNwZW5zZUZyYWdtZW50PjtcbiAgdXNlQmFja2dyb3VuZFF1ZXJ5OiBGdW5jdGlvblNpZ25hdHVyZTx0eXBlb2YgdXNlQmFja2dyb3VuZFF1ZXJ5PjtcbiAgdXNlUmVhZFF1ZXJ5OiBGdW5jdGlvblNpZ25hdHVyZTx0eXBlb2YgdXNlUmVhZFF1ZXJ5PjtcbiAgdXNlRnJhZ21lbnQ6IEZ1bmN0aW9uU2lnbmF0dXJlPHR5cGVvZiB1c2VGcmFnbWVudD47XG4gIHVzZVF1ZXJ5UmVmSGFuZGxlcnM6IEZ1bmN0aW9uU2lnbmF0dXJlPHR5cGVvZiB1c2VRdWVyeVJlZkhhbmRsZXJzPjtcbn1cblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqIENhbiBiZSB1c2VkIHRvIGNvcnJlY3RseSB0eXBlIHRoZSBbU3ltYm9sLmZvcihcImFwb2xsby5ob29rLndyYXBwZXJzXCIpXSBwcm9wZXJ0eSBvZlxuICogYFF1ZXJ5TWFuYWdlcmAsIHRvIG92ZXJyaWRlL3dyYXAgaG9vayBmdW5jdGlvbmFsaXR5LlxuICovXG5leHBvcnQgdHlwZSBIb29rV3JhcHBlcnMgPSB7XG4gIFtLIGluIGtleW9mIFdyYXBwYWJsZUhvb2tzXT86IChcbiAgICBvcmlnaW5hbEhvb2s6IFdyYXBwYWJsZUhvb2tzW0tdXG4gICkgPT4gV3JhcHBhYmxlSG9va3NbS107XG59O1xuXG5pbnRlcmZhY2UgUXVlcnlNYW5hZ2VyV2l0aFdyYXBwZXJzIGV4dGVuZHMgSW50ZXJuYWxUeXBlcy5RdWVyeU1hbmFnZXIge1xuICBbd3JhcHBlclN5bWJvbF0/OiBIb29rV3JhcHBlcnM7XG59XG5cbi8qKlxuICogQGludGVybmFsXG4gKlxuICogTWFrZXMgYW4gQXBvbGxvIENsaWVudCBob29rIFwid3JhcHBhYmxlXCIuXG4gKiBUaGF0IG1lYW5zIHRoYXQgdGhlIEFwb2xsbyBDbGllbnQgaW5zdGFuY2UgY2FuIGV4cG9zZSBhIFwid3JhcHBlclwiIHRoYXQgd2lsbCBiZVxuICogdXNlZCB0byB3cmFwIHRoZSBvcmlnaW5hbCBob29rIGltcGxlbWVudGF0aW9uIHdpdGggYWRkaXRpb25hbCBsb2dpYy5cbiAqIEBleGFtcGxlXG4gKlxuICogYGBgdHN4XG4gKiAvLyB0aGlzIGlzIGFscmVhZHkgZG9uZSBpbiBgQGFwb2xsby9jbGllbnRgIGZvciBhbGwgd3JhcHBhYmxlIGhvb2tzIChzZWUgYFdyYXBwYWJsZUhvb2tzYClcbiAqIC8vIGZvbGxvd2luZyB0aGlzIHBhdHRlcm5cbiAqIGZ1bmN0aW9uIHVzZVF1ZXJ5KCkge1xuICogICByZXR1cm4gd3JhcEhvb2soJ3VzZVF1ZXJ5JywgX3VzZVF1ZXJ5LCBvcHRpb25zLmNsaWVudCkocXVlcnksIG9wdGlvbnMpO1xuICogfVxuICogZnVuY3Rpb24gX3VzZVF1ZXJ5KHF1ZXJ5LCBvcHRpb25zKSB7XG4gKiAgIC8vIG9yaWdpbmFsIGltcGxlbWVudGF0aW9uXG4gKiB9XG4gKlxuICogLy8gdGhpcyBpcyB3aGF0IGEgbGlicmFyeSBsaWtlIGBAYXBvbGxvL2NsaWVudC1yZWFjdC1zdHJlYW1pbmdgIHdvdWxkIGRvXG4gKiBjbGFzcyBBcG9sbG9DbGllbnRXaXRoU3RyZWFtaW5nIGV4dGVuZHMgQXBvbGxvQ2xpZW50IHtcbiAqICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICogICAgIHN1cGVyKG9wdGlvbnMpO1xuICogICAgIHRoaXMucXVlcnlNYW5hZ2VyW1N5bWJvbC5mb3IoXCJhcG9sbG8uaG9vay53cmFwcGVyc1wiKV0gPSB7XG4gKiAgICAgICB1c2VRdWVyeTogKG9yaWdpbmFsKSA9PiAocXVlcnksIG9wdGlvbnMpID0+IHtcbiAqICAgICAgICAgY29uc29sZS5sb2coXCJ1c2VRdWVyeSB3YXMgY2FsbGVkIHdpdGggb3B0aW9uc1wiLCBvcHRpb25zKTtcbiAqICAgICAgICAgcmV0dXJuIG9yaWdpbmFsKHF1ZXJ5LCBvcHRpb25zKTtcbiAqICAgICAgIH1cbiAqICAgICB9XG4gKiAgIH1cbiAqIH1cbiAqXG4gKiAvLyB0aGlzIHdpbGwgbm93IGxvZyB0aGUgb3B0aW9ucyBhbmQgdGhlbiBjYWxsIHRoZSBvcmlnaW5hbCBgdXNlUXVlcnlgXG4gKiBjb25zdCBjbGllbnQgPSBuZXcgQXBvbGxvQ2xpZW50V2l0aFN0cmVhbWluZyh7IC4uLiB9KTtcbiAqIHVzZVF1ZXJ5KHF1ZXJ5LCB7IGNsaWVudCB9KTtcbiAqIGBgYFxuICovXG5leHBvcnQgZnVuY3Rpb24gd3JhcEhvb2s8SG9vayBleHRlbmRzICguLi5hcmdzOiBhbnlbXSkgPT4gYW55PihcbiAgaG9va05hbWU6IGtleW9mIFdyYXBwYWJsZUhvb2tzLFxuICB1c2VIb29rOiBIb29rLFxuICBjbGllbnRPck9ic1F1ZXJ5OiBPYnNlcnZhYmxlUXVlcnk8YW55PiB8IEFwb2xsb0NsaWVudFxuKTogSG9vayB7XG4gIC8vIFByaW9yaXR5LXdpc2UsIHRoZSBsYXRlciBlbnRyaWVzIGluIHRoaXMgYXJyYXkgd3JhcFxuICAvLyBwcmV2aW91cyBlbnRyaWVzIGFuZCBjb3VsZCBwcmV2ZW50IHRoZW0gKGFuZCBpbiB0aGUgZW5kLFxuICAvLyBldmVuIHRoZSBvcmlnaW5hbCBob29rKSBmcm9tIHJ1bm5pbmdcbiAgY29uc3Qgd3JhcHBlclNvdXJjZXMgPSBbXG4gICAgKFxuICAgICAgY2xpZW50T3JPYnNRdWVyeSBhcyB1bmtub3duIGFzIHtcbiAgICAgICAgLy8gYm90aCBgQXBvbGxvQ2xpZW50YCBhbmQgYE9ic2VydmFibGVRdWVyeWAgaGF2ZSBhIGBxdWVyeU1hbmFnZXJgIHByb3BlcnR5XG4gICAgICAgIC8vIGJ1dCB0aGV5J3JlIGJvdGggYHByaXZhdGVgLCBzbyB3ZSBoYXZlIHRvIGNhc3QgYXJvdW5kIGZvciBhIGJpdCBoZXJlLlxuICAgICAgICBxdWVyeU1hbmFnZXI6IFF1ZXJ5TWFuYWdlcldpdGhXcmFwcGVycztcbiAgICAgIH1cbiAgICApW1wicXVlcnlNYW5hZ2VyXCJdLFxuICAgIC8vIGlmIHdlIGFyZSBhIGhvb2sgKG5vdCBgcHJlbG9hZFF1ZXJ5YCksIHdlIGFyZSBndWFyYW50ZWVkIHRvIGJlIGluc2lkZSBvZlxuICAgIC8vIGEgUmVhY3QgcmVuZGVyIGFuZCBjYW4gdXNlIGNvbnRleHRcbiAgICBob29rTmFtZS5zdGFydHNXaXRoKFwidXNlXCIpID9cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgICAgUmVhY3QudXNlQ29udGV4dChnZXRBcG9sbG9Db250ZXh0KCkpXG4gICAgOiB1bmRlZmluZWQsXG4gIF07XG5cbiAgbGV0IHdyYXBwZWQgPSB1c2VIb29rO1xuICBmb3IgKGNvbnN0IHNvdXJjZSBvZiB3cmFwcGVyU291cmNlcykge1xuICAgIGNvbnN0IHdyYXBwZXIgPSBzb3VyY2U/Llt3cmFwcGVyU3ltYm9sXT8uW2hvb2tOYW1lXTtcbiAgICBpZiAod3JhcHBlcikge1xuICAgICAgd3JhcHBlZCA9IHdyYXBwZXIod3JhcHBlZCkgYXMgSG9vaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gd3JhcHBlZDtcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/react/hooks/internal/wrapHook.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/react/hooks/useApolloClient.js":
/*!********************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/react/hooks/useApolloClient.js ***!
  \********************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useApolloClient: () => (/* binding */ useApolloClient)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/../../node_modules/.pnpm/next@15.5.2_react-dom@19.1.1_react@19.1.1__react@19.1.1/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @apollo/client/utilities/invariant */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/invariant/index.development.js\");\n/* harmony import */ var _context_ApolloContext_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../context/ApolloContext.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/react/context/ApolloContext.js\");\nvar _s = $RefreshSig$();\n\n\n\n/**\n * @example\n *\n * ```jsx\n * import { useApolloClient } from \"@apollo/client\";\n *\n * function SomeComponent() {\n *   const client = useApolloClient();\n *   // `client` is now set to the `ApolloClient` instance being used by the\n *   // application (that was configured using something like `ApolloProvider`)\n * }\n * ```\n *\n * @returns The `ApolloClient` instance being used by the application.\n */ function useApolloClient(override) {\n    _s();\n    const context = react__WEBPACK_IMPORTED_MODULE_0__.useContext((0,_context_ApolloContext_js__WEBPACK_IMPORTED_MODULE_1__.getApolloContext)());\n    const client = override || context.client;\n    (0,_apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(!!client, 28);\n    return client;\n} //# sourceMappingURL=useApolloClient.js.map\n_s(useApolloClient, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9yZWFjdC9ob29rcy91c2VBcG9sbG9DbGllbnQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBOEI7QUFHZ0M7QUFFQTtBQUU5RDs7Ozs7Ozs7Ozs7Ozs7Q0FjQSxHQUNBLHlCQUFnQyxDQUFoQyxPQUF1RCxFQUF2RDs7SUFDRSxDQUFGLEtBQVEsQ0FBUixTQUFrQiw2Q0FBZ0IsQ0FBQywyRUFBZ0IsQ0FBbkQsQ0FBcUQsQ0FBQztJQUNwRCxDQUFGLEtBQVEsQ0FBUixRQUFpQixDQUFqQixXQUE2QixDQUE3QixNQUFvQyxDQUFDLENBQXJDLEtBQTJDO0lBQ3pDLDZFQUFGLENBQ0ksQ0FBQyxDQUFDLENBRE4sVUFLRztJQUVELENBQUYsTUFBUyxDQUFULEtBQWU7QUFDZjtHQVhnQixDQUFoQixjQUErQiIsInNvdXJjZXMiOlsiL2hvbWUvdS9Qcm9qZWN0cy9zcmMvcmVhY3QvaG9va3MvdXNlQXBvbGxvQ2xpZW50LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG5pbXBvcnQgdHlwZSB7IEFwb2xsb0NsaWVudCB9IGZyb20gXCJAYXBvbGxvL2NsaWVudFwiO1xuaW1wb3J0IHsgaW52YXJpYW50IH0gZnJvbSBcIkBhcG9sbG8vY2xpZW50L3V0aWxpdGllcy9pbnZhcmlhbnRcIjtcblxuaW1wb3J0IHsgZ2V0QXBvbGxvQ29udGV4dCB9IGZyb20gXCIuLi9jb250ZXh0L0Fwb2xsb0NvbnRleHQuanNcIjtcblxuLyoqXG4gKiBAZXhhbXBsZVxuICpcbiAqIGBgYGpzeFxuICogaW1wb3J0IHsgdXNlQXBvbGxvQ2xpZW50IH0gZnJvbSBcIkBhcG9sbG8vY2xpZW50XCI7XG4gKlxuICogZnVuY3Rpb24gU29tZUNvbXBvbmVudCgpIHtcbiAqICAgY29uc3QgY2xpZW50ID0gdXNlQXBvbGxvQ2xpZW50KCk7XG4gKiAgIC8vIGBjbGllbnRgIGlzIG5vdyBzZXQgdG8gdGhlIGBBcG9sbG9DbGllbnRgIGluc3RhbmNlIGJlaW5nIHVzZWQgYnkgdGhlXG4gKiAgIC8vIGFwcGxpY2F0aW9uICh0aGF0IHdhcyBjb25maWd1cmVkIHVzaW5nIHNvbWV0aGluZyBsaWtlIGBBcG9sbG9Qcm92aWRlcmApXG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBAcmV0dXJucyBUaGUgYEFwb2xsb0NsaWVudGAgaW5zdGFuY2UgYmVpbmcgdXNlZCBieSB0aGUgYXBwbGljYXRpb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VBcG9sbG9DbGllbnQob3ZlcnJpZGU/OiBBcG9sbG9DbGllbnQpOiBBcG9sbG9DbGllbnQge1xuICBjb25zdCBjb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChnZXRBcG9sbG9Db250ZXh0KCkpO1xuICBjb25zdCBjbGllbnQgPSBvdmVycmlkZSB8fCBjb250ZXh0LmNsaWVudDtcbiAgaW52YXJpYW50KFxuICAgICEhY2xpZW50LFxuICAgICdDb3VsZCBub3QgZmluZCBcImNsaWVudFwiIGluIHRoZSBjb250ZXh0IG9yIHBhc3NlZCBpbiBhcyBhbiBvcHRpb24uICcgK1xuICAgICAgXCJXcmFwIHRoZSByb290IGNvbXBvbmVudCBpbiBhbiA8QXBvbGxvUHJvdmlkZXI+LCBvciBwYXNzIGFuIEFwb2xsb0NsaWVudCBcIiArXG4gICAgICBcImluc3RhbmNlIGluIHZpYSBvcHRpb25zLlwiXG4gICk7XG5cbiAgcmV0dXJuIGNsaWVudDtcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/react/hooks/useApolloClient.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/react/hooks/useMutation.js":
/*!****************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/react/hooks/useMutation.js ***!
  \****************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useMutation: () => (/* binding */ useMutation)\n/* harmony export */ });\n/* harmony import */ var _wry_equality__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wry/equality */ \"(app-pages-browser)/../../node_modules/.pnpm/@wry+equality@0.5.7/node_modules/@wry/equality/lib/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/../../node_modules/.pnpm/next@15.5.2_react-dom@19.1.1_react@19.1.1__react@19.1.1/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/mergeOptions.js\");\n/* harmony import */ var _internal_useIsomorphicLayoutEffect_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./internal/useIsomorphicLayoutEffect.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/react/hooks/internal/useIsomorphicLayoutEffect.js\");\n/* harmony import */ var _useApolloClient_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./useApolloClient.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/react/hooks/useApolloClient.js\");\nvar _s = $RefreshSig$();\n\n\n\n\n\n/**\n * > Refer to the [Mutations](https://www.apollographql.com/docs/react/data/mutations/) section for a more in-depth overview of `useMutation`.\n *\n * @example\n *\n * ```jsx\n * import { gql, useMutation } from \"@apollo/client\";\n *\n * const ADD_TODO = gql`\n *   mutation AddTodo($type: String!) {\n *     addTodo(type: $type) {\n *       id\n *       type\n *     }\n *   }\n * `;\n *\n * function AddTodo() {\n *   let input;\n *   const [addTodo, { data }] = useMutation(ADD_TODO);\n *\n *   return (\n *     <div>\n *       <form\n *         onSubmit={(e) => {\n *           e.preventDefault();\n *           addTodo({ variables: { type: input.value } });\n *           input.value = \"\";\n *         }}\n *       >\n *         <input\n *           ref={(node) => {\n *             input = node;\n *           }}\n *         />\n *         <button type=\"submit\">Add Todo</button>\n *       </form>\n *     </div>\n *   );\n * }\n * ```\n *\n * @param mutation - A GraphQL mutation document parsed into an AST by `gql`.\n * @param options - Options to control how the mutation is executed.\n * @returns A tuple in the form of `[mutate, result]`\n */ function useMutation(mutation, options) {\n    _s();\n    const client = (0,_useApolloClient_js__WEBPACK_IMPORTED_MODULE_2__.useApolloClient)(options === null || options === void 0 ? void 0 : options.client);\n    const [result, setResult] = react__WEBPACK_IMPORTED_MODULE_1__.useState({\n        \"useMutation.useState\": ()=>createInitialResult(client)\n    }[\"useMutation.useState\"]);\n    const ref = react__WEBPACK_IMPORTED_MODULE_1__.useRef({\n        result,\n        mutationId: 0,\n        isMounted: true,\n        client,\n        mutation,\n        options\n    });\n    (0,_internal_useIsomorphicLayoutEffect_js__WEBPACK_IMPORTED_MODULE_3__.useIsomorphicLayoutEffect)({\n        \"useMutation.useIsomorphicLayoutEffect\": ()=>{\n            Object.assign(ref.current, {\n                client,\n                options,\n                mutation\n            });\n        }\n    }[\"useMutation.useIsomorphicLayoutEffect\"]);\n    const execute = react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n        \"useMutation.useCallback[execute]\": function() {\n            let executeOptions = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n            const { options, mutation } = ref.current;\n            const baseOptions = {\n                ...options,\n                mutation\n            };\n            const client = executeOptions.client || ref.current.client;\n            if (!ref.current.result.loading && ref.current.isMounted) {\n                setResult(ref.current.result = {\n                    loading: true,\n                    error: undefined,\n                    data: undefined,\n                    called: true,\n                    client\n                });\n            }\n            const mutationId = ++ref.current.mutationId;\n            const clientOptions = (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_4__.mergeOptions)(baseOptions, executeOptions);\n            return client.mutate(clientOptions).then({\n                \"useMutation.useCallback[execute]\": (response)=>{\n                    var _ref_current_options, _ref_current_options1;\n                    const { data, error } = response;\n                    const onError = executeOptions.onError || ((_ref_current_options = ref.current.options) === null || _ref_current_options === void 0 ? void 0 : _ref_current_options.onError);\n                    if (error && onError) {\n                        onError(error, clientOptions);\n                    }\n                    if (mutationId === ref.current.mutationId) {\n                        const result = {\n                            called: true,\n                            loading: false,\n                            data,\n                            error,\n                            client\n                        };\n                        if (ref.current.isMounted && !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(ref.current.result, result)) {\n                            setResult(ref.current.result = result);\n                        }\n                    }\n                    const onCompleted = executeOptions.onCompleted || ((_ref_current_options1 = ref.current.options) === null || _ref_current_options1 === void 0 ? void 0 : _ref_current_options1.onCompleted);\n                    if (!error) {\n                        onCompleted === null || onCompleted === void 0 ? void 0 : onCompleted(response.data, clientOptions);\n                    }\n                    return response;\n                }\n            }[\"useMutation.useCallback[execute]\"], {\n                \"useMutation.useCallback[execute]\": (error)=>{\n                    var _ref_current_options;\n                    if (mutationId === ref.current.mutationId && ref.current.isMounted) {\n                        const result = {\n                            loading: false,\n                            error,\n                            data: void 0,\n                            called: true,\n                            client\n                        };\n                        if (!(0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(ref.current.result, result)) {\n                            setResult(ref.current.result = result);\n                        }\n                    }\n                    const onError = executeOptions.onError || ((_ref_current_options = ref.current.options) === null || _ref_current_options === void 0 ? void 0 : _ref_current_options.onError);\n                    if (onError) {\n                        onError(error, clientOptions);\n                    }\n                    throw error;\n                }\n            }[\"useMutation.useCallback[execute]\"]);\n        }\n    }[\"useMutation.useCallback[execute]\"], []);\n    const reset = react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n        \"useMutation.useCallback[reset]\": ()=>{\n            if (ref.current.isMounted) {\n                const result = createInitialResult(ref.current.client);\n                Object.assign(ref.current, {\n                    mutationId: 0,\n                    result\n                });\n                setResult(result);\n            }\n        }\n    }[\"useMutation.useCallback[reset]\"], []);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"useMutation.useEffect\": ()=>{\n            const current = ref.current;\n            current.isMounted = true;\n            return ({\n                \"useMutation.useEffect\": ()=>{\n                    current.isMounted = false;\n                }\n            })[\"useMutation.useEffect\"];\n        }\n    }[\"useMutation.useEffect\"], []);\n    return [\n        execute,\n        {\n            reset,\n            ...result\n        }\n    ];\n}\n_s(useMutation, \"FW4Ffmm7/FX+Tc6hkMMaXsaqWNc=\", false, function() {\n    return [\n        _useApolloClient_js__WEBPACK_IMPORTED_MODULE_2__.useApolloClient,\n        _internal_useIsomorphicLayoutEffect_js__WEBPACK_IMPORTED_MODULE_3__.useIsomorphicLayoutEffect\n    ];\n});\nfunction createInitialResult(client) {\n    return {\n        data: undefined,\n        error: undefined,\n        called: false,\n        loading: false,\n        client\n    };\n} //# sourceMappingURL=useMutation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/react/hooks/useMutation.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/react/hooks/useQuery.js":
/*!*************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/react/hooks/useQuery.js ***!
  \*************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useQuery: () => (/* binding */ useQuery)\n/* harmony export */ });\n/* harmony import */ var _wry_equality__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wry/equality */ \"(app-pages-browser)/../../node_modules/.pnpm/@wry+equality@0.5.7/node_modules/@wry/equality/lib/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/../../node_modules/.pnpm/next@15.5.2_react-dom@19.1.1_react@19.1.1__react@19.1.1/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var _barrel_optimize_names_asapScheduler_observeOn_rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! __barrel_optimize__?names=asapScheduler,observeOn!=!rxjs */ \"(app-pages-browser)/../../node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/operators/observeOn.js\");\n/* harmony import */ var _barrel_optimize_names_asapScheduler_observeOn_rxjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! __barrel_optimize__?names=asapScheduler,observeOn!=!rxjs */ \"(app-pages-browser)/../../node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/scheduler/asap.js\");\n/* harmony import */ var _barrel_optimize_names_NetworkStatus_apollo_client__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! __barrel_optimize__?names=NetworkStatus!=!@apollo/client */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/core/networkStatus.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/mergeOptions.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/maybeDeepFreeze.js\");\n/* harmony import */ var _internal_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/index.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/react/hooks/internal/wrapHook.js\");\n/* harmony import */ var _useApolloClient_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./useApolloClient.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/react/hooks/useApolloClient.js\");\n/* harmony import */ var _useSyncExternalStore_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./useSyncExternalStore.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/react/hooks/useSyncExternalStore.js\");\n/**\n * Function parameters in this file try to follow a common order for the sake of\n * readability and consistency. The order is as follows:\n *\n * resultData\n * observable\n * client\n * query\n * options\n * watchQueryOptions\n * makeWatchQueryOptions\n */ /**  */ var _s = $RefreshSig$(), _s1 = $RefreshSig$(), _s2 = $RefreshSig$();\n\n\n\n\n\n\n\n\nconst lastWatchOptions = Symbol();\nfunction useQuery(query) {\n    for(var _len = arguments.length, _tmp = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        _tmp[_key - 1] = arguments[_key];\n    }\n    let [options] = _tmp;\n    _s();\n    \"use no memo\";\n    return (0,_internal_index_js__WEBPACK_IMPORTED_MODULE_2__.wrapHook)(\"useQuery\", // eslint-disable-next-line react-compiler/react-compiler\n    useQuery_, (0,_useApolloClient_js__WEBPACK_IMPORTED_MODULE_3__.useApolloClient)(options && options.client))(query, options);\n}\n_s(useQuery, \"rYIOGpOVT1nML5yQlyP0VRs0Jno=\", false, function() {\n    return [\n        _useApolloClient_js__WEBPACK_IMPORTED_MODULE_3__.useApolloClient\n    ];\n});\nfunction useQuery_(query) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    _s1();\n    const client = (0,_useApolloClient_js__WEBPACK_IMPORTED_MODULE_3__.useApolloClient)(options.client);\n    const { skip, ssr, ...opts } = options;\n    const watchQueryOptions = (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_4__.mergeOptions)(client.defaultOptions.watchQuery, {\n        ...opts,\n        query\n    });\n    if (skip) {\n        // When skipping, we set watchQueryOptions.fetchPolicy initially to\n        // \"standby\", but we also need/want to preserve the initial non-standby\n        // fetchPolicy that would have been used if not skipping.\n        watchQueryOptions.initialFetchPolicy = options.initialFetchPolicy || options.fetchPolicy;\n        watchQueryOptions.fetchPolicy = \"standby\";\n    }\n    function createState(previous) {\n        const observable = client.watchQuery(watchQueryOptions);\n        return {\n            client,\n            query,\n            observable,\n            resultData: {\n                current: observable.getCurrentResult(),\n                // Reuse previousData from previous InternalState (if any) to provide\n                // continuity of previousData even if/when the query or client changes.\n                previousData: previous === null || previous === void 0 ? void 0 : previous.resultData.current.data,\n                variables: observable.variables\n            }\n        };\n    }\n    let [state, setState] = react__WEBPACK_IMPORTED_MODULE_1__.useState(createState);\n    if (client !== state.client || query !== state.query) {\n        // If the client or query have changed, we need to create a new InternalState.\n        // This will trigger a re-render with the new state, but it will also continue\n        // to run the current render function to completion.\n        // Since we sometimes trigger some side-effects in the render function, we\n        // re-assign `state` to the new state to ensure that those side-effects are\n        // triggered with the new state.\n        setState(state = createState(state));\n    }\n    const { observable, resultData } = state;\n    useInitialFetchPolicyIfNecessary(watchQueryOptions, observable);\n    useResubscribeIfNecessary(resultData, observable, watchQueryOptions);\n    const result = useResult(observable, resultData, options.ssr);\n    const obsQueryFields = react__WEBPACK_IMPORTED_MODULE_1__.useMemo({\n        \"useQuery_.useMemo[obsQueryFields]\": ()=>({\n                refetch: observable.refetch.bind(observable),\n                fetchMore: observable.fetchMore.bind(observable),\n                updateQuery: observable.updateQuery.bind(observable),\n                startPolling: observable.startPolling.bind(observable),\n                stopPolling: observable.stopPolling.bind(observable),\n                subscribeToMore: observable.subscribeToMore.bind(observable)\n            })\n    }[\"useQuery_.useMemo[obsQueryFields]\"], [\n        observable\n    ]);\n    const previousData = resultData.previousData;\n    return react__WEBPACK_IMPORTED_MODULE_1__.useMemo({\n        \"useQuery_.useMemo\": ()=>{\n            const { partial, ...rest } = result;\n            return {\n                ...rest,\n                client,\n                observable,\n                variables: observable.variables,\n                previousData,\n                ...obsQueryFields\n            };\n        }\n    }[\"useQuery_.useMemo\"], [\n        result,\n        client,\n        observable,\n        previousData,\n        obsQueryFields\n    ]);\n}\n_s1(useQuery_, \"Gf2t1+3YQnVFH4YkTJ88JpbMdr8=\", false, function() {\n    return [\n        _useApolloClient_js__WEBPACK_IMPORTED_MODULE_3__.useApolloClient,\n        useInitialFetchPolicyIfNecessary,\n        useResubscribeIfNecessary,\n        useResult\n    ];\n});\nfunction useInitialFetchPolicyIfNecessary(watchQueryOptions, observable) {\n    \"use no memo\";\n    if (!watchQueryOptions.fetchPolicy) {\n        watchQueryOptions.fetchPolicy = observable.options.initialFetchPolicy;\n    }\n}\nfunction useResult(observable, resultData, ssr) {\n    _s2();\n    \"use no memo\";\n    return (0,_useSyncExternalStore_js__WEBPACK_IMPORTED_MODULE_5__.useSyncExternalStore)(react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n        \"useResult.useSyncExternalStore.useCallback\": (handleStoreChange)=>{\n            const subscription = observable// We use the asapScheduler here to prevent issues with trying to\n            // update in the middle of a render. `reobserve` is kicked off in the\n            // middle of a render and because RxJS emits values synchronously,\n            // its possible for this `handleStoreChange` to be called in that same\n            // render. This allows the render to complete before trying to emit a\n            // new value.\n            .pipe((0,_barrel_optimize_names_asapScheduler_observeOn_rxjs__WEBPACK_IMPORTED_MODULE_6__.observeOn)(_barrel_optimize_names_asapScheduler_observeOn_rxjs__WEBPACK_IMPORTED_MODULE_7__.asapScheduler)).subscribe({\n                \"useResult.useSyncExternalStore.useCallback.subscription\": (result)=>{\n                    const previous = resultData.current;\n                    if (// Avoid rerendering if the result is the same\n                    (0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(previous, result) && // Force rerender if the value was emitted because variables\n                    // changed, such as when calling `refetch(newVars)` which returns\n                    // the same data when `notifyOnNetworkStatusChange` is `false`.\n                    (0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(resultData.variables, observable.variables)) {\n                        return;\n                    }\n                    // eslint-disable-next-line react-compiler/react-compiler\n                    resultData.variables = observable.variables;\n                    if (previous.data && !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(previous.data, result.data)) {\n                        resultData.previousData = previous.data;\n                    }\n                    resultData.current = result;\n                    handleStoreChange();\n                }\n            }[\"useResult.useSyncExternalStore.useCallback.subscription\"]);\n            // Do the \"unsubscribe\" with a short delay.\n            // This way, an existing subscription can be reused without an additional\n            // request if \"unsubscribe\"  and \"resubscribe\" to the same ObservableQuery\n            // happen in very fast succession.\n            return ({\n                \"useResult.useSyncExternalStore.useCallback\": ()=>{\n                    setTimeout({\n                        \"useResult.useSyncExternalStore.useCallback\": ()=>subscription.unsubscribe()\n                    }[\"useResult.useSyncExternalStore.useCallback\"]);\n                }\n            })[\"useResult.useSyncExternalStore.useCallback\"];\n        }\n    }[\"useResult.useSyncExternalStore.useCallback\"], [\n        observable,\n        resultData\n    ]), {\n        \"useResult.useSyncExternalStore\": ()=>resultData.current\n    }[\"useResult.useSyncExternalStore\"], {\n        \"useResult.useSyncExternalStore\": ()=>ssr === false ? useQuery.ssrDisabledResult : resultData.current\n    }[\"useResult.useSyncExternalStore\"]);\n}\n_s2(useResult, \"FpwL93IKMLJZuQQXefVtWynbBPQ=\", false, function() {\n    return [\n        _useSyncExternalStore_js__WEBPACK_IMPORTED_MODULE_5__.useSyncExternalStore\n    ];\n});\n// this hook is not compatible with any rules of React, and there's no good way to rewrite it.\n// it should stay a separate hook that will not be optimized by the compiler\nfunction useResubscribeIfNecessary(/** this hook will mutate properties on `resultData` */ resultData, /** this hook will mutate properties on `observable` */ observable, watchQueryOptions) {\n    \"use no memo\";\n    if (observable[lastWatchOptions] && !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(observable[lastWatchOptions], watchQueryOptions)) {\n        // Though it might be tempting to postpone this reobserve call to the\n        // useEffect block, we need getCurrentResult to return an appropriate\n        // loading:true result synchronously (later within the same call to\n        // useQuery). Since we already have this.observable here (not true for\n        // the very first call to useQuery), we are not initiating any new\n        // subscriptions, though it does feel less than ideal that reobserve\n        // (potentially) kicks off a network request (for example, when the\n        // variables have changed), which is technically a side-effect.\n        if (shouldReobserve(observable[lastWatchOptions], watchQueryOptions)) {\n            observable.reobserve(watchQueryOptions);\n        } else {\n            observable.applyOptions(watchQueryOptions);\n        }\n        // Make sure getCurrentResult returns a fresh ApolloQueryResult<TData>,\n        // but save the current data as this.previousData, just like setResult\n        // usually does.\n        const result = observable.getCurrentResult();\n        if (!(0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(result.data, resultData.current.data)) {\n            resultData.previousData = resultData.current.data || resultData.previousData;\n        }\n        resultData.current = result;\n        resultData.variables = observable.variables;\n    }\n    observable[lastWatchOptions] = watchQueryOptions;\n}\nfunction shouldReobserve(previousOptions, options) {\n    return previousOptions.query !== options.query || !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(previousOptions.variables, options.variables) || previousOptions.fetchPolicy !== options.fetchPolicy && (options.fetchPolicy === \"standby\" || previousOptions.fetchPolicy === \"standby\");\n}\nuseQuery.ssrDisabledResult = (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_8__.maybeDeepFreeze)({\n    loading: true,\n    data: void 0,\n    dataState: \"empty\",\n    error: void 0,\n    networkStatus: _barrel_optimize_names_NetworkStatus_apollo_client__WEBPACK_IMPORTED_MODULE_9__.NetworkStatus.loading,\n    partial: true\n}); //# sourceMappingURL=useQuery.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/react/hooks/useQuery.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/react/hooks/useSubscription.js":
/*!********************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/react/hooks/useSubscription.js ***!
  \********************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useSubscription: () => (/* binding */ useSubscription)\n/* harmony export */ });\n/* harmony import */ var _wry_equality__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wry/equality */ \"(app-pages-browser)/../../node_modules/.pnpm/@wry+equality@0.5.7/node_modules/@wry/equality/lib/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/../../node_modules/.pnpm/next@15.5.2_react-dom@19.1.1_react@19.1.1__react@19.1.1/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @apollo/client/utilities/invariant */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/invariant/index.development.js\");\n/* harmony import */ var _internal_useDeepMemo_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./internal/useDeepMemo.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/react/hooks/internal/useDeepMemo.js\");\n/* harmony import */ var _internal_useIsomorphicLayoutEffect_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./internal/useIsomorphicLayoutEffect.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/react/hooks/internal/useIsomorphicLayoutEffect.js\");\n/* harmony import */ var _useApolloClient_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./useApolloClient.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/react/hooks/useApolloClient.js\");\n/* harmony import */ var _useSyncExternalStore_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./useSyncExternalStore.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/react/hooks/useSyncExternalStore.js\");\nvar _s = $RefreshSig$();\n\n\n\n\n\n\n\n/**\n * > Refer to the [Subscriptions](https://www.apollographql.com/docs/react/data/subscriptions/) section for a more in-depth overview of `useSubscription`.\n *\n * @example\n *\n * ```jsx\n * const COMMENTS_SUBSCRIPTION = gql`\n *   subscription OnCommentAdded($repoFullName: String!) {\n *     commentAdded(repoFullName: $repoFullName) {\n *       id\n *       content\n *     }\n *   }\n * `;\n *\n * function DontReadTheComments({ repoFullName }) {\n *   const {\n *     data: { commentAdded },\n *     loading,\n *   } = useSubscription(COMMENTS_SUBSCRIPTION, { variables: { repoFullName } });\n *   return <h4>New comment: {!loading && commentAdded.content}</h4>;\n * }\n * ```\n *\n * @remarks\n *\n * #### Consider using `onData` instead of `useEffect`\n *\n * If you want to react to incoming data, please use the `onData` option instead of `useEffect`.\n * State updates you make inside a `useEffect` hook might cause additional rerenders, and `useEffect` is mostly meant for side effects of rendering, not as an event handler.\n * State updates made in an event handler like `onData` might - depending on the React version - be batched and cause only a single rerender.\n *\n * Consider the following component:\n *\n * ```jsx\n * export function Subscriptions() {\n *   const { data, error, loading } = useSubscription(query);\n *   const [accumulatedData, setAccumulatedData] = useState([]);\n *\n *   useEffect(() => {\n *     setAccumulatedData((prev) => [...prev, data]);\n *   }, [data]);\n *\n *   return (\n *     <>\n *       {loading && <p>Loading...</p>}\n *       {JSON.stringify(accumulatedData, undefined, 2)}\n *     </>\n *   );\n * }\n * ```\n *\n * Instead of using `useEffect` here, we can re-write this component to use the `onData` callback function accepted in `useSubscription`'s `options` object:\n *\n * ```jsx\n * export function Subscriptions() {\n *   const [accumulatedData, setAccumulatedData] = useState([]);\n *   const { data, error, loading } = useSubscription(query, {\n *     onData({ data }) {\n *       setAccumulatedData((prev) => [...prev, data]);\n *     },\n *   });\n *\n *   return (\n *     <>\n *       {loading && <p>Loading...</p>}\n *       {JSON.stringify(accumulatedData, undefined, 2)}\n *     </>\n *   );\n * }\n * ```\n *\n * > ⚠️ **Note:** The `useSubscription` option `onData` is available in Apollo Client >= 3.7. In previous versions, the equivalent option is named `onSubscriptionData`.\n *\n * Now, the first message will be added to the `accumulatedData` array since `onData` is called _before_ the component re-renders. React 18 automatic batching is still in effect and results in a single re-render, but with `onData` we can guarantee each message received after the component mounts is added to `accumulatedData`.\n *\n * @param subscription - A GraphQL subscription document parsed into an AST by `gql`.\n * @param options - Options to control how the subscription is executed.\n * @returns Query result object\n */ function useSubscription(subscription) {\n    for(var _len = arguments.length, _tmp = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        _tmp[_key - 1] = arguments[_key];\n    }\n    let [options = {}] = _tmp;\n    _s();\n    const client = (0,_useApolloClient_js__WEBPACK_IMPORTED_MODULE_2__.useApolloClient)(options.client);\n    const { skip, fetchPolicy, errorPolicy, shouldResubscribe, context, extensions, ignoreResults } = options;\n    const variables = (0,_internal_useDeepMemo_js__WEBPACK_IMPORTED_MODULE_3__.useDeepMemo)({\n        \"useSubscription.useDeepMemo[variables]\": ()=>options.variables\n    }[\"useSubscription.useDeepMemo[variables]\"], [\n        options.variables\n    ]);\n    const recreate = ()=>createSubscription(client, subscription, variables, fetchPolicy, errorPolicy, context, extensions);\n    let [observable, setObservable] = react__WEBPACK_IMPORTED_MODULE_1__.useState(options.skip ? null : recreate);\n    const recreateRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(recreate);\n    (0,_internal_useIsomorphicLayoutEffect_js__WEBPACK_IMPORTED_MODULE_4__.useIsomorphicLayoutEffect)({\n        \"useSubscription.useIsomorphicLayoutEffect\": ()=>{\n            recreateRef.current = recreate;\n        }\n    }[\"useSubscription.useIsomorphicLayoutEffect\"]);\n    if (skip) {\n        if (observable) {\n            setObservable(observable = null);\n        }\n    } else if (!observable || (client !== observable.__.client || subscription !== observable.__.query || fetchPolicy !== observable.__.fetchPolicy || errorPolicy !== observable.__.errorPolicy || !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(variables, observable.__.variables)) && (typeof shouldResubscribe === \"function\" ? !!shouldResubscribe(options) : shouldResubscribe) !== false) {\n        setObservable(observable = recreate());\n    }\n    const optionsRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(options);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"useSubscription.useEffect\": ()=>{\n            optionsRef.current = options;\n        }\n    }[\"useSubscription.useEffect\"]);\n    const fallbackLoading = !skip && !ignoreResults;\n    const fallbackResult = react__WEBPACK_IMPORTED_MODULE_1__.useMemo({\n        \"useSubscription.useMemo[fallbackResult]\": ()=>({\n                loading: fallbackLoading,\n                error: void 0,\n                data: void 0\n            })\n    }[\"useSubscription.useMemo[fallbackResult]\"], [\n        fallbackLoading\n    ]);\n    const ignoreResultsRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(ignoreResults);\n    (0,_internal_useIsomorphicLayoutEffect_js__WEBPACK_IMPORTED_MODULE_4__.useIsomorphicLayoutEffect)({\n        \"useSubscription.useIsomorphicLayoutEffect\": ()=>{\n            // We cannot reference `ignoreResults` directly in the effect below\n            // it would add a dependency to the `useEffect` deps array, which means the\n            // subscription would be recreated if `ignoreResults` changes\n            // As a result, on resubscription, the last result would be re-delivered,\n            // rendering the component one additional time, and re-triggering `onData`.\n            // The same applies to `fetchPolicy`, which results in a new `observable`\n            // being created. We cannot really avoid it in that case, but we can at least\n            // avoid it for `ignoreResults`.\n            ignoreResultsRef.current = ignoreResults;\n        }\n    }[\"useSubscription.useIsomorphicLayoutEffect\"]);\n    const ret = (0,_useSyncExternalStore_js__WEBPACK_IMPORTED_MODULE_5__.useSyncExternalStore)(react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n        \"useSubscription.useSyncExternalStore[ret]\": (update)=>{\n            if (!observable) {\n                return ({\n                    \"useSubscription.useSyncExternalStore[ret]\": ()=>{}\n                })[\"useSubscription.useSyncExternalStore[ret]\"];\n            }\n            let subscriptionStopped = false;\n            const client = observable.__.client;\n            const subscription = observable.subscribe({\n                next (value) {\n                    if (subscriptionStopped) {\n                        return;\n                    }\n                    const result = {\n                        loading: false,\n                        data: value.data,\n                        error: value.error\n                    };\n                    observable.__.setResult(result);\n                    if (!ignoreResultsRef.current) update();\n                    if (result.error) {\n                        var _optionsRef_current_onError, _optionsRef_current;\n                        (_optionsRef_current_onError = (_optionsRef_current = optionsRef.current).onError) === null || _optionsRef_current_onError === void 0 ? void 0 : _optionsRef_current_onError.call(_optionsRef_current, result.error);\n                    } else if (optionsRef.current.onData) {\n                        optionsRef.current.onData({\n                            client,\n                            data: result\n                        });\n                    }\n                },\n                complete () {\n                    observable.__.completed = true;\n                    if (!subscriptionStopped && optionsRef.current.onComplete) {\n                        optionsRef.current.onComplete();\n                    }\n                }\n            });\n            return ({\n                \"useSubscription.useSyncExternalStore[ret]\": ()=>{\n                    // immediately stop receiving subscription values, but do not unsubscribe\n                    // until after a short delay in case another useSubscription hook is\n                    // reusing the same underlying observable and is about to subscribe\n                    subscriptionStopped = true;\n                    setTimeout({\n                        \"useSubscription.useSyncExternalStore[ret]\": ()=>subscription.unsubscribe()\n                    }[\"useSubscription.useSyncExternalStore[ret]\"]);\n                }\n            })[\"useSubscription.useSyncExternalStore[ret]\"];\n        }\n    }[\"useSubscription.useSyncExternalStore[ret]\"], [\n        observable\n    ]), {\n        \"useSubscription.useSyncExternalStore[ret]\": ()=>observable && !skip && !ignoreResults ? observable.__.result : fallbackResult\n    }[\"useSubscription.useSyncExternalStore[ret]\"], {\n        \"useSubscription.useSyncExternalStore[ret]\": ()=>fallbackResult\n    }[\"useSubscription.useSyncExternalStore[ret]\"]);\n    const restart = react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n        \"useSubscription.useCallback[restart]\": ()=>{\n            (0,_apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_6__.invariant)(!optionsRef.current.skip, 33);\n            if (observable === null || observable === void 0 ? void 0 : observable.__.completed) {\n                setObservable(recreateRef.current());\n            } else {\n                observable === null || observable === void 0 ? void 0 : observable.restart();\n            }\n        }\n    }[\"useSubscription.useCallback[restart]\"], [\n        optionsRef,\n        recreateRef,\n        observable\n    ]);\n    return react__WEBPACK_IMPORTED_MODULE_1__.useMemo({\n        \"useSubscription.useMemo\": ()=>({\n                ...ret,\n                restart\n            })\n    }[\"useSubscription.useMemo\"], [\n        ret,\n        restart\n    ]);\n}\n_s(useSubscription, \"S+dzEHJRs1RHjE4XV9ArYNL0LGQ=\", false, function() {\n    return [\n        _useApolloClient_js__WEBPACK_IMPORTED_MODULE_2__.useApolloClient,\n        _internal_useDeepMemo_js__WEBPACK_IMPORTED_MODULE_3__.useDeepMemo,\n        _internal_useIsomorphicLayoutEffect_js__WEBPACK_IMPORTED_MODULE_4__.useIsomorphicLayoutEffect,\n        _internal_useIsomorphicLayoutEffect_js__WEBPACK_IMPORTED_MODULE_4__.useIsomorphicLayoutEffect,\n        _useSyncExternalStore_js__WEBPACK_IMPORTED_MODULE_5__.useSyncExternalStore\n    ];\n});\nfunction createSubscription(client, query, variables, fetchPolicy, errorPolicy, context, extensions) {\n    const options = {\n        query,\n        variables,\n        fetchPolicy,\n        errorPolicy,\n        context,\n        extensions\n    };\n    const __ = {\n        ...options,\n        client,\n        completed: false,\n        result: {\n            loading: true,\n            data: void 0,\n            error: void 0\n        },\n        setResult (result) {\n            __.result = result;\n        }\n    };\n    return Object.assign(client.subscribe(options), {\n        /**\n         * A tracking object to store details about the observable and the latest result of the subscription.\n         */ __\n    });\n} //# sourceMappingURL=useSubscription.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/react/hooks/useSubscription.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/react/hooks/useSyncExternalStore.js":
/*!*************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/react/hooks/useSyncExternalStore.js ***!
  \*************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("var react__WEBPACK_IMPORTED_MODULE_0___namespace_cache;\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useSyncExternalStore: () => (/* binding */ useSyncExternalStore)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/../../node_modules/.pnpm/next@15.5.2_react-dom@19.1.1_react@19.1.1__react@19.1.1/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var _apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @apollo/client/utilities/environment */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/environment/index.development.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/canUseDOM.js\");\n/* harmony import */ var _apollo_client_utilities_internal_globals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @apollo/client/utilities/internal/globals */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/globals/maybe.js\");\n/* harmony import */ var _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @apollo/client/utilities/invariant */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/invariant/index.development.js\");\nvar _s = $RefreshSig$();\n\n\n\n\n\nlet didWarnUncachedGetSnapshot = false;\n// Prevent webpack from complaining about our feature detection of the\n// useSyncExternalStore property of the React namespace, which is expected not\n// to exist when using React 17 and earlier, and that's fine.\nconst uSESKey = \"useSyncExternalStore\";\nconst realHook = /*#__PURE__*/ (react__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (react__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(react__WEBPACK_IMPORTED_MODULE_0__, 2)))[uSESKey];\nconst isReactNative = (0,_apollo_client_utilities_internal_globals__WEBPACK_IMPORTED_MODULE_1__.maybe)(()=>navigator.product) == \"ReactNative\";\nconst usingJSDOM = // Following advice found in this comment from @domenic (maintainer of jsdom):\n// https://github.com/jsdom/jsdom/issues/1537#issuecomment-229405327\n//\n// Since we control the version of Jest and jsdom used when running Apollo\n// Client tests, and that version is recent enought to include \" jsdom/x.y.z\"\n// at the end of the user agent string, I believe this case is all we need to\n// check. Testing for \"Node.js\" was recommended for backwards compatibility\n// with older version of jsdom, but we don't have that problem.\n(0,_apollo_client_utilities_internal_globals__WEBPACK_IMPORTED_MODULE_1__.maybe)(()=>navigator.userAgent.indexOf(\"jsdom\") >= 0) || false;\n// Our tests should all continue to pass if we remove this !usingJSDOM\n// condition, thereby allowing useLayoutEffect when using jsdom. Unfortunately,\n// if we allow useLayoutEffect, then useSyncExternalStore generates many\n// warnings about useLayoutEffect doing nothing on the server. While these\n// warnings are harmless, this !usingJSDOM condition seems to be the best way to\n// prevent them (i.e. skipping useLayoutEffect when using jsdom).\nconst canUseLayoutEffect = (_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_2__.canUseDOM || isReactNative) && !usingJSDOM;\n// Adapted from https://www.npmjs.com/package/use-sync-external-store, with\n// Apollo Client deviations called out by \"// DEVIATION ...\" comments.\n// When/if React.useSyncExternalStore is defined, delegate fully to it.\nconst useSyncExternalStore = realHook || _s((subscribe, getSnapshot, getServerSnapshot)=>{\n    _s();\n    // Read the current snapshot from the store on every render. Again, this\n    // breaks the rules of React, and only works here because of specific\n    // implementation details, most importantly that updates are\n    // always synchronous.\n    const value = getSnapshot();\n    if (// DEVIATION: Using __DEV__\n    _apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_3__.__DEV__ && !didWarnUncachedGetSnapshot && // DEVIATION: Not using Object.is because we know our snapshots will never\n    // be exotic primitive values like NaN, which is !== itself.\n    value !== getSnapshot()) {\n        didWarnUncachedGetSnapshot = true;\n        // DEVIATION: Using invariant.error instead of console.error directly.\n        _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_4__.invariant.error(34);\n    }\n    // Because updates are synchronous, we don't queue them. Instead we force a\n    // re-render whenever the subscribed state changes by updating an some\n    // arbitrary useState hook. Then, during render, we call getSnapshot to read\n    // the current value.\n    //\n    // Because we don't actually use the state returned by the useState hook, we\n    // can save a bit of memory by storing other stuff in that slot.\n    //\n    // To implement the early bailout, we need to track some things on a mutable\n    // object. Usually, we would put that in a useRef hook, but we can stash it in\n    // our useState hook instead.\n    //\n    // To force a re-render, we call forceUpdate({inst}). That works because the\n    // new object always fails an equality check.\n    const [{ inst }, forceUpdate] = react__WEBPACK_IMPORTED_MODULE_0__.useState({\n        inst: {\n            value,\n            getSnapshot\n        }\n    });\n    // Track the latest getSnapshot function with a ref. This needs to be updated\n    // in the layout phase so we can access it during the tearing check that\n    // happens on subscribe.\n    if (canUseLayoutEffect) {\n        // DEVIATION: We avoid calling useLayoutEffect when !canUseLayoutEffect,\n        // which may seem like a conditional hook, but this code ends up behaving\n        // unconditionally (one way or the other) because canUseLayoutEffect is\n        // constant.\n        react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect(()=>{\n            Object.assign(inst, {\n                value,\n                getSnapshot\n            });\n            // Whenever getSnapshot or subscribe changes, we need to check in the\n            // commit phase if there was an interleaved mutation. In concurrent mode\n            // this can happen all the time, but even in synchronous mode, an earlier\n            // effect may have mutated the store.\n            if (checkIfSnapshotChanged(inst)) {\n                // Force a re-render.\n                forceUpdate({\n                    inst\n                });\n            }\n        // React Hook React.useLayoutEffect has a missing dependency: 'inst'. Either include it or remove the dependency array.\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        }, [\n            subscribe,\n            value,\n            getSnapshot\n        ]);\n    } else {\n        Object.assign(inst, {\n            value,\n            getSnapshot\n        });\n    }\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        // Check for changes right before subscribing. Subsequent changes will be\n        // detected in the subscription handler.\n        if (checkIfSnapshotChanged(inst)) {\n            // Force a re-render.\n            forceUpdate({\n                inst\n            });\n        }\n        // Subscribe to the store and return a clean-up function.\n        return subscribe(function handleStoreChange() {\n            // TODO: Because there is no cross-renderer API for batching updates, it's\n            // up to the consumer of this library to wrap their subscription event\n            // with unstable_batchedUpdates. Should we try to detect when this isn't\n            // the case and print a warning in development?\n            // The store changed. Check if the snapshot changed since the last time we\n            // read from the store.\n            if (checkIfSnapshotChanged(inst)) {\n                // Force a re-render.\n                forceUpdate({\n                    inst\n                });\n            }\n        });\n    // React Hook React.useEffect has a missing dependency: 'inst'. Either include it or remove the dependency array.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        subscribe\n    ]);\n    return value;\n}, \"6znQEcqHwd5kiF2t94WJeQmT9g8=\");\nfunction checkIfSnapshotChanged(param) {\n    let { value, getSnapshot } = param;\n    try {\n        return value !== getSnapshot();\n    } catch (e) {\n        return true;\n    }\n} //# sourceMappingURL=useSyncExternalStore.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/react/hooks/useSyncExternalStore.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/react/internal/cache/FragmentReference.js":
/*!*******************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/react/internal/cache/FragmentReference.js ***!
  \*******************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FragmentReference: () => (/* binding */ FragmentReference)\n/* harmony export */ });\n/* harmony import */ var _wry_equality__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wry/equality */ \"(app-pages-browser)/../../node_modules/.pnpm/@wry+equality@0.5.7/node_modules/@wry/equality/lib/index.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/createFulfilledPromise.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/decoratePromise.js\");\n\n\nclass FragmentReference {\n    listen(listener) {\n        this.listeners.add(listener);\n        return ()=>{\n            this.listeners.delete(listener);\n        };\n    }\n    retain() {\n        this.references++;\n        clearTimeout(this.autoDisposeTimeoutId);\n        let disposed = false;\n        return ()=>{\n            if (disposed) {\n                return;\n            }\n            disposed = true;\n            this.references--;\n            setTimeout(()=>{\n                if (!this.references) {\n                    this.dispose();\n                }\n            });\n        };\n    }\n    dispose() {\n        this.subscription.unsubscribe();\n    }\n    onDispose() {\n    // noop. overridable by options\n    }\n    subscribeToFragment() {\n        this.subscription = this.observable.subscribe(this.handleNext.bind(this), this.handleError.bind(this));\n        // call `onDispose` when the subscription is finalized, either because it is\n        // unsubscribed as a consequence of a `dispose` call or because the\n        // ObservableQuery completes because of a `ApolloClient.stop()` call.\n        this.subscription.add(this.onDispose);\n    }\n    handleNext(result) {\n        switch(this.promise.status){\n            case \"pending\":\n                {\n                    if (result.complete) {\n                        var _this_resolve, _this;\n                        return (_this_resolve = (_this = this).resolve) === null || _this_resolve === void 0 ? void 0 : _this_resolve.call(_this, result.data);\n                    }\n                    this.deliver(this.promise);\n                    break;\n                }\n            case \"fulfilled\":\n                {\n                    // This can occur when we already have a result written to the cache and\n                    // we subscribe for the first time. We create a fulfilled promise in the\n                    // constructor with a value that is the same as the first emitted value\n                    // so we want to skip delivering it.\n                    if ((0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(this.promise.value, result.data)) {\n                        return;\n                    }\n                    this.promise = result.complete ? (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_1__.createFulfilledPromise)(result.data) : this.createPendingPromise();\n                    this.deliver(this.promise);\n                }\n        }\n    }\n    handleError(error) {\n        var _this_reject, _this;\n        (_this_reject = (_this = this).reject) === null || _this_reject === void 0 ? void 0 : _this_reject.call(_this, error);\n    }\n    deliver(promise) {\n        this.listeners.forEach((listener)=>listener(promise));\n    }\n    createPendingPromise() {\n        return (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_2__.decoratePromise)(new Promise((resolve, reject)=>{\n            this.resolve = resolve;\n            this.reject = reject;\n        }));\n    }\n    getDiff(client, options) {\n        const { cache } = client;\n        const { from, fragment, fragmentName } = options;\n        const diff = cache.diff({\n            ...options,\n            query: cache[\"getFragmentDoc\"](client[\"transform\"](fragment), fragmentName),\n            returnPartialData: true,\n            id: from,\n            optimistic: true\n        });\n        return {\n            ...diff,\n            result: client[\"queryManager\"].maskFragment({\n                fragment,\n                fragmentName,\n                data: diff.result\n            })\n        };\n    }\n    constructor(client, watchFragmentOptions, options){\n        this.key = {};\n        this.listeners = new Set();\n        this.references = 0;\n        this.dispose = this.dispose.bind(this);\n        this.handleNext = this.handleNext.bind(this);\n        this.handleError = this.handleError.bind(this);\n        this.observable = client.watchFragment(watchFragmentOptions);\n        if (options.onDispose) {\n            this.onDispose = options.onDispose;\n        }\n        const diff = this.getDiff(client, watchFragmentOptions);\n        // Start a timer that will automatically dispose of the query if the\n        // suspended resource does not use this fragmentRef in the given time. This\n        // helps prevent memory leaks when a component has unmounted before the\n        // query has finished loading.\n        const startDisposeTimer = ()=>{\n            if (!this.references) {\n                var _options_autoDisposeTimeoutMs;\n                this.autoDisposeTimeoutId = setTimeout(this.dispose, (_options_autoDisposeTimeoutMs = options.autoDisposeTimeoutMs) !== null && _options_autoDisposeTimeoutMs !== void 0 ? _options_autoDisposeTimeoutMs : 30000);\n            }\n        };\n        this.promise = diff.complete ? (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_1__.createFulfilledPromise)(diff.result) : this.createPendingPromise();\n        this.subscribeToFragment();\n        this.promise.then(startDisposeTimer, startDisposeTimer);\n    }\n} //# sourceMappingURL=FragmentReference.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/react/internal/cache/FragmentReference.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/react/internal/cache/QueryReference.js":
/*!****************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/react/internal/cache/QueryReference.js ***!
  \****************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InternalQueryReference: () => (/* binding */ InternalQueryReference),\n/* harmony export */   assertWrappedQueryRef: () => (/* binding */ assertWrappedQueryRef),\n/* harmony export */   getWrappedPromise: () => (/* binding */ getWrappedPromise),\n/* harmony export */   unwrapQueryRef: () => (/* binding */ unwrapQueryRef),\n/* harmony export */   updateWrappedQueryRef: () => (/* binding */ updateWrappedQueryRef),\n/* harmony export */   wrapQueryRef: () => (/* binding */ wrapQueryRef)\n/* harmony export */ });\n/* harmony import */ var _wry_equality__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wry/equality */ \"(app-pages-browser)/../../node_modules/.pnpm/@wry+equality@0.5.7/node_modules/@wry/equality/lib/index.js\");\n/* harmony import */ var _barrel_optimize_names_filter_rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! __barrel_optimize__?names=filter!=!rxjs */ \"(app-pages-browser)/../../node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/operators/filter.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/createRejectedPromise.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/createFulfilledPromise.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/decoratePromise.js\");\n/* harmony import */ var _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @apollo/client/utilities/invariant */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/invariant/index.development.js\");\n\n\n\n\nconst QUERY_REFERENCE_SYMBOL = Symbol.for(\"apollo.internal.queryRef\");\nconst PROMISE_SYMBOL = Symbol.for(\"apollo.internal.refPromise\");\nfunction wrapQueryRef(internalQueryRef) {\n    return {\n        [QUERY_REFERENCE_SYMBOL]: internalQueryRef,\n        [PROMISE_SYMBOL]: internalQueryRef.promise\n    };\n}\nfunction assertWrappedQueryRef(queryRef) {\n    (0,_apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(!queryRef || QUERY_REFERENCE_SYMBOL in queryRef, 27);\n}\nfunction getWrappedPromise(queryRef) {\n    const internalQueryRef = unwrapQueryRef(queryRef);\n    return internalQueryRef.promise.status === \"fulfilled\" ? internalQueryRef.promise : queryRef[PROMISE_SYMBOL];\n}\nfunction unwrapQueryRef(queryRef) {\n    return queryRef[QUERY_REFERENCE_SYMBOL];\n}\nfunction updateWrappedQueryRef(queryRef, promise) {\n    queryRef[PROMISE_SYMBOL] = promise;\n}\nconst OBSERVED_CHANGED_OPTIONS = [\n    \"context\",\n    \"errorPolicy\",\n    \"fetchPolicy\",\n    \"refetchWritePolicy\",\n    \"returnPartialData\"\n];\nclass InternalQueryReference {\n    get disposed() {\n        return this.subscription.closed;\n    }\n    get watchQueryOptions() {\n        return this.observable.options;\n    }\n    reinitialize() {\n        const { observable } = this;\n        const originalFetchPolicy = this.watchQueryOptions.fetchPolicy;\n        const avoidNetworkRequests = originalFetchPolicy === \"no-cache\" || originalFetchPolicy === \"standby\";\n        try {\n            if (avoidNetworkRequests) {\n                observable.applyOptions({\n                    fetchPolicy: \"standby\"\n                });\n            } else {\n                observable.reset();\n                observable.applyOptions({\n                    fetchPolicy: \"cache-first\"\n                });\n            }\n            if (!avoidNetworkRequests) {\n                this.setResult();\n            }\n            this.subscribeToQuery();\n        } finally{\n            observable.applyOptions({\n                fetchPolicy: originalFetchPolicy\n            });\n        }\n    }\n    retain() {\n        this.references++;\n        clearTimeout(this.autoDisposeTimeoutId);\n        let disposed = false;\n        return ()=>{\n            if (disposed) {\n                return;\n            }\n            disposed = true;\n            this.references--;\n            setTimeout(()=>{\n                if (!this.references) {\n                    this.dispose();\n                }\n            });\n        };\n    }\n    softRetain() {\n        this.softReferences++;\n        let disposed = false;\n        return ()=>{\n            // Tracking if this has already been called helps ensure that\n            // multiple calls to this function won't decrement the reference\n            // counter more than it should. Subsequent calls just result in a noop.\n            if (disposed) {\n                return;\n            }\n            disposed = true;\n            this.softReferences--;\n            setTimeout(()=>{\n                if (!this.softReferences && !this.references) {\n                    this.dispose();\n                }\n            });\n        };\n    }\n    didChangeOptions(watchQueryOptions) {\n        return OBSERVED_CHANGED_OPTIONS.some((option)=>option in watchQueryOptions && !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(this.watchQueryOptions[option], watchQueryOptions[option]));\n    }\n    applyOptions(watchQueryOptions) {\n        const { fetchPolicy: currentFetchPolicy } = this.watchQueryOptions;\n        // \"standby\" is used when `skip` is set to `true`. Detect when we've\n        // enabled the query (i.e. `skip` is `false`) to execute a network request.\n        if (currentFetchPolicy === \"standby\" && currentFetchPolicy !== watchQueryOptions.fetchPolicy) {\n            this.initiateFetch(this.observable.reobserve(watchQueryOptions));\n        } else {\n            this.observable.applyOptions(watchQueryOptions);\n        }\n        return this.promise;\n    }\n    listen(listener) {\n        this.listeners.add(listener);\n        return ()=>{\n            this.listeners.delete(listener);\n        };\n    }\n    refetch(variables) {\n        return this.initiateFetch(this.observable.refetch(variables));\n    }\n    fetchMore(options) {\n        return this.initiateFetch(this.observable.fetchMore(options));\n    }\n    dispose() {\n        this.subscription.unsubscribe();\n    }\n    onDispose() {\n    // noop. overridable by options\n    }\n    handleNext(result) {\n        switch(this.promise.status){\n            case \"pending\":\n                {\n                    // Maintain the last successful `data` value if the next result does not\n                    // have one.\n                    // TODO: This can likely be removed once\n                    // https://github.com/apollographql/apollo-client/issues/12667 is fixed\n                    if (result.data === void 0) {\n                        result.data = this.result.data;\n                        if (result.data) {\n                            result.dataState = \"complete\";\n                        }\n                    }\n                    if (this.shouldReject(result)) {\n                        var _this_reject, _this;\n                        (_this_reject = (_this = this).reject) === null || _this_reject === void 0 ? void 0 : _this_reject.call(_this, result.error);\n                    } else {\n                        var _this_resolve, _this1;\n                        this.result = result;\n                        (_this_resolve = (_this1 = this).resolve) === null || _this_resolve === void 0 ? void 0 : _this_resolve.call(_this1, result);\n                    }\n                    break;\n                }\n            default:\n                {\n                    // This occurs when switching to a result that is fully cached when this\n                    // class is instantiated. ObservableQuery will run reobserve when\n                    // subscribing, which delivers a result from the cache.\n                    if (result.data === this.result.data && result.networkStatus === this.result.networkStatus) {\n                        return;\n                    }\n                    // Maintain the last successful `data` value if the next result does not\n                    // have one.\n                    if (result.data === void 0) {\n                        result.data = this.result.data;\n                    }\n                    if (this.shouldReject(result)) {\n                        this.promise = (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_2__.createRejectedPromise)(result.error);\n                        this.deliver(this.promise);\n                    } else {\n                        this.result = result;\n                        this.promise = (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_3__.createFulfilledPromise)(result);\n                        this.deliver(this.promise);\n                    }\n                    break;\n                }\n        }\n    }\n    deliver(promise) {\n        this.listeners.forEach((listener)=>listener(promise));\n    }\n    initiateFetch(returnedPromise) {\n        this.promise = this.createPendingPromise();\n        this.promise.catch(()=>{});\n        // If the data returned from the fetch is deeply equal to the data already\n        // in the cache, `handleNext` will not be triggered leaving the promise we\n        // created in a pending state forever. To avoid this situtation, we attempt\n        // to resolve the promise if `handleNext` hasn't been run to ensure the\n        // promise is resolved correctly.\n        returnedPromise.then(()=>{\n            // In the case of `fetchMore`, this promise is resolved before a cache\n            // result is emitted due to the fact that `fetchMore` sets a `no-cache`\n            // fetch policy and runs `cache.batch` in its `.then` handler. Because\n            // the timing is different, we accidentally run this update twice\n            // causing an additional re-render with the `fetchMore` result by\n            // itself. By wrapping in `setTimeout`, this should provide a short\n            // delay to allow the `QueryInfo.notify` handler to run before this\n            // promise is checked.\n            // See https://github.com/apollographql/apollo-client/issues/11315 for\n            // more information\n            setTimeout(()=>{\n                if (this.promise.status === \"pending\") {\n                    var _this_resolve, _this;\n                    // Use the current result from the observable instead of the value\n                    // resolved from the promise. This avoids issues in some cases where\n                    // the raw resolved value should not be the emitted value, such as\n                    // when a `fetchMore` call returns an empty array after it has\n                    // reached the end of the list.\n                    //\n                    // See the following for more information:\n                    // https://github.com/apollographql/apollo-client/issues/11642\n                    this.result = this.observable.getCurrentResult();\n                    (_this_resolve = (_this = this).resolve) === null || _this_resolve === void 0 ? void 0 : _this_resolve.call(_this, this.result);\n                }\n            });\n        }).catch((error)=>{\n            var _this_reject, _this;\n            return (_this_reject = (_this = this).reject) === null || _this_reject === void 0 ? void 0 : _this_reject.call(_this, error);\n        });\n        return returnedPromise;\n    }\n    subscribeToQuery() {\n        this.subscription = this.observable.pipe((0,_barrel_optimize_names_filter_rxjs__WEBPACK_IMPORTED_MODULE_4__.filter)((result)=>!(0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(result, this.result))).subscribe(this.handleNext);\n        // call `onDispose` when the subscription is finalized, either because it is\n        // unsubscribed as a consequence of a `dispose` call or because the\n        // ObservableQuery completes because of a `ApolloClient.stop()` call.\n        this.subscription.add(this.onDispose);\n    }\n    setResult() {\n        const result = this.observable.getCurrentResult();\n        if ((0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(result, this.result)) {\n            return;\n        }\n        this.result = result;\n        this.promise = result.data ? (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_3__.createFulfilledPromise)(result) : this.createPendingPromise();\n    }\n    shouldReject(result) {\n        const { errorPolicy = \"none\" } = this.watchQueryOptions;\n        return result.error && errorPolicy === \"none\";\n    }\n    createPendingPromise() {\n        return (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_5__.decoratePromise)(new Promise((resolve, reject)=>{\n            this.resolve = resolve;\n            this.reject = reject;\n        }));\n    }\n    constructor(observable, options){\n        this.key = {};\n        this.listeners = new Set();\n        this.references = 0;\n        this.softReferences = 0;\n        this.handleNext = this.handleNext.bind(this);\n        this.dispose = this.dispose.bind(this);\n        this.observable = observable;\n        if (options.onDispose) {\n            this.onDispose = options.onDispose;\n        }\n        this.setResult();\n        this.subscribeToQuery();\n        // Start a timer that will automatically dispose of the query if the\n        // suspended resource does not use this queryRef in the given time. This\n        // helps prevent memory leaks when a component has unmounted before the\n        // query has finished loading.\n        const startDisposeTimer = ()=>{\n            if (!this.references) {\n                var _options_autoDisposeTimeoutMs;\n                this.autoDisposeTimeoutId = setTimeout(this.dispose, (_options_autoDisposeTimeoutMs = options.autoDisposeTimeoutMs) !== null && _options_autoDisposeTimeoutMs !== void 0 ? _options_autoDisposeTimeoutMs : 30000);\n            }\n        };\n        // We wait until the request has settled to ensure we don't dispose of the\n        // query ref before the request finishes, otherwise we would leave the\n        // promise in a pending state rendering the suspense boundary indefinitely.\n        this.promise.then(startDisposeTimer, startDisposeTimer);\n    }\n} //# sourceMappingURL=QueryReference.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/react/internal/cache/QueryReference.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/react/internal/cache/SuspenseCache.js":
/*!***************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/react/internal/cache/SuspenseCache.js ***!
  \***************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SuspenseCache: () => (/* binding */ SuspenseCache)\n/* harmony export */ });\n/* harmony import */ var _wry_trie__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wry/trie */ \"(app-pages-browser)/../../node_modules/.pnpm/@wry+trie@0.5.0/node_modules/@wry/trie/lib/index.js\");\n/* harmony import */ var _FragmentReference_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./FragmentReference.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/react/internal/cache/FragmentReference.js\");\n/* harmony import */ var _QueryReference_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./QueryReference.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/react/internal/cache/QueryReference.js\");\n\n\n\nclass SuspenseCache {\n    getQueryRef(cacheKey, createObservable) {\n        const ref = this.queryRefs.lookupArray(cacheKey);\n        if (!ref.current) {\n            ref.current = new _QueryReference_js__WEBPACK_IMPORTED_MODULE_1__.InternalQueryReference(createObservable(), {\n                autoDisposeTimeoutMs: this.options.autoDisposeTimeoutMs,\n                onDispose: ()=>{\n                    delete ref.current;\n                }\n            });\n        }\n        return ref.current;\n    }\n    getFragmentRef(cacheKey, client, options) {\n        const ref = this.fragmentRefs.lookupArray(cacheKey);\n        if (!ref.current) {\n            ref.current = new _FragmentReference_js__WEBPACK_IMPORTED_MODULE_2__.FragmentReference(client, options, {\n                autoDisposeTimeoutMs: this.options.autoDisposeTimeoutMs,\n                onDispose: ()=>{\n                    delete ref.current;\n                }\n            });\n        }\n        return ref.current;\n    }\n    add(cacheKey, queryRef) {\n        const ref = this.queryRefs.lookupArray(cacheKey);\n        ref.current = queryRef;\n    }\n    constructor(options = {}){\n        this.queryRefs = new _wry_trie__WEBPACK_IMPORTED_MODULE_0__.Trie();\n        this.fragmentRefs = new _wry_trie__WEBPACK_IMPORTED_MODULE_0__.Trie();\n        this.options = options;\n    }\n} //# sourceMappingURL=SuspenseCache.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9yZWFjdC9pbnRlcm5hbC9jYWNoZS9TdXNwZW5zZUNhY2hlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBaUM7QUFTMEI7QUFDRTtBQWlCdkQsTUFBTyxhQUFhO0lBVXhCLFdBQVcsQ0FJVCxRQUFrQixFQUFFLGdCQUE4QztRQUNsRSxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBRTlDLENBQUM7UUFFRixJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ2pCLEdBQUcsQ0FBQyxPQUFPLEdBQUcsSUFBSSxzRUFBc0IsQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFO2dCQUMzRCxvQkFBb0IsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLG9CQUFvQjtnQkFDdkQsU0FBUyxFQUFFLEdBQUcsRUFBRTtvQkFDZCxPQUFPLEdBQUcsQ0FBQyxPQUFPLENBQUM7Z0JBQ3JCLENBQUM7YUFDRixDQUFDLENBQUM7UUFDTCxDQUFDO1FBRUQsT0FBTyxHQUFHLENBQUMsT0FBTyxDQUFDO0lBQ3JCLENBQUM7SUFFRCxjQUFjLENBQ1osUUFBMEIsRUFDMUIsTUFBb0IsRUFDcEIsT0FFQztRQUVELE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FFakQsQ0FBQztRQUVGLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDakIsR0FBRyxDQUFDLE9BQU8sR0FBRyxJQUFJLG9FQUFpQixDQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUU7Z0JBQ25ELG9CQUFvQixFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsb0JBQW9CO2dCQUN2RCxTQUFTLEVBQUUsR0FBRyxFQUFFO29CQUNkLE9BQU8sR0FBRyxDQUFDLE9BQU8sQ0FBQztnQkFDckIsQ0FBQzthQUNGLENBQUMsQ0FBQztRQUNMLENBQUM7UUFFRCxPQUFPLEdBQUcsQ0FBQyxPQUFPLENBQUM7SUFDckIsQ0FBQztJQUVELEdBQUcsQ0FBQyxRQUFrQixFQUFFLFFBQTBDO1FBQ2hFLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2pELEdBQUcsQ0FBQyxPQUFPLEdBQUcsUUFBUSxDQUFDO0lBQ3pCLENBQUM7SUFuREQsWUFBWSxVQUFnQyxFQUFFO2FBTHRDLFNBQVMsR0FBRyxJQUFJLDJDQUFJLEVBQXdDLENBQUM7YUFDN0QsWUFBWSxHQUFHLElBQUksMkNBQUksRUFBbUMsQ0FBQztRQUtqRSxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztJQUN6QixDQUFDO0NBa0RGIiwic291cmNlcyI6WyIvaG9tZS91L3NyYy9yZWFjdC9pbnRlcm5hbC9jYWNoZS9TdXNwZW5zZUNhY2hlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRyaWUgfSBmcm9tIFwiQHdyeS90cmllXCI7XG5cbmltcG9ydCB0eXBlIHtcbiAgQXBvbGxvQ2xpZW50LFxuICBEYXRhU3RhdGUsXG4gIE9ic2VydmFibGVRdWVyeSxcbiAgT3BlcmF0aW9uVmFyaWFibGVzLFxufSBmcm9tIFwiQGFwb2xsby9jbGllbnRcIjtcblxuaW1wb3J0IHsgRnJhZ21lbnRSZWZlcmVuY2UgfSBmcm9tIFwiLi9GcmFnbWVudFJlZmVyZW5jZS5qc1wiO1xuaW1wb3J0IHsgSW50ZXJuYWxRdWVyeVJlZmVyZW5jZSB9IGZyb20gXCIuL1F1ZXJ5UmVmZXJlbmNlLmpzXCI7XG5pbXBvcnQgdHlwZSB7IENhY2hlS2V5LCBGcmFnbWVudENhY2hlS2V5IH0gZnJvbSBcIi4vdHlwZXMuanNcIjtcblxuZXhwb3J0IGludGVyZmFjZSBTdXNwZW5zZUNhY2hlT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgdGhlIGFtb3VudCBvZiB0aW1lLCBpbiBtaWxsaXNlY29uZHMsIHRoZSBzdXNwZW5zZSBjYWNoZSB3aWxsIHdhaXRcbiAgICogZm9yIGEgc3VzcGVuZGVkIGNvbXBvbmVudCB0byByZWFkIGZyb20gdGhlIHN1c3BlbnNlIGNhY2hlIGJlZm9yZSBpdFxuICAgKiBhdXRvbWF0aWNhbGx5IGRpc3Bvc2VzIG9mIHRoZSBxdWVyeS4gVGhpcyBwcmV2ZW50cyBtZW1vcnkgbGVha3Mgd2hlbiBhXG4gICAqIGNvbXBvbmVudCB1bm1vdW50cyBiZWZvcmUgYSBzdXNwZW5kZWQgcmVzb3VyY2UgZmluaXNoZXMgbG9hZGluZy4gSW5jcmVhc2VcbiAgICogdGhlIHRpbWVvdXQgaWYgeW91ciBxdWVyaWVzIHRha2UgbG9uZ2VyIHRoYW4gdGhhbiB0aGUgc3BlY2lmaWVkIHRpbWUgdG9cbiAgICogcHJldmVudCB5b3VyIHF1ZXJpZXMgZnJvbSBzdXNwZW5kaW5nIG92ZXIgYW5kIG92ZXIuXG4gICAqXG4gICAqIERlZmF1bHRzIHRvIDMwIHNlY29uZHMuXG4gICAqL1xuICBhdXRvRGlzcG9zZVRpbWVvdXRNcz86IG51bWJlcjtcbn1cblxuZXhwb3J0IGNsYXNzIFN1c3BlbnNlQ2FjaGUge1xuICBwcml2YXRlIHF1ZXJ5UmVmcyA9IG5ldyBUcmllPHsgY3VycmVudD86IEludGVybmFsUXVlcnlSZWZlcmVuY2UgfT4oKTtcbiAgcHJpdmF0ZSBmcmFnbWVudFJlZnMgPSBuZXcgVHJpZTx7IGN1cnJlbnQ/OiBGcmFnbWVudFJlZmVyZW5jZSB9PigpO1xuXG4gIHByaXZhdGUgb3B0aW9uczogU3VzcGVuc2VDYWNoZU9wdGlvbnM7XG5cbiAgY29uc3RydWN0b3Iob3B0aW9uczogU3VzcGVuc2VDYWNoZU9wdGlvbnMgPSB7fSkge1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gIH1cblxuICBnZXRRdWVyeVJlZjxcbiAgICBURGF0YSA9IHVua25vd24sXG4gICAgVFN0YXRlcyBleHRlbmRzXG4gICAgICBEYXRhU3RhdGU8VERhdGE+W1wiZGF0YVN0YXRlXCJdID0gRGF0YVN0YXRlPFREYXRhPltcImRhdGFTdGF0ZVwiXSxcbiAgPihjYWNoZUtleTogQ2FjaGVLZXksIGNyZWF0ZU9ic2VydmFibGU6ICgpID0+IE9ic2VydmFibGVRdWVyeTxURGF0YT4pIHtcbiAgICBjb25zdCByZWYgPSB0aGlzLnF1ZXJ5UmVmcy5sb29rdXBBcnJheShjYWNoZUtleSkgYXMge1xuICAgICAgY3VycmVudD86IEludGVybmFsUXVlcnlSZWZlcmVuY2U8VERhdGEsIFRTdGF0ZXM+O1xuICAgIH07XG5cbiAgICBpZiAoIXJlZi5jdXJyZW50KSB7XG4gICAgICByZWYuY3VycmVudCA9IG5ldyBJbnRlcm5hbFF1ZXJ5UmVmZXJlbmNlKGNyZWF0ZU9ic2VydmFibGUoKSwge1xuICAgICAgICBhdXRvRGlzcG9zZVRpbWVvdXRNczogdGhpcy5vcHRpb25zLmF1dG9EaXNwb3NlVGltZW91dE1zLFxuICAgICAgICBvbkRpc3Bvc2U6ICgpID0+IHtcbiAgICAgICAgICBkZWxldGUgcmVmLmN1cnJlbnQ7XG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVmLmN1cnJlbnQ7XG4gIH1cblxuICBnZXRGcmFnbWVudFJlZjxURGF0YSwgVFZhcmlhYmxlcyBleHRlbmRzIE9wZXJhdGlvblZhcmlhYmxlcz4oXG4gICAgY2FjaGVLZXk6IEZyYWdtZW50Q2FjaGVLZXksXG4gICAgY2xpZW50OiBBcG9sbG9DbGllbnQsXG4gICAgb3B0aW9uczogQXBvbGxvQ2xpZW50LldhdGNoRnJhZ21lbnRPcHRpb25zPFREYXRhLCBUVmFyaWFibGVzPiAmIHtcbiAgICAgIGZyb206IHN0cmluZztcbiAgICB9XG4gICkge1xuICAgIGNvbnN0IHJlZiA9IHRoaXMuZnJhZ21lbnRSZWZzLmxvb2t1cEFycmF5KGNhY2hlS2V5KSBhcyB7XG4gICAgICBjdXJyZW50PzogRnJhZ21lbnRSZWZlcmVuY2U8VERhdGEsIFRWYXJpYWJsZXM+O1xuICAgIH07XG5cbiAgICBpZiAoIXJlZi5jdXJyZW50KSB7XG4gICAgICByZWYuY3VycmVudCA9IG5ldyBGcmFnbWVudFJlZmVyZW5jZShjbGllbnQsIG9wdGlvbnMsIHtcbiAgICAgICAgYXV0b0Rpc3Bvc2VUaW1lb3V0TXM6IHRoaXMub3B0aW9ucy5hdXRvRGlzcG9zZVRpbWVvdXRNcyxcbiAgICAgICAgb25EaXNwb3NlOiAoKSA9PiB7XG4gICAgICAgICAgZGVsZXRlIHJlZi5jdXJyZW50O1xuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlZi5jdXJyZW50O1xuICB9XG5cbiAgYWRkKGNhY2hlS2V5OiBDYWNoZUtleSwgcXVlcnlSZWY6IEludGVybmFsUXVlcnlSZWZlcmVuY2U8YW55LCBhbnk+KSB7XG4gICAgY29uc3QgcmVmID0gdGhpcy5xdWVyeVJlZnMubG9va3VwQXJyYXkoY2FjaGVLZXkpO1xuICAgIHJlZi5jdXJyZW50ID0gcXVlcnlSZWY7XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/react/internal/cache/SuspenseCache.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/react/internal/cache/getSuspenseCache.js":
/*!******************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/react/internal/cache/getSuspenseCache.js ***!
  \******************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getSuspenseCache: () => (/* binding */ getSuspenseCache)\n/* harmony export */ });\n/* harmony import */ var _SuspenseCache_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SuspenseCache.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/react/internal/cache/SuspenseCache.js\");\n\nconst suspenseCacheSymbol = Symbol.for(\"apollo.suspenseCache\");\nfunction getSuspenseCache(client) {\n    if (!client[suspenseCacheSymbol]) {\n        var _client_defaultOptions_react;\n        client[suspenseCacheSymbol] = new _SuspenseCache_js__WEBPACK_IMPORTED_MODULE_0__.SuspenseCache((_client_defaultOptions_react = client.defaultOptions.react) === null || _client_defaultOptions_react === void 0 ? void 0 : _client_defaultOptions_react.suspense);\n    }\n    return client[suspenseCacheSymbol];\n} //# sourceMappingURL=getSuspenseCache.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9yZWFjdC9pbnRlcm5hbC9jYWNoZS9nZXRTdXNwZW5zZUNhY2hlLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBR21EO0FBWW5ELE1BQU0sbUJBQW1CLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0FBRXpELFNBQVUsZ0JBQWdCLENBQzlCLE1BRUM7SUFFRCxJQUFJLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLEVBQUUsQ0FBQzs7UUFDakMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLEdBQUcsSUFBSSw0REFBYSx3Q0FDdEMsY0FBYyxDQUFDLEtBQUssaUVBQTNCLE1BQU0sdUJBQXVCLFFBQVEsQ0FDdEMsQ0FBQztJQUNKLENBQUM7SUFFRCxPQUFPLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0FBQ3JDLENBQUMiLCJzb3VyY2VzIjpbIi9ob21lL3Uvc3JjL3JlYWN0L2ludGVybmFsL2NhY2hlL2dldFN1c3BlbnNlQ2FjaGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBBcG9sbG9DbGllbnQgfSBmcm9tIFwiQGFwb2xsby9jbGllbnRcIjtcbmltcG9ydCB0eXBlIHsgU3VzcGVuc2VDYWNoZU9wdGlvbnMgfSBmcm9tIFwiQGFwb2xsby9jbGllbnQvcmVhY3QvaW50ZXJuYWxcIjtcblxuaW1wb3J0IHsgU3VzcGVuc2VDYWNoZSB9IGZyb20gXCIuL1N1c3BlbnNlQ2FjaGUuanNcIjtcblxuZGVjbGFyZSBtb2R1bGUgXCJAYXBvbGxvL2NsaWVudFwiIHtcbiAgbmFtZXNwYWNlIEFwb2xsb0NsaWVudCB7XG4gICAgaW50ZXJmYWNlIERlZmF1bHRPcHRpb25zIHtcbiAgICAgIHJlYWN0Pzoge1xuICAgICAgICBzdXNwZW5zZT86IFJlYWRvbmx5PFN1c3BlbnNlQ2FjaGVPcHRpb25zPjtcbiAgICAgIH07XG4gICAgfVxuICB9XG59XG5cbmNvbnN0IHN1c3BlbnNlQ2FjaGVTeW1ib2wgPSBTeW1ib2wuZm9yKFwiYXBvbGxvLnN1c3BlbnNlQ2FjaGVcIik7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTdXNwZW5zZUNhY2hlKFxuICBjbGllbnQ6IEFwb2xsb0NsaWVudCAmIHtcbiAgICBbc3VzcGVuc2VDYWNoZVN5bWJvbF0/OiBTdXNwZW5zZUNhY2hlO1xuICB9XG4pIHtcbiAgaWYgKCFjbGllbnRbc3VzcGVuc2VDYWNoZVN5bWJvbF0pIHtcbiAgICBjbGllbnRbc3VzcGVuc2VDYWNoZVN5bWJvbF0gPSBuZXcgU3VzcGVuc2VDYWNoZShcbiAgICAgIGNsaWVudC5kZWZhdWx0T3B0aW9ucy5yZWFjdD8uc3VzcGVuc2VcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIGNsaWVudFtzdXNwZW5zZUNhY2hlU3ltYm9sXTtcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/react/internal/cache/getSuspenseCache.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/react/internal/index.js":
/*!*************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/react/internal/index.js ***!
  \*************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InternalQueryReference: () => (/* reexport safe */ _cache_QueryReference_js__WEBPACK_IMPORTED_MODULE_1__.InternalQueryReference),\n/* harmony export */   assertWrappedQueryRef: () => (/* reexport safe */ _cache_QueryReference_js__WEBPACK_IMPORTED_MODULE_1__.assertWrappedQueryRef),\n/* harmony export */   getSuspenseCache: () => (/* reexport safe */ _cache_getSuspenseCache_js__WEBPACK_IMPORTED_MODULE_0__.getSuspenseCache),\n/* harmony export */   getWrappedPromise: () => (/* reexport safe */ _cache_QueryReference_js__WEBPACK_IMPORTED_MODULE_1__.getWrappedPromise),\n/* harmony export */   unwrapQueryRef: () => (/* reexport safe */ _cache_QueryReference_js__WEBPACK_IMPORTED_MODULE_1__.unwrapQueryRef),\n/* harmony export */   updateWrappedQueryRef: () => (/* reexport safe */ _cache_QueryReference_js__WEBPACK_IMPORTED_MODULE_1__.updateWrappedQueryRef),\n/* harmony export */   wrapQueryRef: () => (/* reexport safe */ _cache_QueryReference_js__WEBPACK_IMPORTED_MODULE_1__.wrapQueryRef),\n/* harmony export */   wrapperSymbol: () => (/* binding */ wrapperSymbol)\n/* harmony export */ });\n/* harmony import */ var _cache_getSuspenseCache_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cache/getSuspenseCache.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/react/internal/cache/getSuspenseCache.js\");\n/* harmony import */ var _cache_QueryReference_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cache/QueryReference.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/react/internal/cache/QueryReference.js\");\n\n\nconst wrapperSymbol = Symbol.for(\"apollo.hook.wrappers\"); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9yZWFjdC9pbnRlcm5hbC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQytEO0FBVTVCO0FBRzVCLE1BQU0sYUFBYSxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsc0JBQXNCLENBQUMsQ0FBQyIsInNvdXJjZXMiOlsiL2hvbWUvdS9Qcm9qZWN0cy9zcmMvcmVhY3QvaW50ZXJuYWwvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBJbnRlcm5hbFR5cGVzIGFzIFJlYWN0SW50ZXJuYWxUeXBlcyB9IGZyb20gXCJAYXBvbGxvL2NsaWVudC9yZWFjdFwiO1xuZXhwb3J0IHsgZ2V0U3VzcGVuc2VDYWNoZSB9IGZyb20gXCIuL2NhY2hlL2dldFN1c3BlbnNlQ2FjaGUuanNcIjtcbmV4cG9ydCB0eXBlIHsgQ2FjaGVLZXksIEZyYWdtZW50S2V5LCBRdWVyeUtleSB9IGZyb20gXCIuL2NhY2hlL3R5cGVzLmpzXCI7XG5leHBvcnQgdHlwZSB7IFByZWxvYWRlZFF1ZXJ5UmVmLCBRdWVyeVJlZiB9IGZyb20gXCIuL2NhY2hlL1F1ZXJ5UmVmZXJlbmNlLmpzXCI7XG5leHBvcnQge1xuICBhc3NlcnRXcmFwcGVkUXVlcnlSZWYsXG4gIGdldFdyYXBwZWRQcm9taXNlLFxuICBJbnRlcm5hbFF1ZXJ5UmVmZXJlbmNlLFxuICB1bndyYXBRdWVyeVJlZixcbiAgdXBkYXRlV3JhcHBlZFF1ZXJ5UmVmLFxuICB3cmFwUXVlcnlSZWYsXG59IGZyb20gXCIuL2NhY2hlL1F1ZXJ5UmVmZXJlbmNlLmpzXCI7XG5leHBvcnQgdHlwZSB7IFN1c3BlbnNlQ2FjaGVPcHRpb25zIH0gZnJvbSBcIi4vY2FjaGUvU3VzcGVuc2VDYWNoZS5qc1wiO1xuZXhwb3J0IHR5cGUgSG9va1dyYXBwZXJzID0gUmVhY3RJbnRlcm5hbFR5cGVzLkhvb2tXcmFwcGVycztcbmV4cG9ydCBjb25zdCB3cmFwcGVyU3ltYm9sID0gU3ltYm9sLmZvcihcImFwb2xsby5ob29rLndyYXBwZXJzXCIpO1xuZXhwb3J0IHR5cGUgeyBGZXRjaE1vcmVGdW5jdGlvbiwgUmVmZXRjaEZ1bmN0aW9uIH0gZnJvbSBcIi4vdHlwZXMuanNcIjtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/react/internal/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/caching/sizes.js":
/*!****************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/caching/sizes.js ***!
  \****************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cacheSizes: () => (/* binding */ cacheSizes)\n/* harmony export */ });\n/* harmony import */ var _apollo_client_utilities_internal_globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @apollo/client/utilities/internal/globals */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/globals/global.js\");\n\nconst cacheSizeSymbol = Symbol.for(\"apollo.cacheSize\");\n/**\n * The global cache size configuration for Apollo Client.\n *\n * @remarks\n *\n * You can directly modify this object, but any modification will\n * only have an effect on caches that are created after the modification.\n *\n * So for global caches, such as `canonicalStringify` and `print`,\n * you might need to call `.reset` on them, which will essentially re-create them.\n *\n * Alternatively, you can set `globalThis[Symbol.for(\"apollo.cacheSize\")]` before\n * you load the Apollo Client package:\n *\n * @example\n *\n * ```ts\n * globalThis[Symbol.for(\"apollo.cacheSize\")] = {\n *   print: 100,\n * } satisfies Partial<CacheSizes>; // the `satisfies` is optional if using TypeScript\n * ```\n */ const cacheSizes = {\n    ..._apollo_client_utilities_internal_globals__WEBPACK_IMPORTED_MODULE_0__[\"default\"][cacheSizeSymbol]\n}; //# sourceMappingURL=sizes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/caching/sizes.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/environment/index.development.js":
/*!********************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/environment/index.development.js ***!
  \********************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __DEV__: () => (/* binding */ __DEV__)\n/* harmony export */ });\nconst __DEV__ = true; //# sourceMappingURL=index.development.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvZW52aXJvbm1lbnQvaW5kZXguZGV2ZWxvcG1lbnQuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLE1BQU0sT0FBTyxHQUFHLElBQWUsQ0FBQyIsInNvdXJjZXMiOlsiL2hvbWUvdS9Qcm9qZWN0cy9zcmMvdXRpbGl0aWVzL2Vudmlyb25tZW50L2luZGV4LmRldmVsb3BtZW50LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBfX0RFVl9fID0gdHJ1ZSBhcyBib29sZWFuO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/environment/index.development.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/graphql/DocumentTransform.js":
/*!****************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/graphql/DocumentTransform.js ***!
  \****************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DocumentTransform: () => (/* binding */ DocumentTransform)\n/* harmony export */ });\n/* harmony import */ var _wry_caches__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @wry/caches */ \"(app-pages-browser)/../../node_modules/.pnpm/@wry+caches@1.0.1/node_modules/@wry/caches/lib/weak.js\");\n/* harmony import */ var _wry_trie__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wry/trie */ \"(app-pages-browser)/../../node_modules/.pnpm/@wry+trie@0.5.0/node_modules/@wry/trie/lib/index.js\");\n/* harmony import */ var optimism__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! optimism */ \"(app-pages-browser)/../../node_modules/.pnpm/optimism@0.18.1/node_modules/optimism/lib/index.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/checkDocument.js\");\n/* harmony import */ var _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @apollo/client/utilities/invariant */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/invariant/index.development.js\");\n/* harmony import */ var _caching_sizes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../caching/sizes.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/caching/sizes.js\");\n\n\n\n\n\n\nfunction identity(document) {\n    return document;\n}\n/**\n * A class for transforming GraphQL documents. See the [Document transforms\n * documentation](https://www.apollographql.com/docs/react/data/document-transforms) for more details on using them.\n *\n * @example\n *\n * ```ts\n * import { DocumentTransform } from \"@apollo/client/utilities\";\n * import { visit } from \"graphql\";\n *\n * const documentTransform = new DocumentTransform((doc) => {\n *   return visit(doc, {\n *     // ...\n *   });\n * });\n *\n * const transformedDoc = documentTransform.transformDocument(myDocument);\n * ```\n */ class DocumentTransform {\n    // This default implementation of getCacheKey can be overridden by providing\n    // options.getCacheKey to the DocumentTransform constructor. In general, a\n    // getCacheKey function may either return an array of keys (often including\n    // the document) to be used as a cache key, or undefined to indicate the\n    // transform for this document should not be cached.\n    getCacheKey(document) {\n        return [\n            document\n        ];\n    }\n    /**\n     * Creates a DocumentTransform that returns the input document unchanged.\n     *\n     * @returns The input document\n     */ static identity() {\n        // No need to cache this transform since it just returns the document\n        // unchanged. This should save a bit of memory that would otherwise be\n        // needed to populate the `documentCache` of this transform.\n        return new DocumentTransform(identity, {\n            cache: false\n        });\n    }\n    /**\n     * Creates a DocumentTransform that conditionally applies one of two transforms.\n     *\n     * @param predicate - Function that determines which transform to apply\n     * @param left - Transform to apply when `predicate` returns `true`\n     * @param right - Transform to apply when `predicate` returns `false`. If not provided, it defaults to `DocumentTransform.identity()`.\n     * @returns A DocumentTransform that conditionally applies a document transform based on the predicate\n     *\n     * @example\n     *\n     * ```ts\n     * import { isQueryOperation } from \"@apollo/client/utilities\";\n     *\n     * const conditionalTransform = DocumentTransform.split(\n     *   (document) => isQueryOperation(document),\n     *   queryTransform,\n     *   mutationTransform\n     * );\n     * ```\n     */ static split(predicate, left) {\n        let right = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : DocumentTransform.identity();\n        return Object.assign(new DocumentTransform((document)=>{\n            const documentTransform = predicate(document) ? left : right;\n            return documentTransform.transformDocument(document);\n        }, // Reasonably assume both `left` and `right` transforms handle their own caching\n        {\n            cache: false\n        }), {\n            left,\n            right\n        });\n    }\n    /**\n     * Resets the internal cache of this transform, if it is cached.\n     */ resetCache() {\n        if (this.cached) {\n            const stableCacheKeys = new _wry_trie__WEBPACK_IMPORTED_MODULE_0__.Trie();\n            this.performWork = (0,optimism__WEBPACK_IMPORTED_MODULE_1__.wrap)(DocumentTransform.prototype.performWork.bind(this), {\n                makeCacheKey: (document)=>{\n                    const cacheKeys = this.getCacheKey(document);\n                    if (cacheKeys) {\n                        (0,_apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(Array.isArray(cacheKeys), 20);\n                        return stableCacheKeys.lookupArray(cacheKeys);\n                    }\n                },\n                max: _caching_sizes_js__WEBPACK_IMPORTED_MODULE_3__.cacheSizes[\"documentTransform.cache\"],\n                cache: _wry_caches__WEBPACK_IMPORTED_MODULE_4__.WeakCache\n            });\n        }\n    }\n    performWork(document) {\n        (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_5__.checkDocument)(document);\n        return this.transform(document);\n    }\n    /**\n     * Transforms a GraphQL document using the configured transform function.\n     *\n     * @remarks\n     *\n     * Note that `transformDocument` caches the transformed document. Calling\n     * `transformDocument` again with the already-transformed document will\n     * immediately return it.\n     *\n     * @param document - The GraphQL document to transform\n     * @returns The transformed document\n     *\n     * @example\n     *\n     * ```ts\n     * const document = gql`\n     *   # ...\n     * `;\n     *\n     * const documentTransform = new DocumentTransform(transformFn);\n     * const transformedDocument = documentTransform.transformDocument(document);\n     * ```\n     */ transformDocument(document) {\n        // If a user passes an already transformed result back to this function,\n        // immediately return it.\n        if (this.resultCache.has(document)) {\n            return document;\n        }\n        const transformedDocument = this.performWork(document);\n        this.resultCache.add(transformedDocument);\n        return transformedDocument;\n    }\n    /**\n     * Combines this document transform with another document transform. The\n     * returned document transform first applies the current document transform,\n     * then applies the other document transform.\n     *\n     * @param otherTransform - The transform to apply after this one\n     * @returns A new DocumentTransform that applies both transforms in sequence\n     *\n     * @example\n     *\n     * ```ts\n     * const combinedTransform = addTypenameTransform.concat(\n     *   removeDirectivesTransform\n     * );\n     * ```\n     */ concat(otherTransform) {\n        return Object.assign(new DocumentTransform((document)=>{\n            return otherTransform.transformDocument(this.transformDocument(document));\n        }, // Reasonably assume both transforms handle their own caching\n        {\n            cache: false\n        }), {\n            left: this,\n            right: otherTransform\n        });\n    }\n    constructor(transform, options = {}){\n        this.resultCache = new WeakSet();\n        this.transform = transform;\n        if (options.getCacheKey) {\n            // Override default `getCacheKey` function, which returns [document].\n            this.getCacheKey = options.getCacheKey;\n        }\n        this.cached = options.cache !== false;\n        this.resetCache();\n    }\n} //# sourceMappingURL=DocumentTransform.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/graphql/DocumentTransform.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/graphql/operations.js":
/*!*********************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/graphql/operations.js ***!
  \*********************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isMutationOperation: () => (/* binding */ isMutationOperation),\n/* harmony export */   isQueryOperation: () => (/* binding */ isQueryOperation),\n/* harmony export */   isSubscriptionOperation: () => (/* binding */ isSubscriptionOperation)\n/* harmony export */ });\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getOperationDefinition.js\");\n\nfunction isOperation(document, operation) {\n    var _getOperationDefinition;\n    return ((_getOperationDefinition = (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_0__.getOperationDefinition)(document)) === null || _getOperationDefinition === void 0 ? void 0 : _getOperationDefinition.operation) === operation;\n}\n/**\n * Determine if a document is a mutation document.\n *\n * @remarks\n * If you are authoring an Apollo link, you might not need this utility.\n * Prefer using the `operationType` property the `operation` object instead.\n *\n * @param document - The GraphQL document to check\n * @returns A boolean indicating if the document is a mutation operation\n *\n * @example\n *\n * ```ts\n * import { isMutationOperation } from \"@apollo/client/utilities\";\n *\n * const mutation = gql`\n *   mutation MyMutation {\n *     # ...\n *   }\n * `;\n *\n * isMutationOperation(mutation); // true\n * ```\n */ function isMutationOperation(document) {\n    return isOperation(document, \"mutation\");\n}\n/**\n * Determine if a document is a query document.\n *\n * @remarks\n * If you are authoring an Apollo link, you might not need this utility.\n * Prefer using the `operationType` property the `operation` object instead.\n *\n * @param document - The GraphQL document to check\n * @returns A boolean indicating if the document is a query operation\n *\n * @example\n *\n * ```ts\n * import { isQueryOperation } from \"@apollo/client/utilities\";\n *\n * const query = gql`\n *   query MyQuery {\n *     # ...\n *   }\n * `;\n *\n * isQueryOperation(query); // true\n * ```\n */ function isQueryOperation(document) {\n    return isOperation(document, \"query\");\n}\n/**\n * Determine if a document is a subscription document.\n *\n * @remarks\n * If you are authoring an Apollo link, you might not need this utility.\n * Prefer using the `operationType` property the `operation` object instead.\n *\n * @param document - The GraphQL document to check\n * @returns A boolean indicating if the document is a subscription operation\n *\n * @example\n *\n * ```ts\n * import { isSubscriptionOperation } from \"@apollo/client/utilities\";\n *\n * const subscription = gql`\n *   subscription MySubscription {\n *     # ...\n *   }\n * `;\n *\n * isSubscriptionOperation(subscription); // true\n * ```\n */ function isSubscriptionOperation(document) {\n    return isOperation(document, \"subscription\");\n} //# sourceMappingURL=operations.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvZ3JhcGhxbC9vcGVyYXRpb25zLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFDMkU7QUFFM0UsU0FBUyxXQUFXLENBQ2xCLFFBQXNCLEVBQ3RCLFNBQWdEOztJQUVoRCw2SEFBOEIsUUFBUSxDQUFDLDREQUFoQyxzQkFBc0IsRUFBWSxTQUFTLE1BQUssU0FBUyxDQUFDO0FBQ25FLENBQUM7QUFFRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0F1QkcsQ0FDRyxTQUFVLG1CQUFtQixDQUFDLFFBQXNCO0lBQ3hELE9BQU8sV0FBVyxDQUFDLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUMzQyxDQUFDO0FBRUQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBdUJHLENBQ0csU0FBVSxnQkFBZ0IsQ0FBQyxRQUFzQjtJQUNyRCxPQUFPLFdBQVcsQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDeEMsQ0FBQztBQUVEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXVCRyxDQUNHLFNBQVUsdUJBQXVCLENBQUMsUUFBc0I7SUFDNUQsT0FBTyxXQUFXLENBQUMsUUFBUSxFQUFFLGNBQWMsQ0FBQyxDQUFDO0FBQy9DLENBQUMiLCJzb3VyY2VzIjpbIi9ob21lL3UvUHJvamVjdHMvc3JjL3V0aWxpdGllcy9ncmFwaHFsL29wZXJhdGlvbnMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBEb2N1bWVudE5vZGUgfSBmcm9tIFwiQGFwb2xsby9jbGllbnRcIjtcbmltcG9ydCB7IGdldE9wZXJhdGlvbkRlZmluaXRpb24gfSBmcm9tIFwiQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2ludGVybmFsXCI7XG5cbmZ1bmN0aW9uIGlzT3BlcmF0aW9uKFxuICBkb2N1bWVudDogRG9jdW1lbnROb2RlLFxuICBvcGVyYXRpb246IFwicXVlcnlcIiB8IFwibXV0YXRpb25cIiB8IFwic3Vic2NyaXB0aW9uXCJcbikge1xuICByZXR1cm4gZ2V0T3BlcmF0aW9uRGVmaW5pdGlvbihkb2N1bWVudCk/Lm9wZXJhdGlvbiA9PT0gb3BlcmF0aW9uO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIGRvY3VtZW50IGlzIGEgbXV0YXRpb24gZG9jdW1lbnQuXG4gKlxuICogQHJlbWFya3NcbiAqIElmIHlvdSBhcmUgYXV0aG9yaW5nIGFuIEFwb2xsbyBsaW5rLCB5b3UgbWlnaHQgbm90IG5lZWQgdGhpcyB1dGlsaXR5LlxuICogUHJlZmVyIHVzaW5nIHRoZSBgb3BlcmF0aW9uVHlwZWAgcHJvcGVydHkgdGhlIGBvcGVyYXRpb25gIG9iamVjdCBpbnN0ZWFkLlxuICpcbiAqIEBwYXJhbSBkb2N1bWVudCAtIFRoZSBHcmFwaFFMIGRvY3VtZW50IHRvIGNoZWNrXG4gKiBAcmV0dXJucyBBIGJvb2xlYW4gaW5kaWNhdGluZyBpZiB0aGUgZG9jdW1lbnQgaXMgYSBtdXRhdGlvbiBvcGVyYXRpb25cbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIGBgYHRzXG4gKiBpbXBvcnQgeyBpc011dGF0aW9uT3BlcmF0aW9uIH0gZnJvbSBcIkBhcG9sbG8vY2xpZW50L3V0aWxpdGllc1wiO1xuICpcbiAqIGNvbnN0IG11dGF0aW9uID0gZ3FsYFxuICogICBtdXRhdGlvbiBNeU11dGF0aW9uIHtcbiAqICAgICAjIC4uLlxuICogICB9XG4gKiBgO1xuICpcbiAqIGlzTXV0YXRpb25PcGVyYXRpb24obXV0YXRpb24pOyAvLyB0cnVlXG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzTXV0YXRpb25PcGVyYXRpb24oZG9jdW1lbnQ6IERvY3VtZW50Tm9kZSkge1xuICByZXR1cm4gaXNPcGVyYXRpb24oZG9jdW1lbnQsIFwibXV0YXRpb25cIik7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgZG9jdW1lbnQgaXMgYSBxdWVyeSBkb2N1bWVudC5cbiAqXG4gKiBAcmVtYXJrc1xuICogSWYgeW91IGFyZSBhdXRob3JpbmcgYW4gQXBvbGxvIGxpbmssIHlvdSBtaWdodCBub3QgbmVlZCB0aGlzIHV0aWxpdHkuXG4gKiBQcmVmZXIgdXNpbmcgdGhlIGBvcGVyYXRpb25UeXBlYCBwcm9wZXJ0eSB0aGUgYG9wZXJhdGlvbmAgb2JqZWN0IGluc3RlYWQuXG4gKlxuICogQHBhcmFtIGRvY3VtZW50IC0gVGhlIEdyYXBoUUwgZG9jdW1lbnQgdG8gY2hlY2tcbiAqIEByZXR1cm5zIEEgYm9vbGVhbiBpbmRpY2F0aW5nIGlmIHRoZSBkb2N1bWVudCBpcyBhIHF1ZXJ5IG9wZXJhdGlvblxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogYGBgdHNcbiAqIGltcG9ydCB7IGlzUXVlcnlPcGVyYXRpb24gfSBmcm9tIFwiQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzXCI7XG4gKlxuICogY29uc3QgcXVlcnkgPSBncWxgXG4gKiAgIHF1ZXJ5IE15UXVlcnkge1xuICogICAgICMgLi4uXG4gKiAgIH1cbiAqIGA7XG4gKlxuICogaXNRdWVyeU9wZXJhdGlvbihxdWVyeSk7IC8vIHRydWVcbiAqIGBgYFxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNRdWVyeU9wZXJhdGlvbihkb2N1bWVudDogRG9jdW1lbnROb2RlKSB7XG4gIHJldHVybiBpc09wZXJhdGlvbihkb2N1bWVudCwgXCJxdWVyeVwiKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSBkb2N1bWVudCBpcyBhIHN1YnNjcmlwdGlvbiBkb2N1bWVudC5cbiAqXG4gKiBAcmVtYXJrc1xuICogSWYgeW91IGFyZSBhdXRob3JpbmcgYW4gQXBvbGxvIGxpbmssIHlvdSBtaWdodCBub3QgbmVlZCB0aGlzIHV0aWxpdHkuXG4gKiBQcmVmZXIgdXNpbmcgdGhlIGBvcGVyYXRpb25UeXBlYCBwcm9wZXJ0eSB0aGUgYG9wZXJhdGlvbmAgb2JqZWN0IGluc3RlYWQuXG4gKlxuICogQHBhcmFtIGRvY3VtZW50IC0gVGhlIEdyYXBoUUwgZG9jdW1lbnQgdG8gY2hlY2tcbiAqIEByZXR1cm5zIEEgYm9vbGVhbiBpbmRpY2F0aW5nIGlmIHRoZSBkb2N1bWVudCBpcyBhIHN1YnNjcmlwdGlvbiBvcGVyYXRpb25cbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIGBgYHRzXG4gKiBpbXBvcnQgeyBpc1N1YnNjcmlwdGlvbk9wZXJhdGlvbiB9IGZyb20gXCJAYXBvbGxvL2NsaWVudC91dGlsaXRpZXNcIjtcbiAqXG4gKiBjb25zdCBzdWJzY3JpcHRpb24gPSBncWxgXG4gKiAgIHN1YnNjcmlwdGlvbiBNeVN1YnNjcmlwdGlvbiB7XG4gKiAgICAgIyAuLi5cbiAqICAgfVxuICogYDtcbiAqXG4gKiBpc1N1YnNjcmlwdGlvbk9wZXJhdGlvbihzdWJzY3JpcHRpb24pOyAvLyB0cnVlXG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzU3Vic2NyaXB0aW9uT3BlcmF0aW9uKGRvY3VtZW50OiBEb2N1bWVudE5vZGUpIHtcbiAgcmV0dXJuIGlzT3BlcmF0aW9uKGRvY3VtZW50LCBcInN1YnNjcmlwdGlvblwiKTtcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/graphql/operations.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/graphql/print.js":
/*!****************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/graphql/print.js ***!
  \****************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   print: () => (/* binding */ print)\n/* harmony export */ });\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! graphql */ \"(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/printer.mjs\");\n/* harmony import */ var _apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @apollo/client/utilities/environment */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/environment/index.development.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/caches.js\");\n/* harmony import */ var _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @apollo/client/utilities/internal */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getMemoryInternals.js\");\n/* harmony import */ var _caching_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../caching/index.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/caching/sizes.js\");\n\n\n\n\nlet printCache;\n/**\n * Converts an AST into a string, using one set of reasonable\n * formatting rules.\n *\n * @remarks This is the same function as the GraphQL.js `print` function but\n * with an added cache to avoid recomputation when encountering the same\n * `ASTNode` more than once.\n */ const print = Object.assign((ast)=>{\n    let result = printCache.get(ast);\n    if (!result) {\n        result = (0,graphql__WEBPACK_IMPORTED_MODULE_0__.print)(ast);\n        printCache.set(ast, result);\n    }\n    return result;\n}, {\n    reset () {\n        printCache = new _apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_1__.AutoCleanedWeakCache(_caching_index_js__WEBPACK_IMPORTED_MODULE_2__.cacheSizes.print || 2000 /* defaultCacheSizes.print */ );\n    }\n});\nprint.reset();\nif (_apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_3__.__DEV__) {\n    (0,_apollo_client_utilities_internal__WEBPACK_IMPORTED_MODULE_4__.registerGlobalCache)(\"print\", ()=>printCache ? printCache.size : 0);\n} //# sourceMappingURL=print.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvZ3JhcGhxbC9wcmludC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFDNkM7QUFFa0I7QUFJcEI7QUFFeUI7QUFFcEUsSUFBSSxVQUFrRCxDQUFDO0FBRXZEOzs7Ozs7O0dBT0csQ0FDSSxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsTUFBTSxDQUNoQyxDQUFDLEdBQVksRUFBRSxFQUFFO0lBQ2YsSUFBSSxNQUFNLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVqQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDWixNQUFNLEdBQUcsOENBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN4QixVQUFVLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBQ0QsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQyxFQUNEO0lBQ0UsS0FBSztRQUNILFVBQVUsR0FBRyxJQUFJLG1GQUFvQixDQUNuQyx5REFBVSxDQUFDLEtBQUssc0NBQTJCLENBQzVDLENBQUM7SUFDSixDQUFDO0NBQ0YsQ0FDRixDQUFDO0FBQ0YsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO0FBRWQsSUFBSSx5RUFBTyxFQUFFLENBQUM7SUFDWixzRkFBbUIsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFJLENBQUYsQ0FBQyxRQUFXLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3hFLENBQUMiLCJzb3VyY2VzIjpbIi9ob21lL3UvUHJvamVjdHMvc3JjL3V0aWxpdGllcy9ncmFwaHFsL3ByaW50LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgQVNUTm9kZSB9IGZyb20gXCJncmFwaHFsXCI7XG5pbXBvcnQgeyBwcmludCBhcyBvcmlnUHJpbnQgfSBmcm9tIFwiZ3JhcGhxbFwiO1xuXG5pbXBvcnQgeyBfX0RFVl9fIH0gZnJvbSBcIkBhcG9sbG8vY2xpZW50L3V0aWxpdGllcy9lbnZpcm9ubWVudFwiO1xuaW1wb3J0IHtcbiAgQXV0b0NsZWFuZWRXZWFrQ2FjaGUsXG4gIHJlZ2lzdGVyR2xvYmFsQ2FjaGUsXG59IGZyb20gXCJAYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvaW50ZXJuYWxcIjtcblxuaW1wb3J0IHsgY2FjaGVTaXplcywgZGVmYXVsdENhY2hlU2l6ZXMgfSBmcm9tIFwiLi4vY2FjaGluZy9pbmRleC5qc1wiO1xuXG5sZXQgcHJpbnRDYWNoZSE6IEF1dG9DbGVhbmVkV2Vha0NhY2hlPEFTVE5vZGUsIHN0cmluZz47XG5cbi8qKlxuICogQ29udmVydHMgYW4gQVNUIGludG8gYSBzdHJpbmcsIHVzaW5nIG9uZSBzZXQgb2YgcmVhc29uYWJsZVxuICogZm9ybWF0dGluZyBydWxlcy5cbiAqXG4gKiBAcmVtYXJrcyBUaGlzIGlzIHRoZSBzYW1lIGZ1bmN0aW9uIGFzIHRoZSBHcmFwaFFMLmpzIGBwcmludGAgZnVuY3Rpb24gYnV0XG4gKiB3aXRoIGFuIGFkZGVkIGNhY2hlIHRvIGF2b2lkIHJlY29tcHV0YXRpb24gd2hlbiBlbmNvdW50ZXJpbmcgdGhlIHNhbWVcbiAqIGBBU1ROb2RlYCBtb3JlIHRoYW4gb25jZS5cbiAqL1xuZXhwb3J0IGNvbnN0IHByaW50ID0gT2JqZWN0LmFzc2lnbihcbiAgKGFzdDogQVNUTm9kZSkgPT4ge1xuICAgIGxldCByZXN1bHQgPSBwcmludENhY2hlLmdldChhc3QpO1xuXG4gICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgIHJlc3VsdCA9IG9yaWdQcmludChhc3QpO1xuICAgICAgcHJpbnRDYWNoZS5zZXQoYXN0LCByZXN1bHQpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9LFxuICB7XG4gICAgcmVzZXQoKSB7XG4gICAgICBwcmludENhY2hlID0gbmV3IEF1dG9DbGVhbmVkV2Vha0NhY2hlPEFTVE5vZGUsIHN0cmluZz4oXG4gICAgICAgIGNhY2hlU2l6ZXMucHJpbnQgfHwgZGVmYXVsdENhY2hlU2l6ZXMucHJpbnRcbiAgICAgICk7XG4gICAgfSxcbiAgfVxuKTtcbnByaW50LnJlc2V0KCk7XG5cbmlmIChfX0RFVl9fKSB7XG4gIHJlZ2lzdGVyR2xvYmFsQ2FjaGUoXCJwcmludFwiLCAoKSA9PiAocHJpbnRDYWNoZSA/IHByaW50Q2FjaGUuc2l6ZSA6IDApKTtcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/graphql/print.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/graphql/storeUtils.js":
/*!*********************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/graphql/storeUtils.js ***!
  \*********************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isReference: () => (/* binding */ isReference)\n/* harmony export */ });\n/**\n * Determines if a given object is a reference object.\n *\n * @param obj - The object to check if its a reference object\n *\n * @example\n *\n * ```ts\n * import { isReference } from \"@apollo/client/utilities\";\n *\n * isReference({ __ref: \"User:1\" }); // true\n * isReference({ __typename: \"User\", id: 1 }); // false\n * ```\n */ function isReference(obj) {\n    return Boolean(obj && typeof obj === \"object\" && typeof obj.__ref === \"string\");\n} //# sourceMappingURL=storeUtils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvZ3JhcGhxbC9zdG9yZVV0aWxzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFPQTs7Ozs7Ozs7Ozs7OztHQWFHLENBQ0csU0FBVSxXQUFXLENBQUMsR0FBUTtJQUNsQyxPQUFPLE9BQU8sQ0FDWixHQUFHLElBQUksT0FBTyxHQUFHLEtBQUssUUFBUSxJQUFJLE9BQU8sR0FBRyxDQUFDLEtBQUssS0FBSyxRQUFRLENBQ2hFLENBQUM7QUFDSixDQUFDIiwic291cmNlcyI6WyIvaG9tZS91L1Byb2plY3RzL3NyYy91dGlsaXRpZXMvZ3JhcGhxbC9zdG9yZVV0aWxzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUmVwcmVzZW50YXRpb24gb2YgYSByZWZlcmVuY2Ugb2JqZWN0IGluc2lkZSB0aGUgY2FjaGUuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVmZXJlbmNlIHtcbiAgcmVhZG9ubHkgX19yZWY6IHN0cmluZztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIGEgZ2l2ZW4gb2JqZWN0IGlzIGEgcmVmZXJlbmNlIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0gb2JqIC0gVGhlIG9iamVjdCB0byBjaGVjayBpZiBpdHMgYSByZWZlcmVuY2Ugb2JqZWN0XG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBgYGB0c1xuICogaW1wb3J0IHsgaXNSZWZlcmVuY2UgfSBmcm9tIFwiQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzXCI7XG4gKlxuICogaXNSZWZlcmVuY2UoeyBfX3JlZjogXCJVc2VyOjFcIiB9KTsgLy8gdHJ1ZVxuICogaXNSZWZlcmVuY2UoeyBfX3R5cGVuYW1lOiBcIlVzZXJcIiwgaWQ6IDEgfSk7IC8vIGZhbHNlXG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzUmVmZXJlbmNlKG9iajogYW55KTogb2JqIGlzIFJlZmVyZW5jZSB7XG4gIHJldHVybiBCb29sZWFuKFxuICAgIG9iaiAmJiB0eXBlb2Ygb2JqID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBvYmouX19yZWYgPT09IFwic3RyaW5nXCJcbiAgKTtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSB1bmlvbiBvZiB2YWxpZCB2YWx1ZXMgdGhhdCBjYW4gYmUgc3RvcmVkIGluIHRoZSBjYWNoZS5cbiAqL1xuZXhwb3J0IHR5cGUgU3RvcmVWYWx1ZSA9XG4gIHwgbnVtYmVyXG4gIHwgc3RyaW5nXG4gIHwgc3RyaW5nW11cbiAgfCBSZWZlcmVuY2VcbiAgfCBSZWZlcmVuY2VbXVxuICB8IG51bGxcbiAgfCB1bmRlZmluZWRcbiAgfCB2b2lkXG4gIHwgT2JqZWN0O1xuXG4vKipcbiAqIFJlcHJlc2VudHMgYW4gb2JqZWN0IHRoYXQgaXMgc3RvcmVkIGluIHRoZSBjYWNoZS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTdG9yZU9iamVjdCB7XG4gIF9fdHlwZW5hbWU/OiBzdHJpbmc7XG4gIFtzdG9yZUZpZWxkTmFtZTogc3RyaW5nXTogU3RvcmVWYWx1ZTtcbn1cblxuLyoqXG4gKiBXb3JrYXJvdW5kIGZvciBhIFR5cGVTY3JpcHQgcXVpcms6XG4gKiB0eXBlcyBwZXIgZGVmYXVsdCBoYXZlIGFuIGltcGxpY2l0IGluZGV4IHNpZ25hdHVyZSB0aGF0IG1ha2VzIHRoZW1cbiAqIGFzc2lnbmFibGUgdG8gYFN0b3JlT2JqZWN0YC5cbiAqIGludGVyZmFjZXMgZG8gbm90IGhhdmUgdGhhdCBpbXBsaWNpdCBpbmRleCBzaWduYXR1cmUsIHNvIHRoZXkgY2Fubm90XG4gKiBiZSBhc3NpZ25lZCB0byBgU3RvcmVPYmplY3RgLlxuICogVGhpcyB0eXBlIGp1c3QgbWFwcyBvdmVyIGEgdHlwZSBvciBpbnRlcmZhY2UgdGhhdCBpcyBwYXNzZWQgaW4sXG4gKiBpbXBsaWNpdGx5IGFkZGluZyB0aGUgaW5kZXggc2lnbmF0dXJlLlxuICogVGhhdCB3YXksIHRoZSByZXN1bHQgY2FuIGJlIGFzc2lnbmVkIHRvIGBTdG9yZU9iamVjdGAuXG4gKlxuICogVGhpcyBpcyBpbXBvcnRhbnQgaWYgc29tZSB1c2VyLWRlZmluZWQgaW50ZXJmYWNlIGlzIHVzZWQgZS5nLlxuICogaW4gY2FjaGUubW9kaWZ5LCB3aGVyZSB0aGUgYHRvUmVmZXJlbmNlYCBtZXRob2QgZXhwZWN0cyBhXG4gKiBgU3RvcmVPYmplY3RgIGFzIGlucHV0LlxuICovXG5leHBvcnQgdHlwZSBBc1N0b3JlT2JqZWN0PFQgZXh0ZW5kcyB7IF9fdHlwZW5hbWU/OiBzdHJpbmcgfT4gPSB7XG4gIFtLIGluIGtleW9mIFRdOiBUW0tdO1xufTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/graphql/storeUtils.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/graphql/transform.js":
/*!********************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/graphql/transform.js ***!
  \********************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addTypenameToDocument: () => (/* binding */ addTypenameToDocument)\n/* harmony export */ });\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! graphql */ \"(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/kinds.mjs\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! graphql */ \"(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/visitor.mjs\");\n\nconst TYPENAME_FIELD = {\n    kind: graphql__WEBPACK_IMPORTED_MODULE_0__.Kind.FIELD,\n    name: {\n        kind: graphql__WEBPACK_IMPORTED_MODULE_0__.Kind.NAME,\n        value: \"__typename\"\n    }\n};\n/**\n * Adds `__typename` to all selection sets in the document except for the root\n * selection set.\n *\n * @param doc - The `ASTNode` to add `__typename` to\n *\n * @example\n *\n * ```ts\n * const document = gql`\n *   # ...\n * `;\n *\n * const withTypename = addTypenameToDocument(document);\n * ```\n */ const addTypenameToDocument = Object.assign(function(doc) {\n    return (0,graphql__WEBPACK_IMPORTED_MODULE_1__.visit)(doc, {\n        SelectionSet: {\n            enter (node, _key, parent) {\n                // Don't add __typename to OperationDefinitions.\n                if (parent && parent.kind === graphql__WEBPACK_IMPORTED_MODULE_0__.Kind.OPERATION_DEFINITION) {\n                    return;\n                }\n                // No changes if no selections.\n                const { selections } = node;\n                if (!selections) {\n                    return;\n                }\n                // If selections already have a __typename, or are part of an\n                // introspection query, do nothing.\n                const skip = selections.some((selection)=>{\n                    return selection.kind === graphql__WEBPACK_IMPORTED_MODULE_0__.Kind.FIELD && (selection.name.value === \"__typename\" || selection.name.value.lastIndexOf(\"__\", 0) === 0);\n                });\n                if (skip) {\n                    return;\n                }\n                // If this SelectionSet is @export-ed as an input variable, it should\n                // not have a __typename field (see issue #4691).\n                const field = parent;\n                if (field.kind === graphql__WEBPACK_IMPORTED_MODULE_0__.Kind.FIELD && field.directives && field.directives.some((d)=>d.name.value === \"export\")) {\n                    return;\n                }\n                // Create and return a new SelectionSet with a __typename Field.\n                return {\n                    ...node,\n                    selections: [\n                        ...selections,\n                        TYPENAME_FIELD\n                    ]\n                };\n            }\n        }\n    });\n}, {\n    added (field) {\n        return field === TYPENAME_FIELD;\n    }\n}); //# sourceMappingURL=transform.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvZ3JhcGhxbC90cmFuc2Zvcm0uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ3NDO0FBRXRDLE1BQU0sY0FBYyxHQUFjO0lBQ2hDLElBQUksRUFBRSx5Q0FBSSxDQUFDLEtBQUs7SUFDaEIsSUFBSSxFQUFFO1FBQ0osSUFBSSxFQUFFLHlDQUFJLENBQUMsSUFBSTtRQUNmLEtBQUssRUFBRSxZQUFZO0tBQ3BCO0NBQ0YsQ0FBQztBQUVGOzs7Ozs7Ozs7Ozs7Ozs7R0FlRyxDQUNJLE1BQU0scUJBQXFCLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FDaEQsU0FBaUMsR0FBVTtJQUN6QyxPQUFPLDhDQUFLLENBQUMsR0FBRyxFQUFFO1FBQ2hCLFlBQVksRUFBRTtZQUNaLEtBQUssRUFBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLE1BQU07Z0JBQ3RCLGdEQUFnRDtnQkFDaEQsSUFDRSxNQUFNLElBQ0wsTUFBa0MsQ0FBQyxJQUFJLEtBQ3RDLHlDQUFJLENBQUMsb0JBQW9CLEVBQzNCLENBQUM7b0JBQ0QsT0FBTztnQkFDVCxDQUFDO2dCQUVELCtCQUErQjtnQkFDL0IsTUFBTSxFQUFFLFVBQVUsRUFBRSxHQUFHLElBQUksQ0FBQztnQkFDNUIsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO29CQUNoQixPQUFPO2dCQUNULENBQUM7Z0JBRUQsNkRBQTZEO2dCQUM3RCxtQ0FBbUM7Z0JBQ25DLE1BQU0sSUFBSSxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLEVBQUUsRUFBRTtvQkFDekMsT0FBTyxTQUNJLENBQUMsSUFBSSxLQUFLLHlDQUFJLENBQUMsS0FBSyxLQUM1QixTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssS0FBSyxZQUFZLElBQ3BDLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLE1BQUssQ0FBQyxDQUFDO2dCQUV0RCxDQUFDLENBQUMsQ0FBQztnQkFDSCxJQUFJLElBQUksRUFBRSxDQUFDO29CQUNULE9BQU87Z0JBQ1QsQ0FBQztnQkFFRCxxRUFBcUU7Z0JBQ3JFLGlEQUFpRDtnQkFDakQsTUFBTSxLQUFLLEdBQUcsTUFBbUIsQ0FBQztnQkFDbEMsSUFDRSxLQUFLLENBQUMsSUFBSSxLQUFLLHlDQUFJLENBQUMsS0FBSyxJQUN6QixLQUFLLENBQUMsVUFBVSxJQUNoQixLQUFLLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxLQUFLLFFBQVEsQ0FBQyxFQUN2RCxDQUFDO29CQUNELE9BQU87Z0JBQ1QsQ0FBQztnQkFFRCxnRUFBZ0U7Z0JBQ2hFLE9BQU87b0JBQ0wsR0FBRyxJQUFJO29CQUNQLFVBQVUsRUFBRSxDQUFDOzJCQUFHLFVBQVU7d0JBQUUsY0FBYztxQkFBQztpQkFDNUMsQ0FBQztZQUNKLENBQUM7U0FDRjtLQUNGLENBQUMsQ0FBQztBQUNMLENBQUMsRUFDRDtJQUNFLEtBQUssRUFBQyxLQUFnQjtRQUNwQixPQUFPLEtBQUssS0FBSyxjQUFjLENBQUM7SUFDbEMsQ0FBQztDQUNGLENBQ0YsQ0FBQyIsInNvdXJjZXMiOlsiL2hvbWUvdS9Qcm9qZWN0cy9zcmMvdXRpbGl0aWVzL2dyYXBocWwvdHJhbnNmb3JtLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgQVNUTm9kZSwgRmllbGROb2RlLCBPcGVyYXRpb25EZWZpbml0aW9uTm9kZSB9IGZyb20gXCJncmFwaHFsXCI7XG5pbXBvcnQgeyBLaW5kLCB2aXNpdCB9IGZyb20gXCJncmFwaHFsXCI7XG5cbmNvbnN0IFRZUEVOQU1FX0ZJRUxEOiBGaWVsZE5vZGUgPSB7XG4gIGtpbmQ6IEtpbmQuRklFTEQsXG4gIG5hbWU6IHtcbiAgICBraW5kOiBLaW5kLk5BTUUsXG4gICAgdmFsdWU6IFwiX190eXBlbmFtZVwiLFxuICB9LFxufTtcblxuLyoqXG4gKiBBZGRzIGBfX3R5cGVuYW1lYCB0byBhbGwgc2VsZWN0aW9uIHNldHMgaW4gdGhlIGRvY3VtZW50IGV4Y2VwdCBmb3IgdGhlIHJvb3RcbiAqIHNlbGVjdGlvbiBzZXQuXG4gKlxuICogQHBhcmFtIGRvYyAtIFRoZSBgQVNUTm9kZWAgdG8gYWRkIGBfX3R5cGVuYW1lYCB0b1xuICpcbiAqIEBleGFtcGxlXG4gKlxuICogYGBgdHNcbiAqIGNvbnN0IGRvY3VtZW50ID0gZ3FsYFxuICogICAjIC4uLlxuICogYDtcbiAqXG4gKiBjb25zdCB3aXRoVHlwZW5hbWUgPSBhZGRUeXBlbmFtZVRvRG9jdW1lbnQoZG9jdW1lbnQpO1xuICogYGBgXG4gKi9cbmV4cG9ydCBjb25zdCBhZGRUeXBlbmFtZVRvRG9jdW1lbnQgPSBPYmplY3QuYXNzaWduKFxuICBmdW5jdGlvbiA8VE5vZGUgZXh0ZW5kcyBBU1ROb2RlPihkb2M6IFROb2RlKTogVE5vZGUge1xuICAgIHJldHVybiB2aXNpdChkb2MsIHtcbiAgICAgIFNlbGVjdGlvblNldDoge1xuICAgICAgICBlbnRlcihub2RlLCBfa2V5LCBwYXJlbnQpIHtcbiAgICAgICAgICAvLyBEb24ndCBhZGQgX190eXBlbmFtZSB0byBPcGVyYXRpb25EZWZpbml0aW9ucy5cbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBwYXJlbnQgJiZcbiAgICAgICAgICAgIChwYXJlbnQgYXMgT3BlcmF0aW9uRGVmaW5pdGlvbk5vZGUpLmtpbmQgPT09XG4gICAgICAgICAgICAgIEtpbmQuT1BFUkFUSU9OX0RFRklOSVRJT05cbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBObyBjaGFuZ2VzIGlmIG5vIHNlbGVjdGlvbnMuXG4gICAgICAgICAgY29uc3QgeyBzZWxlY3Rpb25zIH0gPSBub2RlO1xuICAgICAgICAgIGlmICghc2VsZWN0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIElmIHNlbGVjdGlvbnMgYWxyZWFkeSBoYXZlIGEgX190eXBlbmFtZSwgb3IgYXJlIHBhcnQgb2YgYW5cbiAgICAgICAgICAvLyBpbnRyb3NwZWN0aW9uIHF1ZXJ5LCBkbyBub3RoaW5nLlxuICAgICAgICAgIGNvbnN0IHNraXAgPSBzZWxlY3Rpb25zLnNvbWUoKHNlbGVjdGlvbikgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgc2VsZWN0aW9uLmtpbmQgPT09IEtpbmQuRklFTEQgJiZcbiAgICAgICAgICAgICAgKHNlbGVjdGlvbi5uYW1lLnZhbHVlID09PSBcIl9fdHlwZW5hbWVcIiB8fFxuICAgICAgICAgICAgICAgIHNlbGVjdGlvbi5uYW1lLnZhbHVlLmxhc3RJbmRleE9mKFwiX19cIiwgMCkgPT09IDApXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGlmIChza2lwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gSWYgdGhpcyBTZWxlY3Rpb25TZXQgaXMgQGV4cG9ydC1lZCBhcyBhbiBpbnB1dCB2YXJpYWJsZSwgaXQgc2hvdWxkXG4gICAgICAgICAgLy8gbm90IGhhdmUgYSBfX3R5cGVuYW1lIGZpZWxkIChzZWUgaXNzdWUgIzQ2OTEpLlxuICAgICAgICAgIGNvbnN0IGZpZWxkID0gcGFyZW50IGFzIEZpZWxkTm9kZTtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBmaWVsZC5raW5kID09PSBLaW5kLkZJRUxEICYmXG4gICAgICAgICAgICBmaWVsZC5kaXJlY3RpdmVzICYmXG4gICAgICAgICAgICBmaWVsZC5kaXJlY3RpdmVzLnNvbWUoKGQpID0+IGQubmFtZS52YWx1ZSA9PT0gXCJleHBvcnRcIilcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBDcmVhdGUgYW5kIHJldHVybiBhIG5ldyBTZWxlY3Rpb25TZXQgd2l0aCBhIF9fdHlwZW5hbWUgRmllbGQuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLm5vZGUsXG4gICAgICAgICAgICBzZWxlY3Rpb25zOiBbLi4uc2VsZWN0aW9ucywgVFlQRU5BTUVfRklFTERdLFxuICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pO1xuICB9LFxuICB7XG4gICAgYWRkZWQoZmllbGQ6IEZpZWxkTm9kZSk6IGJvb2xlYW4ge1xuICAgICAgcmV0dXJuIGZpZWxkID09PSBUWVBFTkFNRV9GSUVMRDtcbiAgICB9LFxuICB9XG4pO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/graphql/transform.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/DeepMerger.js":
/*!**********************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/DeepMerger.js ***!
  \**********************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DeepMerger: () => (/* binding */ DeepMerger)\n/* harmony export */ });\n/* harmony import */ var _isNonNullObject_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isNonNullObject.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/isNonNullObject.js\");\n\nconst { hasOwnProperty } = Object.prototype;\nconst defaultReconciler = function(target, source, property) {\n    return this.merge(target[property], source[property]);\n};\n/**\n* @internal\n* \n* @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n*/ class DeepMerger {\n    merge(target, source) {\n        for(var _len = arguments.length, context = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++){\n            context[_key - 2] = arguments[_key];\n        }\n        if ((0,_isNonNullObject_js__WEBPACK_IMPORTED_MODULE_0__.isNonNullObject)(source) && (0,_isNonNullObject_js__WEBPACK_IMPORTED_MODULE_0__.isNonNullObject)(target)) {\n            Object.keys(source).forEach((sourceKey)=>{\n                if (hasOwnProperty.call(target, sourceKey)) {\n                    const targetValue = target[sourceKey];\n                    if (source[sourceKey] !== targetValue) {\n                        const result = this.reconciler(target, source, sourceKey, ...context);\n                        // A well-implemented reconciler may return targetValue to indicate\n                        // the merge changed nothing about the structure of the target.\n                        if (result !== targetValue) {\n                            target = this.shallowCopyForMerge(target);\n                            target[sourceKey] = result;\n                        }\n                    }\n                } else {\n                    // If there is no collision, the target can safely share memory with\n                    // the source, and the recursion can terminate here.\n                    target = this.shallowCopyForMerge(target);\n                    target[sourceKey] = source[sourceKey];\n                }\n            });\n            return target;\n        }\n        // If source (or target) is not an object, let source replace target.\n        return source;\n    }\n    shallowCopyForMerge(value) {\n        if ((0,_isNonNullObject_js__WEBPACK_IMPORTED_MODULE_0__.isNonNullObject)(value)) {\n            if (!this.pastCopies.has(value)) {\n                if (Array.isArray(value)) {\n                    value = value.slice(0);\n                } else {\n                    value = {\n                        __proto__: Object.getPrototypeOf(value),\n                        ...value\n                    };\n                }\n                this.pastCopies.add(value);\n            }\n        }\n        return value;\n    }\n    constructor(reconciler = defaultReconciler){\n        this.isObject = _isNonNullObject_js__WEBPACK_IMPORTED_MODULE_0__.isNonNullObject;\n        this.pastCopies = new Set();\n        this.reconciler = reconciler;\n    }\n} //# sourceMappingURL=DeepMerger.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvaW50ZXJuYWwvRGVlcE1lcmdlci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFzRDtBQUV0RCxNQUFNLEVBQUUsQ0FBUixrQkFBMkIsQ0FBM0IsS0FBaUMsQ0FBQyxDQUFsQyxRQUEyQztBQVUzQyxNQUFNLENBQU4sbUJBQXFELENBQXJELGNBQ1EsRUFDTixDQUZGLEtBRVEsRUFDTixDQUhGLE9BR1UsRUFIVjtJQUtFLENBQUYsTUFBUyxDQUFULEdBQWEsQ0FBQyxDQUFkLElBQW1CLENBQUMsQ0FBcEIsS0FBMEIsQ0FBQyxDQUEzQixPQUFtQyxDQUFDLEVBQUUsQ0FBdEMsS0FBNEMsQ0FBQyxDQUE3QyxPQUFxRCxDQUFDLENBQUM7QUFDdkQsQ0FBQzs7Ozs7R0FHRCxNQUFhLENBQWI7SUFLUyxDQUFULElBQWMsQ0FBQyxDQUFmLEtBQTBCLEVBQUUsQ0FBNUIsS0FBdUMsRUFBdkM7dUJBQXlDLENBQXpDLGlCQUE0QyxDQUE1QzsrQ0FBaUU7O1FBQzdELENBQUosR0FBUSxvRUFBZSxDQUFDLENBQXhCLEtBQThCLEVBQTlCLEdBQW1DLG9FQUFlLENBQUMsQ0FBbkQsS0FBeUQsQ0FBQyxFQUFFO1lBQ3RELENBQU4sS0FBWSxDQUFDLENBQWIsR0FBaUIsQ0FBQyxDQUFsQixLQUF3QixDQUFDLENBQUMsQ0FBMUIsTUFBaUMsQ0FBQyxDQUFDLENBQW5DLFFBQTRDLEVBQUUsQ0FBOUM7Z0JBQ1EsQ0FBUixHQUFZLENBQVosYUFBMEIsQ0FBQyxDQUEzQixHQUErQixDQUFDLENBQWhDLEtBQXNDLEVBQUUsQ0FBeEMsUUFBaUQsQ0FBQyxFQUFFO29CQUMxQyxDQUFWLEtBQWdCLENBQWhCLGFBQThCLENBQTlCLEtBQW9DLENBQUMsQ0FBckMsUUFBOEMsQ0FBQztvQkFDckMsQ0FBVixHQUFjLENBQWQsS0FBb0IsQ0FBQyxDQUFyQixRQUE4QixFQUE5QixJQUFvQyxDQUFwQyxVQUErQyxFQUFFO3dCQUNyQyxDQUFaLEtBQWtCLENBQWxCLFFBQTJCLENBQTNCLEdBQStCLENBQUMsQ0FBaEMsU0FBMEMsQ0FDNUIsQ0FEZCxLQUNvQixFQUNOLENBRmQsS0FFb0IsRUFDTixDQUhkLFFBR3VCLEVBQ1QsQ0FKZCxFQUlpQixDQUpqQixNQUl3QixDQUNYO3dCQUNELENBQVo7d0JBQ1ksQ0FBWjt3QkFDWSxDQUFaLEdBQWdCLENBQWhCLFVBQTJCLENBQTNCLFVBQXNDLEVBQUU7NEJBQzFCLENBQWQsUUFBdUIsQ0FBdkIsR0FBMkIsQ0FBQyxDQUE1QixrQkFBK0MsQ0FBQyxDQUFoRCxLQUFzRCxDQUFDOzRCQUN6QyxDQUFkLEtBQW9CLENBQUMsQ0FBckIsUUFBOEIsRUFBOUIsRUFBa0MsQ0FBbEMsS0FBd0M7d0JBQzVCO29CQUNGO2dCQUNGLE9BQU87b0JBQ0wsQ0FBVjtvQkFDVSxDQUFWO29CQUNVLENBQVYsUUFBbUIsQ0FBbkIsR0FBdUIsQ0FBQyxDQUF4QixrQkFBMkMsQ0FBQyxDQUE1QyxLQUFrRCxDQUFDO29CQUN6QyxDQUFWLEtBQWdCLENBQUMsQ0FBakIsUUFBMEIsRUFBMUIsRUFBOEIsQ0FBOUIsS0FBb0MsQ0FBQyxDQUFyQyxRQUE4QyxDQUFDO2dCQUN2QztZQUNGLENBQUMsQ0FBQztZQUVGLENBQU4sTUFBYSxDQUFiLEtBQW1CO1FBQ2Y7UUFFQSxDQUFKO1FBQ0ksQ0FBSixNQUFXLENBQVgsS0FBaUI7SUFDZjtJQU1PLENBQVQsa0JBQTRCLENBQUksQ0FBaEMsSUFBd0MsRUFBeEM7UUFDSSxDQUFKLEdBQVEsb0VBQWUsQ0FBQyxDQUF4QixJQUE2QixDQUFDLEVBQUU7WUFDMUIsQ0FBTixHQUFVLENBQUMsQ0FBWCxHQUFlLENBQUMsQ0FBaEIsU0FBMEIsQ0FBQyxDQUEzQixFQUE4QixDQUFDLENBQS9CLElBQW9DLENBQUMsRUFBRTtnQkFDL0IsQ0FBUixHQUFZLENBQVosSUFBaUIsQ0FBQyxDQUFsQixNQUF5QixDQUFDLENBQTFCLElBQStCLENBQUMsRUFBRTtvQkFDeEIsQ0FBVixPQUFtQixDQUFuQixJQUFnQyxDQUFDLENBQWpDLElBQXNDLENBQUMsQ0FBQyxDQUFDO2dCQUNqQyxPQUFPO29CQUNMLENBQVYsT0FBa0I7d0JBQ04sQ0FBWixRQUFxQixFQUFFLENBQXZCLEtBQTZCLENBQUMsQ0FBOUIsYUFBNEMsQ0FBQyxDQUE3QyxJQUFrRCxDQUFDO3dCQUN2QyxDQUFaLEVBQWUsQ0FBZixJQUFvQjtvQkFDcEIsQ0FBVztnQkFDSDtnQkFDQSxDQUFSLEdBQVksQ0FBQyxDQUFiLFNBQXVCLENBQUMsQ0FBeEIsRUFBMkIsQ0FBQyxDQUE1QixJQUFpQyxDQUFDO1lBQzVCO1FBQ0Y7UUFDQSxDQUFKLE1BQVcsQ0FBWCxJQUFnQjtJQUNkO0lBekRBLENBQUYsV0FDWSxDQURaLFlBQzJELENBRDNELGdCQUN1SCxDQUR2SDthQXNDUyxDQUFULFVBQW9CLGdFQUFlO2FBRXpCLENBQVYsWUFBdUIsQ0FBdkIsR0FBMkIsQ0FBM0IsRUFBOEIsQ0FBOUIsQ0FBcUM7UUF2Q3pCLENBQVosaUJBQVksQ0FBWixTQUFzQjtJQUNqQjtBQXdETCIsInNvdXJjZXMiOlsiL2hvbWUvdS9Qcm9qZWN0cy9zcmMvdXRpbGl0aWVzL2ludGVybmFsL0RlZXBNZXJnZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNOb25OdWxsT2JqZWN0IH0gZnJvbSBcIi4vaXNOb25OdWxsT2JqZWN0LmpzXCI7XG5cbmNvbnN0IHsgaGFzT3duUHJvcGVydHkgfSA9IE9iamVjdC5wcm90b3R5cGU7XG5cbnR5cGUgUmVjb25jaWxlckZ1bmN0aW9uPFRDb250ZXh0QXJncyBleHRlbmRzIGFueVtdPiA9IChcbiAgdGhpczogRGVlcE1lcmdlcjxUQ29udGV4dEFyZ3M+LFxuICB0YXJnZXQ6IFJlY29yZDxzdHJpbmcgfCBudW1iZXIsIGFueT4sXG4gIHNvdXJjZTogUmVjb3JkPHN0cmluZyB8IG51bWJlciwgYW55PixcbiAgcHJvcGVydHk6IHN0cmluZyB8IG51bWJlcixcbiAgLi4uY29udGV4dDogVENvbnRleHRBcmdzXG4pID0+IGFueTtcblxuY29uc3QgZGVmYXVsdFJlY29uY2lsZXI6IFJlY29uY2lsZXJGdW5jdGlvbjxhbnlbXT4gPSBmdW5jdGlvbiAoXG4gIHRhcmdldCxcbiAgc291cmNlLFxuICBwcm9wZXJ0eVxuKSB7XG4gIHJldHVybiB0aGlzLm1lcmdlKHRhcmdldFtwcm9wZXJ0eV0sIHNvdXJjZVtwcm9wZXJ0eV0pO1xufTtcblxuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNsYXNzIERlZXBNZXJnZXI8VENvbnRleHRBcmdzIGV4dGVuZHMgYW55W10+IHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWNvbmNpbGVyOiBSZWNvbmNpbGVyRnVuY3Rpb248VENvbnRleHRBcmdzPiA9IGRlZmF1bHRSZWNvbmNpbGVyIGFzIGFueSBhcyBSZWNvbmNpbGVyRnVuY3Rpb248VENvbnRleHRBcmdzPlxuICApIHt9XG5cbiAgcHVibGljIG1lcmdlKHRhcmdldDogYW55LCBzb3VyY2U6IGFueSwgLi4uY29udGV4dDogVENvbnRleHRBcmdzKTogYW55IHtcbiAgICBpZiAoaXNOb25OdWxsT2JqZWN0KHNvdXJjZSkgJiYgaXNOb25OdWxsT2JqZWN0KHRhcmdldCkpIHtcbiAgICAgIE9iamVjdC5rZXlzKHNvdXJjZSkuZm9yRWFjaCgoc291cmNlS2V5KSA9PiB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHRhcmdldCwgc291cmNlS2V5KSkge1xuICAgICAgICAgIGNvbnN0IHRhcmdldFZhbHVlID0gdGFyZ2V0W3NvdXJjZUtleV07XG4gICAgICAgICAgaWYgKHNvdXJjZVtzb3VyY2VLZXldICE9PSB0YXJnZXRWYWx1ZSkge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5yZWNvbmNpbGVyKFxuICAgICAgICAgICAgICB0YXJnZXQsXG4gICAgICAgICAgICAgIHNvdXJjZSxcbiAgICAgICAgICAgICAgc291cmNlS2V5LFxuICAgICAgICAgICAgICAuLi5jb250ZXh0XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgLy8gQSB3ZWxsLWltcGxlbWVudGVkIHJlY29uY2lsZXIgbWF5IHJldHVybiB0YXJnZXRWYWx1ZSB0byBpbmRpY2F0ZVxuICAgICAgICAgICAgLy8gdGhlIG1lcmdlIGNoYW5nZWQgbm90aGluZyBhYm91dCB0aGUgc3RydWN0dXJlIG9mIHRoZSB0YXJnZXQuXG4gICAgICAgICAgICBpZiAocmVzdWx0ICE9PSB0YXJnZXRWYWx1ZSkge1xuICAgICAgICAgICAgICB0YXJnZXQgPSB0aGlzLnNoYWxsb3dDb3B5Rm9yTWVyZ2UodGFyZ2V0KTtcbiAgICAgICAgICAgICAgdGFyZ2V0W3NvdXJjZUtleV0gPSByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIElmIHRoZXJlIGlzIG5vIGNvbGxpc2lvbiwgdGhlIHRhcmdldCBjYW4gc2FmZWx5IHNoYXJlIG1lbW9yeSB3aXRoXG4gICAgICAgICAgLy8gdGhlIHNvdXJjZSwgYW5kIHRoZSByZWN1cnNpb24gY2FuIHRlcm1pbmF0ZSBoZXJlLlxuICAgICAgICAgIHRhcmdldCA9IHRoaXMuc2hhbGxvd0NvcHlGb3JNZXJnZSh0YXJnZXQpO1xuICAgICAgICAgIHRhcmdldFtzb3VyY2VLZXldID0gc291cmNlW3NvdXJjZUtleV07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH1cblxuICAgIC8vIElmIHNvdXJjZSAob3IgdGFyZ2V0KSBpcyBub3QgYW4gb2JqZWN0LCBsZXQgc291cmNlIHJlcGxhY2UgdGFyZ2V0LlxuICAgIHJldHVybiBzb3VyY2U7XG4gIH1cblxuICBwdWJsaWMgaXNPYmplY3QgPSBpc05vbk51bGxPYmplY3Q7XG5cbiAgcHJpdmF0ZSBwYXN0Q29waWVzID0gbmV3IFNldDxhbnk+KCk7XG5cbiAgcHVibGljIHNoYWxsb3dDb3B5Rm9yTWVyZ2U8VD4odmFsdWU6IFQpOiBUIHtcbiAgICBpZiAoaXNOb25OdWxsT2JqZWN0KHZhbHVlKSkge1xuICAgICAgaWYgKCF0aGlzLnBhc3RDb3BpZXMuaGFzKHZhbHVlKSkge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICB2YWx1ZSA9ICh2YWx1ZSBhcyBhbnkpLnNsaWNlKDApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhbHVlID0ge1xuICAgICAgICAgICAgX19wcm90b19fOiBPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsdWUpLFxuICAgICAgICAgICAgLi4udmFsdWUsXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBhc3RDb3BpZXMuYWRkKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/DeepMerger.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/argumentsObjectFromField.js":
/*!************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/argumentsObjectFromField.js ***!
  \************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   argumentsObjectFromField: () => (/* binding */ argumentsObjectFromField)\n/* harmony export */ });\n/* harmony import */ var _valueToObjectRepresentation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./valueToObjectRepresentation.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/valueToObjectRepresentation.js\");\n\n/**\n* @internal\n* \n* @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n*/ function argumentsObjectFromField(field, variables) {\n    if (field.arguments && field.arguments.length) {\n        const argObj = {};\n        field.arguments.forEach((param)=>{\n            let { name, value } = param;\n            return (0,_valueToObjectRepresentation_js__WEBPACK_IMPORTED_MODULE_0__.valueToObjectRepresentation)(argObj, name, value, variables);\n        });\n        return argObj;\n    }\n    return null;\n} //# sourceMappingURL=argumentsObjectFromField.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvaW50ZXJuYWwvYXJndW1lbnRzT2JqZWN0RnJvbUZpZWxkLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBRThFOzs7OztHQUc5RSxTQUFnQixDQUFoQix1QkFBd0MsQ0FDdEMsQ0FERixJQUNrQyxFQUNoQyxDQUZGLFFBRWlDLEVBRmpDO0lBSUUsQ0FBRixHQUFNLENBQU4sSUFBVyxDQUFDLENBQVosWUFBeUIsQ0FBekIsSUFBOEIsQ0FBQyxDQUEvQixRQUF3QyxDQUFDLENBQXpDLEtBQStDLEVBQUU7UUFDN0MsQ0FBSixLQUFVLENBQVYsUUFBMkIsQ0FBM0IsQ0FBNkI7UUFDekIsQ0FBSixJQUFTLENBQUMsQ0FBVixRQUFtQixDQUFDLENBQXBCLE1BQTJCLENBQUM7Z0JBQUMsRUFBRSxDQUEvQixHQUFtQyxFQUFFLENBQXJDLE1BQTRDLEVBQUUsQ0FBOUM7bUJBQ00sNEZBQTJCLENBQUMsQ0FEbEMsS0FDd0MsRUFBRSxDQUQxQyxHQUM4QyxFQUFFLENBRGhELElBQ3FELEVBQUUsQ0FEdkQsUUFDZ0UsQ0FBQyxDQUM1RDs7UUFDRCxDQUFKLE1BQVcsQ0FBWCxLQUFpQjtJQUNmO0lBQ0EsQ0FBRixNQUFTLENBQVQsR0FBYTtBQUNiIiwic291cmNlcyI6WyIvaG9tZS91L1Byb2plY3RzL3NyYy91dGlsaXRpZXMvaW50ZXJuYWwvYXJndW1lbnRzT2JqZWN0RnJvbUZpZWxkLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgRGlyZWN0aXZlTm9kZSwgRmllbGROb2RlIH0gZnJvbSBcImdyYXBocWxcIjtcblxuaW1wb3J0IHsgdmFsdWVUb09iamVjdFJlcHJlc2VudGF0aW9uIH0gZnJvbSBcIi4vdmFsdWVUb09iamVjdFJlcHJlc2VudGF0aW9uLmpzXCI7XG5cbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBmdW5jdGlvbiBhcmd1bWVudHNPYmplY3RGcm9tRmllbGQoXG4gIGZpZWxkOiBGaWVsZE5vZGUgfCBEaXJlY3RpdmVOb2RlLFxuICB2YXJpYWJsZXM/OiBSZWNvcmQ8c3RyaW5nLCBhbnk+XG4pOiBPYmplY3QgfCBudWxsIHtcbiAgaWYgKGZpZWxkLmFyZ3VtZW50cyAmJiBmaWVsZC5hcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgY29uc3QgYXJnT2JqOiBPYmplY3QgPSB7fTtcbiAgICBmaWVsZC5hcmd1bWVudHMuZm9yRWFjaCgoeyBuYW1lLCB2YWx1ZSB9KSA9PlxuICAgICAgdmFsdWVUb09iamVjdFJlcHJlc2VudGF0aW9uKGFyZ09iaiwgbmFtZSwgdmFsdWUsIHZhcmlhYmxlcylcbiAgICApO1xuICAgIHJldHVybiBhcmdPYmo7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/argumentsObjectFromField.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/caches.js":
/*!******************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/caches.js ***!
  \******************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AutoCleanedStrongCache: () => (/* binding */ AutoCleanedStrongCache),\n/* harmony export */   AutoCleanedWeakCache: () => (/* binding */ AutoCleanedWeakCache)\n/* harmony export */ });\n/* harmony import */ var _wry_caches__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wry/caches */ \"(app-pages-browser)/../../node_modules/.pnpm/@wry+caches@1.0.1/node_modules/@wry/caches/lib/weak.js\");\n/* harmony import */ var _wry_caches__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @wry/caches */ \"(app-pages-browser)/../../node_modules/.pnpm/@wry+caches@1.0.1/node_modules/@wry/caches/lib/strong.js\");\n\nconst scheduledCleanup = new WeakSet();\nfunction schedule(cache) {\n    if (cache.size <= (cache.max || -1)) {\n        return;\n    }\n    if (!scheduledCleanup.has(cache)) {\n        scheduledCleanup.add(cache);\n        setTimeout(()=>{\n            cache.clean();\n            scheduledCleanup.delete(cache);\n        }, 100);\n    }\n}\n/**\n* @internal\n* A version of WeakCache that will auto-schedule a cleanup of the cache when\n* a new item is added and the cache reached maximum size.\n* Throttled to once per 100ms.\n*\n* @privateRemarks\n* Should be used throughout the rest of the codebase instead of WeakCache,\n* with the notable exception of usage in `wrap` from `optimism` - that one\n* already handles cleanup and should remain a `WeakCache`.\n* \n* @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n*/ const AutoCleanedWeakCache = function(max, dispose) {\n    /*\n    Some builds of `WeakCache` are function prototypes, some are classes.\n    This library still builds with an ES5 target, so we can't extend the\n    real classes.\n    Instead, we have to use this workaround until we switch to a newer build\n    target.\n    */ const cache = new _wry_caches__WEBPACK_IMPORTED_MODULE_0__.WeakCache(max, dispose);\n    cache.set = function(key, value) {\n        const ret = _wry_caches__WEBPACK_IMPORTED_MODULE_0__.WeakCache.prototype.set.call(this, key, value);\n        schedule(this);\n        return ret;\n    };\n    return cache;\n};\n_c = AutoCleanedWeakCache;\n/**\n* @internal\n* A version of StrongCache that will auto-schedule a cleanup of the cache when\n* a new item is added and the cache reached maximum size.\n* Throttled to once per 100ms.\n*\n* @privateRemarks\n* Should be used throughout the rest of the codebase instead of StrongCache,\n* with the notable exception of usage in `wrap` from `optimism` - that one\n* already handles cleanup and should remain a `StrongCache`.\n* \n* @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n*/ const AutoCleanedStrongCache = function(max, dispose) {\n    /*\n    Some builds of `StrongCache` are function prototypes, some are classes.\n    This library still builds with an ES5 target, so we can't extend the\n    real classes.\n    Instead, we have to use this workaround until we switch to a newer build\n    target.\n    */ const cache = new _wry_caches__WEBPACK_IMPORTED_MODULE_1__.StrongCache(max, dispose);\n    cache.set = function(key, value) {\n        const ret = _wry_caches__WEBPACK_IMPORTED_MODULE_1__.StrongCache.prototype.set.call(this, key, value);\n        schedule(this);\n        return ret;\n    };\n    return cache;\n}; //# sourceMappingURL=caches.js.map\n_c1 = AutoCleanedStrongCache;\nvar _c, _c1;\n$RefreshReg$(_c, \"AutoCleanedWeakCache\");\n$RefreshReg$(_c1, \"AutoCleanedStrongCache\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvaW50ZXJuYWwvY2FjaGVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBb0Q7QUFPcEQsTUFBTSxDQUFOLGtCQUF5QixDQUF6QixHQUE2QixDQUE3QixNQUFvQyxDQUFwQyxDQUFzRDtBQUN0RCxTQUFTLENBQVQsT0FBaUIsQ0FBQyxDQUFsQixJQUF1QyxFQUF2QztJQUNFLENBQUYsR0FBTSxDQUFOLElBQVcsQ0FBQyxDQUFaLE9BQW9CLENBQUMsQ0FBckIsSUFBMEIsQ0FBQyxDQUEzQixNQUFrQyxDQUFDLENBQUMsQ0FBQyxFQUFFO1FBQ25DLENBQUo7SUFDRTtJQUNBLENBQUYsR0FBTSxDQUFDLENBQVAsZUFBdUIsQ0FBQyxDQUF4QixFQUEyQixDQUFDLENBQTVCLElBQWlDLENBQUMsRUFBRTtRQUNoQyxDQUFKLGVBQW9CLENBQUMsQ0FBckIsRUFBd0IsQ0FBQyxDQUF6QixJQUE4QixDQUFDO1FBQzNCLENBQUosU0FBYyxDQUFDLENBQWYsRUFBa0IsQ0FBbEI7WUFDTSxDQUFOLElBQVcsQ0FBQyxDQUFaLElBQWlCLENBQWpCLENBQW1CO1lBQ2IsQ0FBTixlQUFzQixDQUFDLENBQXZCLEtBQTZCLENBQUMsQ0FBOUIsSUFBbUMsQ0FBQztRQUNoQyxDQUFDLEVBQUUsQ0FBUCxFQUFVLENBQUM7SUFDVDtBQUNGOzs7Ozs7Ozs7Ozs7O0dBWU8sQ0FBUCw0QkFBb0MsQ0FBcEMsV0FDMEIsRUFDeEIsQ0FGRixNQUV3RCxFQUZ4RDtJQUlFLENBQUY7Ozs7OztJQU1BLEdBQ0UsQ0FBRixLQUFRLENBQVIsT0FBZ0IsQ0FBaEIsR0FBb0Isa0RBQVMsQ0FBQyxDQUE5QixFQUFpQyxFQUFFLENBQW5DLE1BQTBDLENBQUM7SUFDekMsQ0FBRixJQUFPLENBQUMsQ0FBUixLQUFjLENBQWQsV0FBZ0MsRUFBRSxDQUFsQyxJQUE0QyxFQUE1QztRQUNJLENBQUosS0FBVSxDQUFWLEtBQWdCLGtEQUFTLENBQUMsQ0FBMUIsUUFBbUMsQ0FBQyxDQUFwQyxFQUF1QyxDQUFDLENBQXhDLEdBQTRDLENBQUMsQ0FBN0MsR0FBaUQsRUFBRSxDQUFuRCxFQUFzRCxFQUFFLENBQXhELElBQTZELENBQUM7UUFDMUQsQ0FBSixPQUFZLENBQUMsQ0FBYixHQUEwQyxDQUFDO1FBQ3ZDLENBQUosTUFBVyxDQUFYLEVBQWM7SUFDWixDQUFDO0lBQ0QsQ0FBRixNQUFTLENBQVQsSUFBYztBQUNkLENBQTRCO0tBbEJmLENBQWI7Ozs7Ozs7Ozs7Ozs7R0FtQ08sQ0FBUCw4QkFBc0MsQ0FBdEMsV0FDMEIsRUFDeEIsQ0FGRixNQUV3RCxFQUZ4RDtJQUlFLENBQUY7Ozs7OztJQU1BLEdBQ0UsQ0FBRixLQUFRLENBQVIsT0FBZ0IsQ0FBaEIsR0FBb0Isb0RBQVcsQ0FBQyxDQUFoQyxFQUFtQyxFQUFFLENBQXJDLE1BQTRDLENBQUM7SUFDM0MsQ0FBRixJQUFPLENBQUMsQ0FBUixLQUFjLENBQWQsV0FBZ0MsRUFBRSxDQUFsQyxJQUE0QyxFQUE1QztRQUNJLENBQUosS0FBVSxDQUFWLEtBQWdCLG9EQUFXLENBQUMsQ0FBNUIsUUFBcUMsQ0FBQyxDQUF0QyxFQUF5QyxDQUFDLENBQTFDLEdBQThDLENBQUMsQ0FBL0MsR0FBbUQsRUFBRSxDQUFyRCxFQUF3RCxFQUFFLENBQTFELElBQStELENBQUM7UUFDNUQsQ0FBSixPQUFZLENBQUMsQ0FBYixHQUEwQyxDQUFDO1FBQ3ZDLENBQUosTUFBVyxDQUFYLEVBQWM7SUFDWixDQUFDO0lBQ0QsQ0FBRixNQUFTLENBQVQsSUFBYztBQUNkLENBQThCO01BbEJqQixDQUFiIiwic291cmNlcyI6WyIvaG9tZS91L1Byb2plY3RzL3NyYy91dGlsaXRpZXMvaW50ZXJuYWwvY2FjaGVzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN0cm9uZ0NhY2hlLCBXZWFrQ2FjaGUgfSBmcm9tIFwiQHdyeS9jYWNoZXNcIjtcblxuaW50ZXJmYWNlIENsZWFuYWJsZUNhY2hlIHtcbiAgc2l6ZTogbnVtYmVyO1xuICBtYXg/OiBudW1iZXI7XG4gIGNsZWFuOiAoKSA9PiB2b2lkO1xufVxuY29uc3Qgc2NoZWR1bGVkQ2xlYW51cCA9IG5ldyBXZWFrU2V0PENsZWFuYWJsZUNhY2hlPigpO1xuZnVuY3Rpb24gc2NoZWR1bGUoY2FjaGU6IENsZWFuYWJsZUNhY2hlKSB7XG4gIGlmIChjYWNoZS5zaXplIDw9IChjYWNoZS5tYXggfHwgLTEpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICghc2NoZWR1bGVkQ2xlYW51cC5oYXMoY2FjaGUpKSB7XG4gICAgc2NoZWR1bGVkQ2xlYW51cC5hZGQoY2FjaGUpO1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgY2FjaGUuY2xlYW4oKTtcbiAgICAgIHNjaGVkdWxlZENsZWFudXAuZGVsZXRlKGNhY2hlKTtcbiAgICB9LCAxMDApO1xuICB9XG59XG4vKipcbiAqIEBpbnRlcm5hbFxuICogQSB2ZXJzaW9uIG9mIFdlYWtDYWNoZSB0aGF0IHdpbGwgYXV0by1zY2hlZHVsZSBhIGNsZWFudXAgb2YgdGhlIGNhY2hlIHdoZW5cbiAqIGEgbmV3IGl0ZW0gaXMgYWRkZWQgYW5kIHRoZSBjYWNoZSByZWFjaGVkIG1heGltdW0gc2l6ZS5cbiAqIFRocm90dGxlZCB0byBvbmNlIHBlciAxMDBtcy5cbiAqXG4gKiBAcHJpdmF0ZVJlbWFya3NcbiAqIFNob3VsZCBiZSB1c2VkIHRocm91Z2hvdXQgdGhlIHJlc3Qgb2YgdGhlIGNvZGViYXNlIGluc3RlYWQgb2YgV2Vha0NhY2hlLFxuICogd2l0aCB0aGUgbm90YWJsZSBleGNlcHRpb24gb2YgdXNhZ2UgaW4gYHdyYXBgIGZyb20gYG9wdGltaXNtYCAtIHRoYXQgb25lXG4gKiBhbHJlYWR5IGhhbmRsZXMgY2xlYW51cCBhbmQgc2hvdWxkIHJlbWFpbiBhIGBXZWFrQ2FjaGVgLlxuICovXG5leHBvcnQgY29uc3QgQXV0b0NsZWFuZWRXZWFrQ2FjaGUgPSBmdW5jdGlvbiAoXG4gIG1heD86IG51bWJlciB8IHVuZGVmaW5lZCxcbiAgZGlzcG9zZT86ICgodmFsdWU6IGFueSwga2V5OiBhbnkpID0+IHZvaWQpIHwgdW5kZWZpbmVkXG4pIHtcbiAgLypcbiAgU29tZSBidWlsZHMgb2YgYFdlYWtDYWNoZWAgYXJlIGZ1bmN0aW9uIHByb3RvdHlwZXMsIHNvbWUgYXJlIGNsYXNzZXMuXG4gIFRoaXMgbGlicmFyeSBzdGlsbCBidWlsZHMgd2l0aCBhbiBFUzUgdGFyZ2V0LCBzbyB3ZSBjYW4ndCBleHRlbmQgdGhlXG4gIHJlYWwgY2xhc3Nlcy5cbiAgSW5zdGVhZCwgd2UgaGF2ZSB0byB1c2UgdGhpcyB3b3JrYXJvdW5kIHVudGlsIHdlIHN3aXRjaCB0byBhIG5ld2VyIGJ1aWxkXG4gIHRhcmdldC5cbiAgKi9cbiAgY29uc3QgY2FjaGUgPSBuZXcgV2Vha0NhY2hlKG1heCwgZGlzcG9zZSk7XG4gIGNhY2hlLnNldCA9IGZ1bmN0aW9uIChrZXk6IGFueSwgdmFsdWU6IGFueSkge1xuICAgIGNvbnN0IHJldCA9IFdlYWtDYWNoZS5wcm90b3R5cGUuc2V0LmNhbGwodGhpcywga2V5LCB2YWx1ZSk7XG4gICAgc2NoZWR1bGUodGhpcyBhcyBhbnkgYXMgQ2xlYW5hYmxlQ2FjaGUpO1xuICAgIHJldHVybiByZXQ7XG4gIH07XG4gIHJldHVybiBjYWNoZTtcbn0gYXMgYW55IGFzIHR5cGVvZiBXZWFrQ2FjaGU7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgdHlwZSBBdXRvQ2xlYW5lZFdlYWtDYWNoZTxLIGV4dGVuZHMgb2JqZWN0LCBWPiA9IFdlYWtDYWNoZTxLLCBWPjtcblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqIEEgdmVyc2lvbiBvZiBTdHJvbmdDYWNoZSB0aGF0IHdpbGwgYXV0by1zY2hlZHVsZSBhIGNsZWFudXAgb2YgdGhlIGNhY2hlIHdoZW5cbiAqIGEgbmV3IGl0ZW0gaXMgYWRkZWQgYW5kIHRoZSBjYWNoZSByZWFjaGVkIG1heGltdW0gc2l6ZS5cbiAqIFRocm90dGxlZCB0byBvbmNlIHBlciAxMDBtcy5cbiAqXG4gKiBAcHJpdmF0ZVJlbWFya3NcbiAqIFNob3VsZCBiZSB1c2VkIHRocm91Z2hvdXQgdGhlIHJlc3Qgb2YgdGhlIGNvZGViYXNlIGluc3RlYWQgb2YgU3Ryb25nQ2FjaGUsXG4gKiB3aXRoIHRoZSBub3RhYmxlIGV4Y2VwdGlvbiBvZiB1c2FnZSBpbiBgd3JhcGAgZnJvbSBgb3B0aW1pc21gIC0gdGhhdCBvbmVcbiAqIGFscmVhZHkgaGFuZGxlcyBjbGVhbnVwIGFuZCBzaG91bGQgcmVtYWluIGEgYFN0cm9uZ0NhY2hlYC5cbiAqL1xuZXhwb3J0IGNvbnN0IEF1dG9DbGVhbmVkU3Ryb25nQ2FjaGUgPSBmdW5jdGlvbiAoXG4gIG1heD86IG51bWJlciB8IHVuZGVmaW5lZCxcbiAgZGlzcG9zZT86ICgodmFsdWU6IGFueSwga2V5OiBhbnkpID0+IHZvaWQpIHwgdW5kZWZpbmVkXG4pIHtcbiAgLypcbiAgU29tZSBidWlsZHMgb2YgYFN0cm9uZ0NhY2hlYCBhcmUgZnVuY3Rpb24gcHJvdG90eXBlcywgc29tZSBhcmUgY2xhc3Nlcy5cbiAgVGhpcyBsaWJyYXJ5IHN0aWxsIGJ1aWxkcyB3aXRoIGFuIEVTNSB0YXJnZXQsIHNvIHdlIGNhbid0IGV4dGVuZCB0aGVcbiAgcmVhbCBjbGFzc2VzLlxuICBJbnN0ZWFkLCB3ZSBoYXZlIHRvIHVzZSB0aGlzIHdvcmthcm91bmQgdW50aWwgd2Ugc3dpdGNoIHRvIGEgbmV3ZXIgYnVpbGRcbiAgdGFyZ2V0LlxuICAqL1xuICBjb25zdCBjYWNoZSA9IG5ldyBTdHJvbmdDYWNoZShtYXgsIGRpc3Bvc2UpO1xuICBjYWNoZS5zZXQgPSBmdW5jdGlvbiAoa2V5OiBhbnksIHZhbHVlOiBhbnkpIHtcbiAgICBjb25zdCByZXQgPSBTdHJvbmdDYWNoZS5wcm90b3R5cGUuc2V0LmNhbGwodGhpcywga2V5LCB2YWx1ZSk7XG4gICAgc2NoZWR1bGUodGhpcyBhcyBhbnkgYXMgQ2xlYW5hYmxlQ2FjaGUpO1xuICAgIHJldHVybiByZXQ7XG4gIH07XG4gIHJldHVybiBjYWNoZTtcbn0gYXMgYW55IGFzIHR5cGVvZiBTdHJvbmdDYWNoZTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCB0eXBlIEF1dG9DbGVhbmVkU3Ryb25nQ2FjaGU8SywgVj4gPSBTdHJvbmdDYWNoZTxLLCBWPjtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/caches.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/canUseDOM.js":
/*!*********************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/canUseDOM.js ***!
  \*********************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   canUseDOM: () => (/* binding */ canUseDOM)\n/* harmony export */ });\n/* harmony import */ var _apollo_client_utilities_internal_globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @apollo/client/utilities/internal/globals */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/globals/maybe.js\");\n\n/**\n* @internal\n* \n* @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n*/ const canUseDOM = typeof (0,_apollo_client_utilities_internal_globals__WEBPACK_IMPORTED_MODULE_0__.maybe)(()=>window.document.createElement) === \"function\"; //# sourceMappingURL=canUseDOM.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvaW50ZXJuYWwvY2FuVXNlRE9NLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQWlFOzs7OztHQUcxRCxDQUFQLEtBQWEsQ0FBYixXQUNFLENBREYsTUFDUyxnRkFBSyxDQUFDLENBRGYsRUFDa0IsQ0FEbEIsTUFDMkIsQ0FBQyxDQUQ1QixPQUNvQyxDQUFDLENBRHJDLFlBQ2tELEVBRGxELElBQ3dELENBRHhELFNBQ2tFIiwic291cmNlcyI6WyIvaG9tZS91L1Byb2plY3RzL3NyYy91dGlsaXRpZXMvaW50ZXJuYWwvY2FuVXNlRE9NLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1heWJlIH0gZnJvbSBcIkBhcG9sbG8vY2xpZW50L3V0aWxpdGllcy9pbnRlcm5hbC9nbG9iYWxzXCI7XG5cbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBjYW5Vc2VET00gPVxuICB0eXBlb2YgbWF5YmUoKCkgPT4gd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpID09PSBcImZ1bmN0aW9uXCI7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/canUseDOM.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/canonicalStringify.js":
/*!******************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/canonicalStringify.js ***!
  \******************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   canonicalStringify: () => (/* binding */ canonicalStringify)\n/* harmony export */ });\n/* harmony import */ var _apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @apollo/client/utilities/environment */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/environment/index.development.js\");\n/* harmony import */ var _caching_sizes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../caching/sizes.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/caching/sizes.js\");\n/* harmony import */ var _caches_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./caches.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/caches.js\");\n/* harmony import */ var _getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getMemoryInternals.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getMemoryInternals.js\");\n\n\n\n\n/**\n * Serializes a value to JSON with object keys in a consistent, sorted order.\n *\n * @remarks\n *\n * Unlike `JSON.stringify()`, this function ensures that object keys are always\n * serialized in the same alphabetical order, regardless of their original order.\n * This makes it suitable for creating consistent cache keys from objects,\n * comparing objects by their serialized representation, or generating\n * deterministic hashes of objects.\n *\n * To achieve performant sorting, this function uses a `Map` from JSON-serialized\n * arrays of keys (in any order) to sorted arrays of the same keys, with a\n * single sorted array reference shared by all permutations of the keys.\n *\n * As a drawback, this function will add a little more memory for every object\n * encountered that has different (more, less, a different order of) keys than\n * in the past.\n *\n * In a typical application, this extra memory usage should not play a\n * significant role, as `canonicalStringify` will be called for only a limited\n * number of object shapes, and the cache will not grow beyond a certain point.\n * But in some edge cases, this could be a problem. Use canonicalStringify.reset()\n * as a way to clear the memoization cache.\n *\n * @param value - The value to stringify\n * @returns JSON string with consistently ordered object keys\n *\n * @example\n *\n * ```ts\n * import { canonicalStringify } from \"@apollo/client/utilities\";\n *\n * const obj1 = { b: 2, a: 1 };\n * const obj2 = { a: 1, b: 2 };\n *\n * console.log(canonicalStringify(obj1)); // '{\"a\":1,\"b\":2}'\n * console.log(canonicalStringify(obj2)); // '{\"a\":1,\"b\":2}'\n * ```\n */ const canonicalStringify = Object.assign(function canonicalStringify(value) {\n    return JSON.stringify(value, stableObjectReplacer);\n}, {\n    reset () {\n        // Clearing the sortingMap will reclaim all cached memory, without\n        // affecting the logical results of canonicalStringify, but potentially\n        // sacrificing performance until the cache is refilled.\n        sortingMap = new _caches_js__WEBPACK_IMPORTED_MODULE_0__.AutoCleanedStrongCache(_caching_sizes_js__WEBPACK_IMPORTED_MODULE_1__.cacheSizes.canonicalStringify || 1000 /* defaultCacheSizes.canonicalStringify */ );\n    }\n});\nif (_apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_2__.__DEV__) {\n    (0,_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_3__.registerGlobalCache)(\"canonicalStringify\", ()=>sortingMap.size);\n}\n// Values are JSON-serialized arrays of object keys (in any order), and values\n// are sorted arrays of the same keys.\nlet sortingMap;\ncanonicalStringify.reset();\n// The JSON.stringify function takes an optional second argument called a\n// replacer function. This function is called for each key-value pair in the\n// object being stringified, and its return value is used instead of the\n// original value. If the replacer function returns a new value, that value is\n// stringified as JSON instead of the original value of the property.\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#the_replacer_parameter\nfunction stableObjectReplacer(key, value) {\n    if (value && typeof value === \"object\") {\n        const proto = Object.getPrototypeOf(value);\n        // We don't want to mess with objects that are not \"plain\" objects, which\n        // means their prototype is either Object.prototype or null. This check also\n        // prevents needlessly rearranging the indices of arrays.\n        if (proto === Object.prototype || proto === null) {\n            const keys = Object.keys(value);\n            // If keys is already sorted, let JSON.stringify serialize the original\n            // value instead of creating a new object with keys in the same order.\n            if (keys.every(everyKeyInOrder)) return value;\n            const unsortedKey = JSON.stringify(keys);\n            let sortedKeys = sortingMap.get(unsortedKey);\n            if (!sortedKeys) {\n                keys.sort();\n                const sortedKey = JSON.stringify(keys);\n                // Checking for sortedKey in the sortingMap allows us to share the same\n                // sorted array reference for all permutations of the same set of keys.\n                sortedKeys = sortingMap.get(sortedKey) || keys;\n                sortingMap.set(unsortedKey, sortedKeys);\n                sortingMap.set(sortedKey, sortedKeys);\n            }\n            const sortedObject = Object.create(proto);\n            // Reassigning the keys in sorted order will cause JSON.stringify to\n            // serialize them in sorted order.\n            sortedKeys.forEach((key)=>{\n                sortedObject[key] = value[key];\n            });\n            return sortedObject;\n        }\n    }\n    return value;\n}\n// Since everything that happens in stableObjectReplacer benefits from being as\n// efficient as possible, we use a static function as the callback for\n// keys.every in order to test if the provided keys are already sorted without\n// allocating extra memory for a callback.\nfunction everyKeyInOrder(key, i, keys) {\n    return i === 0 || keys[i - 1] <= key;\n} //# sourceMappingURL=canonicalStringify.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/canonicalStringify.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/checkDocument.js":
/*!*************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/checkDocument.js ***!
  \*************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkDocument: () => (/* binding */ checkDocument)\n/* harmony export */ });\n/* harmony import */ var _wry_caches__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @wry/caches */ \"(app-pages-browser)/../../node_modules/.pnpm/@wry+caches@1.0.1/node_modules/@wry/caches/lib/weak.js\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! graphql */ \"(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/visitor.mjs\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! graphql */ \"(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/kinds.mjs\");\n/* harmony import */ var optimism__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! optimism */ \"(app-pages-browser)/../../node_modules/.pnpm/optimism@0.18.1/node_modules/optimism/lib/index.js\");\n/* harmony import */ var _apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @apollo/client/utilities/environment */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/environment/index.development.js\");\n/* harmony import */ var _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @apollo/client/utilities/invariant */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/invariant/index.development.js\");\n/* harmony import */ var _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @apollo/client/utilities/invariant */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/invariant/index.js\");\n/* harmony import */ var _caching_sizes_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../caching/sizes.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/caching/sizes.js\");\n/* harmony import */ var _getOperationName_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./getOperationName.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getOperationName.js\");\n// Checks the document for errors and throws an exception if there is an error.\n\n\n\n\n\n\n\n/**\n* Checks the document for errors and throws an exception if there is an error.\n*\n* @internal\n* \n* @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n*/ const checkDocument = (0,optimism__WEBPACK_IMPORTED_MODULE_0__.wrap)((doc, expectedType)=>{\n    (0,_apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(doc && doc.kind === \"Document\", 1);\n    const operations = doc.definitions.filter((d)=>d.kind === \"OperationDefinition\");\n    if (_apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_2__.__DEV__) {\n        doc.definitions.forEach((definition)=>{\n            if (definition.kind !== \"OperationDefinition\" && definition.kind !== \"FragmentDefinition\") {\n                throw (0,_apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_3__.newInvariantError)(2, definition.kind);\n            }\n        });\n        (0,_apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(operations.length <= 1, 3, operations.length);\n    }\n    if (expectedType) {\n        (0,_apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(operations.length == 1 && operations[0].operation === expectedType, 4, expectedType, expectedType, operations[0].operation);\n    }\n    (0,graphql__WEBPACK_IMPORTED_MODULE_4__.visit)(doc, {\n        Field (field, _, __, path) {\n            if (field.alias && (field.alias.value === \"__typename\" || field.alias.value.startsWith(\"__ac_\")) && field.alias.value !== field.name.value) {\n                // not using `invariant` so path calculation only happens in error case\n                let current = doc, fieldPath = [];\n                for (const key of path){\n                    current = current[key];\n                    if (current.kind === graphql__WEBPACK_IMPORTED_MODULE_5__.Kind.FIELD) {\n                        var _current_alias;\n                        fieldPath.push(((_current_alias = current.alias) === null || _current_alias === void 0 ? void 0 : _current_alias.value) || current.name.value);\n                    }\n                }\n                fieldPath.splice(-1, 1, field.name.value);\n                throw (0,_apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_3__.newInvariantError)(5, field.alias.value, fieldPath.join(\".\"), operations[0].operation, (0,_getOperationName_js__WEBPACK_IMPORTED_MODULE_6__.getOperationName)(doc, \"(anonymous)\"));\n            }\n        }\n    });\n}, {\n    max: _caching_sizes_js__WEBPACK_IMPORTED_MODULE_7__.cacheSizes[\"checkDocument\"] || 2000 /* defaultCacheSizes[\"checkDocument\"] */ ,\n    cache: _wry_caches__WEBPACK_IMPORTED_MODULE_8__.WeakCache\n}); //# sourceMappingURL=checkDocument.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvaW50ZXJuYWwvY2hlY2tEb2N1bWVudC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7QUFFdUM7QUFHRjtBQUNOO0FBRStCO0FBSW5CO0FBR0s7QUFFUTs7Ozs7OztHQU9qRCxDQUFQLEtBQWEsQ0FBYixlQUdZLDhDQUFJLENBQ2QsQ0FBQyxDQUpILEVBSW9CLEVBQUUsQ0FKdEIsV0FJc0QsRUFBUSxDQUo5RDtJQUtJLDZFQUFKLENBQ00sQ0FETixNQUNhLENBRGIsRUFDZ0IsQ0FBQyxDQURqQixRQUMwQixDQUQxQixhQUlLO0lBQ0QsQ0FBSixLQUFVLENBQVYsWUFBdUIsQ0FBdkIsRUFBMEIsQ0FBQyxDQUEzQixVQUFzQyxDQUFDLENBQXZDLEtBQTZDLENBQ3ZDLENBQUMsQ0FBQyxFQUFFLENBQUcsQ0FBQyxDQUFDLENBRGYsUUFDd0IsQ0FEeEIsb0JBQzZDLENBQ3hDO0lBQ0QsQ0FBSixHQUFRLHlFQUFPLEVBQUU7UUFDWCxDQUFOLEVBQVMsQ0FBQyxDQUFWLFVBQXFCLENBQUMsQ0FBdEIsTUFBNkIsQ0FBQyxDQUFDLENBQS9CLFNBQXlDLEVBQUUsQ0FBM0M7WUFDUSxDQUFSLEdBQ1UsQ0FEVixTQUNvQixDQUFDLENBRHJCLFFBQzhCLENBRDlCLHdCQUVVLENBQVYsU0FBb0IsQ0FBQyxDQUFyQixRQUE4QixDQUE5QixtQkFBa0QsRUFDeEM7Z0JBQ0EsQ0FBVixLQUFnQixxRkFBaEIsSUFFWSxDQUZaLFNBRXNCLENBQUMsQ0FGdkIsSUFHVztZQUNIO1FBQ0YsQ0FBQyxDQUFDO1FBRUYsNkVBQU4sQ0FDUSxDQURSLFNBQ2tCLENBQUMsQ0FEbkIsU0FDNkIsTUFFckIsQ0FIUixTQUdrQixDQUFDLENBSG5CLE1BSU87SUFDSDtJQUVBLENBQUosR0FBUSxDQUFSLFdBQW9CLEVBQUU7UUFDaEIsNkVBQU4sQ0FDUSxDQURSLFNBQ2tCLENBQUMsQ0FEbkIsU0FDNkIsRUFEN0IsR0FDa0MsQ0FEbEMsU0FDNEMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQURoRCxhQUM4RCxDQUQ5RCxnQkFHUSxDQUhSLGFBSVEsQ0FKUixhQUtRLENBTFIsU0FLa0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUx0QjtJQU9JO0lBRUEsOENBQUssQ0FBQyxDQUFWLEVBQWEsRUFBRTtRQUNULENBQU4sSUFBVyxFQUFDLENBQVosSUFBaUIsRUFBRSxDQUFDLEVBQUUsQ0FBdEIsQ0FBd0IsRUFBRSxDQUExQixHQUE4QixFQUE5QjtZQUNRLENBQVIsR0FDVSxDQURWLElBQ2UsQ0FBQyxDQURoQixTQUVXLENBQVgsSUFBZ0IsQ0FBQyxDQUFqQixJQUFzQixDQUFDLENBQXZCLFNBQWlDLENBQWpDLGVBQ1ksQ0FBWixJQUFpQixDQUFDLENBQWxCLElBQXVCLENBQUMsQ0FBeEIsSUFBNkIsQ0FBQyxDQUE5QixTQUF3QyxDQUFDLENBQXpDLE9BQWdELENBQUMsRUFBakQsRUFDVSxDQUFWLElBQWUsQ0FBQyxDQUFoQixJQUFxQixDQUFDLENBQXRCLFNBQWdDLENBQWhDLElBQXFDLENBQUMsQ0FBdEMsR0FBMEMsQ0FBQyxDQUEzQyxJQUFnRCxFQUN0QztnQkFDQSxDQUFWO2dCQUNVLENBQVYsR0FBYyxDQUFkLFNBQWlDLENBQWpDLEVBQW9DLEVBQ3hCLENBRFosV0FDa0MsQ0FEbEMsQ0FDb0M7Z0JBQzFCLENBQVYsSUFBZSxDQUFmLEtBQXFCLENBQXJCLE1BQTRCLENBQTVCLEdBQWdDLENBQUU7b0JBQ3RCLENBQVosU0FBdUIsQ0FBdkIsTUFBc0MsQ0FBQyxDQUF2QyxFQUEwQyxDQUFDO29CQUMvQixDQUFaLEdBQWdCLENBQWhCLE1BQXVCLENBQUMsQ0FBeEIsUUFBaUMseUNBQUksQ0FBQyxDQUF0QyxJQUEyQyxFQUFFOzt3QkFDL0IsQ0FBZCxRQUF1QixDQUFDLENBQXhCLEdBQTRCLDRCQUFTLENBQXJDLElBQTBDLENBQTFDLGtEQUE2QixDQUE3QixNQUFvQyxRQUFRLENBQTVDLFNBQXFELENBQXJELE1BQTRELENBQUMsQ0FBN0QsR0FBaUUsQ0FBQyxDQUFsRSxJQUF1RSxDQUFDO29CQUM1RDtnQkFDRjtnQkFDQSxDQUFWLFFBQW1CLENBQUMsQ0FBcEIsS0FBMEIsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBbEMsSUFBdUMsQ0FBQyxDQUF4QyxHQUE0QyxDQUFDLENBQTdDLElBQWtELENBQUM7Z0JBRXpDLENBQVYsS0FBZ0IscUZBQWhCLElBRVksQ0FGWixJQUVpQixDQUFDLENBRmxCLElBRXVCLENBQUMsQ0FGeEIsTUFHWSxDQUhaLFFBR3FCLENBQUMsQ0FIdEIsR0FHMEIsQ0FBQyxDQUgzQixFQUc4QixHQUNsQixDQUpaLFNBSXNCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FKMUIsVUFLWSxzRUFBZ0IsQ0FBQyxDQUw3QixFQUtnQyxFQUFFLENBTGxDLFlBSytDO1lBRXZDO1FBQ0YsQ0FBQztJQUNQLENBQUssQ0FBQztBQUNKLENBQUMsRUFDRDtJQUNFLENBQUosRUFBTyxFQUFFLHlEQUFVLENBQUMsQ0FBcEIsY0FBbUMsRUFBbkMsZ0RBQTBFO0lBQ3RFLENBQUosSUFBUyxFQUFFLGtEQUFTO0FBQ3BCLENBQUcsQ0FDRiIsInNvdXJjZXMiOlsiL2hvbWUvdS9Qcm9qZWN0cy9zcmMvdXRpbGl0aWVzL2ludGVybmFsL2NoZWNrRG9jdW1lbnQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ2hlY2tzIHRoZSBkb2N1bWVudCBmb3IgZXJyb3JzIGFuZCB0aHJvd3MgYW4gZXhjZXB0aW9uIGlmIHRoZXJlIGlzIGFuIGVycm9yLlxuXG5pbXBvcnQgeyBXZWFrQ2FjaGUgfSBmcm9tIFwiQHdyeS9jYWNoZXNcIjtcbmltcG9ydCB0eXBlIHsgQVNUTm9kZSB9IGZyb20gXCJncmFwaHFsXCI7XG5pbXBvcnQgdHlwZSB7IERvY3VtZW50Tm9kZSwgT3BlcmF0aW9uVHlwZU5vZGUgfSBmcm9tIFwiZ3JhcGhxbFwiO1xuaW1wb3J0IHsgS2luZCwgdmlzaXQgfSBmcm9tIFwiZ3JhcGhxbFwiO1xuaW1wb3J0IHsgd3JhcCB9IGZyb20gXCJvcHRpbWlzbVwiO1xuXG5pbXBvcnQgeyBfX0RFVl9fIH0gZnJvbSBcIkBhcG9sbG8vY2xpZW50L3V0aWxpdGllcy9lbnZpcm9ubWVudFwiO1xuaW1wb3J0IHtcbiAgaW52YXJpYW50LFxuICBuZXdJbnZhcmlhbnRFcnJvcixcbn0gZnJvbSBcIkBhcG9sbG8vY2xpZW50L3V0aWxpdGllcy9pbnZhcmlhbnRcIjtcblxuaW1wb3J0IHsgZGVmYXVsdENhY2hlU2l6ZXMgfSBmcm9tIFwiLi4vLi4vdXRpbGl0aWVzL2NhY2hpbmcvc2l6ZXMuanNcIjtcbmltcG9ydCB7IGNhY2hlU2l6ZXMgfSBmcm9tIFwiLi4vY2FjaGluZy9zaXplcy5qc1wiO1xuXG5pbXBvcnQgeyBnZXRPcGVyYXRpb25OYW1lIH0gZnJvbSBcIi4vZ2V0T3BlcmF0aW9uTmFtZS5qc1wiO1xuXG4vKipcbiAqIENoZWNrcyB0aGUgZG9jdW1lbnQgZm9yIGVycm9ycyBhbmQgdGhyb3dzIGFuIGV4Y2VwdGlvbiBpZiB0aGVyZSBpcyBhbiBlcnJvci5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IGNoZWNrRG9jdW1lbnQ6IChcbiAgZG9jOiBEb2N1bWVudE5vZGUsXG4gIGV4cGVjdGVkVHlwZT86IE9wZXJhdGlvblR5cGVOb2RlXG4pID0+IHZvaWQgPSB3cmFwKFxuICAoZG9jOiBEb2N1bWVudE5vZGUsIGV4cGVjdGVkVHlwZT86IE9wZXJhdGlvblR5cGVOb2RlKTogdm9pZCA9PiB7XG4gICAgaW52YXJpYW50KFxuICAgICAgZG9jICYmIGRvYy5raW5kID09PSBcIkRvY3VtZW50XCIsXG4gICAgICBgRXhwZWN0aW5nIGEgcGFyc2VkIEdyYXBoUUwgZG9jdW1lbnQuIFBlcmhhcHMgeW91IG5lZWQgdG8gd3JhcCB0aGUgcXVlcnkgXFxcbnN0cmluZyBpbiBhIFwiZ3FsXCIgdGFnPyBodHRwOi8vZG9jcy5hcG9sbG9zdGFjay5jb20vYXBvbGxvLWNsaWVudC9jb3JlLmh0bWwjZ3FsYFxuICAgICk7XG4gICAgY29uc3Qgb3BlcmF0aW9ucyA9IGRvYy5kZWZpbml0aW9ucy5maWx0ZXIoXG4gICAgICAoZCkgPT4gZC5raW5kID09PSBcIk9wZXJhdGlvbkRlZmluaXRpb25cIlxuICAgICk7XG4gICAgaWYgKF9fREVWX18pIHtcbiAgICAgIGRvYy5kZWZpbml0aW9ucy5mb3JFYWNoKChkZWZpbml0aW9uKSA9PiB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBkZWZpbml0aW9uLmtpbmQgIT09IFwiT3BlcmF0aW9uRGVmaW5pdGlvblwiICYmXG4gICAgICAgICAgZGVmaW5pdGlvbi5raW5kICE9PSBcIkZyYWdtZW50RGVmaW5pdGlvblwiXG4gICAgICAgICkge1xuICAgICAgICAgIHRocm93IG5ld0ludmFyaWFudEVycm9yKFxuICAgICAgICAgICAgYFNjaGVtYSB0eXBlIGRlZmluaXRpb25zIG5vdCBhbGxvd2VkIGluIHF1ZXJpZXMuIEZvdW5kOiBcIiVzXCJgLFxuICAgICAgICAgICAgZGVmaW5pdGlvbi5raW5kXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGludmFyaWFudChcbiAgICAgICAgb3BlcmF0aW9ucy5sZW5ndGggPD0gMSxcbiAgICAgICAgYEFtYmlndW91cyBHcmFwaFFMIGRvY3VtZW50OiBjb250YWlucyAlcyBvcGVyYXRpb25zYCxcbiAgICAgICAgb3BlcmF0aW9ucy5sZW5ndGhcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKGV4cGVjdGVkVHlwZSkge1xuICAgICAgaW52YXJpYW50KFxuICAgICAgICBvcGVyYXRpb25zLmxlbmd0aCA9PSAxICYmIG9wZXJhdGlvbnNbMF0ub3BlcmF0aW9uID09PSBleHBlY3RlZFR5cGUsXG4gICAgICAgIGBSdW5uaW5nIGEgJXMgcmVxdWlyZXMgYSBncmFwaHFsIGAgKyBgJXMsIGJ1dCBhICVzIHdhcyB1c2VkIGluc3RlYWQuYCxcbiAgICAgICAgZXhwZWN0ZWRUeXBlLFxuICAgICAgICBleHBlY3RlZFR5cGUsXG4gICAgICAgIG9wZXJhdGlvbnNbMF0ub3BlcmF0aW9uXG4gICAgICApO1xuICAgIH1cblxuICAgIHZpc2l0KGRvYywge1xuICAgICAgRmllbGQoZmllbGQsIF8sIF9fLCBwYXRoKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBmaWVsZC5hbGlhcyAmJlxuICAgICAgICAgIChmaWVsZC5hbGlhcy52YWx1ZSA9PT0gXCJfX3R5cGVuYW1lXCIgfHxcbiAgICAgICAgICAgIGZpZWxkLmFsaWFzLnZhbHVlLnN0YXJ0c1dpdGgoXCJfX2FjX1wiKSkgJiZcbiAgICAgICAgICBmaWVsZC5hbGlhcy52YWx1ZSAhPT0gZmllbGQubmFtZS52YWx1ZVxuICAgICAgICApIHtcbiAgICAgICAgICAvLyBub3QgdXNpbmcgYGludmFyaWFudGAgc28gcGF0aCBjYWxjdWxhdGlvbiBvbmx5IGhhcHBlbnMgaW4gZXJyb3IgY2FzZVxuICAgICAgICAgIGxldCBjdXJyZW50OiBBU1ROb2RlID0gZG9jLFxuICAgICAgICAgICAgZmllbGRQYXRoOiBzdHJpbmdbXSA9IFtdO1xuICAgICAgICAgIGZvciAoY29uc3Qga2V5IG9mIHBhdGgpIHtcbiAgICAgICAgICAgIGN1cnJlbnQgPSAoY3VycmVudCBhcyBhbnkpW2tleV07XG4gICAgICAgICAgICBpZiAoY3VycmVudC5raW5kID09PSBLaW5kLkZJRUxEKSB7XG4gICAgICAgICAgICAgIGZpZWxkUGF0aC5wdXNoKGN1cnJlbnQuYWxpYXM/LnZhbHVlIHx8IGN1cnJlbnQubmFtZS52YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGZpZWxkUGF0aC5zcGxpY2UoLTEsIDEsIGZpZWxkLm5hbWUudmFsdWUpO1xuXG4gICAgICAgICAgdGhyb3cgbmV3SW52YXJpYW50RXJyb3IoXG4gICAgICAgICAgICAnYCVzYCBpcyBhIGZvcmJpZGRlbiBmaWVsZCBhbGlhcyBuYW1lIGluIHRoZSBzZWxlY3Rpb24gc2V0IGZvciBmaWVsZCBgJXNgIGluICVzIFwiJXNcIi4nLFxuICAgICAgICAgICAgZmllbGQuYWxpYXMudmFsdWUsXG4gICAgICAgICAgICBmaWVsZFBhdGguam9pbihcIi5cIiksXG4gICAgICAgICAgICBvcGVyYXRpb25zWzBdLm9wZXJhdGlvbixcbiAgICAgICAgICAgIGdldE9wZXJhdGlvbk5hbWUoZG9jLCBcIihhbm9ueW1vdXMpXCIpXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9KTtcbiAgfSxcbiAge1xuICAgIG1heDogY2FjaGVTaXplc1tcImNoZWNrRG9jdW1lbnRcIl0gfHwgZGVmYXVsdENhY2hlU2l6ZXNbXCJjaGVja0RvY3VtZW50XCJdLFxuICAgIGNhY2hlOiBXZWFrQ2FjaGUsXG4gIH1cbik7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/checkDocument.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/cloneDeep.js":
/*!*********************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/cloneDeep.js ***!
  \*********************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cloneDeep: () => (/* binding */ cloneDeep)\n/* harmony export */ });\nconst { toString } = Object.prototype;\n/**\n* Deeply clones a value to create a new instance.\n*\n* @internal\n* \n* @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n*/ function cloneDeep(value) {\n    return __cloneDeep(value);\n}\nfunction __cloneDeep(val, seen) {\n    switch(toString.call(val)){\n        case \"[object Array]\":\n            {\n                seen = seen || new Map();\n                if (seen.has(val)) return seen.get(val);\n                const copy = val.slice(0);\n                seen.set(val, copy);\n                copy.forEach(function(child, i) {\n                    copy[i] = __cloneDeep(child, seen);\n                });\n                return copy;\n            }\n        case \"[object Object]\":\n            {\n                seen = seen || new Map();\n                if (seen.has(val)) return seen.get(val);\n                // High fidelity polyfills of Object.create and Object.getPrototypeOf are\n                // possible in all JS environments, so we will assume they exist/work.\n                const copy = Object.create(Object.getPrototypeOf(val));\n                seen.set(val, copy);\n                Object.keys(val).forEach((key)=>{\n                    copy[key] = __cloneDeep(val[key], seen);\n                });\n                return copy;\n            }\n        default:\n            return val;\n    }\n} //# sourceMappingURL=cloneDeep.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvaW50ZXJuYWwvY2xvbmVEZWVwLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNLEVBQUUsQ0FBUixZQUFxQixDQUFyQixLQUEyQixDQUFDLENBQTVCLFFBQXFDOzs7Ozs7O0dBT3JDLFNBQWdCLENBQWhCLFFBQXlCLENBQUksQ0FBN0IsSUFBcUMsRUFBckM7SUFDRSxDQUFGLE1BQVMsQ0FBVCxVQUFvQixDQUFDLENBQXJCLElBQTBCLENBQUM7QUFDM0I7QUFFQSxTQUFTLENBQVQsVUFBb0IsQ0FBSSxDQUF4QixFQUE4QixFQUFFLENBQWhDLEdBQW9ELEVBQXBEO0lBQ0UsQ0FBRixjQUFrQixDQUFDLENBQW5CLEdBQXVCLENBQUMsQ0FBeEIsRUFBMkIsQ0FBQyxFQUFFO1FBQzFCLENBQUosSUFBUyxDQUFULGVBQXlCO1lBQUU7Z0JBQ3JCLENBQU4sTUFBYSxDQUFiLE9BQXFCLENBQXJCLEdBQXlCLENBQXpCLEVBQTRCLENBQTVCLENBQThCO2dCQUN4QixDQUFOLEdBQVUsQ0FBVixHQUFjLENBQUMsQ0FBZixFQUFrQixDQUFDLENBQW5CLEVBQXNCLENBQUMsRUFBRSxDQUF6QixNQUFnQyxDQUFoQyxHQUFvQyxDQUFDLENBQXJDLEVBQXdDLENBQUMsQ0FBekMsRUFBNEMsQ0FBQztnQkFDdkMsQ0FBTixLQUFZLENBQVosTUFBK0IsQ0FBL0IsRUFBMEMsQ0FBQyxDQUEzQyxJQUFnRCxDQUFDLENBQUMsQ0FBQztnQkFDN0MsQ0FBTixHQUFVLENBQUMsQ0FBWCxFQUFjLENBQUMsQ0FBZixFQUFrQixFQUFFLENBQXBCLEdBQXdCLENBQUM7Z0JBQ25CLENBQU4sR0FBVSxDQUFDLENBQVgsTUFBa0IsQ0FBQyxDQUFuQixhQUFrQyxFQUFFLENBQUMsRUFBckM7b0JBQ1EsQ0FBUixHQUFZLENBQUMsQ0FBQyxFQUFkLEVBQWtCLENBQWxCLFVBQTZCLENBQUMsQ0FBOUIsSUFBbUMsRUFBRSxDQUFyQyxHQUF5QyxDQUFDO2dCQUNwQyxDQUFDLENBQUM7Z0JBQ0YsQ0FBTixNQUFhLENBQWIsR0FBaUI7WUFDYjtRQUVBLENBQUosSUFBUyxDQUFULGdCQUEwQjtZQUFFO2dCQUN0QixDQUFOLE1BQWEsQ0FBYixPQUFxQixDQUFyQixHQUF5QixDQUF6QixFQUE0QixDQUE1QixDQUE4QjtnQkFDeEIsQ0FBTixHQUFVLENBQVYsR0FBYyxDQUFDLENBQWYsRUFBa0IsQ0FBQyxDQUFuQixFQUFzQixDQUFDLEVBQUUsQ0FBekIsTUFBZ0MsQ0FBaEMsR0FBb0MsQ0FBQyxDQUFyQyxFQUF3QyxDQUFDLENBQXpDLEVBQTRDLENBQUM7Z0JBQ3ZDLENBQU47Z0JBQ00sQ0FBTjtnQkFDTSxDQUFOLEtBQVksQ0FBWixNQUFtQixDQUFuQixLQUF5QixDQUFDLENBQTFCLEtBQWdDLENBQUMsQ0FBakMsS0FBdUMsQ0FBQyxDQUF4QyxhQUFzRCxDQUFDLENBQXZELEVBQTBELENBQUMsQ0FBQztnQkFDdEQsQ0FBTixHQUFVLENBQUMsQ0FBWCxFQUFjLENBQUMsQ0FBZixFQUFrQixFQUFFLENBQXBCLEdBQXdCLENBQUM7Z0JBQ25CLENBQU4sS0FBWSxDQUFDLENBQWIsR0FBaUIsQ0FBQyxDQUFsQixFQUFnRCxDQUFDLENBQUMsQ0FBbEQsTUFBeUQsQ0FBQyxDQUFDLENBQTNELEVBQThELEVBQUUsQ0FBaEU7b0JBQ1EsQ0FBUixHQUFZLENBQUMsQ0FBYixFQUFnQixFQUFoQixFQUFvQixDQUFwQixVQUErQixDQUFFLENBQWpDLEVBQTRDLENBQUMsQ0FBN0MsRUFBZ0QsQ0FBQyxFQUFFLENBQW5ELEdBQXVELENBQUM7Z0JBQ2xELENBQUMsQ0FBQztnQkFDRixDQUFOLE1BQWEsQ0FBYixHQUFpQjtZQUNiO1FBRUEsQ0FBSjtZQUNNLENBQU4sTUFBYSxDQUFiLEVBQWdCO0lBQ2Q7QUFDRiIsInNvdXJjZXMiOlsiL2hvbWUvdS9Qcm9qZWN0cy9zcmMvdXRpbGl0aWVzL2ludGVybmFsL2Nsb25lRGVlcC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IHRvU3RyaW5nIH0gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIERlZXBseSBjbG9uZXMgYSB2YWx1ZSB0byBjcmVhdGUgYSBuZXcgaW5zdGFuY2UuXG4gKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjbG9uZURlZXA8VD4odmFsdWU6IFQpOiBUIHtcbiAgcmV0dXJuIF9fY2xvbmVEZWVwKHZhbHVlKTtcbn1cblxuZnVuY3Rpb24gX19jbG9uZURlZXA8VD4odmFsOiBULCBzZWVuPzogTWFwPGFueSwgYW55Pik6IFQge1xuICBzd2l0Y2ggKHRvU3RyaW5nLmNhbGwodmFsKSkge1xuICAgIGNhc2UgXCJbb2JqZWN0IEFycmF5XVwiOiB7XG4gICAgICBzZWVuID0gc2VlbiB8fCBuZXcgTWFwKCk7XG4gICAgICBpZiAoc2Vlbi5oYXModmFsKSkgcmV0dXJuIHNlZW4uZ2V0KHZhbCk7XG4gICAgICBjb25zdCBjb3B5OiBUICYgYW55W10gPSAodmFsIGFzIGFueSkuc2xpY2UoMCk7XG4gICAgICBzZWVuLnNldCh2YWwsIGNvcHkpO1xuICAgICAgY29weS5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCwgaSkge1xuICAgICAgICBjb3B5W2ldID0gX19jbG9uZURlZXAoY2hpbGQsIHNlZW4pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gY29weTtcbiAgICB9XG5cbiAgICBjYXNlIFwiW29iamVjdCBPYmplY3RdXCI6IHtcbiAgICAgIHNlZW4gPSBzZWVuIHx8IG5ldyBNYXAoKTtcbiAgICAgIGlmIChzZWVuLmhhcyh2YWwpKSByZXR1cm4gc2Vlbi5nZXQodmFsKTtcbiAgICAgIC8vIEhpZ2ggZmlkZWxpdHkgcG9seWZpbGxzIG9mIE9iamVjdC5jcmVhdGUgYW5kIE9iamVjdC5nZXRQcm90b3R5cGVPZiBhcmVcbiAgICAgIC8vIHBvc3NpYmxlIGluIGFsbCBKUyBlbnZpcm9ubWVudHMsIHNvIHdlIHdpbGwgYXNzdW1lIHRoZXkgZXhpc3Qvd29yay5cbiAgICAgIGNvbnN0IGNvcHkgPSBPYmplY3QuY3JlYXRlKE9iamVjdC5nZXRQcm90b3R5cGVPZih2YWwpKTtcbiAgICAgIHNlZW4uc2V0KHZhbCwgY29weSk7XG4gICAgICBPYmplY3Qua2V5cyh2YWwgYXMgVCAmIFJlY29yZDxzdHJpbmcsIGFueT4pLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICBjb3B5W2tleV0gPSBfX2Nsb25lRGVlcCgodmFsIGFzIGFueSlba2V5XSwgc2Vlbik7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBjb3B5O1xuICAgIH1cblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gdmFsO1xuICB9XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/cloneDeep.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/compact.js":
/*!*******************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/compact.js ***!
  \*******************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   compact: () => (/* binding */ compact)\n/* harmony export */ });\n/**\n* Merges the provided objects shallowly and removes\n* all properties with an `undefined` value\n*\n* @internal\n* \n* @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n*/ function compact() {\n    for(var _len = arguments.length, objects = new Array(_len), _key = 0; _key < _len; _key++){\n        objects[_key] = arguments[_key];\n    }\n    const result = {};\n    objects.forEach((obj)=>{\n        if (!obj) return;\n        Object.keys(obj).forEach((key)=>{\n            const value = obj[key];\n            if (value !== void 0) {\n                result[key] = value;\n            }\n        });\n    });\n    return result;\n} //# sourceMappingURL=compact.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvaW50ZXJuYWwvY29tcGFjdC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztHQVFBLFNBQWdCLENBQWhCLE1BQXVCO1FBQ3JCLENBREY7UUFDSyxDQURMLDhCQUNtQjs7SUFFakIsQ0FBRixLQUFRLENBQVIsUUFBaUIsQ0FBakIsQ0FBaUQ7SUFFL0MsQ0FBRixNQUFTLENBQUMsQ0FBVixNQUFpQixDQUFDLENBQUMsQ0FBbkIsRUFBc0IsRUFBRSxDQUF4QjtRQUNJLENBQUosR0FBUSxDQUFDLENBQVQsRUFBWSxFQUFFLENBQWQ7UUFDSSxDQUFKLEtBQVUsQ0FBQyxDQUFYLEdBQWUsQ0FBQyxDQUFoQixFQUFtQixDQUFDLENBQUMsQ0FBckIsTUFBNEIsQ0FBQyxDQUFDLENBQTlCLEVBQWlDLEVBQUUsQ0FBbkM7WUFDTSxDQUFOLEtBQVksQ0FBWixPQUFxQixDQUFyQixFQUFnQyxDQUFDLENBQWpDLEVBQW9DLENBQUM7WUFDL0IsQ0FBTixHQUFVLENBQVYsU0FBb0IsQ0FBcEIsSUFBeUIsQ0FBQyxFQUFFO2dCQUNwQixDQUFSLEtBQWMsQ0FBQyxDQUFmLEVBQWtCLEVBQWxCLEVBQXNCLENBQXRCLElBQTJCO1lBQ3JCO1FBQ0YsQ0FBQyxDQUFDO0lBQ0osQ0FBQyxDQUFDO0lBRUYsQ0FBRixNQUFTLENBQVQsS0FBZTtBQUNmIiwic291cmNlcyI6WyIvaG9tZS91L1Byb2plY3RzL3NyYy91dGlsaXRpZXMvaW50ZXJuYWwvY29tcGFjdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFR1cGxlVG9JbnRlcnNlY3Rpb24gfSBmcm9tIFwiLi90eXBlcy9UdXBsZVRvSW50ZXJzZWN0aW9uLmpzXCI7XG5cbi8qKlxuICogTWVyZ2VzIHRoZSBwcm92aWRlZCBvYmplY3RzIHNoYWxsb3dseSBhbmQgcmVtb3Zlc1xuICogYWxsIHByb3BlcnRpZXMgd2l0aCBhbiBgdW5kZWZpbmVkYCB2YWx1ZVxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gY29tcGFjdDxUQXJncyBleHRlbmRzIGFueVtdPihcbiAgLi4ub2JqZWN0czogVEFyZ3Ncbik6IFR1cGxlVG9JbnRlcnNlY3Rpb248VEFyZ3M+IHtcbiAgY29uc3QgcmVzdWx0ID0ge30gYXMgVHVwbGVUb0ludGVyc2VjdGlvbjxUQXJncz47XG5cbiAgb2JqZWN0cy5mb3JFYWNoKChvYmopID0+IHtcbiAgICBpZiAoIW9iaikgcmV0dXJuO1xuICAgIE9iamVjdC5rZXlzKG9iaikuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICBjb25zdCB2YWx1ZSA9IChvYmogYXMgYW55KVtrZXldO1xuICAgICAgaWYgKHZhbHVlICE9PSB2b2lkIDApIHtcbiAgICAgICAgcmVzdWx0W2tleV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/compact.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/createFragmentMap.js":
/*!*****************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/createFragmentMap.js ***!
  \*****************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createFragmentMap: () => (/* binding */ createFragmentMap)\n/* harmony export */ });\n/**\n* Utility function that takes a list of fragment definitions and makes a hash out of them\n* that maps the name of the fragment to the fragment definition.\n*\n* @internal\n* \n* @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n*/ function createFragmentMap() {\n    let fragments = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];\n    const symTable = {};\n    fragments.forEach((fragment)=>{\n        symTable[fragment.name.value] = fragment;\n    });\n    return symTable;\n} //# sourceMappingURL=createFragmentMap.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvaW50ZXJuYWwvY3JlYXRlRnJhZ21lbnRNYXAuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7R0FVQSxTQUFnQixDQUFoQixnQkFBaUM7b0JBQy9CLENBREYsZ0VBQ3dDLENBRHhDLENBQzBDO0lBRXhDLENBQUYsS0FBUSxDQUFSLFVBQWdDLENBQWhDLENBQWtDO0lBQ2hDLENBQUYsUUFBVyxDQUFDLENBQVosTUFBbUIsQ0FBQyxDQUFDLENBQXJCLE9BQTZCLEVBQUUsQ0FBL0I7UUFDSSxDQUFKLE9BQVksQ0FBQyxDQUFiLE9BQXFCLENBQUMsQ0FBdEIsR0FBMEIsQ0FBQyxDQUEzQixJQUFnQyxFQUFoQyxFQUFvQyxDQUFwQyxPQUE0QztJQUMxQyxDQUFDLENBQUM7SUFDRixDQUFGLE1BQVMsQ0FBVCxPQUFpQjtBQUNqQiIsInNvdXJjZXMiOlsiL2hvbWUvdS9Qcm9qZWN0cy9zcmMvdXRpbGl0aWVzL2ludGVybmFsL2NyZWF0ZUZyYWdtZW50TWFwLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgRnJhZ21lbnREZWZpbml0aW9uTm9kZSB9IGZyb20gXCJncmFwaHFsXCI7XG5cbmltcG9ydCB0eXBlIHsgRnJhZ21lbnRNYXAgfSBmcm9tIFwiLi90eXBlcy9GcmFnbWVudE1hcC5qc1wiO1xuXG4vKipcbiAqIFV0aWxpdHkgZnVuY3Rpb24gdGhhdCB0YWtlcyBhIGxpc3Qgb2YgZnJhZ21lbnQgZGVmaW5pdGlvbnMgYW5kIG1ha2VzIGEgaGFzaCBvdXQgb2YgdGhlbVxuICogdGhhdCBtYXBzIHRoZSBuYW1lIG9mIHRoZSBmcmFnbWVudCB0byB0aGUgZnJhZ21lbnQgZGVmaW5pdGlvbi5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUZyYWdtZW50TWFwKFxuICBmcmFnbWVudHM6IEZyYWdtZW50RGVmaW5pdGlvbk5vZGVbXSA9IFtdXG4pOiBGcmFnbWVudE1hcCB7XG4gIGNvbnN0IHN5bVRhYmxlOiBGcmFnbWVudE1hcCA9IHt9O1xuICBmcmFnbWVudHMuZm9yRWFjaCgoZnJhZ21lbnQpID0+IHtcbiAgICBzeW1UYWJsZVtmcmFnbWVudC5uYW1lLnZhbHVlXSA9IGZyYWdtZW50O1xuICB9KTtcbiAgcmV0dXJuIHN5bVRhYmxlO1xufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/createFragmentMap.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/createFulfilledPromise.js":
/*!**********************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/createFulfilledPromise.js ***!
  \**********************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createFulfilledPromise: () => (/* binding */ createFulfilledPromise)\n/* harmony export */ });\n/**\n* @internal\n* \n* @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n*/ function createFulfilledPromise(value) {\n    const promise = Promise.resolve(value);\n    promise.status = \"fulfilled\";\n    promise.value = value;\n    return promise;\n} //# sourceMappingURL=createFulfilledPromise.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvaW50ZXJuYWwvY3JlYXRlRnVsZmlsbGVkUHJvbWlzZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztHQUdBLFNBQWdCLENBQWhCLHFCQUFzQyxDQUFTLENBQS9DLElBQTRELEVBQTVEO0lBQ0UsQ0FBRixLQUFRLENBQVIsU0FBa0IsQ0FBbEIsTUFBeUIsQ0FBQyxDQUExQixNQUFpQyxDQUFDLENBQWxDLElBQXVDLENBQTZCO0lBRWxFLENBQUYsTUFBUyxDQUFDLENBQVYsUUFBbUIsQ0FBbkIsVUFBOEI7SUFDNUIsQ0FBRixNQUFTLENBQUMsQ0FBVixPQUFrQixDQUFsQixJQUF1QjtJQUVyQixDQUFGLE1BQVMsQ0FBVCxNQUFnQjtBQUNoQiIsInNvdXJjZXMiOlsiL2hvbWUvdS9Qcm9qZWN0cy9zcmMvdXRpbGl0aWVzL2ludGVybmFsL2NyZWF0ZUZ1bGZpbGxlZFByb21pc2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBGdWxmaWxsZWRQcm9taXNlIH0gZnJvbSBcIi4vdHlwZXMvRnVsZmlsbGVkUHJvbWlzZS5qc1wiO1xuXG4vKiogQGludGVybmFsICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRnVsZmlsbGVkUHJvbWlzZTxUVmFsdWU+KHZhbHVlOiBUVmFsdWUpIHtcbiAgY29uc3QgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSh2YWx1ZSkgYXMgRnVsZmlsbGVkUHJvbWlzZTxUVmFsdWU+O1xuXG4gIHByb21pc2Uuc3RhdHVzID0gXCJmdWxmaWxsZWRcIjtcbiAgcHJvbWlzZS52YWx1ZSA9IHZhbHVlO1xuXG4gIHJldHVybiBwcm9taXNlO1xufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/createFulfilledPromise.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/createRejectedPromise.js":
/*!*********************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/createRejectedPromise.js ***!
  \*********************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createRejectedPromise: () => (/* binding */ createRejectedPromise)\n/* harmony export */ });\n/**\n* @internal\n* \n* @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n*/ function createRejectedPromise(reason) {\n    const promise = Promise.reject(reason);\n    // prevent potential edge cases leaking unhandled error rejections\n    promise.catch(()=>{});\n    promise.status = \"rejected\";\n    promise.reason = reason;\n    return promise;\n} //# sourceMappingURL=createRejectedPromise.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvaW50ZXJuYWwvY3JlYXRlUmVqZWN0ZWRQcm9taXNlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0dBR0EsU0FBZ0IsQ0FBaEIsb0JBQXFDLENBQW1CLENBQXhELEtBQXVFLEVBQXZFO0lBQ0UsQ0FBRixLQUFRLENBQVIsU0FBa0IsQ0FBbEIsTUFBeUIsQ0FBQyxDQUExQixLQUFnQyxDQUFDLENBQWpDLEtBQXVDLENBQTRCO0lBRWpFLENBQUY7SUFDRSxDQUFGLE1BQVMsQ0FBQyxDQUFWLElBQWUsQ0FBQyxDQUFoQixFQUFtQixDQUFuQixDQUF1QixDQUF2QixDQUF5QjtJQUV2QixDQUFGLE1BQVMsQ0FBQyxDQUFWLFFBQW1CLENBQW5CLFNBQTZCO0lBQzNCLENBQUYsTUFBUyxDQUFDLENBQVYsUUFBbUIsQ0FBbkIsS0FBeUI7SUFFdkIsQ0FBRixNQUFTLENBQVQsTUFBZ0I7QUFDaEIiLCJzb3VyY2VzIjpbIi9ob21lL3UvUHJvamVjdHMvc3JjL3V0aWxpdGllcy9pbnRlcm5hbC9jcmVhdGVSZWplY3RlZFByb21pc2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBSZWplY3RlZFByb21pc2UgfSBmcm9tIFwiLi90eXBlcy9SZWplY3RlZFByb21pc2UuanNcIjtcblxuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVJlamVjdGVkUHJvbWlzZTxUVmFsdWUgPSB1bmtub3duPihyZWFzb246IHVua25vd24pIHtcbiAgY29uc3QgcHJvbWlzZSA9IFByb21pc2UucmVqZWN0KHJlYXNvbikgYXMgUmVqZWN0ZWRQcm9taXNlPFRWYWx1ZT47XG5cbiAgLy8gcHJldmVudCBwb3RlbnRpYWwgZWRnZSBjYXNlcyBsZWFraW5nIHVuaGFuZGxlZCBlcnJvciByZWplY3Rpb25zXG4gIHByb21pc2UuY2F0Y2goKCkgPT4ge30pO1xuXG4gIHByb21pc2Uuc3RhdHVzID0gXCJyZWplY3RlZFwiO1xuICBwcm9taXNlLnJlYXNvbiA9IHJlYXNvbjtcblxuICByZXR1cm4gcHJvbWlzZTtcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/createRejectedPromise.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/decoratePromise.js":
/*!***************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/decoratePromise.js ***!
  \***************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decoratePromise: () => (/* binding */ decoratePromise)\n/* harmony export */ });\nfunction isDecoratedPromise(promise) {\n    return \"status\" in promise;\n}\n/**\n* @internal\n* \n* @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n*/ function decoratePromise(promise) {\n    if (isDecoratedPromise(promise)) {\n        return promise;\n    }\n    const pendingPromise = promise;\n    pendingPromise.status = \"pending\";\n    pendingPromise.then((value)=>{\n        if (pendingPromise.status === \"pending\") {\n            const fulfilledPromise = pendingPromise;\n            fulfilledPromise.status = \"fulfilled\";\n            fulfilledPromise.value = value;\n        }\n    }, (reason)=>{\n        if (pendingPromise.status === \"pending\") {\n            const rejectedPromise = pendingPromise;\n            rejectedPromise.status = \"rejected\";\n            rejectedPromise.reason = reason;\n        }\n    });\n    return promise;\n} //# sourceMappingURL=decoratePromise.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvaW50ZXJuYWwvZGVjb3JhdGVQcm9taXNlLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFLQSxTQUFTLENBQVQsaUJBQTJCLENBQ3pCLENBREYsTUFDMEIsRUFEMUI7SUFHRSxDQUFGLE1BQVMsQ0FBVCxXQUFxQixDQUFyQixNQUE0QjtBQUM1Qjs7Ozs7R0FHQSxTQUFnQixDQUFoQixjQUErQixDQUM3QixDQURGLE1BQzBCLEVBRDFCO0lBR0UsQ0FBRixHQUFNLENBQU4saUJBQXdCLENBQUMsQ0FBekIsTUFBZ0MsQ0FBQyxFQUFFO1FBQy9CLENBQUosTUFBVyxDQUFYLE1BQWtCO0lBQ2hCO0lBRUEsQ0FBRixLQUFRLENBQVIsZ0JBQXlCLENBQXpCLE1BQTBEO0lBQ3hELENBQUYsYUFBZ0IsQ0FBQyxDQUFqQixRQUEwQixDQUExQixRQUFtQztJQUVqQyxDQUFGLGFBQWdCLENBQUMsQ0FBakIsR0FBcUIsQ0FDakIsQ0FBQyxDQURMLElBQ1UsRUFBRSxDQURaO1FBRU0sQ0FBTixHQUFVLENBQVYsYUFBd0IsQ0FBQyxDQUF6QixVQUFvQyxDQUFwQyxRQUE2QyxFQUFFO1lBQ3ZDLENBQVIsS0FBYyxDQUFkLGtCQUNVLENBRFYsYUFDK0Q7WUFFdkQsQ0FBUixlQUF3QixDQUFDLENBQXpCLFFBQWtDLENBQWxDLFVBQTZDO1lBQ3JDLENBQVIsZUFBd0IsQ0FBQyxDQUF6QixPQUFpQyxDQUFqQyxJQUFzQztRQUNoQztJQUNGLENBQUMsRUFDRCxDQUFDLENBREwsS0FDb0IsRUFBRSxDQUR0QjtRQUVNLENBQU4sR0FBVSxDQUFWLGFBQXdCLENBQUMsQ0FBekIsVUFBb0MsQ0FBcEMsUUFBNkMsRUFBRTtZQUN2QyxDQUFSLEtBQWMsQ0FBZCxpQkFDVSxDQURWLGFBQzhEO1lBRXRELENBQVIsY0FBdUIsQ0FBQyxDQUF4QixRQUFpQyxDQUFqQyxTQUEyQztZQUNuQyxDQUFSLGNBQXVCLENBQUMsQ0FBeEIsUUFBaUMsQ0FBakMsS0FBdUM7UUFDakM7SUFDRixDQUFDLENBQ0Y7SUFFRCxDQUFGLE1BQVMsQ0FBVCxNQUE0QztBQUM1QyIsInNvdXJjZXMiOlsiL2hvbWUvdS9Qcm9qZWN0cy9zcmMvdXRpbGl0aWVzL2ludGVybmFsL2RlY29yYXRlUHJvbWlzZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IERlY29yYXRlZFByb21pc2UgfSBmcm9tIFwiLi90eXBlcy9EZWNvcmF0ZWRQcm9taXNlLmpzXCI7XG5pbXBvcnQgdHlwZSB7IEZ1bGZpbGxlZFByb21pc2UgfSBmcm9tIFwiLi90eXBlcy9GdWxmaWxsZWRQcm9taXNlLmpzXCI7XG5pbXBvcnQgdHlwZSB7IFBlbmRpbmdQcm9taXNlIH0gZnJvbSBcIi4vdHlwZXMvUGVuZGluZ1Byb21pc2UuanNcIjtcbmltcG9ydCB0eXBlIHsgUmVqZWN0ZWRQcm9taXNlIH0gZnJvbSBcIi4vdHlwZXMvUmVqZWN0ZWRQcm9taXNlLmpzXCI7XG5cbmZ1bmN0aW9uIGlzRGVjb3JhdGVkUHJvbWlzZTxUVmFsdWU+KFxuICBwcm9taXNlOiBQcm9taXNlPFRWYWx1ZT5cbik6IHByb21pc2UgaXMgRGVjb3JhdGVkUHJvbWlzZTxUVmFsdWU+IHtcbiAgcmV0dXJuIFwic3RhdHVzXCIgaW4gcHJvbWlzZTtcbn1cblxuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlY29yYXRlUHJvbWlzZTxUVmFsdWU+KFxuICBwcm9taXNlOiBQcm9taXNlPFRWYWx1ZT5cbik6IERlY29yYXRlZFByb21pc2U8VFZhbHVlPiB7XG4gIGlmIChpc0RlY29yYXRlZFByb21pc2UocHJvbWlzZSkpIHtcbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuXG4gIGNvbnN0IHBlbmRpbmdQcm9taXNlID0gcHJvbWlzZSBhcyBQZW5kaW5nUHJvbWlzZTxUVmFsdWU+O1xuICBwZW5kaW5nUHJvbWlzZS5zdGF0dXMgPSBcInBlbmRpbmdcIjtcblxuICBwZW5kaW5nUHJvbWlzZS50aGVuKFxuICAgICh2YWx1ZSkgPT4ge1xuICAgICAgaWYgKHBlbmRpbmdQcm9taXNlLnN0YXR1cyA9PT0gXCJwZW5kaW5nXCIpIHtcbiAgICAgICAgY29uc3QgZnVsZmlsbGVkUHJvbWlzZSA9XG4gICAgICAgICAgcGVuZGluZ1Byb21pc2UgYXMgdW5rbm93biBhcyBGdWxmaWxsZWRQcm9taXNlPFRWYWx1ZT47XG5cbiAgICAgICAgZnVsZmlsbGVkUHJvbWlzZS5zdGF0dXMgPSBcImZ1bGZpbGxlZFwiO1xuICAgICAgICBmdWxmaWxsZWRQcm9taXNlLnZhbHVlID0gdmFsdWU7XG4gICAgICB9XG4gICAgfSxcbiAgICAocmVhc29uOiB1bmtub3duKSA9PiB7XG4gICAgICBpZiAocGVuZGluZ1Byb21pc2Uuc3RhdHVzID09PSBcInBlbmRpbmdcIikge1xuICAgICAgICBjb25zdCByZWplY3RlZFByb21pc2UgPVxuICAgICAgICAgIHBlbmRpbmdQcm9taXNlIGFzIHVua25vd24gYXMgUmVqZWN0ZWRQcm9taXNlPFRWYWx1ZT47XG5cbiAgICAgICAgcmVqZWN0ZWRQcm9taXNlLnN0YXR1cyA9IFwicmVqZWN0ZWRcIjtcbiAgICAgICAgcmVqZWN0ZWRQcm9taXNlLnJlYXNvbiA9IHJlYXNvbjtcbiAgICAgIH1cbiAgICB9XG4gICk7XG5cbiAgcmV0dXJuIHByb21pc2UgYXMgRGVjb3JhdGVkUHJvbWlzZTxUVmFsdWU+O1xufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/decoratePromise.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/deepFreeze.js":
/*!**********************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/deepFreeze.js ***!
  \**********************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   deepFreeze: () => (/* binding */ deepFreeze)\n/* harmony export */ });\n/* harmony import */ var _apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @apollo/client/utilities/environment */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/environment/index.development.js\");\n/* harmony import */ var _isNonNullObject_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isNonNullObject.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/isNonNullObject.js\");\n\n\n/**\n* @internal only to be imported in tests\n* \n* @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n*/ function deepFreeze(value) {\n    const workSet = new Set([\n        value\n    ]);\n    workSet.forEach((obj)=>{\n        if ((0,_isNonNullObject_js__WEBPACK_IMPORTED_MODULE_0__.isNonNullObject)(obj) && shallowFreeze(obj) === obj) {\n            Object.getOwnPropertyNames(obj).forEach((name)=>{\n                if ((0,_isNonNullObject_js__WEBPACK_IMPORTED_MODULE_0__.isNonNullObject)(obj[name])) workSet.add(obj[name]);\n            });\n        }\n    });\n    return value;\n}\nfunction shallowFreeze(obj) {\n    if (_apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_1__.__DEV__ && !Object.isFrozen(obj)) {\n        try {\n            Object.freeze(obj);\n        } catch (e) {\n            // Some types like Uint8Array and Node.js's Buffer cannot be frozen, but\n            // they all throw a TypeError when you try, so we re-throw any exceptions\n            // that are not TypeErrors, since that would be unexpected.\n            if (e instanceof TypeError) return null;\n            throw e;\n        }\n    }\n    return obj;\n} //# sourceMappingURL=deepFreeze.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvaW50ZXJuYWwvZGVlcEZyZWV6ZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBOEQ7QUFFUjs7Ozs7R0FHdEQsU0FBZ0IsQ0FBaEIsU0FBMEIsQ0FBQyxDQUEzQixJQUFxQyxFQUFyQztJQUNFLENBQUYsS0FBUSxDQUFSLFNBQWtCLENBQWxCLEdBQXNCLENBQXRCLEVBQXlCLENBQUM7UUFBQyxDQUEzQixJQUFnQztLQUFDLENBQUM7SUFDaEMsQ0FBRixNQUFTLENBQUMsQ0FBVixNQUFpQixDQUFDLENBQUMsQ0FBbkIsRUFBc0IsRUFBRSxDQUF4QjtRQUNJLENBQUosR0FBUSxvRUFBZSxDQUFDLENBQXhCLEVBQTJCLEVBQTNCLEdBQWdDLENBQWhDLFlBQTZDLENBQUMsQ0FBOUMsRUFBaUQsRUFBakQsSUFBdUQsQ0FBdkQsRUFBMEQsRUFBRTtZQUN0RCxDQUFOLEtBQVksQ0FBQyxDQUFiLGtCQUFnQyxDQUFDLENBQWpDLEVBQW9DLENBQUMsQ0FBQyxDQUF0QyxNQUE2QyxDQUFDLENBQUMsQ0FBL0MsR0FBbUQsRUFBRSxDQUFyRDtnQkFDUSxDQUFSLEdBQVksb0VBQWUsQ0FBQyxDQUE1QixFQUErQixDQUFDLENBQWhDLEdBQW9DLENBQUMsQ0FBQyxFQUFFLENBQXhDLE1BQStDLENBQUMsQ0FBaEQsRUFBbUQsQ0FBQyxDQUFwRCxFQUF1RCxDQUFDLENBQXhELEdBQTRELENBQUMsQ0FBQztZQUN4RCxDQUFDLENBQUM7UUFDSjtJQUNGLENBQUMsQ0FBQztJQUNGLENBQUYsTUFBUyxDQUFULElBQWM7QUFDZDtBQUVBLFNBQVMsQ0FBVCxZQUFzQixDQUFtQixDQUF6QyxFQUErQyxFQUEvQztJQUNFLENBQUYsR0FBTSx5RUFBTixJQUFpQixDQUFDLENBQWxCLEtBQXdCLENBQUMsQ0FBekIsT0FBaUMsQ0FBQyxDQUFsQyxFQUFxQyxDQUFDLEVBQUU7UUFDcEMsQ0FBSixHQUFRO1lBQ0YsQ0FBTixLQUFZLENBQUMsQ0FBYixLQUFtQixDQUFDLENBQXBCLEVBQXVCLENBQUM7UUFDcEIsRUFBRSxDQUFOLE1BQWEsQ0FBQyxFQUFFO1lBQ1YsQ0FBTjtZQUNNLENBQU47WUFDTSxDQUFOO1lBQ00sQ0FBTixHQUFVLEVBQVYsV0FBdUIsQ0FBdkIsUUFBZ0MsRUFBRSxDQUFsQyxNQUF5QyxDQUF6QyxHQUE2QztZQUN2QyxDQUFOLEtBQVksQ0FBQztRQUNUO0lBQ0Y7SUFDQSxDQUFGLE1BQVMsQ0FBVCxFQUFZO0FBQ1oiLCJzb3VyY2VzIjpbIi9ob21lL3UvUHJvamVjdHMvc3JjL3V0aWxpdGllcy9pbnRlcm5hbC9kZWVwRnJlZXplLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9fREVWX18gfSBmcm9tIFwiQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2Vudmlyb25tZW50XCI7XG5cbmltcG9ydCB7IGlzTm9uTnVsbE9iamVjdCB9IGZyb20gXCIuL2lzTm9uTnVsbE9iamVjdC5qc1wiO1xuXG4vKiogQGludGVybmFsIG9ubHkgdG8gYmUgaW1wb3J0ZWQgaW4gdGVzdHMgKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWVwRnJlZXplKHZhbHVlOiBhbnkpIHtcbiAgY29uc3Qgd29ya1NldCA9IG5ldyBTZXQoW3ZhbHVlXSk7XG4gIHdvcmtTZXQuZm9yRWFjaCgob2JqKSA9PiB7XG4gICAgaWYgKGlzTm9uTnVsbE9iamVjdChvYmopICYmIHNoYWxsb3dGcmVlemUob2JqKSA9PT0gb2JqKSB7XG4gICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopLmZvckVhY2goKG5hbWUpID0+IHtcbiAgICAgICAgaWYgKGlzTm9uTnVsbE9iamVjdChvYmpbbmFtZV0pKSB3b3JrU2V0LmFkZChvYmpbbmFtZV0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHZhbHVlO1xufVxuXG5mdW5jdGlvbiBzaGFsbG93RnJlZXplPFQgZXh0ZW5kcyBvYmplY3Q+KG9iajogVCk6IFQgfCBudWxsIHtcbiAgaWYgKF9fREVWX18gJiYgIU9iamVjdC5pc0Zyb3plbihvYmopKSB7XG4gICAgdHJ5IHtcbiAgICAgIE9iamVjdC5mcmVlemUob2JqKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBTb21lIHR5cGVzIGxpa2UgVWludDhBcnJheSBhbmQgTm9kZS5qcydzIEJ1ZmZlciBjYW5ub3QgYmUgZnJvemVuLCBidXRcbiAgICAgIC8vIHRoZXkgYWxsIHRocm93IGEgVHlwZUVycm9yIHdoZW4geW91IHRyeSwgc28gd2UgcmUtdGhyb3cgYW55IGV4Y2VwdGlvbnNcbiAgICAgIC8vIHRoYXQgYXJlIG5vdCBUeXBlRXJyb3JzLCBzaW5jZSB0aGF0IHdvdWxkIGJlIHVuZXhwZWN0ZWQuXG4gICAgICBpZiAoZSBpbnN0YW5jZW9mIFR5cGVFcnJvcikgcmV0dXJuIG51bGw7XG4gICAgICB0aHJvdyBlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gb2JqO1xufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/deepFreeze.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/equalByQuery.js":
/*!************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/equalByQuery.js ***!
  \************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   equalByQuery: () => (/* binding */ equalByQuery)\n/* harmony export */ });\n/* harmony import */ var _wry_equality__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wry/equality */ \"(app-pages-browser)/../../node_modules/.pnpm/@wry+equality@0.5.7/node_modules/@wry/equality/lib/index.js\");\n/* harmony import */ var _createFragmentMap_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./createFragmentMap.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/createFragmentMap.js\");\n/* harmony import */ var _getFragmentDefinitions_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getFragmentDefinitions.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getFragmentDefinitions.js\");\n/* harmony import */ var _getFragmentFromSelection_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./getFragmentFromSelection.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getFragmentFromSelection.js\");\n/* harmony import */ var _getMainDefinition_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getMainDefinition.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getMainDefinition.js\");\n/* harmony import */ var _isField_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./isField.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/isField.js\");\n/* harmony import */ var _resultKeyNameFromField_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./resultKeyNameFromField.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/resultKeyNameFromField.js\");\n/* harmony import */ var _shouldInclude_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./shouldInclude.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/shouldInclude.js\");\n\n\n\n\n\n\n\n\n// Returns true if aResult and bResult are deeply equal according to the fields\n// selected by the given query, ignoring any fields marked as @nonreactive.\nfunction equalByQuery(query, param, param1, variables) {\n    let { data: aData, ...aRest } = param, { data: bData, ...bRest } = param1;\n    return (0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(aRest, bRest) && equalBySelectionSet((0,_getMainDefinition_js__WEBPACK_IMPORTED_MODULE_1__.getMainDefinition)(query).selectionSet, aData, bData, {\n        fragmentMap: (0,_createFragmentMap_js__WEBPACK_IMPORTED_MODULE_2__.createFragmentMap)((0,_getFragmentDefinitions_js__WEBPACK_IMPORTED_MODULE_3__.getFragmentDefinitions)(query)),\n        variables\n    });\n}\nfunction equalBySelectionSet(selectionSet, aResult, bResult, context) {\n    if (aResult === bResult) {\n        return true;\n    }\n    const seenSelections = new Set();\n    // Returning true from this Array.prototype.every callback function skips the\n    // current field/subtree. Returning false aborts the entire traversal\n    // immediately, causing equalBySelectionSet to return false.\n    return selectionSet.selections.every((selection)=>{\n        // Avoid re-processing the same selection at the same level of recursion, in\n        // case the same field gets included via multiple indirect fragment spreads.\n        if (seenSelections.has(selection)) return true;\n        seenSelections.add(selection);\n        // Ignore @skip(if: true) and @include(if: false) fields.\n        if (!(0,_shouldInclude_js__WEBPACK_IMPORTED_MODULE_4__.shouldInclude)(selection, context.variables)) return true;\n        // If the field or (named) fragment spread has a @nonreactive directive on\n        // it, we don't care if it's different, so we pretend it's the same.\n        if (selectionHasNonreactiveDirective(selection)) return true;\n        if ((0,_isField_js__WEBPACK_IMPORTED_MODULE_5__.isField)(selection)) {\n            const resultKey = (0,_resultKeyNameFromField_js__WEBPACK_IMPORTED_MODULE_6__.resultKeyNameFromField)(selection);\n            const aResultChild = aResult && aResult[resultKey];\n            const bResultChild = bResult && bResult[resultKey];\n            const childSelectionSet = selection.selectionSet;\n            if (!childSelectionSet) {\n                // These are scalar values, so we can compare them with deep equal\n                // without redoing the main recursive work.\n                return (0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(aResultChild, bResultChild);\n            }\n            const aChildIsArray = Array.isArray(aResultChild);\n            const bChildIsArray = Array.isArray(bResultChild);\n            if (aChildIsArray !== bChildIsArray) return false;\n            if (aChildIsArray && bChildIsArray) {\n                const length = aResultChild.length;\n                if (bResultChild.length !== length) {\n                    return false;\n                }\n                for(let i = 0; i < length; ++i){\n                    if (!equalBySelectionSet(childSelectionSet, aResultChild[i], bResultChild[i], context)) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n            return equalBySelectionSet(childSelectionSet, aResultChild, bResultChild, context);\n        } else {\n            const fragment = (0,_getFragmentFromSelection_js__WEBPACK_IMPORTED_MODULE_7__.getFragmentFromSelection)(selection, context.fragmentMap);\n            if (fragment) {\n                // The fragment might === selection if it's an inline fragment, but\n                // could be !== if it's a named fragment ...spread.\n                if (selectionHasNonreactiveDirective(fragment)) return true;\n                return equalBySelectionSet(fragment.selectionSet, // Notice that we reuse the same aResult and bResult values here,\n                // since the fragment ...spread does not specify a field name, but\n                // consists of multiple fields (within the fragment's selection set)\n                // that should be applied to the current result value(s).\n                aResult, bResult, context);\n            }\n        }\n    });\n}\nfunction selectionHasNonreactiveDirective(selection) {\n    return !!selection.directives && selection.directives.some(directiveIsNonreactive);\n}\nfunction directiveIsNonreactive(dir) {\n    return dir.name.value === \"nonreactive\";\n} //# sourceMappingURL=equalByQuery.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/equalByQuery.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/filterMap.js":
/*!*********************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/filterMap.js ***!
  \*********************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   filterMap: () => (/* binding */ filterMap)\n/* harmony export */ });\n/* harmony import */ var _barrel_optimize_names_Observable_rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! __barrel_optimize__?names=Observable!=!rxjs */ \"(app-pages-browser)/../../node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/Observable.js\");\n\nfunction filterMap(fn) {\n    let makeContext = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : ()=>undefined;\n    return (source)=>new _barrel_optimize_names_Observable_rxjs__WEBPACK_IMPORTED_MODULE_0__.Observable((subscriber)=>{\n            let context = makeContext();\n            return source.subscribe({\n                next (value) {\n                    let result;\n                    try {\n                        result = fn(value, context);\n                    } catch (e) {\n                        subscriber.error(e);\n                    }\n                    if (result === undefined) {\n                        return;\n                    }\n                    subscriber.next(result);\n                },\n                error (err) {\n                    subscriber.error(err);\n                },\n                complete () {\n                    subscriber.complete();\n                }\n            });\n        });\n} //# sourceMappingURL=filterMap.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvaW50ZXJuYWwvZmlsdGVyTWFwLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQ2tDO0FBUzVCLFNBQVUsU0FBUyxDQUN2QixFQUE2QztzQkFDN0MsV0FBVyxzREFBRyxHQUFHLENBQUcsQ0FBRCxRQUFVO0lBRTdCLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FDZCxDQURnQixHQUNaLDhFQUFVLENBQUksQ0FBQyxVQUFVLEVBQUUsRUFBRTtZQUMvQixJQUFJLE9BQU8sR0FBRyxXQUFXLEVBQUUsQ0FBQztZQUM1QixPQUFPLE1BQU0sQ0FBQyxTQUFTLENBQUM7Z0JBQ3RCLElBQUksRUFBQyxLQUFLO29CQUNSLElBQUksTUFBcUIsQ0FBQztvQkFDMUIsSUFBSSxDQUFDO3dCQUNILE1BQU0sR0FBRyxFQUFFLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO29CQUM5QixDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQzt3QkFDWCxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUN0QixDQUFDO29CQUNELElBQUksTUFBTSxLQUFLLFNBQVMsRUFBRSxDQUFDO3dCQUN6QixPQUFPO29CQUNULENBQUM7b0JBQ0QsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDMUIsQ0FBQztnQkFDRCxLQUFLLEVBQUMsR0FBRztvQkFDUCxVQUFVLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUN4QixDQUFDO2dCQUNELFFBQVE7b0JBQ04sVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDO2dCQUN4QixDQUFDO2FBQ0YsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDIiwic291cmNlcyI6WyIvaG9tZS91L1Byb2plY3RzL3NyYy91dGlsaXRpZXMvaW50ZXJuYWwvZmlsdGVyTWFwLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgT3BlcmF0b3JGdW5jdGlvbiB9IGZyb20gXCJyeGpzXCI7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcInJ4anNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGZpbHRlck1hcDxULCBSPihcbiAgZm46ICh2YWx1ZTogVCwgY29udGV4dDogdW5kZWZpbmVkKSA9PiBSIHwgdW5kZWZpbmVkXG4pOiBPcGVyYXRvckZ1bmN0aW9uPFQsIFI+O1xuZXhwb3J0IGZ1bmN0aW9uIGZpbHRlck1hcDxULCBSLCBDb250ZXh0PihcbiAgZm46ICh2YWx1ZTogVCwgY29udGV4dDogQ29udGV4dCkgPT4gUiB8IHVuZGVmaW5lZCxcbiAgbWFrZUNvbnRleHQ6ICgpID0+IE5vSW5mZXI8Q29udGV4dD5cbik6IE9wZXJhdG9yRnVuY3Rpb248VCwgUj47XG5leHBvcnQgZnVuY3Rpb24gZmlsdGVyTWFwPFQsIFI+KFxuICBmbjogKHZhbHVlOiBULCBjb250ZXh0OiBhbnkpID0+IFIgfCB1bmRlZmluZWQsXG4gIG1ha2VDb250ZXh0ID0gKCkgPT4gdW5kZWZpbmVkXG4pOiBPcGVyYXRvckZ1bmN0aW9uPFQsIFI+IHtcbiAgcmV0dXJuIChzb3VyY2UpID0+XG4gICAgbmV3IE9ic2VydmFibGU8Uj4oKHN1YnNjcmliZXIpID0+IHtcbiAgICAgIGxldCBjb250ZXh0ID0gbWFrZUNvbnRleHQoKTtcbiAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKHtcbiAgICAgICAgbmV4dCh2YWx1ZSkge1xuICAgICAgICAgIGxldCByZXN1bHQ6IFIgfCB1bmRlZmluZWQ7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGZuKHZhbHVlLCBjb250ZXh0KTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHJlc3VsdCk7XG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yKGVycikge1xuICAgICAgICAgIHN1YnNjcmliZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgfSxcbiAgICAgICAgY29tcGxldGUoKSB7XG4gICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfSk7XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/filterMap.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getDefaultValues.js":
/*!****************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getDefaultValues.js ***!
  \****************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getDefaultValues: () => (/* binding */ getDefaultValues)\n/* harmony export */ });\n/* harmony import */ var _valueToObjectRepresentation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./valueToObjectRepresentation.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/valueToObjectRepresentation.js\");\n\n/**\n* @internal\n* \n* @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n*/ function getDefaultValues(definition) {\n    const defaultValues = {};\n    const defs = definition && definition.variableDefinitions;\n    if (defs && defs.length) {\n        defs.forEach((def)=>{\n            if (def.defaultValue) {\n                (0,_valueToObjectRepresentation_js__WEBPACK_IMPORTED_MODULE_0__.valueToObjectRepresentation)(defaultValues, def.variable.name, def.defaultValue);\n            }\n        });\n    }\n    return defaultValues;\n} //# sourceMappingURL=getDefaultValues.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvaW50ZXJuYWwvZ2V0RGVmYXVsdFZhbHVlcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUU4RTs7Ozs7R0FHOUUsU0FBZ0IsQ0FBaEIsZUFBZ0MsQ0FDOUIsQ0FERixTQUNpRCxFQURqRDtJQUdFLENBQUYsS0FBUSxDQUFSLGVBQXdCLENBQXhCLENBQTBCO0lBQ3hCLENBQUYsS0FBUSxDQUFSLE1BQWUsQ0FBZixhQUE2QixDQUE3QixTQUF1QyxDQUFDLENBQXhDLGtCQUEyRDtJQUN6RCxDQUFGLEdBQU0sQ0FBTixPQUFjLENBQWQsR0FBa0IsQ0FBQyxDQUFuQixLQUF5QixFQUFFO1FBQ3ZCLENBQUosR0FBUSxDQUFDLENBQVQsTUFBZ0IsQ0FBQyxDQUFDLENBQWxCLEVBQXFCLEVBQUUsQ0FBdkI7WUFDTSxDQUFOLEdBQVUsQ0FBVixFQUFhLENBQUMsQ0FBZCxXQUEwQixFQUFFO2dCQUNwQiw0RkFBMkIsQ0FDekIsQ0FEVixZQUN1QixFQUNiLENBRlYsRUFFYSxDQUFDLENBRmQsT0FFc0IsQ0FBQyxDQUZ2QixHQUUyQixFQUNqQixDQUhWLEVBR2EsQ0FBQyxDQUhkLFdBR3VDLENBQzlCO1lBQ0g7UUFDRixDQUFDLENBQUM7SUFDSjtJQUNBLENBQUYsTUFBUyxDQUFULFlBQXNCO0FBQ3RCIiwic291cmNlcyI6WyIvaG9tZS91L1Byb2plY3RzL3NyYy91dGlsaXRpZXMvaW50ZXJuYWwvZ2V0RGVmYXVsdFZhbHVlcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IE9wZXJhdGlvbkRlZmluaXRpb25Ob2RlLCBWYWx1ZU5vZGUgfSBmcm9tIFwiZ3JhcGhxbFwiO1xuXG5pbXBvcnQgeyB2YWx1ZVRvT2JqZWN0UmVwcmVzZW50YXRpb24gfSBmcm9tIFwiLi92YWx1ZVRvT2JqZWN0UmVwcmVzZW50YXRpb24uanNcIjtcblxuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldERlZmF1bHRWYWx1ZXMoXG4gIGRlZmluaXRpb246IE9wZXJhdGlvbkRlZmluaXRpb25Ob2RlIHwgdW5kZWZpbmVkXG4pOiBSZWNvcmQ8c3RyaW5nLCBhbnk+IHtcbiAgY29uc3QgZGVmYXVsdFZhbHVlcyA9IHt9O1xuICBjb25zdCBkZWZzID0gZGVmaW5pdGlvbiAmJiBkZWZpbml0aW9uLnZhcmlhYmxlRGVmaW5pdGlvbnM7XG4gIGlmIChkZWZzICYmIGRlZnMubGVuZ3RoKSB7XG4gICAgZGVmcy5mb3JFYWNoKChkZWYpID0+IHtcbiAgICAgIGlmIChkZWYuZGVmYXVsdFZhbHVlKSB7XG4gICAgICAgIHZhbHVlVG9PYmplY3RSZXByZXNlbnRhdGlvbihcbiAgICAgICAgICBkZWZhdWx0VmFsdWVzLFxuICAgICAgICAgIGRlZi52YXJpYWJsZS5uYW1lLFxuICAgICAgICAgIGRlZi5kZWZhdWx0VmFsdWUgYXMgVmFsdWVOb2RlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIGRlZmF1bHRWYWx1ZXM7XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getDefaultValues.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getFragmentDefinition.js":
/*!*********************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getFragmentDefinition.js ***!
  \*********************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getFragmentDefinition: () => (/* binding */ getFragmentDefinition)\n/* harmony export */ });\n/* harmony import */ var _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @apollo/client/utilities/invariant */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/invariant/index.development.js\");\n\n/**\n* @internal\n* \n* @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n*/ function getFragmentDefinition(doc) {\n    (0,_apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(doc.kind === \"Document\", 6);\n    (0,_apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(doc.definitions.length <= 1, 7);\n    const fragmentDef = doc.definitions[0];\n    (0,_apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(fragmentDef.kind === \"FragmentDefinition\", 8);\n    return fragmentDef;\n} //# sourceMappingURL=getFragmentDefinition.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvaW50ZXJuYWwvZ2V0RnJhZ21lbnREZWZpbml0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBRThEOzs7OztHQUc5RCxTQUFnQixDQUFoQixvQkFBcUMsQ0FDbkMsQ0FERixFQUNtQixFQURuQjtJQUdFLDZFQUFGLENBQ0ksQ0FESixFQUNPLENBQUMsQ0FEUixRQUNpQixDQURqQixhQUlHO0lBRUQsNkVBQUYsQ0FDSSxDQURKLEVBQ08sQ0FBQyxDQURSLFVBQ21CLENBQUMsQ0FEcEIsU0FDOEIsS0FFM0I7SUFFRCxDQUFGLEtBQVEsQ0FBUixhQUFzQixDQUF0QixFQUF5QixDQUFDLENBQTFCLFVBQXFDLENBQUMsQ0FBQyxDQUEyQjtJQUVoRSw2RUFBRixDQUNJLENBREosVUFDZSxDQUFDLENBRGhCLFFBQ3lCLENBRHpCLHVCQUdHO0lBRUQsQ0FBRixNQUFTLENBQVQsVUFBOEM7QUFDOUMiLCJzb3VyY2VzIjpbIi9ob21lL3UvUHJvamVjdHMvc3JjL3V0aWxpdGllcy9pbnRlcm5hbC9nZXRGcmFnbWVudERlZmluaXRpb24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBEb2N1bWVudE5vZGUsIEZyYWdtZW50RGVmaW5pdGlvbk5vZGUgfSBmcm9tIFwiZ3JhcGhxbFwiO1xuXG5pbXBvcnQgeyBpbnZhcmlhbnQgfSBmcm9tIFwiQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2ludmFyaWFudFwiO1xuXG4vKiogQGludGVybmFsICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0RnJhZ21lbnREZWZpbml0aW9uKFxuICBkb2M6IERvY3VtZW50Tm9kZVxuKTogRnJhZ21lbnREZWZpbml0aW9uTm9kZSB7XG4gIGludmFyaWFudChcbiAgICBkb2Mua2luZCA9PT0gXCJEb2N1bWVudFwiLFxuICAgIGBFeHBlY3RpbmcgYSBwYXJzZWQgR3JhcGhRTCBkb2N1bWVudC4gUGVyaGFwcyB5b3UgbmVlZCB0byB3cmFwIHRoZSBxdWVyeSBcXFxuc3RyaW5nIGluIGEgXCJncWxcIiB0YWc/IGh0dHA6Ly9kb2NzLmFwb2xsb3N0YWNrLmNvbS9hcG9sbG8tY2xpZW50L2NvcmUuaHRtbCNncWxgXG4gICk7XG5cbiAgaW52YXJpYW50KFxuICAgIGRvYy5kZWZpbml0aW9ucy5sZW5ndGggPD0gMSxcbiAgICBcIkZyYWdtZW50IG11c3QgaGF2ZSBleGFjdGx5IG9uZSBkZWZpbml0aW9uLlwiXG4gICk7XG5cbiAgY29uc3QgZnJhZ21lbnREZWYgPSBkb2MuZGVmaW5pdGlvbnNbMF0gYXMgRnJhZ21lbnREZWZpbml0aW9uTm9kZTtcblxuICBpbnZhcmlhbnQoXG4gICAgZnJhZ21lbnREZWYua2luZCA9PT0gXCJGcmFnbWVudERlZmluaXRpb25cIixcbiAgICBcIk11c3QgYmUgYSBmcmFnbWVudCBkZWZpbml0aW9uLlwiXG4gICk7XG5cbiAgcmV0dXJuIGZyYWdtZW50RGVmIGFzIEZyYWdtZW50RGVmaW5pdGlvbk5vZGU7XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getFragmentDefinition.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getFragmentDefinitions.js":
/*!**********************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getFragmentDefinitions.js ***!
  \**********************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getFragmentDefinitions: () => (/* binding */ getFragmentDefinitions)\n/* harmony export */ });\n/**\n* @internal\n* \n* @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n*/ function getFragmentDefinitions(doc) {\n    return doc.definitions.filter((definition)=>definition.kind === \"FragmentDefinition\");\n} //# sourceMappingURL=getFragmentDefinitions.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvaW50ZXJuYWwvZ2V0RnJhZ21lbnREZWZpbml0aW9ucy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztHQUdBLFNBQWdCLENBQWhCLHFCQUFzQyxDQUNwQyxDQURGLEVBQ21CLEVBRG5CO0lBR0UsQ0FBRixNQUFTLENBQVQsRUFBWSxDQUFDLENBQWIsVUFBd0IsQ0FBQyxDQUF6QixLQUErQixDQUMzQixDQUFDLENBREwsU0FDZSxFQUF3QyxDQUR2RCxVQUVnQixDQUFDLENBRmpCLFFBRTBCLENBRjFCLG1CQUU4QyxDQUMzQztBQUNIIiwic291cmNlcyI6WyIvaG9tZS91L1Byb2plY3RzL3NyYy91dGlsaXRpZXMvaW50ZXJuYWwvZ2V0RnJhZ21lbnREZWZpbml0aW9ucy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IERvY3VtZW50Tm9kZSwgRnJhZ21lbnREZWZpbml0aW9uTm9kZSB9IGZyb20gXCJncmFwaHFsXCI7XG5cbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRGcmFnbWVudERlZmluaXRpb25zKFxuICBkb2M6IERvY3VtZW50Tm9kZVxuKTogRnJhZ21lbnREZWZpbml0aW9uTm9kZVtdIHtcbiAgcmV0dXJuIGRvYy5kZWZpbml0aW9ucy5maWx0ZXIoXG4gICAgKGRlZmluaXRpb24pOiBkZWZpbml0aW9uIGlzIEZyYWdtZW50RGVmaW5pdGlvbk5vZGUgPT5cbiAgICAgIGRlZmluaXRpb24ua2luZCA9PT0gXCJGcmFnbWVudERlZmluaXRpb25cIlxuICApO1xufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getFragmentDefinitions.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getFragmentFromSelection.js":
/*!************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getFragmentFromSelection.js ***!
  \************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getFragmentFromSelection: () => (/* binding */ getFragmentFromSelection)\n/* harmony export */ });\n/* harmony import */ var _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @apollo/client/utilities/invariant */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/invariant/index.development.js\");\n\n/**\n* @internal\n* \n* @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n*/ function getFragmentFromSelection(selection, fragmentMap) {\n    switch(selection.kind){\n        case \"InlineFragment\":\n            return selection;\n        case \"FragmentSpread\":\n            {\n                const fragmentName = selection.name.value;\n                if (typeof fragmentMap === \"function\") {\n                    return fragmentMap(fragmentName);\n                }\n                const fragment = fragmentMap && fragmentMap[fragmentName];\n                (0,_apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(fragment, 9, fragmentName);\n                return fragment || null;\n            }\n        default:\n            return null;\n    }\n} //# sourceMappingURL=getFragmentFromSelection.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvaW50ZXJuYWwvZ2V0RnJhZ21lbnRGcm9tU2VsZWN0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBTThEOzs7OztHQU05RCxTQUFnQixDQUFoQix1QkFBd0MsQ0FDdEMsQ0FERixRQUMwQixFQUN4QixDQUZGLFVBRWlELEVBRmpEO0lBSUUsQ0FBRixlQUFtQixDQUFDLENBQXBCLEdBQXdCLEVBQUU7UUFDdEIsQ0FBSixJQUFTLENBQVQsZUFBeUI7WUFDbkIsQ0FBTixNQUFhLENBQWIsUUFBc0I7UUFDbEIsQ0FBSixJQUFTLENBQVQsZUFBeUI7WUFBRTtnQkFDckIsQ0FBTixLQUFZLENBQVosY0FBMkIsQ0FBM0IsUUFBb0MsQ0FBQyxDQUFyQyxHQUF5QyxDQUFDLENBQTFDLElBQStDO2dCQUN6QyxDQUFOLEdBQVUsQ0FBVixNQUFpQixDQUFqQixlQUFpQyxDQUFqQyxTQUEyQyxFQUFFO29CQUNyQyxDQUFSLE1BQWUsQ0FBZixVQUEwQixDQUFDLENBQTNCLFdBQXVDLENBQUM7Z0JBQ2xDO2dCQUNBLENBQU4sS0FBWSxDQUFaLFVBQXVCLENBQXZCLGNBQXNDLENBQXRDLFVBQWlELENBQUMsQ0FBbEQsV0FBOEQsQ0FBQztnQkFDekQsNkVBQU4sQ0FBZ0IsQ0FBaEIsWUFBa0QsQ0FBbEQsWUFBK0Q7Z0JBQ3pELENBQU4sTUFBYSxDQUFiLFdBQXlCLENBQXpCLEdBQTZCO1lBQ3pCO1FBQ0EsQ0FBSjtZQUNNLENBQU4sTUFBYSxDQUFiLEdBQWlCO0lBQ2Y7QUFDRiIsInNvdXJjZXMiOlsiL2hvbWUvdS9Qcm9qZWN0cy9zcmMvdXRpbGl0aWVzL2ludGVybmFsL2dldEZyYWdtZW50RnJvbVNlbGVjdGlvbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7XG4gIEZyYWdtZW50RGVmaW5pdGlvbk5vZGUsXG4gIElubGluZUZyYWdtZW50Tm9kZSxcbiAgU2VsZWN0aW9uTm9kZSxcbn0gZnJvbSBcImdyYXBocWxcIjtcblxuaW1wb3J0IHsgaW52YXJpYW50IH0gZnJvbSBcIkBhcG9sbG8vY2xpZW50L3V0aWxpdGllcy9pbnZhcmlhbnRcIjtcblxuaW1wb3J0IHR5cGUgeyBGcmFnbWVudE1hcCB9IGZyb20gXCIuL3R5cGVzL0ZyYWdtZW50TWFwLmpzXCI7XG5pbXBvcnQgdHlwZSB7IEZyYWdtZW50TWFwRnVuY3Rpb24gfSBmcm9tIFwiLi90eXBlcy9GcmFnbWVudE1hcEZ1bmN0aW9uLmpzXCI7XG5cbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRGcmFnbWVudEZyb21TZWxlY3Rpb24oXG4gIHNlbGVjdGlvbjogU2VsZWN0aW9uTm9kZSxcbiAgZnJhZ21lbnRNYXA/OiBGcmFnbWVudE1hcCB8IEZyYWdtZW50TWFwRnVuY3Rpb25cbik6IElubGluZUZyYWdtZW50Tm9kZSB8IEZyYWdtZW50RGVmaW5pdGlvbk5vZGUgfCBudWxsIHtcbiAgc3dpdGNoIChzZWxlY3Rpb24ua2luZCkge1xuICAgIGNhc2UgXCJJbmxpbmVGcmFnbWVudFwiOlxuICAgICAgcmV0dXJuIHNlbGVjdGlvbjtcbiAgICBjYXNlIFwiRnJhZ21lbnRTcHJlYWRcIjoge1xuICAgICAgY29uc3QgZnJhZ21lbnROYW1lID0gc2VsZWN0aW9uLm5hbWUudmFsdWU7XG4gICAgICBpZiAodHlwZW9mIGZyYWdtZW50TWFwID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGZyYWdtZW50TWFwKGZyYWdtZW50TmFtZSk7XG4gICAgICB9XG4gICAgICBjb25zdCBmcmFnbWVudCA9IGZyYWdtZW50TWFwICYmIGZyYWdtZW50TWFwW2ZyYWdtZW50TmFtZV07XG4gICAgICBpbnZhcmlhbnQoZnJhZ21lbnQsIGBObyBmcmFnbWVudCBuYW1lZCAlc2AsIGZyYWdtZW50TmFtZSk7XG4gICAgICByZXR1cm4gZnJhZ21lbnQgfHwgbnVsbDtcbiAgICB9XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBudWxsO1xuICB9XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getFragmentFromSelection.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getFragmentQueryDocument.js":
/*!************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getFragmentQueryDocument.js ***!
  \************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getFragmentQueryDocument: () => (/* binding */ getFragmentQueryDocument)\n/* harmony export */ });\n/* harmony import */ var _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @apollo/client/utilities/invariant */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/invariant/index.js\");\n/* harmony import */ var _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @apollo/client/utilities/invariant */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/invariant/index.development.js\");\n\n/**\n* Returns a query document which adds a single query operation that only\n* spreads the target fragment inside of it.\n*\n* So for example a document of:\n*\n* ```graphql\n* fragment foo on Foo {\n*   a\n*   b\n*   c\n* }\n* ```\n*\n* Turns into:\n*\n* ```graphql\n* {\n*   ...foo\n* }\n*\n* fragment foo on Foo {\n*   a\n*   b\n*   c\n* }\n* ```\n*\n* The target fragment will either be the only fragment in the document, or a\n* fragment specified by the provided `fragmentName`. If there is more than one\n* fragment, but a `fragmentName` was not defined then an error will be thrown.\n*\n* @internal\n* \n* @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n*/ function getFragmentQueryDocument(document, fragmentName) {\n    let actualFragmentName = fragmentName;\n    // Build an array of all our fragment definitions that will be used for\n    // validations. We also do some validations on the other definitions in the\n    // document while building this list.\n    const fragments = [];\n    document.definitions.forEach((definition)=>{\n        // Throw an error if we encounter an operation definition because we will\n        // define our own operation definition later on.\n        if (definition.kind === \"OperationDefinition\") {\n            throw (0,_apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(10, definition.operation, definition.name ? \" named '\".concat(definition.name.value, \"'\") : \"\");\n        }\n        // Add our definition to the fragments array if it is a fragment\n        // definition.\n        if (definition.kind === \"FragmentDefinition\") {\n            fragments.push(definition);\n        }\n    });\n    // If the user did not give us a fragment name then let us try to get a\n    // name from a single fragment in the definition.\n    if (typeof actualFragmentName === \"undefined\") {\n        (0,_apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(fragments.length === 1, 11, fragments.length);\n        actualFragmentName = fragments[0].name.value;\n    }\n    // Generate a query document with an operation that simply spreads the\n    // fragment inside of it.\n    const query = {\n        ...document,\n        definitions: [\n            {\n                kind: \"OperationDefinition\",\n                // OperationTypeNode is an enum\n                operation: \"query\",\n                selectionSet: {\n                    kind: \"SelectionSet\",\n                    selections: [\n                        {\n                            kind: \"FragmentSpread\",\n                            name: {\n                                kind: \"Name\",\n                                value: actualFragmentName\n                            }\n                        }\n                    ]\n                }\n            },\n            ...document.definitions\n        ]\n    };\n    return query;\n} //# sourceMappingURL=getFragmentQueryDocument.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvaW50ZXJuYWwvZ2V0RnJhZ21lbnRRdWVyeURvY3VtZW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQVUyQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBb0MzQyxTQUFnQixDQUFoQix1QkFBd0MsQ0FDdEMsQ0FERixPQUN3QixFQUN0QixDQUZGLFdBRXVCLEVBRnZCO0lBSUUsQ0FBRixHQUFNLENBQU4sb0JBQTJCLENBQTNCLFdBQXVDO0lBRXJDLENBQUY7SUFDRSxDQUFGO0lBQ0UsQ0FBRjtJQUNFLENBQUYsS0FBUSxDQUFSLFdBQW1ELENBQW5ELENBQXFEO0lBQ25ELENBQUYsT0FBVSxDQUFDLENBQVgsVUFBc0IsQ0FBQyxDQUF2QixNQUE4QixDQUFDLENBQUMsQ0FBaEMsU0FBMEMsRUFBRSxDQUE1QztRQUNJLENBQUo7UUFDSSxDQUFKO1FBQ0ksQ0FBSixHQUFRLENBQVIsU0FBa0IsQ0FBQyxDQUFuQixRQUE0QixDQUE1QixvQkFBaUQsRUFBRTtZQUM3QyxDQUFOLEtBQVkscUZBQVosS0FHUSxDQURSLFNBQ2tCLENBQUMsQ0FEbkIsVUFFUSxDQUZSLFNBRWtCLENBQUMsQ0FGbkIsSUFFd0IsRUFBRSxDQUYxQixhQUU4RCxJQUF6QixDQUZyQyxTQUUrQyxDQUFDLENBRmhELEdBRW9ELENBQUMsQ0FGckQsSUFFMEQsU0FBTSxDQUZoRTtRQUlJO1FBQ0EsQ0FBSjtRQUNJLENBQUo7UUFDSSxDQUFKLEdBQVEsQ0FBUixTQUFrQixDQUFDLENBQW5CLFFBQTRCLENBQTVCLG1CQUFnRCxFQUFFO1lBQzVDLENBQU4sUUFBZSxDQUFDLENBQWhCLEdBQW9CLENBQUMsQ0FBckIsU0FBK0IsQ0FBQztRQUM1QjtJQUNGLENBQUMsQ0FBQztJQUVGLENBQUY7SUFDRSxDQUFGO0lBQ0UsQ0FBRixHQUFNLENBQU4sTUFBYSxDQUFiLHNCQUFvQyxDQUFwQyxVQUErQyxFQUFFO1FBQzdDLDZFQUFKLENBQ00sQ0FETixRQUNlLENBQUMsQ0FEaEIsVUFDMkIsT0FFckIsQ0FITixRQUdlLENBQUMsQ0FIaEIsTUFJSztRQUNELENBQUosb0JBQXlCLENBQXpCLFFBQWtDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBdEMsR0FBMEMsQ0FBQyxDQUEzQyxJQUFnRDtJQUM5QztJQUVBLENBQUY7SUFDRSxDQUFGO0lBQ0UsQ0FBRixLQUFRLENBQVIsT0FBOEI7UUFDMUIsQ0FBSixFQUFPLENBQVAsT0FBZTtRQUNYLENBQUosVUFBZSxFQUFFO1lBQ1g7Z0JBQ0UsQ0FBUixHQUFZLEVBQUUsQ0FBZCxvQkFBZ0U7Z0JBQ3hELENBQVI7Z0JBQ1EsQ0FBUixRQUFpQixFQUFFLENBQW5CLE1BQStDO2dCQUN2QyxDQUFSLFdBQW9CLEVBQUU7b0JBQ1osQ0FBVixHQUFjLEVBQUUsQ0FBaEIsYUFBb0Q7b0JBQzFDLENBQVYsU0FBb0IsRUFBRTt3QkFDVjs0QkFDRSxDQUFkLEdBQWtCLEVBQUUsQ0FBcEIsZUFBNEQ7NEJBQzlDLENBQWQsR0FBa0IsRUFBRTtnQ0FDSixDQUFoQixHQUFvQixFQUFFLENBQXRCLEtBQXlDO2dDQUN6QixDQUFoQixJQUFxQixFQUFFLENBQXZCLGlCQUF5Qzs0QkFDekMsQ0FBZTt3QkFDZixDQUFhO3FCQUNGO2dCQUNYLENBQVM7WUFDVCxDQUFPO2VBQ0UsQ0FBVCxPQUFpQixDQUFDLENBQWxCLFVBQTZCO1NBQ3hCO0lBQ0wsQ0FBRztJQUVELENBQUYsTUFBUyxDQUFULElBQWM7QUFDZCIsInNvdXJjZXMiOlsiL2hvbWUvdS9Qcm9qZWN0cy9zcmMvdXRpbGl0aWVzL2ludGVybmFsL2dldEZyYWdtZW50UXVlcnlEb2N1bWVudC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7XG4gIERvY3VtZW50Tm9kZSxcbiAgRnJhZ21lbnREZWZpbml0aW9uTm9kZSxcbiAgS2luZCxcbiAgT3BlcmF0aW9uVHlwZU5vZGUsXG59IGZyb20gXCJncmFwaHFsXCI7XG5cbmltcG9ydCB7XG4gIGludmFyaWFudCxcbiAgbmV3SW52YXJpYW50RXJyb3IsXG59IGZyb20gXCJAYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvaW52YXJpYW50XCI7XG5cbi8qKlxuICogUmV0dXJucyBhIHF1ZXJ5IGRvY3VtZW50IHdoaWNoIGFkZHMgYSBzaW5nbGUgcXVlcnkgb3BlcmF0aW9uIHRoYXQgb25seVxuICogc3ByZWFkcyB0aGUgdGFyZ2V0IGZyYWdtZW50IGluc2lkZSBvZiBpdC5cbiAqXG4gKiBTbyBmb3IgZXhhbXBsZSBhIGRvY3VtZW50IG9mOlxuICpcbiAqIGBgYGdyYXBocWxcbiAqIGZyYWdtZW50IGZvbyBvbiBGb28ge1xuICogICBhXG4gKiAgIGJcbiAqICAgY1xuICogfVxuICogYGBgXG4gKlxuICogVHVybnMgaW50bzpcbiAqXG4gKiBgYGBncmFwaHFsXG4gKiB7XG4gKiAgIC4uLmZvb1xuICogfVxuICpcbiAqIGZyYWdtZW50IGZvbyBvbiBGb28ge1xuICogICBhXG4gKiAgIGJcbiAqICAgY1xuICogfVxuICogYGBgXG4gKlxuICogVGhlIHRhcmdldCBmcmFnbWVudCB3aWxsIGVpdGhlciBiZSB0aGUgb25seSBmcmFnbWVudCBpbiB0aGUgZG9jdW1lbnQsIG9yIGFcbiAqIGZyYWdtZW50IHNwZWNpZmllZCBieSB0aGUgcHJvdmlkZWQgYGZyYWdtZW50TmFtZWAuIElmIHRoZXJlIGlzIG1vcmUgdGhhbiBvbmVcbiAqIGZyYWdtZW50LCBidXQgYSBgZnJhZ21lbnROYW1lYCB3YXMgbm90IGRlZmluZWQgdGhlbiBhbiBlcnJvciB3aWxsIGJlIHRocm93bi5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEZyYWdtZW50UXVlcnlEb2N1bWVudChcbiAgZG9jdW1lbnQ6IERvY3VtZW50Tm9kZSxcbiAgZnJhZ21lbnROYW1lPzogc3RyaW5nXG4pOiBEb2N1bWVudE5vZGUge1xuICBsZXQgYWN0dWFsRnJhZ21lbnROYW1lID0gZnJhZ21lbnROYW1lO1xuXG4gIC8vIEJ1aWxkIGFuIGFycmF5IG9mIGFsbCBvdXIgZnJhZ21lbnQgZGVmaW5pdGlvbnMgdGhhdCB3aWxsIGJlIHVzZWQgZm9yXG4gIC8vIHZhbGlkYXRpb25zLiBXZSBhbHNvIGRvIHNvbWUgdmFsaWRhdGlvbnMgb24gdGhlIG90aGVyIGRlZmluaXRpb25zIGluIHRoZVxuICAvLyBkb2N1bWVudCB3aGlsZSBidWlsZGluZyB0aGlzIGxpc3QuXG4gIGNvbnN0IGZyYWdtZW50czogQXJyYXk8RnJhZ21lbnREZWZpbml0aW9uTm9kZT4gPSBbXTtcbiAgZG9jdW1lbnQuZGVmaW5pdGlvbnMuZm9yRWFjaCgoZGVmaW5pdGlvbikgPT4ge1xuICAgIC8vIFRocm93IGFuIGVycm9yIGlmIHdlIGVuY291bnRlciBhbiBvcGVyYXRpb24gZGVmaW5pdGlvbiBiZWNhdXNlIHdlIHdpbGxcbiAgICAvLyBkZWZpbmUgb3VyIG93biBvcGVyYXRpb24gZGVmaW5pdGlvbiBsYXRlciBvbi5cbiAgICBpZiAoZGVmaW5pdGlvbi5raW5kID09PSBcIk9wZXJhdGlvbkRlZmluaXRpb25cIikge1xuICAgICAgdGhyb3cgbmV3SW52YXJpYW50RXJyb3IoXG4gICAgICAgIGBGb3VuZCBhICVzIG9wZXJhdGlvbiVzLiBgICtcbiAgICAgICAgICBcIk5vIG9wZXJhdGlvbnMgYXJlIGFsbG93ZWQgd2hlbiB1c2luZyBhIGZyYWdtZW50IGFzIGEgcXVlcnkuIE9ubHkgZnJhZ21lbnRzIGFyZSBhbGxvd2VkLlwiLFxuICAgICAgICBkZWZpbml0aW9uLm9wZXJhdGlvbixcbiAgICAgICAgZGVmaW5pdGlvbi5uYW1lID8gYCBuYW1lZCAnJHtkZWZpbml0aW9uLm5hbWUudmFsdWV9J2AgOiBcIlwiXG4gICAgICApO1xuICAgIH1cbiAgICAvLyBBZGQgb3VyIGRlZmluaXRpb24gdG8gdGhlIGZyYWdtZW50cyBhcnJheSBpZiBpdCBpcyBhIGZyYWdtZW50XG4gICAgLy8gZGVmaW5pdGlvbi5cbiAgICBpZiAoZGVmaW5pdGlvbi5raW5kID09PSBcIkZyYWdtZW50RGVmaW5pdGlvblwiKSB7XG4gICAgICBmcmFnbWVudHMucHVzaChkZWZpbml0aW9uKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIElmIHRoZSB1c2VyIGRpZCBub3QgZ2l2ZSB1cyBhIGZyYWdtZW50IG5hbWUgdGhlbiBsZXQgdXMgdHJ5IHRvIGdldCBhXG4gIC8vIG5hbWUgZnJvbSBhIHNpbmdsZSBmcmFnbWVudCBpbiB0aGUgZGVmaW5pdGlvbi5cbiAgaWYgKHR5cGVvZiBhY3R1YWxGcmFnbWVudE5hbWUgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBpbnZhcmlhbnQoXG4gICAgICBmcmFnbWVudHMubGVuZ3RoID09PSAxLFxuICAgICAgYEZvdW5kICVzIGZyYWdtZW50cy4gXFxgZnJhZ21lbnROYW1lXFxgIG11c3QgYmUgcHJvdmlkZWQgd2hlbiB0aGVyZSBpcyBub3QgZXhhY3RseSAxIGZyYWdtZW50LmAsXG4gICAgICBmcmFnbWVudHMubGVuZ3RoXG4gICAgKTtcbiAgICBhY3R1YWxGcmFnbWVudE5hbWUgPSBmcmFnbWVudHNbMF0ubmFtZS52YWx1ZTtcbiAgfVxuXG4gIC8vIEdlbmVyYXRlIGEgcXVlcnkgZG9jdW1lbnQgd2l0aCBhbiBvcGVyYXRpb24gdGhhdCBzaW1wbHkgc3ByZWFkcyB0aGVcbiAgLy8gZnJhZ21lbnQgaW5zaWRlIG9mIGl0LlxuICBjb25zdCBxdWVyeTogRG9jdW1lbnROb2RlID0ge1xuICAgIC4uLmRvY3VtZW50LFxuICAgIGRlZmluaXRpb25zOiBbXG4gICAgICB7XG4gICAgICAgIGtpbmQ6IFwiT3BlcmF0aW9uRGVmaW5pdGlvblwiIGFzIEtpbmQuT1BFUkFUSU9OX0RFRklOSVRJT04sXG4gICAgICAgIC8vIE9wZXJhdGlvblR5cGVOb2RlIGlzIGFuIGVudW1cbiAgICAgICAgb3BlcmF0aW9uOiBcInF1ZXJ5XCIgYXMgT3BlcmF0aW9uVHlwZU5vZGUsXG4gICAgICAgIHNlbGVjdGlvblNldDoge1xuICAgICAgICAgIGtpbmQ6IFwiU2VsZWN0aW9uU2V0XCIgYXMgS2luZC5TRUxFQ1RJT05fU0VULFxuICAgICAgICAgIHNlbGVjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAga2luZDogXCJGcmFnbWVudFNwcmVhZFwiIGFzIEtpbmQuRlJBR01FTlRfU1BSRUFELFxuICAgICAgICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICAgICAga2luZDogXCJOYW1lXCIgYXMgS2luZC5OQU1FLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBhY3R1YWxGcmFnbWVudE5hbWUsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgLi4uZG9jdW1lbnQuZGVmaW5pdGlvbnMsXG4gICAgXSxcbiAgfTtcblxuICByZXR1cm4gcXVlcnk7XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getFragmentQueryDocument.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getMainDefinition.js":
/*!*****************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getMainDefinition.js ***!
  \*****************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getMainDefinition: () => (/* binding */ getMainDefinition)\n/* harmony export */ });\n/* harmony import */ var _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @apollo/client/utilities/invariant */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/invariant/index.js\");\n/* harmony import */ var _checkDocument_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./checkDocument.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/checkDocument.js\");\n\n\n/**\n * Returns the first operation definition from a GraphQL document. The function\n * prioritizes operation definitions over fragment definitions, which makes it\n * suitable for documents that may contain both. If no operation definition is\n * found, the first fragment definition will be returned. If no definitions are\n * found, an error is thrown.\n *\n * @remarks\n *\n * Use this function when you need to perform more advanced tasks with the main\n * definition AST node. If you want to determine when a document is a specific\n * operation type, prefer the `isQueryOperation`, `isMutationOperation`, and\n * `isSubscriptionOperation` utility functions instead.\n *\n * @param queryDoc - The GraphQL document to extract the definition from\n * @returns The main operation or fragment definition AST node\n *\n * @example\n *\n * ```ts\n * import { gql } from \"@apollo/client\";\n * import { getMainDefinition } from \"@apollo/client/utilities\";\n *\n * const query = gql`\n *   query GetUser($id: ID!) {\n *     user(id: $id) {\n *       name\n *       email\n *     }\n *   }\n * `;\n *\n * const definition = getMainDefinition(query);\n * ```\n *\n * @throws When the document contains no operation or fragment definitions\n */ function getMainDefinition(queryDoc) {\n    (0,_checkDocument_js__WEBPACK_IMPORTED_MODULE_0__.checkDocument)(queryDoc);\n    let fragmentDefinition;\n    for (let definition of queryDoc.definitions){\n        if (definition.kind === \"OperationDefinition\") {\n            return definition;\n        }\n        if (definition.kind === \"FragmentDefinition\" && !fragmentDefinition) {\n            // we do this because we want to allow multiple fragment definitions\n            // to precede an operation definition.\n            fragmentDefinition = definition;\n        }\n    }\n    if (fragmentDefinition) {\n        return fragmentDefinition;\n    }\n    throw (0,_apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_1__.newInvariantError)(12);\n} //# sourceMappingURL=getMainDefinition.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvaW50ZXJuYWwvZ2V0TWFpbkRlZmluaXRpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBTXNFO0FBRXBCO0FBRWxEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FvQ0EsR0FDQSxTQUFnQixDQUFoQixnQkFBaUMsQ0FDL0IsQ0FERixPQUN3QixFQUR4QjtJQUdFLGdFQUFhLENBQUMsQ0FBaEIsT0FBd0IsQ0FBQztJQUV2QixDQUFGLEdBQU0sQ0FBTixpQkFBd0I7SUFFdEIsQ0FBRixJQUFPLENBQVAsR0FBVyxDQUFYLGFBQXlCLENBQXpCLE9BQWlDLENBQUMsQ0FBbEMsVUFBNkMsQ0FBRTtRQUMzQyxDQUFKLEdBQVEsQ0FBUixTQUFrQixDQUFDLENBQW5CLFFBQTRCLENBQTVCLG9CQUFpRCxFQUFFO1lBQzdDLENBQU4sTUFBYSxDQUFiLFNBQXVCO1FBQ25CO1FBRUEsQ0FBSixHQUFRLENBQVIsU0FBa0IsQ0FBQyxDQUFuQixRQUE0QixDQUE1Qix1QkFBb0QsQ0FBQyxDQUFyRCxpQkFBdUUsRUFBRTtZQUNuRSxDQUFOO1lBQ00sQ0FBTjtZQUNNLENBQU4sb0JBQTJCLENBQTNCLFNBQXFDO1FBQ2pDO0lBQ0Y7SUFFQSxDQUFGLEdBQU0sQ0FBTixpQkFBd0IsRUFBRTtRQUN0QixDQUFKLE1BQVcsQ0FBWCxpQkFBNkI7SUFDM0I7SUFFQSxDQUFGLEtBQVEscUZBQVIsSUFFRztBQUNIIiwic291cmNlcyI6WyIvaG9tZS91L1Byb2plY3RzL3NyYy91dGlsaXRpZXMvaW50ZXJuYWwvZ2V0TWFpbkRlZmluaXRpb24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUge1xuICBEb2N1bWVudE5vZGUsXG4gIEZyYWdtZW50RGVmaW5pdGlvbk5vZGUsXG4gIE9wZXJhdGlvbkRlZmluaXRpb25Ob2RlLFxufSBmcm9tIFwiZ3JhcGhxbFwiO1xuXG5pbXBvcnQgeyBuZXdJbnZhcmlhbnRFcnJvciB9IGZyb20gXCJAYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvaW52YXJpYW50XCI7XG5cbmltcG9ydCB7IGNoZWNrRG9jdW1lbnQgfSBmcm9tIFwiLi9jaGVja0RvY3VtZW50LmpzXCI7XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZmlyc3Qgb3BlcmF0aW9uIGRlZmluaXRpb24gZnJvbSBhIEdyYXBoUUwgZG9jdW1lbnQuIFRoZSBmdW5jdGlvblxuICogcHJpb3JpdGl6ZXMgb3BlcmF0aW9uIGRlZmluaXRpb25zIG92ZXIgZnJhZ21lbnQgZGVmaW5pdGlvbnMsIHdoaWNoIG1ha2VzIGl0XG4gKiBzdWl0YWJsZSBmb3IgZG9jdW1lbnRzIHRoYXQgbWF5IGNvbnRhaW4gYm90aC4gSWYgbm8gb3BlcmF0aW9uIGRlZmluaXRpb24gaXNcbiAqIGZvdW5kLCB0aGUgZmlyc3QgZnJhZ21lbnQgZGVmaW5pdGlvbiB3aWxsIGJlIHJldHVybmVkLiBJZiBubyBkZWZpbml0aW9ucyBhcmVcbiAqIGZvdW5kLCBhbiBlcnJvciBpcyB0aHJvd24uXG4gKlxuICogQHJlbWFya3NcbiAqXG4gKiBVc2UgdGhpcyBmdW5jdGlvbiB3aGVuIHlvdSBuZWVkIHRvIHBlcmZvcm0gbW9yZSBhZHZhbmNlZCB0YXNrcyB3aXRoIHRoZSBtYWluXG4gKiBkZWZpbml0aW9uIEFTVCBub2RlLiBJZiB5b3Ugd2FudCB0byBkZXRlcm1pbmUgd2hlbiBhIGRvY3VtZW50IGlzIGEgc3BlY2lmaWNcbiAqIG9wZXJhdGlvbiB0eXBlLCBwcmVmZXIgdGhlIGBpc1F1ZXJ5T3BlcmF0aW9uYCwgYGlzTXV0YXRpb25PcGVyYXRpb25gLCBhbmRcbiAqIGBpc1N1YnNjcmlwdGlvbk9wZXJhdGlvbmAgdXRpbGl0eSBmdW5jdGlvbnMgaW5zdGVhZC5cbiAqXG4gKiBAcGFyYW0gcXVlcnlEb2MgLSBUaGUgR3JhcGhRTCBkb2N1bWVudCB0byBleHRyYWN0IHRoZSBkZWZpbml0aW9uIGZyb21cbiAqIEByZXR1cm5zIFRoZSBtYWluIG9wZXJhdGlvbiBvciBmcmFnbWVudCBkZWZpbml0aW9uIEFTVCBub2RlXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBgYGB0c1xuICogaW1wb3J0IHsgZ3FsIH0gZnJvbSBcIkBhcG9sbG8vY2xpZW50XCI7XG4gKiBpbXBvcnQgeyBnZXRNYWluRGVmaW5pdGlvbiB9IGZyb20gXCJAYXBvbGxvL2NsaWVudC91dGlsaXRpZXNcIjtcbiAqXG4gKiBjb25zdCBxdWVyeSA9IGdxbGBcbiAqICAgcXVlcnkgR2V0VXNlcigkaWQ6IElEISkge1xuICogICAgIHVzZXIoaWQ6ICRpZCkge1xuICogICAgICAgbmFtZVxuICogICAgICAgZW1haWxcbiAqICAgICB9XG4gKiAgIH1cbiAqIGA7XG4gKlxuICogY29uc3QgZGVmaW5pdGlvbiA9IGdldE1haW5EZWZpbml0aW9uKHF1ZXJ5KTtcbiAqIGBgYFxuICpcbiAqIEB0aHJvd3MgV2hlbiB0aGUgZG9jdW1lbnQgY29udGFpbnMgbm8gb3BlcmF0aW9uIG9yIGZyYWdtZW50IGRlZmluaXRpb25zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRNYWluRGVmaW5pdGlvbihcbiAgcXVlcnlEb2M6IERvY3VtZW50Tm9kZVxuKTogT3BlcmF0aW9uRGVmaW5pdGlvbk5vZGUgfCBGcmFnbWVudERlZmluaXRpb25Ob2RlIHtcbiAgY2hlY2tEb2N1bWVudChxdWVyeURvYyk7XG5cbiAgbGV0IGZyYWdtZW50RGVmaW5pdGlvbjtcblxuICBmb3IgKGxldCBkZWZpbml0aW9uIG9mIHF1ZXJ5RG9jLmRlZmluaXRpb25zKSB7XG4gICAgaWYgKGRlZmluaXRpb24ua2luZCA9PT0gXCJPcGVyYXRpb25EZWZpbml0aW9uXCIpIHtcbiAgICAgIHJldHVybiBkZWZpbml0aW9uO1xuICAgIH1cblxuICAgIGlmIChkZWZpbml0aW9uLmtpbmQgPT09IFwiRnJhZ21lbnREZWZpbml0aW9uXCIgJiYgIWZyYWdtZW50RGVmaW5pdGlvbikge1xuICAgICAgLy8gd2UgZG8gdGhpcyBiZWNhdXNlIHdlIHdhbnQgdG8gYWxsb3cgbXVsdGlwbGUgZnJhZ21lbnQgZGVmaW5pdGlvbnNcbiAgICAgIC8vIHRvIHByZWNlZGUgYW4gb3BlcmF0aW9uIGRlZmluaXRpb24uXG4gICAgICBmcmFnbWVudERlZmluaXRpb24gPSBkZWZpbml0aW9uO1xuICAgIH1cbiAgfVxuXG4gIGlmIChmcmFnbWVudERlZmluaXRpb24pIHtcbiAgICByZXR1cm4gZnJhZ21lbnREZWZpbml0aW9uO1xuICB9XG5cbiAgdGhyb3cgbmV3SW52YXJpYW50RXJyb3IoXG4gICAgXCJFeHBlY3RlZCBhIHBhcnNlZCBHcmFwaFFMIHF1ZXJ5IHdpdGggYSBxdWVyeSwgbXV0YXRpb24sIHN1YnNjcmlwdGlvbiwgb3IgYSBmcmFnbWVudC5cIlxuICApO1xufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getMainDefinition.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getMemoryInternals.js":
/*!******************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getMemoryInternals.js ***!
  \******************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getApolloCacheMemoryInternals: () => (/* binding */ getApolloCacheMemoryInternals),\n/* harmony export */   getApolloClientMemoryInternals: () => (/* binding */ getApolloClientMemoryInternals),\n/* harmony export */   getInMemoryCacheMemoryInternals: () => (/* binding */ getInMemoryCacheMemoryInternals),\n/* harmony export */   registerGlobalCache: () => (/* binding */ registerGlobalCache)\n/* harmony export */ });\n/* harmony import */ var _apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @apollo/client/utilities/environment */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/environment/index.development.js\");\n/* harmony import */ var _caching_sizes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../caching/sizes.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/caching/sizes.js\");\n\n\nconst globalCaches = {};\nfunction registerGlobalCache(name, getSize) {\n    globalCaches[name] = getSize;\n}\n/**\n* For internal purposes only - please call `ApolloClient.getMemoryInternals` instead\n* @internal\n* \n* @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n*/ const getApolloClientMemoryInternals = _apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_0__.__DEV__ ? _getApolloClientMemoryInternals : undefined;\n/**\n* For internal purposes only - please call `ApolloClient.getMemoryInternals` instead\n* @internal\n* \n* @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n*/ const getInMemoryCacheMemoryInternals = _apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_0__.__DEV__ ? _getInMemoryCacheMemoryInternals : undefined;\n/**\n* For internal purposes only - please call `ApolloClient.getMemoryInternals` instead\n* @internal\n* \n* @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n*/ const getApolloCacheMemoryInternals = _apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_0__.__DEV__ ? _getApolloCacheMemoryInternals : undefined;\nfunction getCurrentCacheSizes() {\n    // `defaultCacheSizes` is a `const enum` that will be inlined during build, so we have to reconstruct it's shape here\n    const defaults = {\n        canonicalStringify: 1000 /* defaultCacheSizes[\"canonicalStringify\"] */ ,\n        checkDocument: 2000 /* defaultCacheSizes[\"checkDocument\"] */ ,\n        print: 2000 /* defaultCacheSizes[\"print\"] */ ,\n        \"documentTransform.cache\": 2000 /* defaultCacheSizes[\"documentTransform.cache\"] */ ,\n        \"queryManager.getDocumentInfo\": 2000 /* defaultCacheSizes[\"queryManager.getDocumentInfo\"] */ ,\n        \"PersistedQueryLink.persistedQueryHashes\": 2000 /* defaultCacheSizes[\"PersistedQueryLink.persistedQueryHashes\"] */ ,\n        \"fragmentRegistry.transform\": 2000 /* defaultCacheSizes[\"fragmentRegistry.transform\"] */ ,\n        \"fragmentRegistry.lookup\": 1000 /* defaultCacheSizes[\"fragmentRegistry.lookup\"] */ ,\n        \"fragmentRegistry.findFragmentSpreads\": 4000 /* defaultCacheSizes[\"fragmentRegistry.findFragmentSpreads\"] */ ,\n        \"cache.fragmentQueryDocuments\": 1000 /* defaultCacheSizes[\"cache.fragmentQueryDocuments\"] */ ,\n        \"removeTypenameFromVariables.getVariableDefinitions\": 2000 /* defaultCacheSizes[\"removeTypenameFromVariables.getVariableDefinitions\"] */ ,\n        \"inMemoryCache.maybeBroadcastWatch\": 5000 /* defaultCacheSizes[\"inMemoryCache.maybeBroadcastWatch\"] */ ,\n        \"inMemoryCache.executeSelectionSet\": 50000 /* defaultCacheSizes[\"inMemoryCache.executeSelectionSet\"] */ ,\n        \"inMemoryCache.executeSubSelectedArray\": 10000 /* defaultCacheSizes[\"inMemoryCache.executeSubSelectedArray\"] */ \n    };\n    return Object.fromEntries(Object.entries(defaults).map((param)=>{\n        let [k, v] = param;\n        return [\n            k,\n            _caching_sizes_js__WEBPACK_IMPORTED_MODULE_1__.cacheSizes[k] || v\n        ];\n    }));\n}\nfunction _getApolloClientMemoryInternals() {\n    var _globalCaches_print, _globalCaches_canonicalStringify, _this_cache_getMemoryInternals, _this_cache;\n    if (!_apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_0__.__DEV__) throw new Error(\"only supported in development mode\");\n    return {\n        limits: getCurrentCacheSizes(),\n        sizes: {\n            print: (_globalCaches_print = globalCaches.print) === null || _globalCaches_print === void 0 ? void 0 : _globalCaches_print.call(globalCaches),\n            canonicalStringify: (_globalCaches_canonicalStringify = globalCaches.canonicalStringify) === null || _globalCaches_canonicalStringify === void 0 ? void 0 : _globalCaches_canonicalStringify.call(globalCaches),\n            links: linkInfo(this.link),\n            queryManager: {\n                getDocumentInfo: this[\"queryManager\"][\"transformCache\"].size,\n                documentTransforms: transformInfo(this[\"queryManager\"].documentTransform)\n            },\n            ...(_this_cache_getMemoryInternals = (_this_cache = this.cache).getMemoryInternals) === null || _this_cache_getMemoryInternals === void 0 ? void 0 : _this_cache_getMemoryInternals.call(_this_cache)\n        }\n    };\n}\nfunction _getApolloCacheMemoryInternals() {\n    return {\n        cache: {\n            fragmentQueryDocuments: getWrapperInformation(this[\"getFragmentDoc\"])\n        }\n    };\n}\nfunction _getInMemoryCacheMemoryInternals() {\n    const fragments = this.config.fragments;\n    return {\n        ..._getApolloCacheMemoryInternals.apply(this),\n        addTypenameDocumentTransform: transformInfo(this[\"addTypenameTransform\"]),\n        inMemoryCache: {\n            executeSelectionSet: getWrapperInformation(this[\"storeReader\"][\"executeSelectionSet\"]),\n            executeSubSelectedArray: getWrapperInformation(this[\"storeReader\"][\"executeSubSelectedArray\"]),\n            maybeBroadcastWatch: getWrapperInformation(this[\"maybeBroadcastWatch\"])\n        },\n        fragmentRegistry: {\n            findFragmentSpreads: getWrapperInformation(fragments === null || fragments === void 0 ? void 0 : fragments.findFragmentSpreads),\n            lookup: getWrapperInformation(fragments === null || fragments === void 0 ? void 0 : fragments.lookup),\n            transform: getWrapperInformation(fragments === null || fragments === void 0 ? void 0 : fragments.transform)\n        }\n    };\n}\nfunction isWrapper(f) {\n    return !!f && \"dirtyKey\" in f;\n}\nfunction getWrapperInformation(f) {\n    return isWrapper(f) ? f.size : undefined;\n}\nfunction isDefined(value) {\n    return value != null;\n}\nfunction transformInfo(transform) {\n    return recurseTransformInfo(transform).map((cache)=>({\n            cache\n        }));\n}\nfunction recurseTransformInfo(transform) {\n    return transform ? [\n        getWrapperInformation(transform === null || transform === void 0 ? void 0 : transform[\"performWork\"]),\n        ...recurseTransformInfo(transform === null || transform === void 0 ? void 0 : transform[\"left\"]),\n        ...recurseTransformInfo(transform === null || transform === void 0 ? void 0 : transform[\"right\"])\n    ].filter(isDefined) : [];\n}\nfunction linkInfo(link) {\n    var _link_getMemoryInternals;\n    return link ? [\n        link === null || link === void 0 ? void 0 : (_link_getMemoryInternals = link.getMemoryInternals) === null || _link_getMemoryInternals === void 0 ? void 0 : _link_getMemoryInternals.call(link),\n        ...linkInfo(link === null || link === void 0 ? void 0 : link.left),\n        ...linkInfo(link === null || link === void 0 ? void 0 : link.right)\n    ].filter(isDefined) : [];\n} //# sourceMappingURL=getMemoryInternals.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvaW50ZXJuYWwvZ2V0TWVtb3J5SW50ZXJuYWxzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQVM4RDtBQUdLO0FBRW5FLE1BQU0sQ0FBTixjQUdJLENBSEosQ0FHTTtBQUVOLFNBQWdCLENBQWhCLGtCQUFtQyxDQUNqQyxDQURGLEdBQ2lDLEVBQy9CLENBRkYsTUFFdUIsRUFGdkI7SUFJRSxDQUFGLFdBQWMsQ0FBQyxDQUFmLEdBQW1CLEVBQW5CLEVBQXVCLENBQXZCLE1BQThCO0FBQzlCOzs7Ozs7R0ErQ08sQ0FBUCxLQUFhLENBQWIsZ0NBQ0UseUVBREYsQ0FDVSxFQUNMLENBQUwsaUNBR0ksQ0FBSixRQUFhOzs7Ozs7R0FNTixDQUFQLEtBQWEsQ0FBYixpQ0FDRSx5RUFERixDQUNVLEVBQ0wsQ0FBTCxrQ0FHSSxDQUFKLFFBQWE7Ozs7OztHQU1OLENBQVAsS0FBYSxDQUFiLCtCQUNFLHlFQURGLENBQ1UsRUFDTCxDQUFMLGdDQUdJLENBQUosUUFBYTtBQUViLFNBQVMsQ0FBVCxtQkFBNkIsQ0FBN0I7SUFDRSxDQUFGO0lBQ0UsQ0FBRixLQUFRLENBQVIsVUFBcUQ7UUFDakQsQ0FBSixpQkFBc0IsRUFBdEIsa0RBQStEO1FBQzNELENBQUosWUFBaUIsRUFBakIsNkNBQXFEO1FBQ2pELENBQUosSUFBUyxFQUFULHFDQUFxQztRQUNqQyxDQUFKLHdCQUE2QixFQUE3Qix1REFBMkU7UUFDdkUsQ0FBSiw2QkFBa0MsRUFBbEMsNERBQ3VEO1FBQ25ELENBQUosd0NBQTZDLEVBQTdDLHVFQUNrRTtRQUM5RCxDQUFKLDJCQUFnQyxFQUFoQywwREFDcUQ7UUFDakQsQ0FBSix3QkFBNkIsRUFBN0IsdURBQTJFO1FBQ3ZFLENBQUoscUNBQTBDLEVBQTFDLG9FQUMrRDtRQUMzRCxDQUFKLDZCQUFrQyxFQUFsQyw0REFDdUQ7UUFDbkQsQ0FBSixtREFBd0QsRUFBeEQsa0ZBQzZFO1FBQ3pFLENBQUosa0NBQXVDLEVBQXZDLGlFQUM0RDtRQUN4RCxDQUFKLGtDQUF1QyxFQUF2QyxrRUFDNEQ7UUFDeEQsQ0FBSixzQ0FBMkMsRUFBM0Msc0VBQ2dFO0lBQ2hFLENBQUc7SUFDRCxDQUFGLE1BQVMsQ0FBVCxLQUFlLENBQUMsQ0FBaEIsVUFBMkIsQ0FDdkIsQ0FESixLQUNVLENBQUMsQ0FEWCxNQUNrQixDQUFDLENBRG5CLE9BQzJCLENBQUMsQ0FBQyxDQUQ3QixFQUNnQyxDQUFDO1lBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FEMUM7ZUFDNkM7WUFDdkMsQ0FBQztZQUNELHlEQUFVLENBQUMsQ0FBcUIsRUFBdEMsR0FBMkMsQ0FBQztTQUN2QyxDQUFDOztBQUVOO0FBRUEsU0FBUyxDQUFULDhCQUF3QyxDQUF4QztRQU1hLENBQWIsV0FBeUIsU0FDQyxDQUExQixXQUFzQyxzQkFRNUIsQ0FBVjtJQWRFLENBQUYsR0FBTSxDQUFDLHlFQUFPLEVBQUUsQ0FBaEIsS0FBc0IsQ0FBdEIsR0FBMEIsQ0FBMUIsSUFBK0IsQ0FBQyxDQUFoQyxtQ0FBb0UsQ0FBQztJQUVuRSxDQUFGLE1BQVM7UUFDTCxDQUFKLEtBQVUsRUFBRSxDQUFaLG1CQUFnQyxDQUFoQyxDQUFrQztRQUM5QixDQUFKLElBQVMsRUFBRTtZQUNMLENBQU4sSUFBVyxzQ0FBZSxDQUExQixJQUErQixDQUEvQixDQUFpQyxDQUFqQyxDQUFtQztZQUM3QixDQUFOLGlCQUF3QixtREFBZSxDQUF2QyxpQkFBeUQsQ0FBekQsQ0FBMkQsQ0FBM0QsQ0FBNkQ7WUFDdkQsQ0FBTixJQUFXLEVBQUUsQ0FBYixPQUFxQixDQUFDLENBQXRCLEdBQTBCLENBQUMsQ0FBM0IsR0FBK0IsQ0FBQztZQUMxQixDQUFOLFdBQWtCLEVBQUU7Z0JBQ1osQ0FBUixjQUF1QixFQUFFLENBQXpCLEdBQTZCLENBQUMsQ0FBOUIsYUFBNEMsQ0FBQyxDQUFDLENBQTlDLGVBQThELENBQUMsQ0FBQyxDQUFoRSxHQUFvRTtnQkFDNUQsQ0FBUixpQkFBMEIsRUFBRSxDQUE1QixZQUF5QyxDQUMvQixDQURWLEdBQ2MsQ0FBQyxDQURmLGFBQzZCLENBQUMsQ0FBQyxDQUQvQixnQkFDZ0QsQ0FDdkM7WUFDVCxDQUFPO29FQUNPLENBQUMsQ0FBZixJQUFvQixFQUFDLENBQXJCLGlCQUF1QyxDQUF2QyxDQUF5QyxDQUF6QyxDQUdxRSwrR0FIL0Q7UUFJTixDQUFLO0lBQ0wsQ0FBRztBQUNIO0FBRUEsU0FBUyxDQUFULDZCQUF1QyxDQUF2QztJQUNFLENBQUYsTUFBUztRQUNMLENBQUosSUFBUyxFQUFFO1lBQ0wsQ0FBTixxQkFBNEIsRUFBRSxDQUE5QixvQkFBbUQsQ0FBQyxDQUFwRCxHQUF3RCxDQUFDLENBQXpELGVBQXlFLENBQUMsQ0FBQztRQUMzRSxDQUFLO0lBQ0wsQ0FBRztBQUNIO0FBRUEsU0FBUyxDQUFULCtCQUF5QyxDQUF6QztJQUNFLENBQUYsS0FBUSxDQUFSLFdBQW9CLENBQXBCLEdBQXdCLENBQUMsQ0FBekIsS0FBK0IsQ0FBQyxDQUFoQyxRQU1PO0lBRUwsQ0FBRixNQUFTO1FBQ0wsQ0FBSixFQUFPLENBQVAsNkJBQXFDLENBQUMsQ0FBdEMsSUFBMkMsQ0FBQyxDQUE1QyxHQUF1RCxDQUFDO1FBQ3BELENBQUosMkJBQWdDLEVBQUUsQ0FBbEMsWUFBK0MsQ0FBQyxDQUFoRCxHQUFvRCxDQUFDLENBQXJELHFCQUEyRSxDQUFDLENBQUM7UUFDekUsQ0FBSixZQUFpQixFQUFFO1lBQ2IsQ0FBTixrQkFBeUIsRUFBRSxDQUEzQixvQkFBZ0QsQ0FDeEMsQ0FEUixHQUNZLENBQUMsQ0FEYixZQUMwQixDQUFDLENBQUMsQ0FENUIsb0JBQ2lELENBQUMsQ0FDM0M7WUFDRCxDQUFOLHNCQUE2QixFQUFFLENBQS9CLG9CQUFvRCxDQUM1QyxDQURSLEdBQ1ksQ0FBQyxDQURiLFlBQzBCLENBQUMsQ0FBQyxDQUQ1Qix3QkFDcUQsQ0FBQyxDQUMvQztZQUNELENBQU4sa0JBQXlCLEVBQUUsQ0FBM0Isb0JBQWdELENBQUMsQ0FBakQsR0FBcUQsQ0FBQyxDQUF0RCxvQkFBMkUsQ0FBQyxDQUFDO1FBQzdFLENBQUs7UUFDRCxDQUFKLGVBQW9CLEVBQUU7WUFDaEIsQ0FBTixrQkFBeUIsRUFBRSxDQUEzQixvQkFBZ0QsdURBQ3hDLENBRFIsUUFDaUIsQ0FBRSxDQURuQixrQkFDc0MsQ0FDL0I7WUFDRCxDQUFOLEtBQVksRUFBRSxDQUFkLG9CQUFtQyxDQUFDLENBQXBDLFFBQTZDLENBQTdDLHNEQUErQyxDQUEvQyxLQUFxRCxDQUFDO1lBQ2hELENBQU4sUUFBZSxFQUFFLENBQWpCLG9CQUFzQyx1REFBQyxDQUF2QyxRQUFnRCxDQUFoRCxTQUEyRCxDQUFDO1FBQzVELENBQUs7SUFDTCxDQUFHO0FBQ0g7QUFFQSxTQUFTLENBQVQsUUFBa0IsQ0FBQyxDQUFZLEVBQS9CO0lBQ0UsQ0FBRixNQUFTLENBQUMsQ0FBQyxFQUFYLEdBQWdCLENBQWhCLGFBQThCLENBQUM7QUFDL0I7QUFFQSxTQUFTLENBQVQsb0JBQThCLENBQUMsQ0FBWSxFQUEzQztJQUNFLENBQUYsTUFBUyxDQUFULFFBQWtCLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQTFCLElBQStCLEVBQUUsQ0FBakMsUUFBMEM7QUFDMUM7QUFFQSxTQUFTLENBQVQsUUFBa0IsQ0FBSSxDQUF0QixJQUFpRCxFQUFqRDtJQUNFLENBQUYsTUFBUyxDQUFULFFBQWtCLENBQWxCLEdBQXNCO0FBQ3RCO0FBRUEsU0FBUyxDQUFULFlBQXNCLENBQUMsQ0FBdkIsUUFBb0QsRUFBcEQ7SUFDRSxDQUFGLE1BQVMsQ0FBVCxtQkFBNkIsQ0FBQyxDQUE5QixRQUF1QyxDQUFDLENBQUMsQ0FBekMsRUFBNEMsQ0FBQyxDQUFDLENBQTlDLElBQW1ELEVBQUUsQ0FBckQsQ0FBeUQsQ0FBRDtZQUFHLENBQTNEO1NBQUEsQ0FBa0UsQ0FBQyxDQUFDO0FBQ3BFO0FBRUEsU0FBUyxDQUFULG1CQUE2QixDQUFDLENBQTlCLFFBQTJELEVBQTNEO0lBQ0UsQ0FBRixNQUFTLENBQVQsU0FBbUIsRUFDYjtRQUNFLENBQVIsb0JBQTZCLHVEQUFDLENBQTlCLFFBQXlDLENBQXpDLGFBQXVELENBQUMsQ0FBQztXQUM5QyxDQUFYLG1CQUErQix1REFBQyxDQUFoQyxRQUF5QyxDQUF6QyxNQUFrRCxDQUFDLENBQUM7V0FDekMsQ0FBWCxtQkFBK0IsdURBQUMsQ0FBaEMsUUFBeUMsQ0FBekMsT0FBbUQsQ0FBQyxDQUFDO0tBQzlDLENBQUMsQ0FBUixLQUFjLENBQUMsQ0FBZixRQUF3QixJQUNsQixDQUFOLENBQVE7QUFDUjtBQUVBLFNBQVMsQ0FBVCxPQUFpQixDQUFDLENBQWxCLEdBQW1DLEVBQW5DO1FBR1EsQ0FBUixHQUFZLENBQVo7SUFGRSxDQUFGLE1BQVMsQ0FBVCxJQUFjLEVBQ1I7cUZBQ1EsQ0FBZCxpQkFBZ0MsQ0FBaEMsQ0FBa0MsQ0FBbEMsQ0FBb0M7V0FDekIsQ0FBWCxPQUFtQiw2Q0FBQyxDQUFwQixHQUF3QixDQUF4QixJQUE4QixDQUFDO1dBQ3BCLENBQVgsT0FBbUIsNkNBQUMsQ0FBcEIsR0FBd0IsQ0FBeEIsS0FBK0IsQ0FBQztLQUN6QixDQUFDLENBQVIsS0FBYyxDQUFDLENBQWYsUUFBd0IsSUFDbEIsQ0FBTixDQUFRO0FBQ1IiLCJzb3VyY2VzIjpbIi9ob21lL3UvUHJvamVjdHMvc3JjL3V0aWxpdGllcy9pbnRlcm5hbC9nZXRNZW1vcnlJbnRlcm5hbHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBPcHRpbWlzdGljV3JhcHBlckZ1bmN0aW9uIH0gZnJvbSBcIm9wdGltaXNtXCI7XG5cbmltcG9ydCB0eXBlIHtcbiAgQXBvbGxvQ2FjaGUsXG4gIEFwb2xsb0xpbmssXG4gIERvY3VtZW50VHJhbnNmb3JtLFxuICBJbk1lbW9yeUNhY2hlLFxufSBmcm9tIFwiQGFwb2xsby9jbGllbnRcIjtcbmltcG9ydCB0eXBlIHsgQXBvbGxvQ2xpZW50IH0gZnJvbSBcIkBhcG9sbG8vY2xpZW50XCI7XG5pbXBvcnQgeyBfX0RFVl9fIH0gZnJvbSBcIkBhcG9sbG8vY2xpZW50L3V0aWxpdGllcy9lbnZpcm9ubWVudFwiO1xuXG5pbXBvcnQgdHlwZSB7IENhY2hlU2l6ZXMgfSBmcm9tIFwiLi4vY2FjaGluZy9zaXplcy5qc1wiO1xuaW1wb3J0IHsgY2FjaGVTaXplcywgZGVmYXVsdENhY2hlU2l6ZXMgfSBmcm9tIFwiLi4vY2FjaGluZy9zaXplcy5qc1wiO1xuXG5jb25zdCBnbG9iYWxDYWNoZXM6IHtcbiAgcHJpbnQ/OiAoKSA9PiBudW1iZXI7XG4gIGNhbm9uaWNhbFN0cmluZ2lmeT86ICgpID0+IG51bWJlcjtcbn0gPSB7fTtcblxuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyR2xvYmFsQ2FjaGUoXG4gIG5hbWU6IGtleW9mIHR5cGVvZiBnbG9iYWxDYWNoZXMsXG4gIGdldFNpemU6ICgpID0+IG51bWJlclxuKSB7XG4gIGdsb2JhbENhY2hlc1tuYW1lXSA9IGdldFNpemU7XG59XG5cbi8qKlxuICogVHJhbnNmb3JtYXRpdmUgaGVscGVyIHR5cGUgdG8gdHVybiBhIGZ1bmN0aW9uIG9mIHRoZSBmb3JtXG4gKlxuICogYGBgdHNcbiAqICh0aGlzOiBhbnkpID0+IFI7XG4gKiBgYGBcbiAqXG4gKiBpbnRvIGEgZnVuY3Rpb24gb2YgdGhlIGZvcm1cbiAqXG4gKiBgYGB0c1xuICogKCkgPT4gUjtcbiAqIGBgYFxuICpcbiAqIHByZXNlcnZpbmcgdGhlIHJldHVybiB0eXBlLCBidXQgcmVtb3ZpbmcgdGhlIGB0aGlzYCBwYXJhbWV0ZXIuXG4gKlxuICogQHJlbWFya3NcbiAqXG4gKiBGdXJ0aGVyIGRvd24gaW4gdGhlIGRlZmluaXRpb25zIG9mIGBfZ2V0QXBvbGxvQ2xpZW50TWVtb3J5SW50ZXJuYWxzYCxcbiAqIGBfZ2V0QXBvbGxvQ2FjaGVNZW1vcnlJbnRlcm5hbHNgIGFuZCBgX2dldEluTWVtb3J5Q2FjaGVNZW1vcnlJbnRlcm5hbHNgLFxuICogaGF2aW5nIHRoZSBgdGhpc2AgcGFyYW1ldGVyIGFubm90YXRpb24gaXMgZXh0cmVtZWx5IHVzZWZ1bCBmb3IgdHlwZSBjaGVja2luZ1xuICogaW5zaWRlIHRoZSBmdW5jdGlvbi5cbiAqXG4gKiBJZiB0aGlzIGlzIHByZXNlcnZlZCBpbiB0aGUgZXhwb3J0ZWQgdHlwZXMsIHRob3VnaCwgaXQgbGVhZHMgdG8gYSBzaXR1YXRpb25cbiAqIHdoZXJlIGBBcG9sbG9DYWNoZS5nZXRNZW1vcnlJbnRlcm5hbHNgIGlzIGEgZnVuY3Rpb24gdGhhdCByZXF1aXJlcyBhIGB0aGlzYFxuICogb2YgdGhlIHR5cGUgYEFwb2xsb0NhY2hlYCwgd2hpbGUgdGhlIGV4dGVuZGluZyBjbGFzcyBgSW5NZW1vcnlDYWNoZWAgaGFzIGFcbiAqIGBnZXRNZW1vcnlJbnRlcm5hbHNgIGZ1bmN0aW9uIHRoYXQgcmVxdWlyZXMgYSBgdGhpc2Agb2YgdGhlIHR5cGVcbiAqIGBJbk1lbW9yeUNhY2hlYC5cbiAqIFRoaXMgaXMgbm90IGNvbXBhdGlibGUgd2l0aCBUeXBlU2NyaXB0J3MgaW5oZXJpdGVuY2Ugc3lzdGVtIChhbHRob3VnaCBpdCBpc1xuICogcGVyZmVjdGx5IGNvcnJlY3QpLCBhbmQgc28gVHlwZVNjcmlwdCB3aWxsIGNvbXBsYWluIGxvdWRseS5cbiAqXG4gKiBXZSBzdGlsbCB3YW50IHRvIGRlZmluZSBvdXIgZnVuY3Rpb25zIHdpdGggdGhlIGB0aGlzYCBhbm5vdGF0aW9uLCB0aG91Z2gsXG4gKiBhbmQgaGF2ZSB0aGUgcmV0dXJuIHR5cGUgaW5mZXJyZWQuXG4gKiAoVGhpcyByZXF1aXJlbWVudCBmb3IgcmV0dXJuIHR5cGUgaW5mZXJlbmNlIGhlcmUgbWFrZXMgaXQgaW1wb3NzaWJsZSB0byB1c2VcbiAqIGEgZnVuY3Rpb24gb3ZlcmxvYWQgdGhhdCBpcyBtb3JlIGV4cGxpY2l0IG9uIHRoZSBpbm5lciBvdmVybG9hZCB0aGFuIGl0IGlzXG4gKiBvbiB0aGUgZXh0ZXJuYWwgb3ZlcmxvYWQuKVxuICpcbiAqIFNvIGluIHRoZSBlbmQsIHdlIHVzZSB0aGlzIGhlbHBlciB0byByZW1vdmUgdGhlIGB0aGlzYCBhbm5vdGF0aW9uIGZyb20gdGhlXG4gKiBleHBvcnRlZCBmdW5jdGlvbiB0eXBlcywgd2hpbGUga2VlcGluZyBpdCBpbiB0aGUgaW50ZXJuYWwgaW1wbGVtZW50YXRpb24uXG4gKi9cbnR5cGUgUmVtb3ZlVGhpczxUPiA9IFQgZXh0ZW5kcyAodGhpczogYW55KSA9PiBpbmZlciBSID8gKCkgPT4gUiA6IG5ldmVyO1xuXG4vKipcbiAqIEZvciBpbnRlcm5hbCBwdXJwb3NlcyBvbmx5IC0gcGxlYXNlIGNhbGwgYEFwb2xsb0NsaWVudC5nZXRNZW1vcnlJbnRlcm5hbHNgIGluc3RlYWRcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgZ2V0QXBvbGxvQ2xpZW50TWVtb3J5SW50ZXJuYWxzID1cbiAgX19ERVZfXyA/XG4gICAgKF9nZXRBcG9sbG9DbGllbnRNZW1vcnlJbnRlcm5hbHMgYXMgUmVtb3ZlVGhpczxcbiAgICAgIHR5cGVvZiBfZ2V0QXBvbGxvQ2xpZW50TWVtb3J5SW50ZXJuYWxzXG4gICAgPilcbiAgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogRm9yIGludGVybmFsIHB1cnBvc2VzIG9ubHkgLSBwbGVhc2UgY2FsbCBgQXBvbGxvQ2xpZW50LmdldE1lbW9yeUludGVybmFsc2AgaW5zdGVhZFxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRJbk1lbW9yeUNhY2hlTWVtb3J5SW50ZXJuYWxzID1cbiAgX19ERVZfXyA/XG4gICAgKF9nZXRJbk1lbW9yeUNhY2hlTWVtb3J5SW50ZXJuYWxzIGFzIFJlbW92ZVRoaXM8XG4gICAgICB0eXBlb2YgX2dldEluTWVtb3J5Q2FjaGVNZW1vcnlJbnRlcm5hbHNcbiAgICA+KVxuICA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBGb3IgaW50ZXJuYWwgcHVycG9zZXMgb25seSAtIHBsZWFzZSBjYWxsIGBBcG9sbG9DbGllbnQuZ2V0TWVtb3J5SW50ZXJuYWxzYCBpbnN0ZWFkXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IGdldEFwb2xsb0NhY2hlTWVtb3J5SW50ZXJuYWxzID1cbiAgX19ERVZfXyA/XG4gICAgKF9nZXRBcG9sbG9DYWNoZU1lbW9yeUludGVybmFscyBhcyBSZW1vdmVUaGlzPFxuICAgICAgdHlwZW9mIF9nZXRBcG9sbG9DYWNoZU1lbW9yeUludGVybmFsc1xuICAgID4pXG4gIDogdW5kZWZpbmVkO1xuXG5mdW5jdGlvbiBnZXRDdXJyZW50Q2FjaGVTaXplcygpIHtcbiAgLy8gYGRlZmF1bHRDYWNoZVNpemVzYCBpcyBhIGBjb25zdCBlbnVtYCB0aGF0IHdpbGwgYmUgaW5saW5lZCBkdXJpbmcgYnVpbGQsIHNvIHdlIGhhdmUgdG8gcmVjb25zdHJ1Y3QgaXQncyBzaGFwZSBoZXJlXG4gIGNvbnN0IGRlZmF1bHRzOiBSZWNvcmQ8a2V5b2YgQ2FjaGVTaXplcywgbnVtYmVyPiA9IHtcbiAgICBjYW5vbmljYWxTdHJpbmdpZnk6IGRlZmF1bHRDYWNoZVNpemVzW1wiY2Fub25pY2FsU3RyaW5naWZ5XCJdLFxuICAgIGNoZWNrRG9jdW1lbnQ6IGRlZmF1bHRDYWNoZVNpemVzW1wiY2hlY2tEb2N1bWVudFwiXSxcbiAgICBwcmludDogZGVmYXVsdENhY2hlU2l6ZXNbXCJwcmludFwiXSxcbiAgICBcImRvY3VtZW50VHJhbnNmb3JtLmNhY2hlXCI6IGRlZmF1bHRDYWNoZVNpemVzW1wiZG9jdW1lbnRUcmFuc2Zvcm0uY2FjaGVcIl0sXG4gICAgXCJxdWVyeU1hbmFnZXIuZ2V0RG9jdW1lbnRJbmZvXCI6XG4gICAgICBkZWZhdWx0Q2FjaGVTaXplc1tcInF1ZXJ5TWFuYWdlci5nZXREb2N1bWVudEluZm9cIl0sXG4gICAgXCJQZXJzaXN0ZWRRdWVyeUxpbmsucGVyc2lzdGVkUXVlcnlIYXNoZXNcIjpcbiAgICAgIGRlZmF1bHRDYWNoZVNpemVzW1wiUGVyc2lzdGVkUXVlcnlMaW5rLnBlcnNpc3RlZFF1ZXJ5SGFzaGVzXCJdLFxuICAgIFwiZnJhZ21lbnRSZWdpc3RyeS50cmFuc2Zvcm1cIjpcbiAgICAgIGRlZmF1bHRDYWNoZVNpemVzW1wiZnJhZ21lbnRSZWdpc3RyeS50cmFuc2Zvcm1cIl0sXG4gICAgXCJmcmFnbWVudFJlZ2lzdHJ5Lmxvb2t1cFwiOiBkZWZhdWx0Q2FjaGVTaXplc1tcImZyYWdtZW50UmVnaXN0cnkubG9va3VwXCJdLFxuICAgIFwiZnJhZ21lbnRSZWdpc3RyeS5maW5kRnJhZ21lbnRTcHJlYWRzXCI6XG4gICAgICBkZWZhdWx0Q2FjaGVTaXplc1tcImZyYWdtZW50UmVnaXN0cnkuZmluZEZyYWdtZW50U3ByZWFkc1wiXSxcbiAgICBcImNhY2hlLmZyYWdtZW50UXVlcnlEb2N1bWVudHNcIjpcbiAgICAgIGRlZmF1bHRDYWNoZVNpemVzW1wiY2FjaGUuZnJhZ21lbnRRdWVyeURvY3VtZW50c1wiXSxcbiAgICBcInJlbW92ZVR5cGVuYW1lRnJvbVZhcmlhYmxlcy5nZXRWYXJpYWJsZURlZmluaXRpb25zXCI6XG4gICAgICBkZWZhdWx0Q2FjaGVTaXplc1tcInJlbW92ZVR5cGVuYW1lRnJvbVZhcmlhYmxlcy5nZXRWYXJpYWJsZURlZmluaXRpb25zXCJdLFxuICAgIFwiaW5NZW1vcnlDYWNoZS5tYXliZUJyb2FkY2FzdFdhdGNoXCI6XG4gICAgICBkZWZhdWx0Q2FjaGVTaXplc1tcImluTWVtb3J5Q2FjaGUubWF5YmVCcm9hZGNhc3RXYXRjaFwiXSxcbiAgICBcImluTWVtb3J5Q2FjaGUuZXhlY3V0ZVNlbGVjdGlvblNldFwiOlxuICAgICAgZGVmYXVsdENhY2hlU2l6ZXNbXCJpbk1lbW9yeUNhY2hlLmV4ZWN1dGVTZWxlY3Rpb25TZXRcIl0sXG4gICAgXCJpbk1lbW9yeUNhY2hlLmV4ZWN1dGVTdWJTZWxlY3RlZEFycmF5XCI6XG4gICAgICBkZWZhdWx0Q2FjaGVTaXplc1tcImluTWVtb3J5Q2FjaGUuZXhlY3V0ZVN1YlNlbGVjdGVkQXJyYXlcIl0sXG4gIH07XG4gIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoXG4gICAgT2JqZWN0LmVudHJpZXMoZGVmYXVsdHMpLm1hcCgoW2ssIHZdKSA9PiBbXG4gICAgICBrLFxuICAgICAgY2FjaGVTaXplc1trIGFzIGtleW9mIENhY2hlU2l6ZXNdIHx8IHYsXG4gICAgXSlcbiAgKTtcbn1cblxuZnVuY3Rpb24gX2dldEFwb2xsb0NsaWVudE1lbW9yeUludGVybmFscyh0aGlzOiBBcG9sbG9DbGllbnQpIHtcbiAgaWYgKCFfX0RFVl9fKSB0aHJvdyBuZXcgRXJyb3IoXCJvbmx5IHN1cHBvcnRlZCBpbiBkZXZlbG9wbWVudCBtb2RlXCIpO1xuXG4gIHJldHVybiB7XG4gICAgbGltaXRzOiBnZXRDdXJyZW50Q2FjaGVTaXplcygpLFxuICAgIHNpemVzOiB7XG4gICAgICBwcmludDogZ2xvYmFsQ2FjaGVzLnByaW50Py4oKSxcbiAgICAgIGNhbm9uaWNhbFN0cmluZ2lmeTogZ2xvYmFsQ2FjaGVzLmNhbm9uaWNhbFN0cmluZ2lmeT8uKCksXG4gICAgICBsaW5rczogbGlua0luZm8odGhpcy5saW5rKSxcbiAgICAgIHF1ZXJ5TWFuYWdlcjoge1xuICAgICAgICBnZXREb2N1bWVudEluZm86IHRoaXNbXCJxdWVyeU1hbmFnZXJcIl1bXCJ0cmFuc2Zvcm1DYWNoZVwiXS5zaXplLFxuICAgICAgICBkb2N1bWVudFRyYW5zZm9ybXM6IHRyYW5zZm9ybUluZm8oXG4gICAgICAgICAgdGhpc1tcInF1ZXJ5TWFuYWdlclwiXS5kb2N1bWVudFRyYW5zZm9ybVxuICAgICAgICApLFxuICAgICAgfSxcbiAgICAgIC4uLih0aGlzLmNhY2hlLmdldE1lbW9yeUludGVybmFscz8uKCkgYXMgUGFydGlhbDxcbiAgICAgICAgUmV0dXJuVHlwZTx0eXBlb2YgX2dldEFwb2xsb0NhY2hlTWVtb3J5SW50ZXJuYWxzPlxuICAgICAgPiAmXG4gICAgICAgIFBhcnRpYWw8UmV0dXJuVHlwZTx0eXBlb2YgX2dldEluTWVtb3J5Q2FjaGVNZW1vcnlJbnRlcm5hbHM+PiksXG4gICAgfSxcbiAgfTtcbn1cblxuZnVuY3Rpb24gX2dldEFwb2xsb0NhY2hlTWVtb3J5SW50ZXJuYWxzKHRoaXM6IEFwb2xsb0NhY2hlKSB7XG4gIHJldHVybiB7XG4gICAgY2FjaGU6IHtcbiAgICAgIGZyYWdtZW50UXVlcnlEb2N1bWVudHM6IGdldFdyYXBwZXJJbmZvcm1hdGlvbih0aGlzW1wiZ2V0RnJhZ21lbnREb2NcIl0pLFxuICAgIH0sXG4gIH07XG59XG5cbmZ1bmN0aW9uIF9nZXRJbk1lbW9yeUNhY2hlTWVtb3J5SW50ZXJuYWxzKHRoaXM6IEluTWVtb3J5Q2FjaGUpIHtcbiAgY29uc3QgZnJhZ21lbnRzID0gdGhpcy5jb25maWcuZnJhZ21lbnRzIGFzXG4gICAgfCB1bmRlZmluZWRcbiAgICB8IHtcbiAgICAgICAgZmluZEZyYWdtZW50U3ByZWFkcz86IEZ1bmN0aW9uO1xuICAgICAgICB0cmFuc2Zvcm0/OiBGdW5jdGlvbjtcbiAgICAgICAgbG9va3VwPzogRnVuY3Rpb247XG4gICAgICB9O1xuXG4gIHJldHVybiB7XG4gICAgLi4uX2dldEFwb2xsb0NhY2hlTWVtb3J5SW50ZXJuYWxzLmFwcGx5KHRoaXMgYXMgYW55KSxcbiAgICBhZGRUeXBlbmFtZURvY3VtZW50VHJhbnNmb3JtOiB0cmFuc2Zvcm1JbmZvKHRoaXNbXCJhZGRUeXBlbmFtZVRyYW5zZm9ybVwiXSksXG4gICAgaW5NZW1vcnlDYWNoZToge1xuICAgICAgZXhlY3V0ZVNlbGVjdGlvblNldDogZ2V0V3JhcHBlckluZm9ybWF0aW9uKFxuICAgICAgICB0aGlzW1wic3RvcmVSZWFkZXJcIl1bXCJleGVjdXRlU2VsZWN0aW9uU2V0XCJdXG4gICAgICApLFxuICAgICAgZXhlY3V0ZVN1YlNlbGVjdGVkQXJyYXk6IGdldFdyYXBwZXJJbmZvcm1hdGlvbihcbiAgICAgICAgdGhpc1tcInN0b3JlUmVhZGVyXCJdW1wiZXhlY3V0ZVN1YlNlbGVjdGVkQXJyYXlcIl1cbiAgICAgICksXG4gICAgICBtYXliZUJyb2FkY2FzdFdhdGNoOiBnZXRXcmFwcGVySW5mb3JtYXRpb24odGhpc1tcIm1heWJlQnJvYWRjYXN0V2F0Y2hcIl0pLFxuICAgIH0sXG4gICAgZnJhZ21lbnRSZWdpc3RyeToge1xuICAgICAgZmluZEZyYWdtZW50U3ByZWFkczogZ2V0V3JhcHBlckluZm9ybWF0aW9uKFxuICAgICAgICBmcmFnbWVudHM/LmZpbmRGcmFnbWVudFNwcmVhZHNcbiAgICAgICksXG4gICAgICBsb29rdXA6IGdldFdyYXBwZXJJbmZvcm1hdGlvbihmcmFnbWVudHM/Lmxvb2t1cCksXG4gICAgICB0cmFuc2Zvcm06IGdldFdyYXBwZXJJbmZvcm1hdGlvbihmcmFnbWVudHM/LnRyYW5zZm9ybSksXG4gICAgfSxcbiAgfTtcbn1cblxuZnVuY3Rpb24gaXNXcmFwcGVyKGY/OiBGdW5jdGlvbik6IGYgaXMgT3B0aW1pc3RpY1dyYXBwZXJGdW5jdGlvbjxhbnksIGFueT4ge1xuICByZXR1cm4gISFmICYmIFwiZGlydHlLZXlcIiBpbiBmO1xufVxuXG5mdW5jdGlvbiBnZXRXcmFwcGVySW5mb3JtYXRpb24oZj86IEZ1bmN0aW9uKSB7XG4gIHJldHVybiBpc1dyYXBwZXIoZikgPyBmLnNpemUgOiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGlzRGVmaW5lZDxUPih2YWx1ZTogVCB8IHVuZGVmaW5lZCB8IG51bGwpOiB2YWx1ZSBpcyBUIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGw7XG59XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybUluZm8odHJhbnNmb3JtPzogRG9jdW1lbnRUcmFuc2Zvcm0pIHtcbiAgcmV0dXJuIHJlY3Vyc2VUcmFuc2Zvcm1JbmZvKHRyYW5zZm9ybSkubWFwKChjYWNoZSkgPT4gKHsgY2FjaGUgfSkpO1xufVxuXG5mdW5jdGlvbiByZWN1cnNlVHJhbnNmb3JtSW5mbyh0cmFuc2Zvcm0/OiBEb2N1bWVudFRyYW5zZm9ybSk6IG51bWJlcltdIHtcbiAgcmV0dXJuIHRyYW5zZm9ybSA/XG4gICAgICBbXG4gICAgICAgIGdldFdyYXBwZXJJbmZvcm1hdGlvbih0cmFuc2Zvcm0/LltcInBlcmZvcm1Xb3JrXCJdKSxcbiAgICAgICAgLi4ucmVjdXJzZVRyYW5zZm9ybUluZm8odHJhbnNmb3JtPy5bXCJsZWZ0XCJdKSxcbiAgICAgICAgLi4ucmVjdXJzZVRyYW5zZm9ybUluZm8odHJhbnNmb3JtPy5bXCJyaWdodFwiXSksXG4gICAgICBdLmZpbHRlcihpc0RlZmluZWQpXG4gICAgOiBbXTtcbn1cblxuZnVuY3Rpb24gbGlua0luZm8obGluaz86IEFwb2xsb0xpbmspOiB1bmtub3duW10ge1xuICByZXR1cm4gbGluayA/XG4gICAgICBbXG4gICAgICAgIGxpbms/LmdldE1lbW9yeUludGVybmFscz8uKCksXG4gICAgICAgIC4uLmxpbmtJbmZvKGxpbms/LmxlZnQpLFxuICAgICAgICAuLi5saW5rSW5mbyhsaW5rPy5yaWdodCksXG4gICAgICBdLmZpbHRlcihpc0RlZmluZWQpXG4gICAgOiBbXTtcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getMemoryInternals.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getOperationDefinition.js":
/*!**********************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getOperationDefinition.js ***!
  \**********************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getOperationDefinition: () => (/* binding */ getOperationDefinition)\n/* harmony export */ });\n/* harmony import */ var _checkDocument_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./checkDocument.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/checkDocument.js\");\n\n/**\n* @internal\n* \n* @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n*/ function getOperationDefinition(doc) {\n    (0,_checkDocument_js__WEBPACK_IMPORTED_MODULE_0__.checkDocument)(doc);\n    return doc.definitions.filter((definition)=>definition.kind === \"OperationDefinition\")[0];\n} //# sourceMappingURL=getOperationDefinition.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvaW50ZXJuYWwvZ2V0T3BlcmF0aW9uRGVmaW5pdGlvbi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUVrRDs7Ozs7R0FHbEQsU0FBZ0IsQ0FBaEIscUJBQXNDLENBQ3BDLENBREYsRUFDbUIsRUFEbkI7SUFHRSxnRUFBYSxDQUFDLENBQWhCLEVBQW1CLENBQUM7SUFDbEIsQ0FBRixNQUFTLENBQVQsRUFBWSxDQUFDLENBQWIsVUFBd0IsQ0FBQyxDQUF6QixLQUErQixDQUMzQixDQUFDLENBREwsU0FDZSxFQUF5QyxDQUR4RCxVQUVnQixDQUFDLENBRmpCLFFBRTBCLENBRjFCLG9CQUUrQyxDQUM1QyxDQUFDLENBQUMsQ0FBQztBQUNOIiwic291cmNlcyI6WyIvaG9tZS91L1Byb2plY3RzL3NyYy91dGlsaXRpZXMvaW50ZXJuYWwvZ2V0T3BlcmF0aW9uRGVmaW5pdGlvbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IERvY3VtZW50Tm9kZSwgT3BlcmF0aW9uRGVmaW5pdGlvbk5vZGUgfSBmcm9tIFwiZ3JhcGhxbFwiO1xuXG5pbXBvcnQgeyBjaGVja0RvY3VtZW50IH0gZnJvbSBcIi4vY2hlY2tEb2N1bWVudC5qc1wiO1xuXG4vKiogQGludGVybmFsICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0T3BlcmF0aW9uRGVmaW5pdGlvbihcbiAgZG9jOiBEb2N1bWVudE5vZGVcbik6IE9wZXJhdGlvbkRlZmluaXRpb25Ob2RlIHwgdW5kZWZpbmVkIHtcbiAgY2hlY2tEb2N1bWVudChkb2MpO1xuICByZXR1cm4gZG9jLmRlZmluaXRpb25zLmZpbHRlcihcbiAgICAoZGVmaW5pdGlvbik6IGRlZmluaXRpb24gaXMgT3BlcmF0aW9uRGVmaW5pdGlvbk5vZGUgPT5cbiAgICAgIGRlZmluaXRpb24ua2luZCA9PT0gXCJPcGVyYXRpb25EZWZpbml0aW9uXCJcbiAgKVswXTtcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getOperationDefinition.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getOperationName.js":
/*!****************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getOperationName.js ***!
  \****************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getOperationName: () => (/* binding */ getOperationName)\n/* harmony export */ });\n/**\n* @internal\n* \n* @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n*/ function getOperationName(doc, fallback) {\n    var _doc_definitions_find;\n    var _doc_definitions_find_name_value;\n    return (_doc_definitions_find_name_value = (_doc_definitions_find = doc.definitions.find((definition)=>definition.kind === \"OperationDefinition\" && !!definition.name)) === null || _doc_definitions_find === void 0 ? void 0 : _doc_definitions_find.name.value) !== null && _doc_definitions_find_name_value !== void 0 ? _doc_definitions_find_name_value : fallback;\n} //# sourceMappingURL=getOperationName.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvaW50ZXJuYWwvZ2V0T3BlcmF0aW9uTmFtZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztHQU9BLFNBQWdCLENBQWhCLGVBQWdDLENBRTlCLENBRkYsRUFFbUIsRUFBRSxDQUZyQixPQUV5QyxFQUZ6Qzs7O0lBR0UsQ0FBRixNQUFTLGlFQUNELENBRFIsVUFDbUIsQ0FBQyxDQURwQixHQUN3QixDQUNsQixDQUFDLENBRlAsU0FFaUIsRUFBNkMsQ0FGOUQsVUFHa0IsQ0FBQyxDQUhuQixRQUc0QixDQUg1Qix3QkFHcUQsQ0FBQyxDQUFDLENBSHZELFNBR2lFLENBQUMsQ0FIbEUsR0FHc0UsQ0FDakUsQ0FKTCwrRUFJTyxDQUpQLEdBSVcsQ0FBQyxDQUpaLGdFQUNJLENBREosRUFDTyxnQ0FHZSxDQUp0QixPQUk0QyxDQUN6QztBQUNIIiwic291cmNlcyI6WyIvaG9tZS91L1Byb2plY3RzL3NyYy91dGlsaXRpZXMvaW50ZXJuYWwvZ2V0T3BlcmF0aW9uTmFtZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IERvY3VtZW50Tm9kZSwgT3BlcmF0aW9uRGVmaW5pdGlvbk5vZGUgfSBmcm9tIFwiZ3JhcGhxbFwiO1xuXG50eXBlIE9wZXJhdGlvbkRlZmluaXRpb25XaXRoTmFtZSA9IE9wZXJhdGlvbkRlZmluaXRpb25Ob2RlICYge1xuICBuYW1lOiBOb25OdWxsYWJsZTxPcGVyYXRpb25EZWZpbml0aW9uTm9kZVtcIm5hbWVcIl0+O1xufTtcblxuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldE9wZXJhdGlvbk5hbWU8XG4gIFRGYWxsYmFjayBleHRlbmRzIHN0cmluZyB8IG51bGwgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQsXG4+KGRvYzogRG9jdW1lbnROb2RlLCBmYWxsYmFjaz86IFRGYWxsYmFjayk6IHN0cmluZyB8IFRGYWxsYmFjayB7XG4gIHJldHVybiAoXG4gICAgZG9jLmRlZmluaXRpb25zLmZpbmQoXG4gICAgICAoZGVmaW5pdGlvbik6IGRlZmluaXRpb24gaXMgT3BlcmF0aW9uRGVmaW5pdGlvbldpdGhOYW1lID0+XG4gICAgICAgIGRlZmluaXRpb24ua2luZCA9PT0gXCJPcGVyYXRpb25EZWZpbml0aW9uXCIgJiYgISFkZWZpbml0aW9uLm5hbWVcbiAgICApPy5uYW1lLnZhbHVlID8/IChmYWxsYmFjayBhcyBURmFsbGJhY2spXG4gICk7XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getOperationName.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getQueryDefinition.js":
/*!******************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getQueryDefinition.js ***!
  \******************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getQueryDefinition: () => (/* binding */ getQueryDefinition)\n/* harmony export */ });\n/* harmony import */ var _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @apollo/client/utilities/invariant */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/invariant/index.development.js\");\n/* harmony import */ var _getOperationDefinition_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getOperationDefinition.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getOperationDefinition.js\");\n\n\n/**\n* @internal\n* \n* @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n*/ function getQueryDefinition(doc) {\n    const queryDef = (0,_getOperationDefinition_js__WEBPACK_IMPORTED_MODULE_0__.getOperationDefinition)(doc);\n    (0,_apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(queryDef && queryDef.operation === \"query\", 13);\n    return queryDef;\n} //# sourceMappingURL=getQueryDefinition.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvaW50ZXJuYWwvZ2V0UXVlcnlEZWZpbml0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUU4RDtBQUVNOzs7OztHQUdwRSxTQUFnQixDQUFoQixpQkFBa0MsQ0FBQyxDQUFuQyxFQUFvRCxFQUFwRDtJQUNFLENBQUYsS0FBUSxDQUFSLFVBQW1CLGtGQUFzQixDQUFDLENBQTFDLEVBQTZDLENBQUU7SUFFN0MsNkVBQUYsQ0FDSSxDQURKLFdBQ2dCLENBRGhCLE9BQ3dCLENBQUMsQ0FEekIsYUFDdUMsQ0FEdkMsV0FHRztJQUVELENBQUYsTUFBUyxDQUFULE9BQWlCO0FBQ2pCIiwic291cmNlcyI6WyIvaG9tZS91L1Byb2plY3RzL3NyYy91dGlsaXRpZXMvaW50ZXJuYWwvZ2V0UXVlcnlEZWZpbml0aW9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgRG9jdW1lbnROb2RlLCBPcGVyYXRpb25EZWZpbml0aW9uTm9kZSB9IGZyb20gXCJncmFwaHFsXCI7XG5cbmltcG9ydCB7IGludmFyaWFudCB9IGZyb20gXCJAYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvaW52YXJpYW50XCI7XG5cbmltcG9ydCB7IGdldE9wZXJhdGlvbkRlZmluaXRpb24gfSBmcm9tIFwiLi9nZXRPcGVyYXRpb25EZWZpbml0aW9uLmpzXCI7XG5cbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRRdWVyeURlZmluaXRpb24oZG9jOiBEb2N1bWVudE5vZGUpOiBPcGVyYXRpb25EZWZpbml0aW9uTm9kZSB7XG4gIGNvbnN0IHF1ZXJ5RGVmID0gZ2V0T3BlcmF0aW9uRGVmaW5pdGlvbihkb2MpITtcblxuICBpbnZhcmlhbnQoXG4gICAgcXVlcnlEZWYgJiYgcXVlcnlEZWYub3BlcmF0aW9uID09PSBcInF1ZXJ5XCIsXG4gICAgXCJNdXN0IGNvbnRhaW4gYSBxdWVyeSBkZWZpbml0aW9uLlwiXG4gICk7XG5cbiAgcmV0dXJuIHF1ZXJ5RGVmO1xufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getQueryDefinition.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getStoreKeyName.js":
/*!***************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getStoreKeyName.js ***!
  \***************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getStoreKeyName: () => (/* binding */ getStoreKeyName)\n/* harmony export */ });\n/* harmony import */ var _canonicalStringify_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./canonicalStringify.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/canonicalStringify.js\");\n\nconst KNOWN_DIRECTIVES = [\n    \"connection\",\n    \"include\",\n    \"skip\",\n    \"client\",\n    \"rest\",\n    \"export\",\n    \"nonreactive\"\n];\n// Default stable JSON.stringify implementation used by getStoreKeyName. Can be\n// updated/replaced with something better by calling\n// getStoreKeyName.setStringify(newStringifyFunction).\nlet storeKeyNameStringify = _canonicalStringify_js__WEBPACK_IMPORTED_MODULE_0__.canonicalStringify;\n/**\n* @internal\n* \n* @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n*/ const getStoreKeyName = Object.assign(function(fieldName, args, directives) {\n    if (args && directives && directives[\"connection\"] && directives[\"connection\"][\"key\"]) {\n        if (directives[\"connection\"][\"filter\"] && directives[\"connection\"][\"filter\"].length > 0) {\n            const filterKeys = directives[\"connection\"][\"filter\"] ? directives[\"connection\"][\"filter\"] : [];\n            filterKeys.sort();\n            const filteredArgs = {};\n            filterKeys.forEach((key)=>{\n                filteredArgs[key] = args[key];\n            });\n            const stringifiedArgs = storeKeyNameStringify(filteredArgs);\n            if (stringifiedArgs !== \"{}\") {\n                return \"\".concat(directives[\"connection\"][\"key\"], \"(\").concat(stringifiedArgs, \")\");\n            }\n        }\n        return directives[\"connection\"][\"key\"];\n    }\n    let completeFieldName = fieldName;\n    if (args) {\n        // We can't use `JSON.stringify` here since it's non-deterministic,\n        // and can lead to different store key names being created even though\n        // the `args` object used during creation has the same properties/values.\n        const stringifiedArgs = storeKeyNameStringify(args);\n        if (stringifiedArgs !== \"{}\") {\n            completeFieldName += \"(\".concat(stringifiedArgs, \")\");\n        }\n    }\n    if (directives) {\n        Object.keys(directives).forEach((key)=>{\n            if (KNOWN_DIRECTIVES.indexOf(key) !== -1) return;\n            if (directives[key] && Object.keys(directives[key]).length) {\n                completeFieldName += \"@\".concat(key, \"(\").concat(storeKeyNameStringify(directives[key]), \")\");\n            } else {\n                completeFieldName += \"@\".concat(key);\n            }\n        });\n    }\n    return completeFieldName;\n}, {\n    setStringify (s) {\n        const previous = storeKeyNameStringify;\n        storeKeyNameStringify = s;\n        return previous;\n    }\n}); //# sourceMappingURL=getStoreKeyName.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvaW50ZXJuYWwvZ2V0U3RvcmVLZXlOYW1lLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTREO0FBUTVELE1BQU0sQ0FBTixrQkFBbUM7SUFDakMsQ0FBRixXQUFjO0lBQ1osQ0FBRixRQUFXO0lBQ1QsQ0FBRixLQUFRO0lBQ04sQ0FBRixPQUFVO0lBQ1IsQ0FBRixLQUFRO0lBQ04sQ0FBRixPQUFVO0lBQ1IsQ0FBRixZQUFlO0NBQ2Q7QUFFRDtBQUNBO0FBQ0E7QUFDQSxJQUFJLENBQUosdUJBQW9ELHNFQUFrQjs7Ozs7R0FHL0QsQ0FBUCxLQUFhLENBQWIsaUJBQStCLENBQS9CLEtBQXFDLENBQUMsQ0FBdEMsS0FBNEMsQ0FDMUMsQ0FERixpQkFFcUIsRUFDakIsQ0FISixHQUdxQyxFQUNqQyxDQUpKLFNBSTJCLEVBSjNCO0lBTUksQ0FBSixHQUNNLENBRE4sT0FFTSxDQUFOLGFBQ00sQ0FBTixTQUFnQixDQUFDLENBQWpCLFdBQTZCLEVBQTdCLEdBQ00sQ0FBTixTQUFnQixDQUFDLENBQWpCLFdBQTZCLENBQUMsQ0FBQyxDQUEvQixJQUFvQyxDQUFDLEVBQy9CO1FBQ0EsQ0FBTixHQUNRLENBRFIsU0FDa0IsQ0FBQyxDQURuQixXQUMrQixDQUFDLENBQUMsQ0FEakMsT0FDeUMsRUFEekMsR0FFUyxDQUFULFNBQW1CLENBQUMsQ0FBcEIsV0FBZ0MsQ0FBQyxDQUFDLENBQWxDLE9BQTBDLENBQWMsQ0FBQyxDQUF6RCxRQUFrRSxDQUFDLEVBQzNEO1lBQ0EsQ0FBUixLQUFjLENBQWQsWUFDVSxDQURWLFNBQ29CLENBQUMsQ0FEckIsV0FDaUMsQ0FBQyxDQUFDLENBRG5DLE9BQzJDLEVBQUUsRUFDaEMsQ0FBYixTQUF1QixDQUFDLENBQXhCLFdBQW9DLENBQUMsQ0FBQyxDQUF0QyxPQUE4QyxJQUNsQyxDQUFaLENBQWM7WUFDTixDQUFSLFNBQWtCLENBQUMsQ0FBbkIsR0FBdUIsQ0FBdkIsQ0FBeUI7WUFFakIsQ0FBUixLQUFjLENBQWQsY0FBNkIsQ0FBN0IsQ0FBeUQ7WUFDakQsQ0FBUixTQUFrQixDQUFDLENBQW5CLE1BQTBCLENBQUMsQ0FBQyxDQUE1QixFQUErQixFQUFFLENBQWpDO2dCQUNVLENBQVYsV0FBc0IsQ0FBQyxDQUF2QixFQUEwQixFQUExQixFQUE4QixDQUE5QixHQUFrQyxDQUFDLENBQW5DLEVBQXNDLENBQUM7WUFDL0IsQ0FBQyxDQUFDO1lBRUYsQ0FBUixLQUFjLENBQWQsaUJBQXdDLENBQXhDLG9CQUE2RCxDQUFDLENBQTlELFdBQTBFLENBQUM7WUFDbkUsQ0FBUixHQUFZLENBQVosbUJBQWdDLENBQWhDLEdBQW9DLEVBQUU7Z0JBQzVCLENBQVYsTUFBaUIsQ0FBakIsU0FBb0IsQ0FBcEIsU0FBOEIsQ0FBQyxDQUEvQixXQUEyQyxDQUFDLENBQUMsQ0FBN0MsSUFBa0QsQ0FBQyxFQUFuRCxZQUF1RCxDQUF2RCxjQUFzRSxFQUF0RSxFQUF5RTtZQUNqRTtRQUNGO1FBQ0EsQ0FBTixNQUFhLENBQWIsU0FBdUIsQ0FBQyxDQUF4QixXQUFvQyxDQUFDLENBQUMsQ0FBdEMsSUFBMkMsQ0FBQztJQUN4QztJQUVBLENBQUosR0FBUSxDQUFSLG1CQUFvQyxDQUFwQyxRQUE2QztJQUV6QyxDQUFKLEdBQVEsQ0FBUixHQUFZLEVBQUU7UUFDUixDQUFOO1FBQ00sQ0FBTjtRQUNNLENBQU47UUFDTSxDQUFOLEtBQVksQ0FBWixpQkFBc0MsQ0FBdEMsb0JBQTJELENBQUMsQ0FBNUQsR0FBZ0UsQ0FBQztRQUMzRCxDQUFOLEdBQVUsQ0FBVixtQkFBOEIsQ0FBOUIsR0FBa0MsRUFBRTtZQUM1QixDQUFSLG9CQUE2QixDQUE3QixLQUFtRCxLQUFsQixDQUFqQyxjQUFnRDtRQUMxQztJQUNGO0lBRUEsQ0FBSixHQUFRLENBQVIsU0FBa0IsRUFBRTtRQUNkLENBQU4sS0FBWSxDQUFDLENBQWIsR0FBaUIsQ0FBQyxDQUFsQixTQUE0QixDQUFDLENBQUMsQ0FBOUIsTUFBcUMsQ0FBQyxDQUFDLENBQXZDLEVBQTBDLEVBQUUsQ0FBNUM7WUFDUSxDQUFSLEdBQVksQ0FBWixlQUE0QixDQUFDLENBQTdCLE1BQW9DLENBQUMsQ0FBckMsRUFBd0MsRUFBeEMsSUFBOEMsQ0FBQyxDQUFDLEVBQUUsQ0FBbEQ7WUFDUSxDQUFSLEdBQVksQ0FBWixTQUFzQixDQUFDLENBQXZCLEVBQTBCLEVBQTFCLEdBQStCLENBQS9CLEtBQXFDLENBQUMsQ0FBdEMsR0FBMEMsQ0FBQyxDQUEzQyxTQUFxRCxDQUFDLENBQXRELEVBQXlELENBQUMsQ0FBQyxDQUFDLENBQTVELEtBQWtFLEVBQUU7Z0JBQzFELENBQVYsb0JBQStCLENBQS9CLFVBQW1DLENBQW5DLEVBQXNDLEVBQXRDLE9BRWMsS0FGNEIsQ0FBMUMsb0JBQStELENBQ25ELENBRFosU0FDc0IsQ0FBQyxDQUR2QixFQUMwQixDQUFDLENBQ2hCO1lBQ0gsT0FBTztnQkFDTCxDQUFWLG9CQUErQixDQUEvQixJQUF3QyxNQUFMLENBQW5DLEVBQXNDO1lBQzlCO1FBQ0YsQ0FBQyxDQUFDO0lBQ0o7SUFFQSxDQUFKLE1BQVcsQ0FBWCxnQkFBNEI7QUFDMUIsQ0FBQyxFQUNEO0lBQ0UsQ0FBSixXQUFnQixFQUFDLENBQStCLEVBQWhEO1FBQ00sQ0FBTixLQUFZLENBQVosVUFBdUIsQ0FBdkIsb0JBQTRDO1FBQ3RDLENBQU4sdUJBQThCLENBQUM7UUFDekIsQ0FBTixNQUFhLENBQWIsT0FBcUI7SUFDakIsQ0FBQztBQUNMLENBQUcsQ0FDRiIsInNvdXJjZXMiOlsiL2hvbWUvdS9Qcm9qZWN0cy9zcmMvdXRpbGl0aWVzL2ludGVybmFsL2dldFN0b3JlS2V5TmFtZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjYW5vbmljYWxTdHJpbmdpZnkgfSBmcm9tIFwiLi9jYW5vbmljYWxTdHJpbmdpZnkuanNcIjtcblxudHlwZSBEaXJlY3RpdmVzID0ge1xuICBbZGlyZWN0aXZlTmFtZTogc3RyaW5nXToge1xuICAgIFthcmdOYW1lOiBzdHJpbmddOiBhbnk7XG4gIH07XG59O1xuXG5jb25zdCBLTk9XTl9ESVJFQ1RJVkVTOiBzdHJpbmdbXSA9IFtcbiAgXCJjb25uZWN0aW9uXCIsXG4gIFwiaW5jbHVkZVwiLFxuICBcInNraXBcIixcbiAgXCJjbGllbnRcIixcbiAgXCJyZXN0XCIsXG4gIFwiZXhwb3J0XCIsXG4gIFwibm9ucmVhY3RpdmVcIixcbl07XG5cbi8vIERlZmF1bHQgc3RhYmxlIEpTT04uc3RyaW5naWZ5IGltcGxlbWVudGF0aW9uIHVzZWQgYnkgZ2V0U3RvcmVLZXlOYW1lLiBDYW4gYmVcbi8vIHVwZGF0ZWQvcmVwbGFjZWQgd2l0aCBzb21ldGhpbmcgYmV0dGVyIGJ5IGNhbGxpbmdcbi8vIGdldFN0b3JlS2V5TmFtZS5zZXRTdHJpbmdpZnkobmV3U3RyaW5naWZ5RnVuY3Rpb24pLlxubGV0IHN0b3JlS2V5TmFtZVN0cmluZ2lmeTogKHZhbHVlOiBhbnkpID0+IHN0cmluZyA9IGNhbm9uaWNhbFN0cmluZ2lmeTtcblxuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IGdldFN0b3JlS2V5TmFtZSA9IE9iamVjdC5hc3NpZ24oXG4gIGZ1bmN0aW9uIChcbiAgICBmaWVsZE5hbWU6IHN0cmluZyxcbiAgICBhcmdzPzogUmVjb3JkPHN0cmluZywgYW55PiB8IG51bGwsXG4gICAgZGlyZWN0aXZlcz86IERpcmVjdGl2ZXNcbiAgKTogc3RyaW5nIHtcbiAgICBpZiAoXG4gICAgICBhcmdzICYmXG4gICAgICBkaXJlY3RpdmVzICYmXG4gICAgICBkaXJlY3RpdmVzW1wiY29ubmVjdGlvblwiXSAmJlxuICAgICAgZGlyZWN0aXZlc1tcImNvbm5lY3Rpb25cIl1bXCJrZXlcIl1cbiAgICApIHtcbiAgICAgIGlmIChcbiAgICAgICAgZGlyZWN0aXZlc1tcImNvbm5lY3Rpb25cIl1bXCJmaWx0ZXJcIl0gJiZcbiAgICAgICAgKGRpcmVjdGl2ZXNbXCJjb25uZWN0aW9uXCJdW1wiZmlsdGVyXCJdIGFzIHN0cmluZ1tdKS5sZW5ndGggPiAwXG4gICAgICApIHtcbiAgICAgICAgY29uc3QgZmlsdGVyS2V5cyA9XG4gICAgICAgICAgZGlyZWN0aXZlc1tcImNvbm5lY3Rpb25cIl1bXCJmaWx0ZXJcIl0gP1xuICAgICAgICAgICAgKGRpcmVjdGl2ZXNbXCJjb25uZWN0aW9uXCJdW1wiZmlsdGVyXCJdIGFzIHN0cmluZ1tdKVxuICAgICAgICAgIDogW107XG4gICAgICAgIGZpbHRlcktleXMuc29ydCgpO1xuXG4gICAgICAgIGNvbnN0IGZpbHRlcmVkQXJncyA9IHt9IGFzIHsgW2tleTogc3RyaW5nXTogYW55IH07XG4gICAgICAgIGZpbHRlcktleXMuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgICAgZmlsdGVyZWRBcmdzW2tleV0gPSBhcmdzW2tleV07XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IHN0cmluZ2lmaWVkQXJnczogc3RyaW5nID0gc3RvcmVLZXlOYW1lU3RyaW5naWZ5KGZpbHRlcmVkQXJncyk7XG4gICAgICAgIGlmIChzdHJpbmdpZmllZEFyZ3MgIT09IFwie31cIikge1xuICAgICAgICAgIHJldHVybiBgJHtkaXJlY3RpdmVzW1wiY29ubmVjdGlvblwiXVtcImtleVwiXX0oJHtzdHJpbmdpZmllZEFyZ3N9KWA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBkaXJlY3RpdmVzW1wiY29ubmVjdGlvblwiXVtcImtleVwiXTtcbiAgICB9XG5cbiAgICBsZXQgY29tcGxldGVGaWVsZE5hbWU6IHN0cmluZyA9IGZpZWxkTmFtZTtcblxuICAgIGlmIChhcmdzKSB7XG4gICAgICAvLyBXZSBjYW4ndCB1c2UgYEpTT04uc3RyaW5naWZ5YCBoZXJlIHNpbmNlIGl0J3Mgbm9uLWRldGVybWluaXN0aWMsXG4gICAgICAvLyBhbmQgY2FuIGxlYWQgdG8gZGlmZmVyZW50IHN0b3JlIGtleSBuYW1lcyBiZWluZyBjcmVhdGVkIGV2ZW4gdGhvdWdoXG4gICAgICAvLyB0aGUgYGFyZ3NgIG9iamVjdCB1c2VkIGR1cmluZyBjcmVhdGlvbiBoYXMgdGhlIHNhbWUgcHJvcGVydGllcy92YWx1ZXMuXG4gICAgICBjb25zdCBzdHJpbmdpZmllZEFyZ3M6IHN0cmluZyA9IHN0b3JlS2V5TmFtZVN0cmluZ2lmeShhcmdzKTtcbiAgICAgIGlmIChzdHJpbmdpZmllZEFyZ3MgIT09IFwie31cIikge1xuICAgICAgICBjb21wbGV0ZUZpZWxkTmFtZSArPSBgKCR7c3RyaW5naWZpZWRBcmdzfSlgO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChkaXJlY3RpdmVzKSB7XG4gICAgICBPYmplY3Qua2V5cyhkaXJlY3RpdmVzKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgaWYgKEtOT1dOX0RJUkVDVElWRVMuaW5kZXhPZihrZXkpICE9PSAtMSkgcmV0dXJuO1xuICAgICAgICBpZiAoZGlyZWN0aXZlc1trZXldICYmIE9iamVjdC5rZXlzKGRpcmVjdGl2ZXNba2V5XSkubGVuZ3RoKSB7XG4gICAgICAgICAgY29tcGxldGVGaWVsZE5hbWUgKz0gYEAke2tleX0oJHtzdG9yZUtleU5hbWVTdHJpbmdpZnkoXG4gICAgICAgICAgICBkaXJlY3RpdmVzW2tleV1cbiAgICAgICAgICApfSlgO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbXBsZXRlRmllbGROYW1lICs9IGBAJHtrZXl9YDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbXBsZXRlRmllbGROYW1lO1xuICB9LFxuICB7XG4gICAgc2V0U3RyaW5naWZ5KHM6IHR5cGVvZiBzdG9yZUtleU5hbWVTdHJpbmdpZnkpIHtcbiAgICAgIGNvbnN0IHByZXZpb3VzID0gc3RvcmVLZXlOYW1lU3RyaW5naWZ5O1xuICAgICAgc3RvcmVLZXlOYW1lU3RyaW5naWZ5ID0gcztcbiAgICAgIHJldHVybiBwcmV2aW91cztcbiAgICB9LFxuICB9XG4pO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getStoreKeyName.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/globals/global.js":
/*!**************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/globals/global.js ***!
  \**************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _maybe_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./maybe.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/globals/maybe.js\");\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (// long as at least one of globalThis, window, self, or global is defined, so\n// we are under no obligation to make it easy for static analysis tools to\n(0,_maybe_js__WEBPACK_IMPORTED_MODULE_0__.maybe)(()=>globalThis) || (0,_maybe_js__WEBPACK_IMPORTED_MODULE_0__.maybe)(()=>window) || (0,_maybe_js__WEBPACK_IMPORTED_MODULE_0__.maybe)(()=>self) || (0,_maybe_js__WEBPACK_IMPORTED_MODULE_0__.maybe)(()=>global) || // detect syntactic usage of the Function constructor. If you think you can\n// improve your static analysis to detect this obfuscation, think again. This\n// is an arms race you cannot win, at least not in JavaScript.\n(0,_maybe_js__WEBPACK_IMPORTED_MODULE_0__.maybe)(function() {\n    return _maybe_js__WEBPACK_IMPORTED_MODULE_0__.maybe.constructor(\"return this\")();\n})); //# sourceMappingURL=global.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvaW50ZXJuYWwvZ2xvYmFscy9nbG9iYWwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBa0M7OztBQUVsQixnREFBSyxDQUFDLENBQXRCLEVBQXlCLENBQXpCLFVBQXNDLEVBQXRDLEdBQ0UsZ0RBQUssQ0FBQyxDQUFSLEVBQVcsQ0FBWCxNQUFvQixFQUFwQixHQUNFLGdEQUFLLENBQUMsQ0FBUixFQUFXLENBQUcsQ0FBZCxHQUFrQixFQUFsQixHQUNFLGdEQUFLLENBQUMsQ0FBUixFQUFXLENBQVgsTUFBb0IsS0FJbEIsQ0FBRjtBQUNFLENBQUY7QUFDRSxDQUFGO0FBQ0UsZ0RBQUssQ0FBQyxDQUFSO0lBQ0ksQ0FBSixNQUFXLDRDQUFLLENBQUMsQ0FBakIsVUFBNEIsQ0FBQyxDQUE3QixZQUEwQyxDQUFDLENBQTNDLENBQTZDO0FBQzNDLENBQUMsQ0FBQyxFQUFEIiwic291cmNlcyI6WyIvaG9tZS91L3NyYy91dGlsaXRpZXMvaW50ZXJuYWwvZ2xvYmFscy9nbG9iYWwudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbWF5YmUgfSBmcm9tIFwiLi9tYXliZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCAobWF5YmUoKCkgPT4gZ2xvYmFsVGhpcykgfHxcbiAgbWF5YmUoKCkgPT4gd2luZG93KSB8fFxuICBtYXliZSgoKSA9PiBzZWxmKSB8fFxuICBtYXliZSgoKSA9PiBnbG9iYWwpIHx8XG4gIC8vIFdlIGRvbid0IGV4cGVjdCB0aGUgRnVuY3Rpb24gY29uc3RydWN0b3IgZXZlciB0byBiZSBpbnZva2VkIGF0IHJ1bnRpbWUsIGFzXG4gIC8vIGxvbmcgYXMgYXQgbGVhc3Qgb25lIG9mIGdsb2JhbFRoaXMsIHdpbmRvdywgc2VsZiwgb3IgZ2xvYmFsIGlzIGRlZmluZWQsIHNvXG4gIC8vIHdlIGFyZSB1bmRlciBubyBvYmxpZ2F0aW9uIHRvIG1ha2UgaXQgZWFzeSBmb3Igc3RhdGljIGFuYWx5c2lzIHRvb2xzIHRvXG4gIC8vIGRldGVjdCBzeW50YWN0aWMgdXNhZ2Ugb2YgdGhlIEZ1bmN0aW9uIGNvbnN0cnVjdG9yLiBJZiB5b3UgdGhpbmsgeW91IGNhblxuICAvLyBpbXByb3ZlIHlvdXIgc3RhdGljIGFuYWx5c2lzIHRvIGRldGVjdCB0aGlzIG9iZnVzY2F0aW9uLCB0aGluayBhZ2Fpbi4gVGhpc1xuICAvLyBpcyBhbiBhcm1zIHJhY2UgeW91IGNhbm5vdCB3aW4sIGF0IGxlYXN0IG5vdCBpbiBKYXZhU2NyaXB0LlxuICBtYXliZShmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG1heWJlLmNvbnN0cnVjdG9yKFwicmV0dXJuIHRoaXNcIikoKTtcbiAgfSkpIGFzIHR5cGVvZiBnbG9iYWxUaGlzICYgV2luZG93O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/globals/global.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/globals/maybe.js":
/*!*************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/globals/maybe.js ***!
  \*************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   maybe: () => (/* binding */ maybe)\n/* harmony export */ });\nfunction maybe(thunk) {\n    try {\n        return thunk();\n    } catch (e) {}\n} //# sourceMappingURL=maybe.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvaW50ZXJuYWwvZ2xvYmFscy9tYXliZS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU0sU0FBVSxLQUFLLENBQUksS0FBYztJQUNyQyxJQUFJLENBQUM7UUFDSCxPQUFPLEtBQUssRUFBRSxDQUFDO0lBQ2pCLENBQUMsQ0FBQyxVQUFNLENBQUMsQ0FBQztBQUNaLENBQUMiLCJzb3VyY2VzIjpbIi9ob21lL3Uvc3JjL3V0aWxpdGllcy9pbnRlcm5hbC9nbG9iYWxzL21heWJlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBtYXliZTxUPih0aHVuazogKCkgPT4gVCk6IFQgfCB1bmRlZmluZWQge1xuICB0cnkge1xuICAgIHJldHVybiB0aHVuaygpO1xuICB9IGNhdGNoIHt9XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/globals/maybe.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/graphQLResultHasError.js":
/*!*********************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/graphQLResultHasError.js ***!
  \*********************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   graphQLResultHasError: () => (/* binding */ graphQLResultHasError)\n/* harmony export */ });\n/**\n* @internal\n* \n* @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n*/ function graphQLResultHasError(result) {\n    var _result_errors;\n    return !!((_result_errors = result.errors) === null || _result_errors === void 0 ? void 0 : _result_errors.length);\n} //# sourceMappingURL=graphQLResultHasError.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvaW50ZXJuYWwvZ3JhcGhRTFJlc3VsdEhhc0Vycm9yLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0dBR0EsU0FBZ0IsQ0FBaEIsb0JBQXFDLENBQ25DLENBREYsS0FDdUMsRUFEdkM7O0lBR0UsQ0FBRixNQUFTLENBQUMsMkJBQVEsQ0FBbEIsS0FBd0IsQ0FBeEIsa0RBQVcsQ0FBWCxLQUFpQixTQUFTLENBQTFCLEtBQWdDO0FBQ2hDIiwic291cmNlcyI6WyIvaG9tZS91L1Byb2plY3RzL3NyYy91dGlsaXRpZXMvaW50ZXJuYWwvZ3JhcGhRTFJlc3VsdEhhc0Vycm9yLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgRm9ybWF0dGVkRXhlY3V0aW9uUmVzdWx0IH0gZnJvbSBcImdyYXBocWxcIjtcblxuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdyYXBoUUxSZXN1bHRIYXNFcnJvcihcbiAgcmVzdWx0OiBGb3JtYXR0ZWRFeGVjdXRpb25SZXN1bHQ8YW55PlxuKTogYm9vbGVhbiB7XG4gIHJldHVybiAhIXJlc3VsdC5lcnJvcnM/Lmxlbmd0aDtcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/graphQLResultHasError.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/hasDirectives.js":
/*!*************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/hasDirectives.js ***!
  \*************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hasDirectives: () => (/* binding */ hasDirectives)\n/* harmony export */ });\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! graphql */ \"(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/visitor.mjs\");\n\n/**\n* @internal\n* \n* @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n*/ function hasDirectives(names, root, all) {\n    const nameSet = new Set(names);\n    const uniqueCount = nameSet.size;\n    (0,graphql__WEBPACK_IMPORTED_MODULE_0__.visit)(root, {\n        Directive (node) {\n            if (nameSet.delete(node.name.value) && (!all || !nameSet.size)) {\n                return graphql__WEBPACK_IMPORTED_MODULE_0__.BREAK;\n            }\n        }\n    });\n    // If we found all the names, nameSet will be empty. If we only care about\n    // finding some of them, the < condition is sufficient.\n    return all ? !nameSet.size : nameSet.size < uniqueCount;\n} //# sourceMappingURL=hasDirectives.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvaW50ZXJuYWwvaGFzRGlyZWN0aXZlcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUNzQzs7Ozs7R0FHdEMsU0FBZ0IsQ0FBaEIsWUFBNkIsQ0FBQyxDQUE5QixJQUE2QyxFQUFFLENBQS9DLEdBQTRELEVBQUUsQ0FBOUQsRUFBMkUsRUFBM0U7SUFDRSxDQUFGLEtBQVEsQ0FBUixTQUFrQixDQUFsQixHQUFzQixDQUF0QixFQUF5QixDQUFDLENBQTFCLElBQStCLENBQUM7SUFDOUIsQ0FBRixLQUFRLENBQVIsYUFBc0IsQ0FBdEIsTUFBNkIsQ0FBQyxDQUE5QixHQUFrQztJQUVoQyw4Q0FBSyxDQUFDLENBQVIsR0FBWSxFQUFFO1FBQ1YsQ0FBSixRQUFhLEVBQUMsQ0FBZCxHQUFrQixFQUFsQjtZQUNNLENBQU4sR0FBVSxDQUFWLE1BQWlCLENBQUMsQ0FBbEIsS0FBd0IsQ0FBQyxDQUF6QixHQUE2QixDQUFDLENBQTlCLEdBQWtDLENBQUMsQ0FBbkMsSUFBd0MsRUFBeEMsR0FBNkMsQ0FBQyxDQUFDLENBQS9DLE1BQXNELENBQUMsQ0FBdkQsTUFBOEQsQ0FBQyxDQUEvRCxJQUFvRSxFQUFFO2dCQUM5RCxDQUFSLE1BQWUsMENBQUs7WUFDZDtRQUNGLENBQUM7SUFDTCxDQUFHLENBQUM7SUFFRixDQUFGO0lBQ0UsQ0FBRjtJQUNFLENBQUYsTUFBUyxDQUFULEdBQWEsRUFBRSxDQUFDLENBQWhCLE1BQXVCLENBQUMsQ0FBeEIsSUFBNkIsRUFBRSxDQUEvQixNQUFzQyxDQUFDLENBQXZDLE1BQThDLENBQTlDLFVBQXlEO0FBQ3pEIiwic291cmNlcyI6WyIvaG9tZS91L1Byb2plY3RzL3NyYy91dGlsaXRpZXMvaW50ZXJuYWwvaGFzRGlyZWN0aXZlcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEFTVE5vZGUgfSBmcm9tIFwiZ3JhcGhxbFwiO1xuaW1wb3J0IHsgQlJFQUssIHZpc2l0IH0gZnJvbSBcImdyYXBocWxcIjtcblxuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhhc0RpcmVjdGl2ZXMobmFtZXM6IHN0cmluZ1tdLCByb290OiBBU1ROb2RlLCBhbGw/OiBib29sZWFuKSB7XG4gIGNvbnN0IG5hbWVTZXQgPSBuZXcgU2V0KG5hbWVzKTtcbiAgY29uc3QgdW5pcXVlQ291bnQgPSBuYW1lU2V0LnNpemU7XG5cbiAgdmlzaXQocm9vdCwge1xuICAgIERpcmVjdGl2ZShub2RlKSB7XG4gICAgICBpZiAobmFtZVNldC5kZWxldGUobm9kZS5uYW1lLnZhbHVlKSAmJiAoIWFsbCB8fCAhbmFtZVNldC5zaXplKSkge1xuICAgICAgICByZXR1cm4gQlJFQUs7XG4gICAgICB9XG4gICAgfSxcbiAgfSk7XG5cbiAgLy8gSWYgd2UgZm91bmQgYWxsIHRoZSBuYW1lcywgbmFtZVNldCB3aWxsIGJlIGVtcHR5LiBJZiB3ZSBvbmx5IGNhcmUgYWJvdXRcbiAgLy8gZmluZGluZyBzb21lIG9mIHRoZW0sIHRoZSA8IGNvbmRpdGlvbiBpcyBzdWZmaWNpZW50LlxuICByZXR1cm4gYWxsID8gIW5hbWVTZXQuc2l6ZSA6IG5hbWVTZXQuc2l6ZSA8IHVuaXF1ZUNvdW50O1xufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/hasDirectives.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/hasForcedResolvers.js":
/*!******************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/hasForcedResolvers.js ***!
  \******************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hasForcedResolvers: () => (/* binding */ hasForcedResolvers)\n/* harmony export */ });\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! graphql */ \"(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/visitor.mjs\");\n\nfunction hasForcedResolvers(document) {\n    let forceResolvers = false;\n    (0,graphql__WEBPACK_IMPORTED_MODULE_0__.visit)(document, {\n        Directive: {\n            enter (node) {\n                if (node.name.value === \"client\" && node.arguments) {\n                    forceResolvers = node.arguments.some((arg)=>arg.name.value === \"always\" && arg.value.kind === \"BooleanValue\" && arg.value.value === true);\n                    if (forceResolvers) {\n                        return graphql__WEBPACK_IMPORTED_MODULE_0__.BREAK;\n                    }\n                }\n            }\n        }\n    });\n    return forceResolvers;\n} //# sourceMappingURL=hasForcedResolvers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvaW50ZXJuYWwvaGFzRm9yY2VkUmVzb2x2ZXJzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQ3VDO0FBRWpDLFNBQVUsa0JBQWtCLENBQUMsUUFBaUI7SUFDbEQsSUFBSSxjQUFjLEdBQUcsS0FBSyxDQUFDO0lBQzNCLDhDQUFLLENBQUMsUUFBUSxFQUFFO1FBQ2QsU0FBUyxFQUFFO1lBQ1QsS0FBSyxFQUFDLElBQUk7Z0JBQ1IsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssS0FBSyxRQUFRLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO29CQUNuRCxjQUFjLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQ2xDLENBQUMsR0FBRyxFQUFFLENBQ0osQ0FETSxFQUNILENBQUMsSUFBSSxDQUFDLEtBQUssS0FBSyxRQUFRLElBQzNCLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLGNBQWMsSUFDakMsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLEtBQUssSUFBSSxDQUMzQixDQUFDO29CQUNGLElBQUksY0FBYyxFQUFFLENBQUM7d0JBQ25CLE9BQU8sMENBQUssQ0FBQztvQkFDZixDQUFDO2dCQUNILENBQUM7WUFDSCxDQUFDO1NBQ0Y7S0FDRixDQUFDLENBQUM7SUFDSCxPQUFPLGNBQWMsQ0FBQztBQUN4QixDQUFDIiwic291cmNlcyI6WyIvaG9tZS91L1Byb2plY3RzL3NyYy91dGlsaXRpZXMvaW50ZXJuYWwvaGFzRm9yY2VkUmVzb2x2ZXJzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgQVNUTm9kZSB9IGZyb20gXCJncmFwaHFsXCI7XG5pbXBvcnQgeyBCUkVBSywgdmlzaXQgfSBmcm9tIFwiZ3JhcGhxbFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gaGFzRm9yY2VkUmVzb2x2ZXJzKGRvY3VtZW50OiBBU1ROb2RlKSB7XG4gIGxldCBmb3JjZVJlc29sdmVycyA9IGZhbHNlO1xuICB2aXNpdChkb2N1bWVudCwge1xuICAgIERpcmVjdGl2ZToge1xuICAgICAgZW50ZXIobm9kZSkge1xuICAgICAgICBpZiAobm9kZS5uYW1lLnZhbHVlID09PSBcImNsaWVudFwiICYmIG5vZGUuYXJndW1lbnRzKSB7XG4gICAgICAgICAgZm9yY2VSZXNvbHZlcnMgPSBub2RlLmFyZ3VtZW50cy5zb21lKFxuICAgICAgICAgICAgKGFyZykgPT5cbiAgICAgICAgICAgICAgYXJnLm5hbWUudmFsdWUgPT09IFwiYWx3YXlzXCIgJiZcbiAgICAgICAgICAgICAgYXJnLnZhbHVlLmtpbmQgPT09IFwiQm9vbGVhblZhbHVlXCIgJiZcbiAgICAgICAgICAgICAgYXJnLnZhbHVlLnZhbHVlID09PSB0cnVlXG4gICAgICAgICAgKTtcbiAgICAgICAgICBpZiAoZm9yY2VSZXNvbHZlcnMpIHtcbiAgICAgICAgICAgIHJldHVybiBCUkVBSztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfSxcbiAgfSk7XG4gIHJldHVybiBmb3JjZVJlc29sdmVycztcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/hasForcedResolvers.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/isArray.js":
/*!*******************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/isArray.js ***!
  \*******************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isArray: () => (/* binding */ isArray)\n/* harmony export */ });\n/**\n* A version of Array.isArray that works better with readonly arrays.\n*\n* @internal\n* \n* @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n*/ const isArray = Array.isArray; //# sourceMappingURL=isArray.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvaW50ZXJuYWwvaXNBcnJheS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0dBS08sQ0FBUCxLQUFhLENBQWIsU0FBZ0UsQ0FBaEUsSUFBcUUsQ0FBQyxDQUF0RSxNQUE2RSIsInNvdXJjZXMiOlsiL2hvbWUvdS9Qcm9qZWN0cy9zcmMvdXRpbGl0aWVzL2ludGVybmFsL2lzQXJyYXkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBIHZlcnNpb24gb2YgQXJyYXkuaXNBcnJheSB0aGF0IHdvcmtzIGJldHRlciB3aXRoIHJlYWRvbmx5IGFycmF5cy5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IGlzQXJyYXk6IChhOiBhbnkpID0+IGEgaXMgYW55W10gfCByZWFkb25seSBhbnlbXSA9IEFycmF5LmlzQXJyYXk7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/isArray.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/isDocumentNode.js":
/*!**************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/isDocumentNode.js ***!
  \**************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isDocumentNode: () => (/* binding */ isDocumentNode)\n/* harmony export */ });\n/* harmony import */ var _isNonNullObject_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isNonNullObject.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/isNonNullObject.js\");\n\n/**\n* @internal\n* \n* @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n*/ function isDocumentNode(value) {\n    return (0,_isNonNullObject_js__WEBPACK_IMPORTED_MODULE_0__.isNonNullObject)(value) && value.kind === \"Document\" && Array.isArray(value.definitions);\n} //# sourceMappingURL=isDocumentNode.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvaW50ZXJuYWwvaXNEb2N1bWVudE5vZGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFFc0Q7Ozs7O0dBR3RELFNBQWdCLENBQWhCLGFBQThCLENBQUMsQ0FBL0IsSUFBNkMsRUFBN0M7SUFDRSxDQUFGLE1BQVMsb0VBQ1UsQ0FBQyxDQURwQixJQUN5QixFQUR6QixHQUVLLENBQUwsSUFBMkIsQ0FBQyxDQUE1QixRQUFxQyxDQUFyQyxhQUNJLENBQUosSUFBUyxDQUFDLENBQVYsTUFBaUIsQ0FBRSxDQUFuQixJQUF5QyxDQUFDLENBQTFDLFVBQXFELENBQUMsQ0FDbkQ7QUFDSCIsInNvdXJjZXMiOlsiL2hvbWUvdS9Qcm9qZWN0cy9zcmMvdXRpbGl0aWVzL2ludGVybmFsL2lzRG9jdW1lbnROb2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgRG9jdW1lbnROb2RlIH0gZnJvbSBcImdyYXBocWxcIjtcblxuaW1wb3J0IHsgaXNOb25OdWxsT2JqZWN0IH0gZnJvbSBcIi4vaXNOb25OdWxsT2JqZWN0LmpzXCI7XG5cbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0RvY3VtZW50Tm9kZSh2YWx1ZTogdW5rbm93bik6IHZhbHVlIGlzIERvY3VtZW50Tm9kZSB7XG4gIHJldHVybiAoXG4gICAgaXNOb25OdWxsT2JqZWN0KHZhbHVlKSAmJlxuICAgICh2YWx1ZSBhcyBEb2N1bWVudE5vZGUpLmtpbmQgPT09IFwiRG9jdW1lbnRcIiAmJlxuICAgIEFycmF5LmlzQXJyYXkoKHZhbHVlIGFzIERvY3VtZW50Tm9kZSkuZGVmaW5pdGlvbnMpXG4gICk7XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/isDocumentNode.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/isField.js":
/*!*******************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/isField.js ***!
  \*******************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isField: () => (/* binding */ isField)\n/* harmony export */ });\n/**\n* @internal\n* \n* @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n*/ function isField(selection) {\n    return selection.kind === \"Field\";\n} //# sourceMappingURL=isField.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvaW50ZXJuYWwvaXNGaWVsZC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztHQUdBLFNBQWdCLENBQWhCLE1BQXVCLENBQUMsQ0FBeEIsUUFBZ0QsRUFBaEQ7SUFDRSxDQUFGLE1BQVMsQ0FBVCxRQUFrQixDQUFDLENBQW5CLFFBQTRCLENBQTVCLE1BQW1DO0FBQ25DIiwic291cmNlcyI6WyIvaG9tZS91L1Byb2plY3RzL3NyYy91dGlsaXRpZXMvaW50ZXJuYWwvaXNGaWVsZC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEZpZWxkTm9kZSwgU2VsZWN0aW9uTm9kZSB9IGZyb20gXCJncmFwaHFsXCI7XG5cbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0ZpZWxkKHNlbGVjdGlvbjogU2VsZWN0aW9uTm9kZSk6IHNlbGVjdGlvbiBpcyBGaWVsZE5vZGUge1xuICByZXR1cm4gc2VsZWN0aW9uLmtpbmQgPT09IFwiRmllbGRcIjtcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/isField.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/isNonEmptyArray.js":
/*!***************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/isNonEmptyArray.js ***!
  \***************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isNonEmptyArray: () => (/* binding */ isNonEmptyArray)\n/* harmony export */ });\n/**\n* @internal\n* \n* @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n*/ function isNonEmptyArray(value) {\n    return Array.isArray(value) && value.length > 0;\n} //# sourceMappingURL=isNonEmptyArray.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvaW50ZXJuYWwvaXNOb25FbXB0eUFycmF5LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0dBQ0EsU0FBZ0IsQ0FBaEIsY0FBK0IsQ0FDN0IsQ0FERixJQUN3QyxFQUR4QztJQUdFLENBQUYsTUFBUyxDQUFULElBQWMsQ0FBQyxDQUFmLE1BQXNCLENBQUMsQ0FBdkIsSUFBNEIsRUFBNUIsR0FBaUMsQ0FBakMsSUFBc0MsQ0FBQyxDQUF2QyxRQUFnRCxDQUFDO0FBQ2pEIiwic291cmNlcyI6WyIvaG9tZS91L1Byb2plY3RzL3NyYy91dGlsaXRpZXMvaW50ZXJuYWwvaXNOb25FbXB0eUFycmF5LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBmdW5jdGlvbiBpc05vbkVtcHR5QXJyYXk8VD4oXG4gIHZhbHVlOiBBcnJheUxpa2U8VD4gfCBudWxsIHwgdW5kZWZpbmVkXG4pOiB2YWx1ZSBpcyBBcnJheTxUPiB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGggPiAwO1xufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/isNonEmptyArray.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/isNonNullObject.js":
/*!***************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/isNonNullObject.js ***!
  \***************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isNonNullObject: () => (/* binding */ isNonNullObject)\n/* harmony export */ });\n/**\n* @internal\n* \n* @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n*/ function isNonNullObject(obj) {\n    return obj !== null && typeof obj === \"object\";\n} //# sourceMappingURL=isNonNullObject.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvaW50ZXJuYWwvaXNOb25OdWxsT2JqZWN0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0dBQ0EsU0FBZ0IsQ0FBaEIsY0FBK0IsQ0FDN0IsQ0FERixFQUNjLEVBRGQ7SUFHRSxDQUFGLE1BQVMsQ0FBVCxPQUFpQixDQUFqQixPQUF5QixDQUF6QixNQUFnQyxDQUFoQyxPQUF3QyxDQUF4QyxPQUFnRDtBQUNoRCIsInNvdXJjZXMiOlsiL2hvbWUvdS9Qcm9qZWN0cy9zcmMvdXRpbGl0aWVzL2ludGVybmFsL2lzTm9uTnVsbE9iamVjdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQGludGVybmFsICovXG5leHBvcnQgZnVuY3Rpb24gaXNOb25OdWxsT2JqZWN0KFxuICBvYmo6IHVua25vd25cbik6IG9iaiBpcyBSZWNvcmQ8c3RyaW5nIHwgbnVtYmVyLCBhbnk+IHtcbiAgcmV0dXJuIG9iaiAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqID09PSBcIm9iamVjdFwiO1xufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/isNonNullObject.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/makeReference.js":
/*!*************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/makeReference.js ***!
  \*************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   makeReference: () => (/* binding */ makeReference)\n/* harmony export */ });\n/**\n* @internal\n* \n* @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n*/ function makeReference(id) {\n    return {\n        __ref: String(id)\n    };\n} //# sourceMappingURL=makeReference.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvaW50ZXJuYWwvbWFrZVJlZmVyZW5jZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztHQUdBLFNBQWdCLENBQWhCLFlBQTZCLENBQUMsQ0FBOUIsQ0FBd0MsRUFBeEM7SUFDRSxDQUFGLE1BQVM7UUFBRSxDQUFYLElBQWdCLEVBQUUsQ0FBbEIsS0FBd0IsQ0FBQyxDQUF6QixDQUEyQjtJQUEzQixDQUE4QjtBQUM5QiIsInNvdXJjZXMiOlsiL2hvbWUvdS9Qcm9qZWN0cy9zcmMvdXRpbGl0aWVzL2ludGVybmFsL21ha2VSZWZlcmVuY2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBSZWZlcmVuY2UgfSBmcm9tIFwiQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzXCI7XG5cbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBmdW5jdGlvbiBtYWtlUmVmZXJlbmNlKGlkOiBzdHJpbmcpOiBSZWZlcmVuY2Uge1xuICByZXR1cm4geyBfX3JlZjogU3RyaW5nKGlkKSB9O1xufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/makeReference.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/makeUniqueId.js":
/*!************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/makeUniqueId.js ***!
  \************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   makeUniqueId: () => (/* binding */ makeUniqueId)\n/* harmony export */ });\nconst prefixCounts = new Map();\n/**\n* These IDs won't be globally unique, but they will be unique within this\n* process, thanks to the counter, and unguessable thanks to the random suffix.\n*\n* @internal\n* \n* @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n*/ function makeUniqueId(prefix) {\n    const count = prefixCounts.get(prefix) || 1;\n    prefixCounts.set(prefix, count + 1);\n    return \"\".concat(prefix, \":\").concat(count, \":\").concat(Math.random().toString(36).slice(2));\n} //# sourceMappingURL=makeUniqueId.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvaW50ZXJuYWwvbWFrZVVuaXF1ZUlkLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNLENBQU4sY0FBcUIsQ0FBckIsR0FBeUIsQ0FBekIsRUFBNEIsQ0FBNUIsQ0FBOEM7Ozs7Ozs7O0dBUTlDLFNBQWdCLENBQWhCLFdBQTRCLENBQUMsQ0FBN0IsS0FBMkMsRUFBM0M7SUFDRSxDQUFGLEtBQVEsQ0FBUixPQUFnQixDQUFoQixXQUE0QixDQUFDLENBQTdCLEVBQWdDLENBQUMsQ0FBakMsS0FBdUMsRUFBdkMsR0FBNEMsQ0FBQztJQUMzQyxDQUFGLFdBQWMsQ0FBQyxDQUFmLEVBQWtCLENBQUMsQ0FBbkIsS0FBeUIsRUFBRSxDQUEzQixPQUFtQyxDQUFDLENBQUM7SUFDbkMsQ0FBRixNQUFTLENBQVQsU0FBWSxDQUFaLEtBQWtCLEVBQWxCLFlBQXNCLENBQXRCLElBQTJCLEVBQTNCLE1BQW9FLE1BQXJDLENBQS9CLEdBQW1DLENBQUMsQ0FBcEMsS0FBMEMsQ0FBMUMsQ0FBNEMsQ0FBQyxDQUE3QyxPQUFxRCxDQUFDLENBQXRELENBQXdELENBQUMsQ0FBQyxDQUExRCxJQUErRCxDQUFDLENBQUMsQ0FBQztBQUNsRSIsInNvdXJjZXMiOlsiL2hvbWUvdS9Qcm9qZWN0cy9zcmMvdXRpbGl0aWVzL2ludGVybmFsL21ha2VVbmlxdWVJZC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBwcmVmaXhDb3VudHMgPSBuZXcgTWFwPHN0cmluZywgbnVtYmVyPigpO1xuXG4vKipcbiAqIFRoZXNlIElEcyB3b24ndCBiZSBnbG9iYWxseSB1bmlxdWUsIGJ1dCB0aGV5IHdpbGwgYmUgdW5pcXVlIHdpdGhpbiB0aGlzXG4gKiBwcm9jZXNzLCB0aGFua3MgdG8gdGhlIGNvdW50ZXIsIGFuZCB1bmd1ZXNzYWJsZSB0aGFua3MgdG8gdGhlIHJhbmRvbSBzdWZmaXguXG4gKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYWtlVW5pcXVlSWQocHJlZml4OiBzdHJpbmcpIHtcbiAgY29uc3QgY291bnQgPSBwcmVmaXhDb3VudHMuZ2V0KHByZWZpeCkgfHwgMTtcbiAgcHJlZml4Q291bnRzLnNldChwcmVmaXgsIGNvdW50ICsgMSk7XG4gIHJldHVybiBgJHtwcmVmaXh9OiR7Y291bnR9OiR7TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMil9YDtcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/makeUniqueId.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/maybeDeepFreeze.js":
/*!***************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/maybeDeepFreeze.js ***!
  \***************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   maybeDeepFreeze: () => (/* binding */ maybeDeepFreeze)\n/* harmony export */ });\n/* harmony import */ var _apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @apollo/client/utilities/environment */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/environment/index.development.js\");\n/* harmony import */ var _deepFreeze_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./deepFreeze.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/deepFreeze.js\");\n\n\n/**\n* @internal\n* \n* @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n*/ function maybeDeepFreeze(obj) {\n    if (_apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_0__.__DEV__) {\n        (0,_deepFreeze_js__WEBPACK_IMPORTED_MODULE_1__.deepFreeze)(obj);\n    }\n    return obj;\n} //# sourceMappingURL=maybeDeepFreeze.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvaW50ZXJuYWwvbWF5YmVEZWVwRnJlZXplLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE4RDtBQUVsQjs7Ozs7R0FHNUMsU0FBZ0IsQ0FBaEIsY0FBK0IsQ0FBSSxDQUFuQyxFQUF5QyxFQUF6QztJQUNFLENBQUYsR0FBTSx5RUFBTyxFQUFFO1FBQ1gsMERBQVUsQ0FBQyxDQUFmLEVBQWtCLENBQUM7SUFDakI7SUFDQSxDQUFGLE1BQVMsQ0FBVCxFQUFZO0FBQ1oiLCJzb3VyY2VzIjpbIi9ob21lL3UvUHJvamVjdHMvc3JjL3V0aWxpdGllcy9pbnRlcm5hbC9tYXliZURlZXBGcmVlemUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX19ERVZfXyB9IGZyb20gXCJAYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvZW52aXJvbm1lbnRcIjtcblxuaW1wb3J0IHsgZGVlcEZyZWV6ZSB9IGZyb20gXCIuL2RlZXBGcmVlemUuanNcIjtcblxuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1heWJlRGVlcEZyZWV6ZTxUPihvYmo6IFQpOiBUIHtcbiAgaWYgKF9fREVWX18pIHtcbiAgICBkZWVwRnJlZXplKG9iaik7XG4gIH1cbiAgcmV0dXJuIG9iajtcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/maybeDeepFreeze.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/mergeDeepArray.js":
/*!**************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/mergeDeepArray.js ***!
  \**************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mergeDeepArray: () => (/* binding */ mergeDeepArray)\n/* harmony export */ });\n/* harmony import */ var _DeepMerger_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DeepMerger.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/DeepMerger.js\");\n\n// In almost any situation where you could succeed in getting the\n// TypeScript compiler to infer a tuple type for the sources array, you\n// could just use mergeDeep instead of mergeDeepArray, so instead of\n// trying to convert T[] to an intersection type we just infer the array\n// element type, which works perfectly when the sources array has a\n// consistent element type.\n/**\n* @internal\n* \n* @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n*/ function mergeDeepArray(sources) {\n    let target = sources[0] || {};\n    const count = sources.length;\n    if (count > 1) {\n        const merger = new _DeepMerger_js__WEBPACK_IMPORTED_MODULE_0__.DeepMerger();\n        for(let i = 1; i < count; ++i){\n            target = merger.merge(target, sources[i]);\n        }\n    }\n    return target;\n} //# sourceMappingURL=mergeDeepArray.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvaW50ZXJuYWwvbWVyZ2VEZWVwQXJyYXkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBNEM7QUFFNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztHQUVBLFNBQWdCLENBQWhCLGFBQThCLENBQUksQ0FBbEMsTUFBOEMsRUFBOUM7SUFDRSxDQUFGLEdBQU0sQ0FBTixRQUFlLENBQWYsTUFBc0IsQ0FBQyxDQUFDLEVBQXhCLEdBQThCLENBQTlCLENBQXNDO0lBQ3BDLENBQUYsS0FBUSxDQUFSLE9BQWdCLENBQWhCLE1BQXVCLENBQUMsQ0FBeEIsS0FBOEI7SUFDNUIsQ0FBRixHQUFNLENBQU4sT0FBYyxDQUFDLEVBQUU7UUFDYixDQUFKLEtBQVUsQ0FBVixRQUFtQixDQUFuQixHQUF1QixzREFBVSxDQUFqQyxDQUFtQztRQUMvQixDQUFKLE9BQWEsRUFBYixFQUFpQixDQUFDLEVBQUUsRUFBcEIsRUFBd0IsQ0FBeEIsSUFBNkIsRUFBRSxDQUEvQixDQUFpQyxDQUFDLENBQUU7WUFDOUIsQ0FBTixRQUFlLENBQWYsS0FBcUIsQ0FBQyxDQUF0QixJQUEyQixDQUFDLENBQTVCLEtBQWtDLEVBQUUsQ0FBcEMsTUFBMkMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMzQztJQUNGO0lBQ0EsQ0FBRixNQUFTLENBQVQsS0FBZTtBQUNmIiwic291cmNlcyI6WyIvaG9tZS91L1Byb2plY3RzL3NyYy91dGlsaXRpZXMvaW50ZXJuYWwvbWVyZ2VEZWVwQXJyYXkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGVlcE1lcmdlciB9IGZyb20gXCIuL0RlZXBNZXJnZXIuanNcIjtcblxuLy8gSW4gYWxtb3N0IGFueSBzaXR1YXRpb24gd2hlcmUgeW91IGNvdWxkIHN1Y2NlZWQgaW4gZ2V0dGluZyB0aGVcbi8vIFR5cGVTY3JpcHQgY29tcGlsZXIgdG8gaW5mZXIgYSB0dXBsZSB0eXBlIGZvciB0aGUgc291cmNlcyBhcnJheSwgeW91XG4vLyBjb3VsZCBqdXN0IHVzZSBtZXJnZURlZXAgaW5zdGVhZCBvZiBtZXJnZURlZXBBcnJheSwgc28gaW5zdGVhZCBvZlxuLy8gdHJ5aW5nIHRvIGNvbnZlcnQgVFtdIHRvIGFuIGludGVyc2VjdGlvbiB0eXBlIHdlIGp1c3QgaW5mZXIgdGhlIGFycmF5XG4vLyBlbGVtZW50IHR5cGUsIHdoaWNoIHdvcmtzIHBlcmZlY3RseSB3aGVuIHRoZSBzb3VyY2VzIGFycmF5IGhhcyBhXG4vLyBjb25zaXN0ZW50IGVsZW1lbnQgdHlwZS5cbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZURlZXBBcnJheTxUPihzb3VyY2VzOiBUW10pOiBUIHtcbiAgbGV0IHRhcmdldCA9IHNvdXJjZXNbMF0gfHwgKHt9IGFzIFQpO1xuICBjb25zdCBjb3VudCA9IHNvdXJjZXMubGVuZ3RoO1xuICBpZiAoY291bnQgPiAxKSB7XG4gICAgY29uc3QgbWVyZ2VyID0gbmV3IERlZXBNZXJnZXIoKTtcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IGNvdW50OyArK2kpIHtcbiAgICAgIHRhcmdldCA9IG1lcmdlci5tZXJnZSh0YXJnZXQsIHNvdXJjZXNbaV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGFyZ2V0O1xufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/mergeDeepArray.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/mergeOptions.js":
/*!************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/mergeOptions.js ***!
  \************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mergeOptions: () => (/* binding */ mergeOptions)\n/* harmony export */ });\n/* harmony import */ var _compact_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./compact.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/compact.js\");\n\n/**\n* @internal\n* \n* @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n*/ function mergeOptions(defaults, options) {\n    return (0,_compact_js__WEBPACK_IMPORTED_MODULE_0__.compact)(defaults, options, options.variables && {\n        variables: (0,_compact_js__WEBPACK_IMPORTED_MODULE_0__.compact)({\n            ...defaults && defaults.variables,\n            ...options.variables\n        })\n    });\n} //# sourceMappingURL=mergeOptions.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvaW50ZXJuYWwvbWVyZ2VPcHRpb25zLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBRXNDOzs7OztHQVF0QyxTQUFnQixDQUFoQixXQUE0QixDQUkxQixDQUpGLE9BSWtFLEVBQ2hFLENBTEYsTUFLdUMsRUFMdkM7SUFPRSxDQUFGLE1BQVMsb0RBQU8sQ0FDWixDQURKLE9BQ1ksRUFDUixDQUZKLE1BRVcsRUFDUCxDQUhKLE1BR1csQ0FBQyxDQUhaLFlBR3lCO1FBQ25CLENBQU4sUUFBZSxFQUFFLG9EQUFPLENBQUM7WUFDakIsQ0FBUixFQUFXLENBQVgsV0FBd0IsQ0FBeEIsT0FBZ0MsQ0FBQyxDQUFqQyxRQUEwQyxDQUFDO1lBQ25DLENBQVIsRUFBVyxDQUFYLE1BQWtCLENBQUMsQ0FBbkIsUUFBNEI7UUFDNUIsQ0FBTyxDQUFDO0lBQ1IsQ0FBSyxDQUNGO0FBQ0giLCJzb3VyY2VzIjpbIi9ob21lL3UvUHJvamVjdHMvc3JjL3V0aWxpdGllcy9pbnRlcm5hbC9tZXJnZU9wdGlvbnMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBBcG9sbG9DbGllbnQsIE9wZXJhdGlvblZhcmlhYmxlcyB9IGZyb20gXCJAYXBvbGxvL2NsaWVudFwiO1xuXG5pbXBvcnQgeyBjb21wYWN0IH0gZnJvbSBcIi4vY29tcGFjdC5qc1wiO1xuXG50eXBlIE9wdGlvbnNVbmlvbjxURGF0YSwgVFZhcmlhYmxlcyBleHRlbmRzIE9wZXJhdGlvblZhcmlhYmxlcz4gPVxuICB8IEFwb2xsb0NsaWVudC5XYXRjaFF1ZXJ5T3B0aW9uczxURGF0YSwgVFZhcmlhYmxlcz5cbiAgfCBBcG9sbG9DbGllbnQuUXVlcnlPcHRpb25zPFREYXRhLCBUVmFyaWFibGVzPlxuICB8IEFwb2xsb0NsaWVudC5NdXRhdGVPcHRpb25zPFREYXRhLCBUVmFyaWFibGVzLCBhbnk+O1xuXG4vKiogQGludGVybmFsICovXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VPcHRpb25zPFxuICBURGVmYXVsdE9wdGlvbnMgZXh0ZW5kcyBQYXJ0aWFsPE9wdGlvbnNVbmlvbjxhbnksIGFueT4+LFxuICBUT3B0aW9ucyBleHRlbmRzIFREZWZhdWx0T3B0aW9ucyxcbj4oXG4gIGRlZmF1bHRzOiBURGVmYXVsdE9wdGlvbnMgfCBQYXJ0aWFsPFREZWZhdWx0T3B0aW9ucz4gfCB1bmRlZmluZWQsXG4gIG9wdGlvbnM6IFRPcHRpb25zIHwgUGFydGlhbDxUT3B0aW9ucz5cbik6IFRPcHRpb25zICYgVERlZmF1bHRPcHRpb25zIHtcbiAgcmV0dXJuIGNvbXBhY3QoXG4gICAgZGVmYXVsdHMsXG4gICAgb3B0aW9ucyxcbiAgICBvcHRpb25zLnZhcmlhYmxlcyAmJiB7XG4gICAgICB2YXJpYWJsZXM6IGNvbXBhY3Qoe1xuICAgICAgICAuLi4oZGVmYXVsdHMgJiYgZGVmYXVsdHMudmFyaWFibGVzKSxcbiAgICAgICAgLi4ub3B0aW9ucy52YXJpYWJsZXMsXG4gICAgICB9KSxcbiAgICB9XG4gICk7XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/mergeOptions.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/preventUnhandledRejection.js":
/*!*************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/preventUnhandledRejection.js ***!
  \*************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   preventUnhandledRejection: () => (/* binding */ preventUnhandledRejection)\n/* harmony export */ });\nfunction preventUnhandledRejection(promise) {\n    promise.catch(()=>{});\n    return promise;\n} //# sourceMappingURL=preventUnhandledRejection.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvaW50ZXJuYWwvcHJldmVudFVuaGFuZGxlZFJlamVjdGlvbi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU0sU0FBVSx5QkFBeUIsQ0FBSSxPQUFtQjtJQUM5RCxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFHLENBQUMsQ0FBQztJQUV4QixPQUFPLE9BQU8sQ0FBQztBQUNqQixDQUFDIiwic291cmNlcyI6WyIvaG9tZS91L1Byb2plY3RzL3NyYy91dGlsaXRpZXMvaW50ZXJuYWwvcHJldmVudFVuaGFuZGxlZFJlamVjdGlvbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gcHJldmVudFVuaGFuZGxlZFJlamVjdGlvbjxUPihwcm9taXNlOiBQcm9taXNlPFQ+KTogUHJvbWlzZTxUPiB7XG4gIHByb21pc2UuY2F0Y2goKCkgPT4ge30pO1xuXG4gIHJldHVybiBwcm9taXNlO1xufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/preventUnhandledRejection.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/removeDirectivesFromDocument.js":
/*!****************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/removeDirectivesFromDocument.js ***!
  \****************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   removeDirectivesFromDocument: () => (/* binding */ removeDirectivesFromDocument)\n/* harmony export */ });\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! graphql */ \"(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/kinds.mjs\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! graphql */ \"(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/visitor.mjs\");\n/* harmony import */ var _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @apollo/client/utilities/invariant */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/invariant/index.development.js\");\n/* harmony import */ var _checkDocument_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./checkDocument.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/checkDocument.js\");\n/* harmony import */ var _createFragmentMap_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./createFragmentMap.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/createFragmentMap.js\");\n/* harmony import */ var _getFragmentDefinition_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./getFragmentDefinition.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getFragmentDefinition.js\");\n/* harmony import */ var _getFragmentDefinitions_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./getFragmentDefinitions.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getFragmentDefinitions.js\");\n/* harmony import */ var _getOperationDefinition_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./getOperationDefinition.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getOperationDefinition.js\");\n/* harmony import */ var _isArray_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isArray.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/isArray.js\");\n/* harmony import */ var _isNonEmptyArray_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./isNonEmptyArray.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/isNonEmptyArray.js\");\n\n\n\n\n\n\n\n\n\n/**\n* @internal\n* \n* @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n*/ function removeDirectivesFromDocument(directives, doc) {\n    (0,_checkDocument_js__WEBPACK_IMPORTED_MODULE_0__.checkDocument)(doc);\n    // Passing empty strings to makeInUseGetterFunction means we handle anonymous\n    // operations as if their names were \"\". Anonymous fragment definitions are\n    // not supposed to be possible, but the same default naming strategy seems\n    // appropriate for that case as well.\n    const getInUseByOperationName = makeInUseGetterFunction(\"\");\n    const getInUseByFragmentName = makeInUseGetterFunction(\"\");\n    const getInUse = (ancestors)=>{\n        for(let p = 0, ancestor; p < ancestors.length && (ancestor = ancestors[p]); ++p){\n            if ((0,_isArray_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(ancestor)) continue;\n            if (ancestor.kind === graphql__WEBPACK_IMPORTED_MODULE_2__.Kind.OPERATION_DEFINITION) {\n                // If an operation is anonymous, we use the empty string as its key.\n                return getInUseByOperationName(ancestor.name && ancestor.name.value);\n            }\n            if (ancestor.kind === graphql__WEBPACK_IMPORTED_MODULE_2__.Kind.FRAGMENT_DEFINITION) {\n                return getInUseByFragmentName(ancestor.name.value);\n            }\n        }\n        _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_3__.invariant.error(14);\n        return null;\n    };\n    let operationCount = 0;\n    for(let i = doc.definitions.length - 1; i >= 0; --i){\n        if (doc.definitions[i].kind === graphql__WEBPACK_IMPORTED_MODULE_2__.Kind.OPERATION_DEFINITION) {\n            ++operationCount;\n        }\n    }\n    const directiveMatcher = getDirectiveMatcher(directives);\n    const shouldRemoveField = (nodeDirectives)=>(0,_isNonEmptyArray_js__WEBPACK_IMPORTED_MODULE_4__.isNonEmptyArray)(nodeDirectives) && nodeDirectives.map(directiveMatcher).some((config)=>config && config.remove);\n    const originalFragmentDefsByPath = new Map();\n    // Any time the first traversal of the document below makes a change like\n    // removing a fragment (by returning null), this variable should be set to\n    // true. Once it becomes true, it should never be set to false again. If this\n    // variable remains false throughout the traversal, then we can return the\n    // original doc immediately without any modifications.\n    let firstVisitMadeChanges = false;\n    const fieldOrInlineFragmentVisitor = {\n        enter (node) {\n            if (shouldRemoveField(node.directives)) {\n                firstVisitMadeChanges = true;\n                return null;\n            }\n        }\n    };\n    const docWithoutDirectiveSubtrees = (0,graphql__WEBPACK_IMPORTED_MODULE_5__.visit)(doc, {\n        // These two AST node types share the same implementation, defined above.\n        Field: fieldOrInlineFragmentVisitor,\n        InlineFragment: fieldOrInlineFragmentVisitor,\n        VariableDefinition: {\n            enter () {\n                // VariableDefinition nodes do not count as variables in use, though\n                // they do contain Variable nodes that might be visited below. To avoid\n                // counting variable declarations as usages, we skip visiting the\n                // contents of this VariableDefinition node by returning false.\n                return false;\n            }\n        },\n        Variable: {\n            enter (node, _key, _parent, _path, ancestors) {\n                const inUse = getInUse(ancestors);\n                if (inUse) {\n                    inUse.variables.add(node.name.value);\n                }\n            }\n        },\n        FragmentSpread: {\n            enter (node, _key, _parent, _path, ancestors) {\n                if (shouldRemoveField(node.directives)) {\n                    firstVisitMadeChanges = true;\n                    return null;\n                }\n                const inUse = getInUse(ancestors);\n                if (inUse) {\n                    inUse.fragmentSpreads.add(node.name.value);\n                }\n            // We might like to remove this FragmentSpread by returning null here if\n            // the corresponding FragmentDefinition node is also going to be removed\n            // by the logic below, but we can't control the relative order of those\n            // events, so we have to postpone the removal of dangling FragmentSpread\n            // nodes until after the current visit of the document has finished.\n            }\n        },\n        FragmentDefinition: {\n            enter (node, _key, _parent, path) {\n                originalFragmentDefsByPath.set(JSON.stringify(path), node);\n            },\n            leave (node, _key, _parent, path) {\n                const originalNode = originalFragmentDefsByPath.get(JSON.stringify(path));\n                if (node === originalNode) {\n                    // If the FragmentNode received by this leave function is identical to\n                    // the one received by the corresponding enter function (above), then\n                    // the visitor must not have made any changes within this\n                    // FragmentDefinition node. This fragment definition may still be\n                    // removed if there are no ...spread references to it, but it won't be\n                    // removed just because it has only a __typename field.\n                    return node;\n                }\n                if (// This logic applies only if the document contains one or more\n                // operations, since removing all fragments from a document containing\n                // only fragments makes the document useless.\n                operationCount > 0 && node.selectionSet.selections.every((selection)=>selection.kind === graphql__WEBPACK_IMPORTED_MODULE_2__.Kind.FIELD && selection.name.value === \"__typename\")) {\n                    // This is a somewhat opinionated choice: if a FragmentDefinition ends\n                    // up having no fields other than __typename, we remove the whole\n                    // fragment definition, and later prune ...spread references to it.\n                    getInUseByFragmentName(node.name.value).removed = true;\n                    firstVisitMadeChanges = true;\n                    return null;\n                }\n            }\n        },\n        Directive: {\n            leave (node) {\n                // If a matching directive is found, remove the directive itself. Note\n                // that this does not remove the target (field, argument, etc) of the\n                // directive, but only the directive itself.\n                if (directiveMatcher(node)) {\n                    firstVisitMadeChanges = true;\n                    return null;\n                }\n            }\n        }\n    });\n    if (!firstVisitMadeChanges) {\n        // If our first pass did not change anything about the document, then there\n        // is no cleanup we need to do, and we can return the original doc.\n        return doc;\n    }\n    // Utility for making sure inUse.transitiveVars is recursively populated.\n    // Because this logic assumes inUse.fragmentSpreads has been completely\n    // populated and inUse.removed has been set if appropriate,\n    // populateTransitiveVars must be called after that information has been\n    // collected by the first traversal of the document.\n    const populateTransitiveVars = (inUse)=>{\n        if (!inUse.transitiveVars) {\n            inUse.transitiveVars = new Set(inUse.variables);\n            if (!inUse.removed) {\n                inUse.fragmentSpreads.forEach((childFragmentName)=>{\n                    populateTransitiveVars(getInUseByFragmentName(childFragmentName)).transitiveVars.forEach((varName)=>{\n                        inUse.transitiveVars.add(varName);\n                    });\n                });\n            }\n        }\n        return inUse;\n    };\n    // Since we've been keeping track of fragment spreads used by particular\n    // operations and fragment definitions, we now need to compute the set of all\n    // spreads used (transitively) by any operations in the document.\n    const allFragmentNamesUsed = new Set();\n    docWithoutDirectiveSubtrees.definitions.forEach((def)=>{\n        if (def.kind === graphql__WEBPACK_IMPORTED_MODULE_2__.Kind.OPERATION_DEFINITION) {\n            populateTransitiveVars(getInUseByOperationName(def.name && def.name.value)).fragmentSpreads.forEach((childFragmentName)=>{\n                allFragmentNamesUsed.add(childFragmentName);\n            });\n        } else if (def.kind === graphql__WEBPACK_IMPORTED_MODULE_2__.Kind.FRAGMENT_DEFINITION && // If there are no operations in the document, then all fragment\n        // definitions count as usages of their own fragment names. This heuristic\n        // prevents accidentally removing all fragment definitions from the\n        // document just because it contains no operations that use the fragments.\n        operationCount === 0 && !getInUseByFragmentName(def.name.value).removed) {\n            allFragmentNamesUsed.add(def.name.value);\n        }\n    });\n    // Now that we have added all fragment spreads used by operations to the\n    // allFragmentNamesUsed set, we can complete the set by transitively adding\n    // all fragment spreads used by those fragments, and so on.\n    allFragmentNamesUsed.forEach((fragmentName)=>{\n        // Once all the childFragmentName strings added here have been seen already,\n        // the top-level allFragmentNamesUsed.forEach loop will terminate.\n        populateTransitiveVars(getInUseByFragmentName(fragmentName)).fragmentSpreads.forEach((childFragmentName)=>{\n            allFragmentNamesUsed.add(childFragmentName);\n        });\n    });\n    const fragmentWillBeRemoved = (fragmentName)=>!!// A fragment definition will be removed if there are no spreads that refer\n        // to it, or the fragment was explicitly removed because it had no fields\n        // other than __typename.\n        (!allFragmentNamesUsed.has(fragmentName) || getInUseByFragmentName(fragmentName).removed);\n    const enterVisitor = {\n        enter (node) {\n            if (fragmentWillBeRemoved(node.name.value)) {\n                return null;\n            }\n        }\n    };\n    return nullIfDocIsEmpty((0,graphql__WEBPACK_IMPORTED_MODULE_5__.visit)(docWithoutDirectiveSubtrees, {\n        // If the fragment is going to be removed, then leaving any dangling\n        // FragmentSpread nodes with the same name would be a mistake.\n        FragmentSpread: enterVisitor,\n        // This is where the fragment definition is actually removed.\n        FragmentDefinition: enterVisitor,\n        OperationDefinition: {\n            leave (node) {\n                // Upon leaving each operation in the depth-first AST traversal, prune\n                // any variables that are declared by the operation but unused within.\n                if (node.variableDefinitions) {\n                    const usedVariableNames = populateTransitiveVars(// If an operation is anonymous, we use the empty string as its key.\n                    getInUseByOperationName(node.name && node.name.value)).transitiveVars;\n                    // According to the GraphQL spec, all variables declared by an\n                    // operation must either be used by that operation or used by some\n                    // fragment included transitively into that operation:\n                    // https://spec.graphql.org/draft/#sec-All-Variables-Used\n                    //\n                    // To stay on the right side of this validation rule, if/when we\n                    // remove the last $var references from an operation or its fragments,\n                    // we must also remove the corresponding $var declaration from the\n                    // enclosing operation. This pruning applies only to operations and\n                    // not fragment definitions, at the moment. Fragments may be able to\n                    // declare variables eventually, but today they can only consume them.\n                    if (usedVariableNames.size < node.variableDefinitions.length) {\n                        return {\n                            ...node,\n                            variableDefinitions: node.variableDefinitions.filter((varDef)=>usedVariableNames.has(varDef.variable.name.value))\n                        };\n                    }\n                }\n            }\n        }\n    }));\n}\nfunction makeInUseGetterFunction(defaultKey) {\n    const map = new Map();\n    return function inUseGetterFunction() {\n        let key = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : defaultKey;\n        let inUse = map.get(key);\n        if (!inUse) {\n            map.set(key, inUse = {\n                // Variable and fragment spread names used directly within this\n                // operation or fragment definition, as identified by key. These sets\n                // will be populated during the first traversal of the document in\n                // removeDirectivesFromDocument below.\n                variables: new Set(),\n                fragmentSpreads: new Set()\n            });\n        }\n        return inUse;\n    };\n}\nfunction getDirectiveMatcher(configs) {\n    const names = new Map();\n    const tests = new Map();\n    configs.forEach((directive)=>{\n        if (directive) {\n            if (directive.name) {\n                names.set(directive.name, directive);\n            } else if (directive.test) {\n                tests.set(directive.test, directive);\n            }\n        }\n    });\n    return (directive)=>{\n        let config = names.get(directive.name.value);\n        if (!config && tests.size) {\n            tests.forEach((testConfig, test)=>{\n                if (test(directive)) {\n                    config = testConfig;\n                }\n            });\n        }\n        return config;\n    };\n}\nfunction isEmpty(op, fragmentMap) {\n    return !op || op.selectionSet.selections.every((selection)=>selection.kind === graphql__WEBPACK_IMPORTED_MODULE_2__.Kind.FRAGMENT_SPREAD && isEmpty(fragmentMap[selection.name.value], fragmentMap));\n}\nfunction nullIfDocIsEmpty(doc) {\n    return isEmpty((0,_getOperationDefinition_js__WEBPACK_IMPORTED_MODULE_6__.getOperationDefinition)(doc) || (0,_getFragmentDefinition_js__WEBPACK_IMPORTED_MODULE_7__.getFragmentDefinition)(doc), (0,_createFragmentMap_js__WEBPACK_IMPORTED_MODULE_8__.createFragmentMap)((0,_getFragmentDefinitions_js__WEBPACK_IMPORTED_MODULE_9__.getFragmentDefinitions)(doc))) ? null : doc;\n} //# sourceMappingURL=removeDirectivesFromDocument.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/removeDirectivesFromDocument.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/removeFragmentSpreads.js":
/*!*********************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/removeFragmentSpreads.js ***!
  \*********************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   removeMaskedFragmentSpreads: () => (/* binding */ removeMaskedFragmentSpreads)\n/* harmony export */ });\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! graphql */ \"(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/visitor.mjs\");\n\nfunction removeMaskedFragmentSpreads(document) {\n    return (0,graphql__WEBPACK_IMPORTED_MODULE_0__.visit)(document, {\n        FragmentSpread (node) {\n            var _node_directives;\n            if (!((_node_directives = node.directives) === null || _node_directives === void 0 ? void 0 : _node_directives.some((param)=>{\n                let { name } = param;\n                return name.value === \"unmask\";\n            }))) {\n                return null;\n            }\n        }\n    });\n} //# sourceMappingURL=removeFragmentSpreads.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvaW50ZXJuYWwvcmVtb3ZlRnJhZ21lbnRTcHJlYWRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQ2dDO0FBRTFCLFNBQVUsMkJBQTJCLENBQUMsUUFBc0I7SUFDaEUsT0FBTyw4Q0FBSyxDQUFDLFFBQVEsRUFBRTtRQUNyQixjQUFjLEVBQUMsSUFBSTs7WUFDakIsSUFBSSwyQkFBTSxVQUFVLHFEQUFmLElBQUksYUFBYSxJQUFJLENBQUM7b0JBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFO3VCQUFDLElBQUksQ0FBQyxLQUFLLEtBQUssUUFBUSxDQUFDO2lCQUFFLENBQUM7Z0JBQ2xFLE9BQU8sSUFBSSxDQUFDO1lBQ2QsQ0FBQztRQUNILENBQUM7S0FDRixDQUFDLENBQUM7QUFDTCxDQUFDIiwic291cmNlcyI6WyIvaG9tZS91L1Byb2plY3RzL3NyYy91dGlsaXRpZXMvaW50ZXJuYWwvcmVtb3ZlRnJhZ21lbnRTcHJlYWRzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgRG9jdW1lbnROb2RlIH0gZnJvbSBcImdyYXBocWxcIjtcbmltcG9ydCB7IHZpc2l0IH0gZnJvbSBcImdyYXBocWxcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZU1hc2tlZEZyYWdtZW50U3ByZWFkcyhkb2N1bWVudDogRG9jdW1lbnROb2RlKSB7XG4gIHJldHVybiB2aXNpdChkb2N1bWVudCwge1xuICAgIEZyYWdtZW50U3ByZWFkKG5vZGUpIHtcbiAgICAgIGlmICghbm9kZS5kaXJlY3RpdmVzPy5zb21lKCh7IG5hbWUgfSkgPT4gbmFtZS52YWx1ZSA9PT0gXCJ1bm1hc2tcIikpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfSxcbiAgfSk7XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/removeFragmentSpreads.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/resultKeyNameFromField.js":
/*!**********************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/resultKeyNameFromField.js ***!
  \**********************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   resultKeyNameFromField: () => (/* binding */ resultKeyNameFromField)\n/* harmony export */ });\n/**\n* @internal\n* \n* @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n*/ function resultKeyNameFromField(field) {\n    return field.alias ? field.alias.value : field.name.value;\n} //# sourceMappingURL=resultKeyNameFromField.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvaW50ZXJuYWwvcmVzdWx0S2V5TmFtZUZyb21GaWVsZC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztHQUdBLFNBQWdCLENBQWhCLHFCQUFzQyxDQUFDLENBQXZDLElBQXVELEVBQXZEO0lBQ0UsQ0FBRixNQUFTLENBQVQsSUFBYyxDQUFDLENBQWYsS0FBcUIsRUFBRSxDQUF2QixJQUE0QixDQUFDLENBQTdCLElBQWtDLENBQUMsQ0FBbkMsS0FBeUMsRUFBRSxDQUEzQyxJQUFnRCxDQUFDLENBQWpELEdBQXFELENBQUMsQ0FBdEQsSUFBMkQ7QUFDM0QiLCJzb3VyY2VzIjpbIi9ob21lL3UvUHJvamVjdHMvc3JjL3V0aWxpdGllcy9pbnRlcm5hbC9yZXN1bHRLZXlOYW1lRnJvbUZpZWxkLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgRmllbGROb2RlIH0gZnJvbSBcImdyYXBocWxcIjtcblxuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlc3VsdEtleU5hbWVGcm9tRmllbGQoZmllbGQ6IEZpZWxkTm9kZSk6IHN0cmluZyB7XG4gIHJldHVybiBmaWVsZC5hbGlhcyA/IGZpZWxkLmFsaWFzLnZhbHVlIDogZmllbGQubmFtZS52YWx1ZTtcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/resultKeyNameFromField.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/shouldInclude.js":
/*!*************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/shouldInclude.js ***!
  \*************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   shouldInclude: () => (/* binding */ shouldInclude)\n/* harmony export */ });\n/* harmony import */ var _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @apollo/client/utilities/invariant */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/invariant/index.development.js\");\n\n/**\n* @internal\n* \n* @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n*/ function shouldInclude(param, variables) {\n    let { directives } = param;\n    if (!directives || !directives.length) {\n        return true;\n    }\n    return getInclusionDirectives(directives).every((param)=>{\n        let { directive, ifArgument } = param;\n        let evaledValue = false;\n        if (ifArgument.value.kind === \"Variable\") {\n            evaledValue = variables && variables[ifArgument.value.name.value];\n            (0,_apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(evaledValue !== void 0, 15, directive.name.value);\n        } else {\n            evaledValue = ifArgument.value.value;\n        }\n        return directive.name.value === \"skip\" ? !evaledValue : evaledValue;\n    });\n}\nfunction isInclusionDirective(param) {\n    let { name: { value } } = param;\n    return value === \"skip\" || value === \"include\";\n}\nfunction getInclusionDirectives(directives) {\n    const result = [];\n    if (directives && directives.length) {\n        directives.forEach((directive)=>{\n            if (!isInclusionDirective(directive)) return;\n            const directiveArguments = directive.arguments;\n            const directiveName = directive.name.value;\n            (0,_apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(directiveArguments && directiveArguments.length === 1, 16, directiveName);\n            const ifArgument = directiveArguments[0];\n            (0,_apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(ifArgument.name && ifArgument.name.value === \"if\", 17, directiveName);\n            const ifValue = ifArgument.value;\n            // means it has to be a variable value if this is a valid @skip or @include directive\n            (0,_apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(ifValue && (ifValue.kind === \"Variable\" || ifValue.kind === \"BooleanValue\"), 18, directiveName);\n            result.push({\n                directive,\n                ifArgument\n            });\n        });\n    }\n    return result;\n} //# sourceMappingURL=shouldInclude.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvaW50ZXJuYWwvc2hvdWxkSW5jbHVkZS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQVM4RDs7Ozs7R0FHOUQsU0FBZ0IsQ0FBaEIsWUFBNkIsUUFFM0IsQ0FGRixRQUVpQyxFQUZqQztVQUNJLENBREosV0FDK0IsR0FBN0I7SUFHQSxDQUFGLEdBQU0sQ0FBQyxDQUFQLGFBQXFCLENBQUMsQ0FBdEIsU0FBZ0MsQ0FBQyxDQUFqQyxLQUF1QyxFQUFFO1FBQ3JDLENBQUosTUFBVyxDQUFYLEdBQWU7SUFDYjtXQUNPLENBQVQscUJBQStCLENBQUMsQ0FBaEMsU0FBMEMsQ0FBQyxDQUFDLENBQTVDLElBQWlELENBQzdDO1lBQUMsRUFBRSxDQURQLFFBQ2dCLEVBQUUsQ0FEbEIsV0FDOEIsRUFBRSxDQURoQztRQUVNLENBQU4sR0FBVSxDQUFWLGFBQWlDLENBQWpDLElBQXNDO1FBQ2hDLENBQU4sR0FBVSxDQUFWLFNBQW9CLENBQUMsQ0FBckIsSUFBMEIsQ0FBQyxDQUEzQixRQUFvQyxDQUFwQyxTQUE4QyxFQUFFO1lBQ3hDLENBQVIsYUFDVSxDQUFWLFlBQXVCLENBQXZCLFFBQWdDLENBQUUsQ0FBbEMsU0FBNEMsQ0FBQyxDQUE3QyxJQUFtRSxDQUFDLENBQXBFLEdBQXdFLENBQUMsQ0FBekUsSUFBOEUsQ0FBQztZQUN2RSw2RUFBUixDQUNVLENBRFYsZUFDMEIsQ0FEMUIsSUFDK0IsT0FFckIsQ0FIVixRQUdtQixDQUFDLENBSHBCLEdBR3dCLENBQUMsQ0FIekIsS0FJUztRQUNILE9BQU87WUFDTCxDQUFSLGFBQXVCLENBQXZCLFNBQWlDLENBQUMsQ0FBbEMsSUFBNEQsQ0FBQyxDQUE3RCxJQUFrRTtRQUM1RDtRQUNBLENBQU4sTUFBYSxDQUFiLFFBQXNCLENBQUMsQ0FBdkIsR0FBMkIsQ0FBQyxDQUE1QixTQUFzQyxDQUF0QyxNQUE2QyxFQUFFLENBQUMsQ0FBaEQsV0FBNEQsRUFBRSxDQUE5RCxVQUF5RTtJQUNyRSxDQUFDO0FBRUw7QUFFQSxTQUFTLENBQVQsbUJBQTZCO1VBQUcsQ0FBaEMsR0FBb0MsRUFBRSxFQUFFLENBQXhDLFFBQWdFLEVBQWhFLENBQThCO0lBQzVCLENBQUYsTUFBUyxDQUFULFNBQW1CLENBQW5CLFNBQTZCLENBQTdCLFNBQXVDLENBQXZDLFFBQWdEO0FBQ2hEO0FBT0EsU0FBUyxDQUFULHFCQUErQixDQUM3QixDQURGLFNBQzBDLEVBRDFDO0lBR0UsQ0FBRixLQUFRLENBQVIsUUFBc0MsQ0FBdEMsQ0FBd0M7SUFFdEMsQ0FBRixHQUFNLENBQU4sYUFBb0IsQ0FBcEIsU0FBOEIsQ0FBQyxDQUEvQixLQUFxQyxFQUFFO1FBQ25DLENBQUosU0FBYyxDQUFDLENBQWYsTUFBc0IsQ0FBQyxDQUFDLENBQXhCLFFBQWlDLEVBQUUsQ0FBbkM7WUFDTSxDQUFOLEdBQVUsQ0FBQyxDQUFYLG1CQUErQixDQUFDLENBQWhDLFFBQXlDLENBQUMsRUFBRSxDQUE1QztZQUVNLENBQU4sS0FBWSxDQUFaLG9CQUFpQyxDQUFqQyxRQUEwQyxDQUFDLENBQTNDLFFBQW9EO1lBQzlDLENBQU4sS0FBWSxDQUFaLGVBQTRCLENBQTVCLFFBQXFDLENBQUMsQ0FBdEMsR0FBMEMsQ0FBQyxDQUEzQyxJQUFnRDtZQUUxQyw2RUFBTixDQUNRLENBRFIscUJBQzhCLENBRDlCLGlCQUNnRCxDQUFDLENBRGpELFVBQzRELE9BRXBELENBSFIsYUFJTztZQUVELENBQU4sS0FBWSxDQUFaLFlBQXlCLENBQXpCLGlCQUE0QyxDQUFDLENBQUMsQ0FBQztZQUN6Qyw2RUFBTixDQUNRLENBRFIsU0FDa0IsQ0FBQyxDQURuQixPQUMyQixDQUQzQixTQUNxQyxDQUFDLENBRHRDLEdBQzBDLENBQUMsQ0FEM0MsU0FDcUQsQ0FEckQsU0FHUSxDQUhSLGFBSU87WUFFRCxDQUFOLEtBQVksQ0FBWixTQUFpQyxDQUFqQyxTQUEyQyxDQUFDLENBQTVDLElBQWlEO1lBRTNDLENBQU47WUFDTSw2RUFBTixDQUNRLENBRFIsVUFFVyxDQUFYLE1BQWtCLEVBQUMsQ0FBbkIsUUFBNEIsQ0FBNUIsYUFBMEMsQ0FBMUMsTUFBaUQsQ0FBQyxDQUFsRCxRQUEyRCxDQUEzRCxjQUF5RSxNQUVqRSxDQUZSLGFBR087WUFFRCxDQUFOLEtBQVksQ0FBQyxDQUFiLEdBQWlCLENBQUM7Z0JBQUUsQ0FBcEIsUUFBNkI7Z0JBQUUsQ0FBL0I7WUFBQSxDQUEyQyxDQUFDO1FBQ3hDLENBQUMsQ0FBQztJQUNKO0lBRUEsQ0FBRixNQUFTLENBQVQsS0FBZTtBQUNmIiwic291cmNlcyI6WyIvaG9tZS91L1Byb2plY3RzL3NyYy91dGlsaXRpZXMvaW50ZXJuYWwvc2hvdWxkSW5jbHVkZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7XG4gIEFyZ3VtZW50Tm9kZSxcbiAgQm9vbGVhblZhbHVlTm9kZSxcbiAgRGlyZWN0aXZlTm9kZSxcbiAgU2VsZWN0aW9uTm9kZSxcbiAgVmFsdWVOb2RlLFxuICBWYXJpYWJsZU5vZGUsXG59IGZyb20gXCJncmFwaHFsXCI7XG5cbmltcG9ydCB7IGludmFyaWFudCB9IGZyb20gXCJAYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvaW52YXJpYW50XCI7XG5cbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBmdW5jdGlvbiBzaG91bGRJbmNsdWRlKFxuICB7IGRpcmVjdGl2ZXMgfTogU2VsZWN0aW9uTm9kZSxcbiAgdmFyaWFibGVzPzogUmVjb3JkPHN0cmluZywgYW55PlxuKTogYm9vbGVhbiB7XG4gIGlmICghZGlyZWN0aXZlcyB8fCAhZGlyZWN0aXZlcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZ2V0SW5jbHVzaW9uRGlyZWN0aXZlcyhkaXJlY3RpdmVzKS5ldmVyeShcbiAgICAoeyBkaXJlY3RpdmUsIGlmQXJndW1lbnQgfSkgPT4ge1xuICAgICAgbGV0IGV2YWxlZFZhbHVlOiBib29sZWFuID0gZmFsc2U7XG4gICAgICBpZiAoaWZBcmd1bWVudC52YWx1ZS5raW5kID09PSBcIlZhcmlhYmxlXCIpIHtcbiAgICAgICAgZXZhbGVkVmFsdWUgPVxuICAgICAgICAgIHZhcmlhYmxlcyAmJiB2YXJpYWJsZXNbKGlmQXJndW1lbnQudmFsdWUgYXMgVmFyaWFibGVOb2RlKS5uYW1lLnZhbHVlXTtcbiAgICAgICAgaW52YXJpYW50KFxuICAgICAgICAgIGV2YWxlZFZhbHVlICE9PSB2b2lkIDAsXG4gICAgICAgICAgYEludmFsaWQgdmFyaWFibGUgcmVmZXJlbmNlZCBpbiBAJXMgZGlyZWN0aXZlLmAsXG4gICAgICAgICAgZGlyZWN0aXZlLm5hbWUudmFsdWVcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGV2YWxlZFZhbHVlID0gKGlmQXJndW1lbnQudmFsdWUgYXMgQm9vbGVhblZhbHVlTm9kZSkudmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGlyZWN0aXZlLm5hbWUudmFsdWUgPT09IFwic2tpcFwiID8gIWV2YWxlZFZhbHVlIDogZXZhbGVkVmFsdWU7XG4gICAgfVxuICApO1xufVxuXG5mdW5jdGlvbiBpc0luY2x1c2lvbkRpcmVjdGl2ZSh7IG5hbWU6IHsgdmFsdWUgfSB9OiBEaXJlY3RpdmVOb2RlKTogYm9vbGVhbiB7XG4gIHJldHVybiB2YWx1ZSA9PT0gXCJza2lwXCIgfHwgdmFsdWUgPT09IFwiaW5jbHVkZVwiO1xufVxuXG50eXBlIEluY2x1c2lvbkRpcmVjdGl2ZXMgPSBBcnJheTx7XG4gIGRpcmVjdGl2ZTogRGlyZWN0aXZlTm9kZTtcbiAgaWZBcmd1bWVudDogQXJndW1lbnROb2RlO1xufT47XG5cbmZ1bmN0aW9uIGdldEluY2x1c2lvbkRpcmVjdGl2ZXMoXG4gIGRpcmVjdGl2ZXM6IFJlYWRvbmx5QXJyYXk8RGlyZWN0aXZlTm9kZT5cbik6IEluY2x1c2lvbkRpcmVjdGl2ZXMge1xuICBjb25zdCByZXN1bHQ6IEluY2x1c2lvbkRpcmVjdGl2ZXMgPSBbXTtcblxuICBpZiAoZGlyZWN0aXZlcyAmJiBkaXJlY3RpdmVzLmxlbmd0aCkge1xuICAgIGRpcmVjdGl2ZXMuZm9yRWFjaCgoZGlyZWN0aXZlKSA9PiB7XG4gICAgICBpZiAoIWlzSW5jbHVzaW9uRGlyZWN0aXZlKGRpcmVjdGl2ZSkpIHJldHVybjtcblxuICAgICAgY29uc3QgZGlyZWN0aXZlQXJndW1lbnRzID0gZGlyZWN0aXZlLmFyZ3VtZW50cztcbiAgICAgIGNvbnN0IGRpcmVjdGl2ZU5hbWUgPSBkaXJlY3RpdmUubmFtZS52YWx1ZTtcblxuICAgICAgaW52YXJpYW50KFxuICAgICAgICBkaXJlY3RpdmVBcmd1bWVudHMgJiYgZGlyZWN0aXZlQXJndW1lbnRzLmxlbmd0aCA9PT0gMSxcbiAgICAgICAgYEluY29ycmVjdCBudW1iZXIgb2YgYXJndW1lbnRzIGZvciB0aGUgQCVzIGRpcmVjdGl2ZS5gLFxuICAgICAgICBkaXJlY3RpdmVOYW1lXG4gICAgICApO1xuXG4gICAgICBjb25zdCBpZkFyZ3VtZW50ID0gZGlyZWN0aXZlQXJndW1lbnRzIVswXTtcbiAgICAgIGludmFyaWFudChcbiAgICAgICAgaWZBcmd1bWVudC5uYW1lICYmIGlmQXJndW1lbnQubmFtZS52YWx1ZSA9PT0gXCJpZlwiLFxuICAgICAgICBgSW52YWxpZCBhcmd1bWVudCBmb3IgdGhlIEAlcyBkaXJlY3RpdmUuYCxcbiAgICAgICAgZGlyZWN0aXZlTmFtZVxuICAgICAgKTtcblxuICAgICAgY29uc3QgaWZWYWx1ZTogVmFsdWVOb2RlID0gaWZBcmd1bWVudC52YWx1ZTtcblxuICAgICAgLy8gbWVhbnMgaXQgaGFzIHRvIGJlIGEgdmFyaWFibGUgdmFsdWUgaWYgdGhpcyBpcyBhIHZhbGlkIEBza2lwIG9yIEBpbmNsdWRlIGRpcmVjdGl2ZVxuICAgICAgaW52YXJpYW50KFxuICAgICAgICBpZlZhbHVlICYmXG4gICAgICAgICAgKGlmVmFsdWUua2luZCA9PT0gXCJWYXJpYWJsZVwiIHx8IGlmVmFsdWUua2luZCA9PT0gXCJCb29sZWFuVmFsdWVcIiksXG4gICAgICAgIGBBcmd1bWVudCBmb3IgdGhlIEAlcyBkaXJlY3RpdmUgbXVzdCBiZSBhIHZhcmlhYmxlIG9yIGEgYm9vbGVhbiB2YWx1ZS5gLFxuICAgICAgICBkaXJlY3RpdmVOYW1lXG4gICAgICApO1xuXG4gICAgICByZXN1bHQucHVzaCh7IGRpcmVjdGl2ZSwgaWZBcmd1bWVudCB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/shouldInclude.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/storeKeyNameFromField.js":
/*!*********************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/storeKeyNameFromField.js ***!
  \*********************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   storeKeyNameFromField: () => (/* binding */ storeKeyNameFromField)\n/* harmony export */ });\n/* harmony import */ var _getStoreKeyName_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getStoreKeyName.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/getStoreKeyName.js\");\n/* harmony import */ var _valueToObjectRepresentation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./valueToObjectRepresentation.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/valueToObjectRepresentation.js\");\n\n\n/**\n* @internal\n* \n* @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n*/ function storeKeyNameFromField(field, variables) {\n    let directivesObj = null;\n    if (field.directives) {\n        directivesObj = {};\n        field.directives.forEach((directive)=>{\n            directivesObj[directive.name.value] = {};\n            if (directive.arguments) {\n                directive.arguments.forEach((param)=>{\n                    let { name, value } = param;\n                    return (0,_valueToObjectRepresentation_js__WEBPACK_IMPORTED_MODULE_0__.valueToObjectRepresentation)(directivesObj[directive.name.value], name, value, variables);\n                });\n            }\n        });\n    }\n    let argObj = null;\n    if (field.arguments && field.arguments.length) {\n        argObj = {};\n        field.arguments.forEach((param)=>{\n            let { name, value } = param;\n            return (0,_valueToObjectRepresentation_js__WEBPACK_IMPORTED_MODULE_0__.valueToObjectRepresentation)(argObj, name, value, variables);\n        });\n    }\n    return (0,_getStoreKeyName_js__WEBPACK_IMPORTED_MODULE_1__.getStoreKeyName)(field.name.value, argObj, directivesObj);\n} //# sourceMappingURL=storeKeyNameFromField.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvaW50ZXJuYWwvc3RvcmVLZXlOYW1lRnJvbUZpZWxkLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUVzRDtBQUN3Qjs7Ozs7R0FHOUUsU0FBZ0IsQ0FBaEIsb0JBQXFDLENBQ25DLENBREYsSUFDa0IsRUFDaEIsQ0FGRixRQUVvQixFQUZwQjtJQUlFLENBQUYsR0FBTSxDQUFOLGVBQTJCLENBQTNCLEdBQStCO0lBQzdCLENBQUYsR0FBTSxDQUFOLElBQVcsQ0FBQyxDQUFaLFNBQXNCLEVBQUU7UUFDcEIsQ0FBSixlQUFvQixDQUFwQixDQUFzQjtRQUNsQixDQUFKLElBQVMsQ0FBQyxDQUFWLFNBQW9CLENBQUMsQ0FBckIsTUFBNEIsQ0FBQyxDQUFDLENBQTlCLFFBQXVDLEVBQUUsQ0FBekM7WUFDTSxDQUFOLFlBQW1CLENBQUMsQ0FBcEIsUUFBNkIsQ0FBQyxDQUE5QixHQUFrQyxDQUFDLENBQW5DLElBQXdDLEVBQXhDLEVBQTRDLENBQTVDLENBQThDO1lBRXhDLENBQU4sR0FBVSxDQUFWLFFBQW1CLENBQUMsQ0FBcEIsUUFBNkIsRUFBRTtnQkFDdkIsQ0FBUixRQUFpQixDQUFDLENBQWxCLFFBQTJCLENBQUMsQ0FBNUIsTUFBbUMsQ0FBQzt3QkFBQyxFQUFFLENBQXZDLEdBQTJDLEVBQUUsQ0FBN0MsTUFBb0QsRUFBRSxDQUF0RDsyQkFDVSw0RkFBMkIsQ0FDekIsQ0FGWixZQUV5QixDQUFDLENBRjFCLFFBRW1DLENBQUMsQ0FGcEMsR0FFd0MsQ0FBQyxDQUZ6QyxJQUU4QyxDQUFDLEVBQ25DLENBSFosR0FHZ0IsRUFDSixDQUpaLElBSWlCLEVBQ0wsQ0FMWixRQUtxQixDQUNWLENBQ0Y7O1lBQ0g7UUFDRixDQUFDLENBQUM7SUFDSjtJQUVBLENBQUYsR0FBTSxDQUFOLFFBQW9CLENBQXBCLEdBQXdCO0lBQ3RCLENBQUYsR0FBTSxDQUFOLElBQVcsQ0FBQyxDQUFaLFlBQXlCLENBQXpCLElBQThCLENBQUMsQ0FBL0IsUUFBd0MsQ0FBQyxDQUF6QyxLQUErQyxFQUFFO1FBQzdDLENBQUosUUFBYSxDQUFiLENBQWU7UUFDWCxDQUFKLElBQVMsQ0FBQyxDQUFWLFFBQW1CLENBQUMsQ0FBcEIsTUFBMkIsQ0FBQztnQkFBQyxFQUFFLENBQS9CLEdBQW1DLEVBQUUsQ0FBckMsTUFBNEMsRUFBRSxDQUE5QzttQkFDTSw0RkFBMkIsQ0FBQyxDQURsQyxLQUN3QyxFQUFFLENBRDFDLEdBQzhDLEVBQUUsQ0FEaEQsSUFDcUQsRUFBRSxDQUR2RCxRQUNnRSxDQUFDLENBQzVEOztJQUNIO0lBRUEsQ0FBRixNQUFTLG9FQUFlLENBQUMsQ0FBekIsSUFBOEIsQ0FBQyxDQUEvQixHQUFtQyxDQUFDLENBQXBDLElBQXlDLEVBQUUsQ0FBM0MsS0FBaUQsRUFBRSxDQUFuRCxZQUFnRSxDQUFDO0FBQ2pFIiwic291cmNlcyI6WyIvaG9tZS91L1Byb2plY3RzL3NyYy91dGlsaXRpZXMvaW50ZXJuYWwvc3RvcmVLZXlOYW1lRnJvbUZpZWxkLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgRmllbGROb2RlIH0gZnJvbSBcImdyYXBocWxcIjtcblxuaW1wb3J0IHsgZ2V0U3RvcmVLZXlOYW1lIH0gZnJvbSBcIi4vZ2V0U3RvcmVLZXlOYW1lLmpzXCI7XG5pbXBvcnQgeyB2YWx1ZVRvT2JqZWN0UmVwcmVzZW50YXRpb24gfSBmcm9tIFwiLi92YWx1ZVRvT2JqZWN0UmVwcmVzZW50YXRpb24uanNcIjtcblxuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0b3JlS2V5TmFtZUZyb21GaWVsZChcbiAgZmllbGQ6IEZpZWxkTm9kZSxcbiAgdmFyaWFibGVzPzogT2JqZWN0XG4pOiBzdHJpbmcge1xuICBsZXQgZGlyZWN0aXZlc09iajogYW55ID0gbnVsbDtcbiAgaWYgKGZpZWxkLmRpcmVjdGl2ZXMpIHtcbiAgICBkaXJlY3RpdmVzT2JqID0ge307XG4gICAgZmllbGQuZGlyZWN0aXZlcy5mb3JFYWNoKChkaXJlY3RpdmUpID0+IHtcbiAgICAgIGRpcmVjdGl2ZXNPYmpbZGlyZWN0aXZlLm5hbWUudmFsdWVdID0ge307XG5cbiAgICAgIGlmIChkaXJlY3RpdmUuYXJndW1lbnRzKSB7XG4gICAgICAgIGRpcmVjdGl2ZS5hcmd1bWVudHMuZm9yRWFjaCgoeyBuYW1lLCB2YWx1ZSB9KSA9PlxuICAgICAgICAgIHZhbHVlVG9PYmplY3RSZXByZXNlbnRhdGlvbihcbiAgICAgICAgICAgIGRpcmVjdGl2ZXNPYmpbZGlyZWN0aXZlLm5hbWUudmFsdWVdLFxuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgdmFyaWFibGVzXG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgbGV0IGFyZ09iajogYW55ID0gbnVsbDtcbiAgaWYgKGZpZWxkLmFyZ3VtZW50cyAmJiBmaWVsZC5hcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgYXJnT2JqID0ge307XG4gICAgZmllbGQuYXJndW1lbnRzLmZvckVhY2goKHsgbmFtZSwgdmFsdWUgfSkgPT5cbiAgICAgIHZhbHVlVG9PYmplY3RSZXByZXNlbnRhdGlvbihhcmdPYmosIG5hbWUsIHZhbHVlLCB2YXJpYWJsZXMpXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiBnZXRTdG9yZUtleU5hbWUoZmllbGQubmFtZS52YWx1ZSwgYXJnT2JqLCBkaXJlY3RpdmVzT2JqKTtcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/storeKeyNameFromField.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/stringifyForDisplay.js":
/*!*******************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/stringifyForDisplay.js ***!
  \*******************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   stringifyForDisplay: () => (/* binding */ stringifyForDisplay)\n/* harmony export */ });\n/* harmony import */ var _makeUniqueId_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./makeUniqueId.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/makeUniqueId.js\");\n\n/**\n* @internal\n* \n* @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n*/ function stringifyForDisplay(value) {\n    let space = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n    const undefId = (0,_makeUniqueId_js__WEBPACK_IMPORTED_MODULE_0__.makeUniqueId)(\"stringifyForDisplay\");\n    return JSON.stringify(value, (_, value)=>{\n        return value === void 0 ? undefId : value;\n    }, space).split(JSON.stringify(undefId)).join(\"<undefined>\");\n} //# sourceMappingURL=stringifyForDisplay.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvaW50ZXJuYWwvc3RyaW5naWZ5Rm9yRGlzcGxheS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFnRDs7Ozs7R0FHaEQsU0FBZ0IsQ0FBaEIsa0JBQW1DLENBQUMsQ0FBcEMsSUFBOEM7Z0JBQUUsQ0FBaEQsZ0VBQXdELENBQUM7SUFDdkQsQ0FBRixLQUFRLENBQVIsU0FBa0IsOERBQVksQ0FBQyxDQUEvQixvQkFBb0QsQ0FBQztJQUNuRCxDQUFGLE1BQVMsQ0FBVCxHQUFhLENBQUMsQ0FBZCxRQUF1QixDQUNuQixDQURKLElBQ1MsRUFDTCxDQUFDLENBQUMsRUFBRSxDQUZSLElBRWEsRUFBRSxDQUZmO1FBR00sQ0FBTixNQUFhLENBQWIsU0FBdUIsQ0FBdkIsSUFBNEIsRUFBRSxFQUFFLENBQWhDLE9BQXdDLEVBQUUsQ0FBMUMsSUFBK0M7SUFDM0MsQ0FBQyxFQUNELENBREosSUFDUyxFQUVKLENBQUwsSUFBVSxDQUFDLENBQVgsR0FBZSxDQUFDLENBQWhCLFFBQXlCLENBQUMsQ0FBMUIsTUFBaUMsQ0FBQyxFQUM3QixDQUFMLEdBQVMsQ0FBQyxDQUFWLFlBQXVCLENBQUM7QUFDeEIiLCJzb3VyY2VzIjpbIi9ob21lL3UvUHJvamVjdHMvc3JjL3V0aWxpdGllcy9pbnRlcm5hbC9zdHJpbmdpZnlGb3JEaXNwbGF5LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1ha2VVbmlxdWVJZCB9IGZyb20gXCIuL21ha2VVbmlxdWVJZC5qc1wiO1xuXG4vKiogQGludGVybmFsICovXG5leHBvcnQgZnVuY3Rpb24gc3RyaW5naWZ5Rm9yRGlzcGxheSh2YWx1ZTogYW55LCBzcGFjZSA9IDApOiBzdHJpbmcge1xuICBjb25zdCB1bmRlZklkID0gbWFrZVVuaXF1ZUlkKFwic3RyaW5naWZ5Rm9yRGlzcGxheVwiKTtcbiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KFxuICAgIHZhbHVlLFxuICAgIChfLCB2YWx1ZSkgPT4ge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSB2b2lkIDAgPyB1bmRlZklkIDogdmFsdWU7XG4gICAgfSxcbiAgICBzcGFjZVxuICApXG4gICAgLnNwbGl0KEpTT04uc3RyaW5naWZ5KHVuZGVmSWQpKVxuICAgIC5qb2luKFwiPHVuZGVmaW5lZD5cIik7XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/stringifyForDisplay.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/toQueryResult.js":
/*!*************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/toQueryResult.js ***!
  \*************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toQueryResult: () => (/* binding */ toQueryResult)\n/* harmony export */ });\n/**\n* @internal\n* \n* @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n*/ function toQueryResult(value) {\n    const result = {\n        data: value.data\n    };\n    if (value.error) {\n        result.error = value.error;\n    }\n    return result;\n} //# sourceMappingURL=toQueryResult.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvaW50ZXJuYWwvdG9RdWVyeVJlc3VsdC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztHQUdBLFNBQWdCLENBQWhCLFlBQTZCLENBQzNCLENBREYsSUFDc0MsRUFEdEM7SUFHRSxDQUFGLEtBQVEsQ0FBUixRQUFrRDtRQUM5QyxDQUFKLEdBQVEsRUFBRSxDQUFWLElBQWUsQ0FBQyxDQUFoQixHQUF5QztJQUN6QyxDQUFHO0lBRUQsQ0FBRixHQUFNLENBQU4sSUFBVyxDQUFDLENBQVosSUFBaUIsRUFBRTtRQUNmLENBQUosS0FBVSxDQUFDLENBQVgsT0FBbUIsQ0FBbkIsSUFBd0IsQ0FBQyxDQUF6QixJQUE4QjtJQUM1QjtJQUVBLENBQUYsTUFBUyxDQUFULEtBQWU7QUFDZiIsInNvdXJjZXMiOlsiL2hvbWUvdS9Qcm9qZWN0cy9zcmMvdXRpbGl0aWVzL2ludGVybmFsL3RvUXVlcnlSZXN1bHQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBBcG9sbG9DbGllbnQsIE9ic2VydmFibGVRdWVyeSB9IGZyb20gXCJAYXBvbGxvL2NsaWVudFwiO1xuXG4vKiogQGludGVybmFsICovXG5leHBvcnQgZnVuY3Rpb24gdG9RdWVyeVJlc3VsdDxURGF0YSA9IHVua25vd24+KFxuICB2YWx1ZTogT2JzZXJ2YWJsZVF1ZXJ5LlJlc3VsdDxURGF0YT5cbikge1xuICBjb25zdCByZXN1bHQ6IEFwb2xsb0NsaWVudC5RdWVyeVJlc3VsdDxURGF0YT4gPSB7XG4gICAgZGF0YTogdmFsdWUuZGF0YSBhcyBURGF0YSB8IHVuZGVmaW5lZCxcbiAgfTtcblxuICBpZiAodmFsdWUuZXJyb3IpIHtcbiAgICByZXN1bHQuZXJyb3IgPSB2YWx1ZS5lcnJvcjtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/toQueryResult.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/valueToObjectRepresentation.js":
/*!***************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/valueToObjectRepresentation.js ***!
  \***************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   valueToObjectRepresentation: () => (/* binding */ valueToObjectRepresentation)\n/* harmony export */ });\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! graphql */ \"(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/kinds.mjs\");\n/* harmony import */ var _apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @apollo/client/utilities/invariant */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/invariant/index.js\");\n\n\n/**\n* @internal\n* \n* @deprecated This is an internal API and should not be used directly. This can be removed or changed at any time.\n*/ function valueToObjectRepresentation(argObj, name, value, variables) {\n    if (value.kind === graphql__WEBPACK_IMPORTED_MODULE_0__.Kind.INT || value.kind === graphql__WEBPACK_IMPORTED_MODULE_0__.Kind.FLOAT) {\n        argObj[name.value] = Number(value.value);\n    } else if (value.kind === graphql__WEBPACK_IMPORTED_MODULE_0__.Kind.BOOLEAN || value.kind === graphql__WEBPACK_IMPORTED_MODULE_0__.Kind.STRING) {\n        argObj[name.value] = value.value;\n    } else if (value.kind === graphql__WEBPACK_IMPORTED_MODULE_0__.Kind.OBJECT) {\n        const nestedArgObj = {};\n        value.fields.map((obj)=>valueToObjectRepresentation(nestedArgObj, obj.name, obj.value, variables));\n        argObj[name.value] = nestedArgObj;\n    } else if (value.kind === graphql__WEBPACK_IMPORTED_MODULE_0__.Kind.VARIABLE) {\n        const variableValue = (variables || {})[value.name.value];\n        argObj[name.value] = variableValue;\n    } else if (value.kind === graphql__WEBPACK_IMPORTED_MODULE_0__.Kind.LIST) {\n        argObj[name.value] = value.values.map((listValue)=>{\n            const nestedArgArrayObj = {};\n            valueToObjectRepresentation(nestedArgArrayObj, name, listValue, variables);\n            return nestedArgArrayObj[name.value];\n        });\n    } else if (value.kind === graphql__WEBPACK_IMPORTED_MODULE_0__.Kind.ENUM) {\n        argObj[name.value] = value.value;\n    } else if (value.kind === graphql__WEBPACK_IMPORTED_MODULE_0__.Kind.NULL) {\n        argObj[name.value] = null;\n    } else {\n        throw (0,_apollo_client_utilities_invariant__WEBPACK_IMPORTED_MODULE_1__.newInvariantError)(19, name.value, value.kind);\n    }\n} //# sourceMappingURL=valueToObjectRepresentation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvaW50ZXJuYWwvdmFsdWVUb09iamVjdFJlcHJlc2VudGF0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUM4QjtBQUV3Qzs7Ozs7R0FHdEUsU0FBZ0IsQ0FBaEIsMEJBQTJDLENBQ3pDLENBREYsS0FDYSxFQUNYLENBRkYsR0FFZ0IsRUFDZCxDQUhGLElBR2tCLEVBQ2hCLENBSkYsUUFJb0IsRUFKcEI7SUFNRSxDQUFGLEdBQU0sQ0FBTixJQUFXLENBQUMsQ0FBWixRQUFxQix5Q0FBSSxDQUFDLENBQTFCLE1BQWlDLENBQWpDLElBQXNDLENBQUMsQ0FBdkMsUUFBZ0QseUNBQUksQ0FBQyxDQUFyRCxJQUEwRCxFQUFFO1FBQ3hELENBQUosS0FBVSxDQUFDLENBQVgsR0FBZSxDQUFDLENBQWhCLElBQXFCLEVBQXJCLEVBQXlCLENBQXpCLEtBQStCLENBQUMsQ0FBaEMsSUFBcUMsQ0FBQyxDQUF0QyxJQUEyQyxDQUFDO0lBQzFDLE9BQU8sQ0FBVCxHQUFhLENBQWIsSUFBa0IsQ0FBQyxDQUFuQixRQUE0Qix5Q0FBSSxDQUFDLENBQWpDLFVBQTRDLENBQTVDLElBQWlELENBQUMsQ0FBbEQsUUFBMkQseUNBQUksQ0FBQyxDQUFoRSxLQUFzRSxFQUFFO1FBQ3BFLENBQUosS0FBVSxDQUFDLENBQVgsR0FBZSxDQUFDLENBQWhCLElBQXFCLEVBQXJCLEVBQXlCLENBQXpCLElBQThCLENBQUMsQ0FBL0IsSUFBb0M7SUFDbEMsT0FBTyxDQUFULEdBQWEsQ0FBYixJQUFrQixDQUFDLENBQW5CLFFBQTRCLHlDQUFJLENBQUMsQ0FBakMsS0FBdUMsRUFBRTtRQUNyQyxDQUFKLEtBQVUsQ0FBVixjQUF5QixDQUF6QixDQUEyQjtRQUN2QixDQUFKLElBQVMsQ0FBQyxDQUFWLEtBQWdCLENBQUMsQ0FBakIsRUFBb0IsQ0FBQyxDQUFDLENBQXRCLEVBQXlCLEVBQUUsQ0FBM0IsMkJBQ2lDLENBQUMsQ0FEbEMsV0FDOEMsRUFBRSxDQURoRCxFQUNtRCxDQUFDLENBRHBELEdBQ3dELEVBQUUsQ0FEMUQsRUFDNkQsQ0FBQyxDQUQ5RCxJQUNtRSxFQUFFLENBRHJFLFFBQzhFLENBQUMsQ0FDMUU7UUFDRCxDQUFKLEtBQVUsQ0FBQyxDQUFYLEdBQWUsQ0FBQyxDQUFoQixJQUFxQixFQUFyQixFQUF5QixDQUF6QixXQUFxQztJQUNuQyxPQUFPLENBQVQsR0FBYSxDQUFiLElBQWtCLENBQUMsQ0FBbkIsUUFBNEIseUNBQUksQ0FBQyxDQUFqQyxPQUF5QyxFQUFFO1FBQ3ZDLENBQUosS0FBVSxDQUFWLGVBQTBCLENBQUMsQ0FBM0IsWUFBeUMsRUFBekMsQ0FBbUQsQ0FBRSxDQUFyRCxJQUEwRCxDQUFDLENBQTNELEdBQStELENBQUMsQ0FBaEUsSUFBcUUsQ0FBQztRQUNsRSxDQUFKLEtBQVUsQ0FBQyxDQUFYLEdBQWUsQ0FBQyxDQUFoQixJQUFxQixFQUFyQixFQUF5QixDQUF6QixZQUFzQztJQUNwQyxPQUFPLENBQVQsR0FBYSxDQUFiLElBQWtCLENBQUMsQ0FBbkIsUUFBNEIseUNBQUksQ0FBQyxDQUFqQyxHQUFxQyxFQUFFO1FBQ25DLENBQUosS0FBVSxDQUFDLENBQVgsR0FBZSxDQUFDLENBQWhCLElBQXFCLEVBQXJCLEVBQXlCLENBQXpCLElBQThCLENBQUMsQ0FBL0IsS0FBcUMsQ0FBQyxDQUF0QyxFQUF5QyxDQUFDLENBQUMsQ0FBM0MsUUFBb0QsRUFBRSxDQUF0RDtZQUNNLENBQU4sS0FBWSxDQUFaLG1CQUFnQyxDQUFoQyxDQUFrQztZQUM1QixDQUFOLDBCQUFpQyxDQUN6QixDQURSLGdCQUN5QixFQUNqQixDQUZSLEdBRVksRUFDSixDQUhSLFFBR2lCLEVBQ1QsQ0FKUixRQUlpQixDQUNWO1lBQ0QsQ0FBTixNQUFjLENBQWQsZ0JBQXVDLENBQUMsQ0FBeEMsR0FBNEMsQ0FBQyxDQUE3QyxJQUFrRCxDQUFDO1FBQy9DLENBQUMsQ0FBQztJQUNKLE9BQU8sQ0FBVCxHQUFhLENBQWIsSUFBa0IsQ0FBQyxDQUFuQixRQUE0Qix5Q0FBSSxDQUFDLENBQWpDLEdBQXFDLEVBQUU7UUFDbkMsQ0FBSixLQUFVLENBQUMsQ0FBWCxHQUFlLENBQUMsQ0FBaEIsSUFBcUIsRUFBckIsRUFBMEIsQ0FBMUIsSUFBaUQsQ0FBQyxDQUFsRCxJQUF1RDtJQUNyRCxPQUFPLENBQVQsR0FBYSxDQUFiLElBQWtCLENBQUMsQ0FBbkIsUUFBNEIseUNBQUksQ0FBQyxDQUFqQyxHQUFxQyxFQUFFO1FBQ25DLENBQUosS0FBVSxDQUFDLENBQVgsR0FBZSxDQUFDLENBQWhCLElBQXFCLEVBQXJCLEVBQXlCLENBQXpCLEdBQTZCO0lBQzNCLE9BQU87UUFDTCxDQUFKLEtBQVUscUZBQVYsS0FJTSxDQUROLEdBQ1UsQ0FBQyxDQURYLE1BRU8sQ0FGUCxJQUVvQixDQUFDLENBRnJCLElBR0s7SUFDSDtBQUNGIiwic291cmNlcyI6WyIvaG9tZS91L1Byb2plY3RzL3NyYy91dGlsaXRpZXMvaW50ZXJuYWwvdmFsdWVUb09iamVjdFJlcHJlc2VudGF0aW9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgRW51bVZhbHVlTm9kZSwgTmFtZU5vZGUsIFZhbHVlTm9kZSB9IGZyb20gXCJncmFwaHFsXCI7XG5pbXBvcnQgeyBLaW5kIH0gZnJvbSBcImdyYXBocWxcIjtcblxuaW1wb3J0IHsgbmV3SW52YXJpYW50RXJyb3IgfSBmcm9tIFwiQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2ludmFyaWFudFwiO1xuXG4vKiogQGludGVybmFsICovXG5leHBvcnQgZnVuY3Rpb24gdmFsdWVUb09iamVjdFJlcHJlc2VudGF0aW9uKFxuICBhcmdPYmo6IGFueSxcbiAgbmFtZTogTmFtZU5vZGUsXG4gIHZhbHVlOiBWYWx1ZU5vZGUsXG4gIHZhcmlhYmxlcz86IE9iamVjdFxuKSB7XG4gIGlmICh2YWx1ZS5raW5kID09PSBLaW5kLklOVCB8fCB2YWx1ZS5raW5kID09PSBLaW5kLkZMT0FUKSB7XG4gICAgYXJnT2JqW25hbWUudmFsdWVdID0gTnVtYmVyKHZhbHVlLnZhbHVlKTtcbiAgfSBlbHNlIGlmICh2YWx1ZS5raW5kID09PSBLaW5kLkJPT0xFQU4gfHwgdmFsdWUua2luZCA9PT0gS2luZC5TVFJJTkcpIHtcbiAgICBhcmdPYmpbbmFtZS52YWx1ZV0gPSB2YWx1ZS52YWx1ZTtcbiAgfSBlbHNlIGlmICh2YWx1ZS5raW5kID09PSBLaW5kLk9CSkVDVCkge1xuICAgIGNvbnN0IG5lc3RlZEFyZ09iaiA9IHt9O1xuICAgIHZhbHVlLmZpZWxkcy5tYXAoKG9iaikgPT5cbiAgICAgIHZhbHVlVG9PYmplY3RSZXByZXNlbnRhdGlvbihuZXN0ZWRBcmdPYmosIG9iai5uYW1lLCBvYmoudmFsdWUsIHZhcmlhYmxlcylcbiAgICApO1xuICAgIGFyZ09ialtuYW1lLnZhbHVlXSA9IG5lc3RlZEFyZ09iajtcbiAgfSBlbHNlIGlmICh2YWx1ZS5raW5kID09PSBLaW5kLlZBUklBQkxFKSB7XG4gICAgY29uc3QgdmFyaWFibGVWYWx1ZSA9ICh2YXJpYWJsZXMgfHwgKHt9IGFzIGFueSkpW3ZhbHVlLm5hbWUudmFsdWVdO1xuICAgIGFyZ09ialtuYW1lLnZhbHVlXSA9IHZhcmlhYmxlVmFsdWU7XG4gIH0gZWxzZSBpZiAodmFsdWUua2luZCA9PT0gS2luZC5MSVNUKSB7XG4gICAgYXJnT2JqW25hbWUudmFsdWVdID0gdmFsdWUudmFsdWVzLm1hcCgobGlzdFZhbHVlKSA9PiB7XG4gICAgICBjb25zdCBuZXN0ZWRBcmdBcnJheU9iaiA9IHt9O1xuICAgICAgdmFsdWVUb09iamVjdFJlcHJlc2VudGF0aW9uKFxuICAgICAgICBuZXN0ZWRBcmdBcnJheU9iaixcbiAgICAgICAgbmFtZSxcbiAgICAgICAgbGlzdFZhbHVlLFxuICAgICAgICB2YXJpYWJsZXNcbiAgICAgICk7XG4gICAgICByZXR1cm4gKG5lc3RlZEFyZ0FycmF5T2JqIGFzIGFueSlbbmFtZS52YWx1ZV07XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAodmFsdWUua2luZCA9PT0gS2luZC5FTlVNKSB7XG4gICAgYXJnT2JqW25hbWUudmFsdWVdID0gKHZhbHVlIGFzIEVudW1WYWx1ZU5vZGUpLnZhbHVlO1xuICB9IGVsc2UgaWYgKHZhbHVlLmtpbmQgPT09IEtpbmQuTlVMTCkge1xuICAgIGFyZ09ialtuYW1lLnZhbHVlXSA9IG51bGw7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3SW52YXJpYW50RXJyb3IoXG4gICAgICBgVGhlIGlubGluZSBhcmd1bWVudCBcIiVzXCIgb2Yga2luZCBcIiVzXCJgICtcbiAgICAgICAgXCJpcyBub3Qgc3VwcG9ydGVkLiBVc2UgdmFyaWFibGVzIGluc3RlYWQgb2YgaW5saW5lIGFyZ3VtZW50cyB0byBcIiArXG4gICAgICAgIFwib3ZlcmNvbWUgdGhpcyBsaW1pdGF0aW9uLlwiLFxuICAgICAgbmFtZS52YWx1ZSxcbiAgICAgICh2YWx1ZSBhcyBhbnkpLmtpbmRcbiAgICApO1xuICB9XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/valueToObjectRepresentation.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/invariant/index.development.js":
/*!******************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/invariant/index.development.js ***!
  \******************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApolloErrorMessageHandler: () => (/* reexport safe */ _index_js__WEBPACK_IMPORTED_MODULE_0__.ApolloErrorMessageHandler),\n/* harmony export */   InvariantError: () => (/* reexport safe */ _index_js__WEBPACK_IMPORTED_MODULE_0__.InvariantError),\n/* harmony export */   invariant: () => (/* binding */ invariant),\n/* harmony export */   newInvariantError: () => (/* reexport safe */ _index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError),\n/* harmony export */   setVerbosity: () => (/* reexport safe */ _index_js__WEBPACK_IMPORTED_MODULE_0__.setVerbosity)\n/* harmony export */ });\n/* harmony import */ var _apollo_client_dev__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @apollo/client/dev */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/dev/loadDevMessages.js\");\n/* harmony import */ var _apollo_client_dev__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @apollo/client/dev */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/dev/loadErrorMessages.js\");\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/invariant/index.js\");\n\n// eslint-disable-next-line no-restricted-syntax\n\n// eslint-disable-next-line local-rules/import-from-export\n\nconst invariant = (()=>{\n    // side effects in an IIFE\n    (0,_apollo_client_dev__WEBPACK_IMPORTED_MODULE_1__.loadDevMessages)();\n    (0,_apollo_client_dev__WEBPACK_IMPORTED_MODULE_2__.loadErrorMessages)();\n    return _index_js__WEBPACK_IMPORTED_MODULE_0__.invariant;\n})(); //# sourceMappingURL=index.development.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvaW52YXJpYW50L2luZGV4LmRldmVsb3BtZW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQXdFO0FBRXhFLGdEQUFnRDtBQUNyQjtBQUMzQiwwREFBMEQ7QUFDRjtBQUNqRCxNQUFNLFNBQVMsR0FBRyxDQUFDLEdBQUcsRUFBRTtJQUM3QiwwQkFBMEI7SUFDMUIsbUVBQWUsRUFBRSxDQUFDO0lBQ2xCLHFFQUFpQixFQUFFLENBQUM7SUFDcEIsT0FBTyxnREFBYSxDQUFDO0NBQ3ZCLENBQUMsQ0FBQyxFQUFHIiwic291cmNlcyI6WyIvaG9tZS91L1Byb2plY3RzL3NyYy91dGlsaXRpZXMvaW52YXJpYW50L2luZGV4LmRldmVsb3BtZW50LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGxvYWREZXZNZXNzYWdlcywgbG9hZEVycm9yTWVzc2FnZXMgfSBmcm9tIFwiQGFwb2xsby9jbGllbnQvZGV2XCI7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuZXhwb3J0ICogZnJvbSBcIi4vaW5kZXguanNcIjtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBsb2NhbC1ydWxlcy9pbXBvcnQtZnJvbS1leHBvcnRcbmltcG9ydCB7IGludmFyaWFudCBhcyBvcmlnSW52YXJpYW50IH0gZnJvbSBcIi4vaW5kZXguanNcIjtcbmV4cG9ydCBjb25zdCBpbnZhcmlhbnQgPSAoKCkgPT4ge1xuICAvLyBzaWRlIGVmZmVjdHMgaW4gYW4gSUlGRVxuICBsb2FkRGV2TWVzc2FnZXMoKTtcbiAgbG9hZEVycm9yTWVzc2FnZXMoKTtcbiAgcmV0dXJuIG9yaWdJbnZhcmlhbnQ7XG59KSgpO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/invariant/index.development.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/invariant/index.js":
/*!******************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/invariant/index.js ***!
  \******************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApolloErrorMessageHandler: () => (/* binding */ ApolloErrorMessageHandler),\n/* harmony export */   InvariantError: () => (/* binding */ InvariantError),\n/* harmony export */   invariant: () => (/* binding */ invariant),\n/* harmony export */   newInvariantError: () => (/* binding */ newInvariantError),\n/* harmony export */   setVerbosity: () => (/* binding */ setVerbosity)\n/* harmony export */ });\n/* harmony import */ var _apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @apollo/client/utilities/environment */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/environment/index.development.js\");\n/* harmony import */ var _apollo_client_utilities_internal_globals__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @apollo/client/utilities/internal/globals */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/globals/global.js\");\n/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../version.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/version.js\");\n/* harmony import */ var _internal_stringifyForDisplay_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../internal/stringifyForDisplay.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/internal/stringifyForDisplay.js\");\n\n\n\n// eslint-disable-next-line local-rules/import-from-inside-other-export\n\nconst genericMessage = \"Invariant Violation\";\nclass InvariantError extends Error {\n    constructor(message = genericMessage){\n        super(message);\n        this.name = genericMessage;\n        Object.setPrototypeOf(this, InvariantError.prototype);\n    }\n}\nconst verbosityLevels = [\n    \"debug\",\n    \"log\",\n    \"warn\",\n    \"error\",\n    \"silent\"\n];\nlet verbosityLevel = verbosityLevels.indexOf(_apollo_client_utilities_environment__WEBPACK_IMPORTED_MODULE_0__.__DEV__ ? \"log\" : \"silent\");\nfunction invariant(condition) {\n    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        args[_key - 1] = arguments[_key];\n    }\n    if (!condition) {\n        throw newInvariantError(...args);\n    }\n}\nfunction wrapConsoleMethod(name) {\n    return function(message) {\n        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n            args[_key - 1] = arguments[_key];\n        }\n        if (verbosityLevels.indexOf(name) >= verbosityLevel) {\n            // Default to console.log if this host environment happens not to provide\n            // all the console.* methods we need.\n            const method = console[name] || console.log;\n            if (typeof message === \"number\") {\n                const arg0 = message;\n                message = getHandledErrorMsg(arg0);\n                if (!message) {\n                    message = getFallbackErrorMsg(arg0, args);\n                    args = [];\n                }\n            }\n            method(message, ...args);\n        }\n    };\n}\ninvariant.debug = wrapConsoleMethod(\"debug\");\ninvariant.log = wrapConsoleMethod(\"log\");\ninvariant.warn = wrapConsoleMethod(\"warn\");\ninvariant.error = wrapConsoleMethod(\"error\");\nfunction setVerbosity(level) {\n    const old = verbosityLevels[verbosityLevel];\n    verbosityLevel = Math.max(0, verbosityLevels.indexOf(level));\n    return old;\n}\n/**\n * Returns an InvariantError.\n *\n * `message` can only be a string, a concatenation of strings, or a ternary statement\n * that results in a string. This will be enforced on build, where the message will\n * be replaced with a message number.\n * String substitutions with %s are supported and will also return\n * pretty-stringified objects.\n * Excess `optionalParams` will be swallowed.\n */ function newInvariantError(message) {\n    for(var _len = arguments.length, optionalParams = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        optionalParams[_key - 1] = arguments[_key];\n    }\n    return new InvariantError(getHandledErrorMsg(message, optionalParams) || getFallbackErrorMsg(message, optionalParams));\n}\n// This is duplicated between `@apollo/client/dev` and `@apollo/client/utilities/invariant` to prevent circular references.\nconst ApolloErrorMessageHandler = Symbol.for(\"ApolloErrorMessageHandler_\" + _version_js__WEBPACK_IMPORTED_MODULE_1__.version);\nfunction stringify(arg) {\n    if (typeof arg == \"string\") {\n        return arg;\n    }\n    try {\n        return (0,_internal_stringifyForDisplay_js__WEBPACK_IMPORTED_MODULE_2__.stringifyForDisplay)(arg, 2).slice(0, 1000);\n    } catch (e) {\n        return \"<non-serializable>\";\n    }\n}\nfunction getHandledErrorMsg(message) {\n    let messageArgs = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];\n    if (!message) return;\n    return _apollo_client_utilities_internal_globals__WEBPACK_IMPORTED_MODULE_3__[\"default\"][ApolloErrorMessageHandler] && _apollo_client_utilities_internal_globals__WEBPACK_IMPORTED_MODULE_3__[\"default\"][ApolloErrorMessageHandler](message, messageArgs.map(stringify));\n}\nfunction getFallbackErrorMsg(message) {\n    let messageArgs = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];\n    if (!message) return;\n    return \"An error occurred! For more details, see the full error text at https://go.apollo.dev/c/err#\".concat(encodeURIComponent(JSON.stringify({\n        version: _version_js__WEBPACK_IMPORTED_MODULE_1__.version,\n        message,\n        args: messageArgs.map(stringify)\n    })));\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/invariant/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/isNetworkRequestInFlight.js":
/*!***************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/isNetworkRequestInFlight.js ***!
  \***************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isNetworkRequestInFlight: () => (/* binding */ isNetworkRequestInFlight)\n/* harmony export */ });\n/* harmony import */ var _isNetworkRequestSettled_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isNetworkRequestSettled.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/isNetworkRequestSettled.js\");\n\n/**\n * Returns true if there is currently a network request in flight according to a given network\n * status.\n */ function isNetworkRequestInFlight(networkStatus) {\n    return !(0,_isNetworkRequestSettled_js__WEBPACK_IMPORTED_MODULE_0__.isNetworkRequestSettled)(networkStatus);\n} //# sourceMappingURL=isNetworkRequestInFlight.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvaXNOZXR3b3JrUmVxdWVzdEluRmxpZ2h0LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBRXVFO0FBRXZFOzs7R0FHRyxDQUNHLFNBQVUsd0JBQXdCLENBQ3RDLGFBQTZCO0lBRTdCLE9BQU8sQ0FBQyxvRkFBdUIsQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUNqRCxDQUFDIiwic291cmNlcyI6WyIvaG9tZS91L1Byb2plY3RzL0NvbGRUcmFjZS9zcmMvdXRpbGl0aWVzL2lzTmV0d29ya1JlcXVlc3RJbkZsaWdodC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IE5ldHdvcmtTdGF0dXMgfSBmcm9tIFwiQGFwb2xsby9jbGllbnRcIjtcblxuaW1wb3J0IHsgaXNOZXR3b3JrUmVxdWVzdFNldHRsZWQgfSBmcm9tIFwiLi9pc05ldHdvcmtSZXF1ZXN0U2V0dGxlZC5qc1wiO1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGVyZSBpcyBjdXJyZW50bHkgYSBuZXR3b3JrIHJlcXVlc3QgaW4gZmxpZ2h0IGFjY29yZGluZyB0byBhIGdpdmVuIG5ldHdvcmtcbiAqIHN0YXR1cy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzTmV0d29ya1JlcXVlc3RJbkZsaWdodChcbiAgbmV0d29ya1N0YXR1cz86IE5ldHdvcmtTdGF0dXNcbik6IGJvb2xlYW4ge1xuICByZXR1cm4gIWlzTmV0d29ya1JlcXVlc3RTZXR0bGVkKG5ldHdvcmtTdGF0dXMpO1xufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/isNetworkRequestInFlight.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/isNetworkRequestSettled.js":
/*!**************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/isNetworkRequestSettled.js ***!
  \**************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isNetworkRequestSettled: () => (/* binding */ isNetworkRequestSettled)\n/* harmony export */ });\n/**\n * Returns true if the network request is in ready or error state according to a given network\n * status.\n */ function isNetworkRequestSettled(networkStatus) {\n    return networkStatus === 7 || networkStatus === 8;\n} //# sourceMappingURL=isNetworkRequestSettled.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvaXNOZXR3b3JrUmVxdWVzdFNldHRsZWQuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUVBOzs7R0FHRyxDQUNHLFNBQVUsdUJBQXVCLENBQ3JDLGFBQTZCO0lBRTdCLE9BQU8sYUFBYSxLQUFLLENBQUMsSUFBSSxhQUFhLEtBQUssQ0FBQyxDQUFDO0FBQ3BELENBQUMiLCJzb3VyY2VzIjpbIi9ob21lL3UvUHJvamVjdHMvQ29sZFRyYWNlL3NyYy91dGlsaXRpZXMvaXNOZXR3b3JrUmVxdWVzdFNldHRsZWQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBOZXR3b3JrU3RhdHVzIH0gZnJvbSBcIkBhcG9sbG8vY2xpZW50XCI7XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBuZXR3b3JrIHJlcXVlc3QgaXMgaW4gcmVhZHkgb3IgZXJyb3Igc3RhdGUgYWNjb3JkaW5nIHRvIGEgZ2l2ZW4gbmV0d29ya1xuICogc3RhdHVzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNOZXR3b3JrUmVxdWVzdFNldHRsZWQoXG4gIG5ldHdvcmtTdGF0dXM/OiBOZXR3b3JrU3RhdHVzXG4pOiBib29sZWFuIHtcbiAgcmV0dXJuIG5ldHdvcmtTdGF0dXMgPT09IDcgfHwgbmV0d29ya1N0YXR1cyA9PT0gODtcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/utilities/isNetworkRequestSettled.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/version.js":
/*!************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/version.js ***!
  \************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   build: () => (/* binding */ build),\n/* harmony export */   version: () => (/* binding */ version)\n/* harmony export */ });\nconst version = \"4.0.3\";\nconst build = \"esm\"; //# sourceMappingURL=version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwb2xsbytjbGllbnRANC4wLjNfZ3JhcGhxbC13c0A2LjAuNl9ncmFwaHFsQDE2LjExLjBfd3NAOC4xOC4zX19ncmFwaHFsQDE2LjExLjBfcmVhY3QtXzVmNWMzZjVkMmNmNTZhZDA3MTA2M2E1YzAwNDFiMmFkL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC92ZXJzaW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQU8sQ0FBUCxLQUFhLENBQWIsZ0JBQXdDO0FBQ2pDLENBQVAsS0FBYSxDQUFiLFlBQXlEIiwic291cmNlcyI6WyIvaG9tZS91L1Byb2plY3RzL0NvbGRUcmFjZS9hcHBzL3NyYy92ZXJzaW9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCB2ZXJzaW9uID0gXCJsb2NhbFwiIGFzIHN0cmluZztcbmV4cG9ydCBjb25zdCBidWlsZCA9IFwic291cmNlXCIgYXMgXCJzb3VyY2VcIiB8IFwiZXNtXCIgfCBcImNqc1wiO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/@apollo+client@4.0.3_graphql-ws@6.0.6_graphql@16.11.0_ws@8.18.3__graphql@16.11.0_react-_5f5c3f5d2cf56ad071063a5c0041b2ad/node_modules/@apollo/client/version.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/error/GraphQLError.mjs":
/*!********************************************************************************************!*\
  !*** ../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/error/GraphQLError.mjs ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GraphQLError: () => (/* binding */ GraphQLError),\n/* harmony export */   formatError: () => (/* binding */ formatError),\n/* harmony export */   printError: () => (/* binding */ printError)\n/* harmony export */ });\n/* harmony import */ var _jsutils_isObjectLike_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../jsutils/isObjectLike.mjs */ \"(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/jsutils/isObjectLike.mjs\");\n/* harmony import */ var _language_location_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../language/location.mjs */ \"(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/location.mjs\");\n/* harmony import */ var _language_printLocation_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../language/printLocation.mjs */ \"(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/printLocation.mjs\");\n\n\n\n\nfunction toNormalizedOptions(args) {\n  const firstArg = args[0];\n\n  if (firstArg == null || 'kind' in firstArg || 'length' in firstArg) {\n    return {\n      nodes: firstArg,\n      source: args[1],\n      positions: args[2],\n      path: args[3],\n      originalError: args[4],\n      extensions: args[5],\n    };\n  }\n\n  return firstArg;\n}\n/**\n * A GraphQLError describes an Error found during the parse, validate, or\n * execute phases of performing a GraphQL operation. In addition to a message\n * and stack trace, it also includes information about the locations in a\n * GraphQL document and/or execution result that correspond to the Error.\n */\n\nclass GraphQLError extends Error {\n  /**\n   * An array of `{ line, column }` locations within the source GraphQL document\n   * which correspond to this error.\n   *\n   * Errors during validation often contain multiple locations, for example to\n   * point out two things with the same name. Errors during execution include a\n   * single location, the field which produced the error.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array describing the JSON-path into the execution response which\n   * corresponds to this error. Only included for errors during execution.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array of GraphQL AST Nodes corresponding to this error.\n   */\n\n  /**\n   * The source GraphQL document for the first location of this error.\n   *\n   * Note that if this Error represents more than one node, the source may not\n   * represent nodes after the first node.\n   */\n\n  /**\n   * An array of character offsets within the source GraphQL document\n   * which correspond to this error.\n   */\n\n  /**\n   * The original error thrown from a field resolver during execution.\n   */\n\n  /**\n   * Extension fields to add to the formatted error.\n   */\n\n  /**\n   * @deprecated Please use the `GraphQLErrorOptions` constructor overload instead.\n   */\n  constructor(message, ...rawArgs) {\n    var _this$nodes, _nodeLocations$, _ref;\n\n    const { nodes, source, positions, path, originalError, extensions } =\n      toNormalizedOptions(rawArgs);\n    super(message);\n    this.name = 'GraphQLError';\n    this.path = path !== null && path !== void 0 ? path : undefined;\n    this.originalError =\n      originalError !== null && originalError !== void 0\n        ? originalError\n        : undefined; // Compute list of blame nodes.\n\n    this.nodes = undefinedIfEmpty(\n      Array.isArray(nodes) ? nodes : nodes ? [nodes] : undefined,\n    );\n    const nodeLocations = undefinedIfEmpty(\n      (_this$nodes = this.nodes) === null || _this$nodes === void 0\n        ? void 0\n        : _this$nodes.map((node) => node.loc).filter((loc) => loc != null),\n    ); // Compute locations in the source for the given nodes/positions.\n\n    this.source =\n      source !== null && source !== void 0\n        ? source\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : (_nodeLocations$ = nodeLocations[0]) === null ||\n          _nodeLocations$ === void 0\n        ? void 0\n        : _nodeLocations$.source;\n    this.positions =\n      positions !== null && positions !== void 0\n        ? positions\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : nodeLocations.map((loc) => loc.start);\n    this.locations =\n      positions && source\n        ? positions.map((pos) => (0,_language_location_mjs__WEBPACK_IMPORTED_MODULE_0__.getLocation)(source, pos))\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : nodeLocations.map((loc) => (0,_language_location_mjs__WEBPACK_IMPORTED_MODULE_0__.getLocation)(loc.source, loc.start));\n    const originalExtensions = (0,_jsutils_isObjectLike_mjs__WEBPACK_IMPORTED_MODULE_1__.isObjectLike)(\n      originalError === null || originalError === void 0\n        ? void 0\n        : originalError.extensions,\n    )\n      ? originalError === null || originalError === void 0\n        ? void 0\n        : originalError.extensions\n      : undefined;\n    this.extensions =\n      (_ref =\n        extensions !== null && extensions !== void 0\n          ? extensions\n          : originalExtensions) !== null && _ref !== void 0\n        ? _ref\n        : Object.create(null); // Only properties prescribed by the spec should be enumerable.\n    // Keep the rest as non-enumerable.\n\n    Object.defineProperties(this, {\n      message: {\n        writable: true,\n        enumerable: true,\n      },\n      name: {\n        enumerable: false,\n      },\n      nodes: {\n        enumerable: false,\n      },\n      source: {\n        enumerable: false,\n      },\n      positions: {\n        enumerable: false,\n      },\n      originalError: {\n        enumerable: false,\n      },\n    }); // Include (non-enumerable) stack trace.\n\n    /* c8 ignore start */\n    // FIXME: https://github.com/graphql/graphql-js/issues/2317\n\n    if (\n      originalError !== null &&\n      originalError !== void 0 &&\n      originalError.stack\n    ) {\n      Object.defineProperty(this, 'stack', {\n        value: originalError.stack,\n        writable: true,\n        configurable: true,\n      });\n    } else if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, GraphQLError);\n    } else {\n      Object.defineProperty(this, 'stack', {\n        value: Error().stack,\n        writable: true,\n        configurable: true,\n      });\n    }\n    /* c8 ignore stop */\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLError';\n  }\n\n  toString() {\n    let output = this.message;\n\n    if (this.nodes) {\n      for (const node of this.nodes) {\n        if (node.loc) {\n          output += '\\n\\n' + (0,_language_printLocation_mjs__WEBPACK_IMPORTED_MODULE_2__.printLocation)(node.loc);\n        }\n      }\n    } else if (this.source && this.locations) {\n      for (const location of this.locations) {\n        output += '\\n\\n' + (0,_language_printLocation_mjs__WEBPACK_IMPORTED_MODULE_2__.printSourceLocation)(this.source, location);\n      }\n    }\n\n    return output;\n  }\n\n  toJSON() {\n    const formattedError = {\n      message: this.message,\n    };\n\n    if (this.locations != null) {\n      formattedError.locations = this.locations;\n    }\n\n    if (this.path != null) {\n      formattedError.path = this.path;\n    }\n\n    if (this.extensions != null && Object.keys(this.extensions).length > 0) {\n      formattedError.extensions = this.extensions;\n    }\n\n    return formattedError;\n  }\n}\n\nfunction undefinedIfEmpty(array) {\n  return array === undefined || array.length === 0 ? undefined : array;\n}\n/**\n * See: https://spec.graphql.org/draft/#sec-Errors\n */\n\n/**\n * Prints a GraphQLError to a string, representing useful location information\n * about the error's position in the source.\n *\n * @deprecated Please use `error.toString` instead. Will be removed in v17\n */\nfunction printError(error) {\n  return error.toString();\n}\n/**\n * Given a GraphQLError, format it according to the rules described by the\n * Response Format, Errors section of the GraphQL Specification.\n *\n * @deprecated Please use `error.toJSON` instead. Will be removed in v17\n */\n\nfunction formatError(error) {\n  return error.toJSON();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/error/GraphQLError.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/error/syntaxError.mjs":
/*!*******************************************************************************************!*\
  !*** ../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/error/syntaxError.mjs ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   syntaxError: () => (/* binding */ syntaxError)\n/* harmony export */ });\n/* harmony import */ var _GraphQLError_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./GraphQLError.mjs */ \"(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/error/GraphQLError.mjs\");\n\n/**\n * Produces a GraphQLError representing a syntax error, containing useful\n * descriptive information about the syntax error's position in the source.\n */\n\nfunction syntaxError(source, position, description) {\n  return new _GraphQLError_mjs__WEBPACK_IMPORTED_MODULE_0__.GraphQLError(`Syntax Error: ${description}`, {\n    source,\n    positions: [position],\n  });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vZ3JhcGhxbEAxNi4xMS4wL25vZGVfbW9kdWxlcy9ncmFwaHFsL2Vycm9yL3N5bnRheEVycm9yLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFrRDtBQUNsRDtBQUNBO0FBQ0E7QUFDQTs7QUFFTztBQUNQLGFBQWEsMkRBQVksa0JBQWtCLFlBQVk7QUFDdkQ7QUFDQTtBQUNBLEdBQUc7QUFDSCIsInNvdXJjZXMiOlsiL2hvbWUvdS9Qcm9qZWN0cy9Db2xkVHJhY2Uvbm9kZV9tb2R1bGVzLy5wbnBtL2dyYXBocWxAMTYuMTEuMC9ub2RlX21vZHVsZXMvZ3JhcGhxbC9lcnJvci9zeW50YXhFcnJvci5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgR3JhcGhRTEVycm9yIH0gZnJvbSAnLi9HcmFwaFFMRXJyb3IubWpzJztcbi8qKlxuICogUHJvZHVjZXMgYSBHcmFwaFFMRXJyb3IgcmVwcmVzZW50aW5nIGEgc3ludGF4IGVycm9yLCBjb250YWluaW5nIHVzZWZ1bFxuICogZGVzY3JpcHRpdmUgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHN5bnRheCBlcnJvcidzIHBvc2l0aW9uIGluIHRoZSBzb3VyY2UuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHN5bnRheEVycm9yKHNvdXJjZSwgcG9zaXRpb24sIGRlc2NyaXB0aW9uKSB7XG4gIHJldHVybiBuZXcgR3JhcGhRTEVycm9yKGBTeW50YXggRXJyb3I6ICR7ZGVzY3JpcHRpb259YCwge1xuICAgIHNvdXJjZSxcbiAgICBwb3NpdGlvbnM6IFtwb3NpdGlvbl0sXG4gIH0pO1xufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/error/syntaxError.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/jsutils/devAssert.mjs":
/*!*******************************************************************************************!*\
  !*** ../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/jsutils/devAssert.mjs ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   devAssert: () => (/* binding */ devAssert)\n/* harmony export */ });\nfunction devAssert(condition, message) {\n  const booleanCondition = Boolean(condition);\n\n  if (!booleanCondition) {\n    throw new Error(message);\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vZ3JhcGhxbEAxNi4xMS4wL25vZGVfbW9kdWxlcy9ncmFwaHFsL2pzdXRpbHMvZGV2QXNzZXJ0Lm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL2hvbWUvdS9Qcm9qZWN0cy9Db2xkVHJhY2Uvbm9kZV9tb2R1bGVzLy5wbnBtL2dyYXBocWxAMTYuMTEuMC9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL2RldkFzc2VydC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGRldkFzc2VydChjb25kaXRpb24sIG1lc3NhZ2UpIHtcbiAgY29uc3QgYm9vbGVhbkNvbmRpdGlvbiA9IEJvb2xlYW4oY29uZGl0aW9uKTtcblxuICBpZiAoIWJvb2xlYW5Db25kaXRpb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/jsutils/devAssert.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/jsutils/inspect.mjs":
/*!*****************************************************************************************!*\
  !*** ../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/jsutils/inspect.mjs ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   inspect: () => (/* binding */ inspect)\n/* harmony export */ });\nconst MAX_ARRAY_LENGTH = 10;\nconst MAX_RECURSIVE_DEPTH = 2;\n/**\n * Used to print values in error messages.\n */\n\nfunction inspect(value) {\n  return formatValue(value, []);\n}\n\nfunction formatValue(value, seenValues) {\n  switch (typeof value) {\n    case 'string':\n      return JSON.stringify(value);\n\n    case 'function':\n      return value.name ? `[function ${value.name}]` : '[function]';\n\n    case 'object':\n      return formatObjectValue(value, seenValues);\n\n    default:\n      return String(value);\n  }\n}\n\nfunction formatObjectValue(value, previouslySeenValues) {\n  if (value === null) {\n    return 'null';\n  }\n\n  if (previouslySeenValues.includes(value)) {\n    return '[Circular]';\n  }\n\n  const seenValues = [...previouslySeenValues, value];\n\n  if (isJSONable(value)) {\n    const jsonValue = value.toJSON(); // check for infinite recursion\n\n    if (jsonValue !== value) {\n      return typeof jsonValue === 'string'\n        ? jsonValue\n        : formatValue(jsonValue, seenValues);\n    }\n  } else if (Array.isArray(value)) {\n    return formatArray(value, seenValues);\n  }\n\n  return formatObject(value, seenValues);\n}\n\nfunction isJSONable(value) {\n  return typeof value.toJSON === 'function';\n}\n\nfunction formatObject(object, seenValues) {\n  const entries = Object.entries(object);\n\n  if (entries.length === 0) {\n    return '{}';\n  }\n\n  if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n    return '[' + getObjectTag(object) + ']';\n  }\n\n  const properties = entries.map(\n    ([key, value]) => key + ': ' + formatValue(value, seenValues),\n  );\n  return '{ ' + properties.join(', ') + ' }';\n}\n\nfunction formatArray(array, seenValues) {\n  if (array.length === 0) {\n    return '[]';\n  }\n\n  if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n    return '[Array]';\n  }\n\n  const len = Math.min(MAX_ARRAY_LENGTH, array.length);\n  const remaining = array.length - len;\n  const items = [];\n\n  for (let i = 0; i < len; ++i) {\n    items.push(formatValue(array[i], seenValues));\n  }\n\n  if (remaining === 1) {\n    items.push('... 1 more item');\n  } else if (remaining > 1) {\n    items.push(`... ${remaining} more items`);\n  }\n\n  return '[' + items.join(', ') + ']';\n}\n\nfunction getObjectTag(object) {\n  const tag = Object.prototype.toString\n    .call(object)\n    .replace(/^\\[object /, '')\n    .replace(/]$/, '');\n\n  if (tag === 'Object' && typeof object.constructor === 'function') {\n    const name = object.constructor.name;\n\n    if (typeof name === 'string' && name !== '') {\n      return name;\n    }\n  }\n\n  return tag;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vZ3JhcGhxbEAxNi4xMS4wL25vZGVfbW9kdWxlcy9ncmFwaHFsL2pzdXRpbHMvaW5zcGVjdC5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsdUNBQXVDLFdBQVc7O0FBRWxEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0Esc0NBQXNDOztBQUV0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLGNBQWM7QUFDZDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBWSwrQkFBK0I7QUFDM0M7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxrQkFBa0IsU0FBUztBQUMzQjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0osc0JBQXNCLFdBQVc7QUFDakM7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsiL2hvbWUvdS9Qcm9qZWN0cy9Db2xkVHJhY2Uvbm9kZV9tb2R1bGVzLy5wbnBtL2dyYXBocWxAMTYuMTEuMC9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL2luc3BlY3QubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IE1BWF9BUlJBWV9MRU5HVEggPSAxMDtcbmNvbnN0IE1BWF9SRUNVUlNJVkVfREVQVEggPSAyO1xuLyoqXG4gKiBVc2VkIHRvIHByaW50IHZhbHVlcyBpbiBlcnJvciBtZXNzYWdlcy5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaW5zcGVjdCh2YWx1ZSkge1xuICByZXR1cm4gZm9ybWF0VmFsdWUodmFsdWUsIFtdKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VmFsdWUodmFsdWUsIHNlZW5WYWx1ZXMpIHtcbiAgc3dpdGNoICh0eXBlb2YgdmFsdWUpIHtcbiAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcblxuICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAgIHJldHVybiB2YWx1ZS5uYW1lID8gYFtmdW5jdGlvbiAke3ZhbHVlLm5hbWV9XWAgOiAnW2Z1bmN0aW9uXSc7XG5cbiAgICBjYXNlICdvYmplY3QnOlxuICAgICAgcmV0dXJuIGZvcm1hdE9iamVjdFZhbHVlKHZhbHVlLCBzZWVuVmFsdWVzKTtcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gU3RyaW5nKHZhbHVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmb3JtYXRPYmplY3RWYWx1ZSh2YWx1ZSwgcHJldmlvdXNseVNlZW5WYWx1ZXMpIHtcbiAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgcmV0dXJuICdudWxsJztcbiAgfVxuXG4gIGlmIChwcmV2aW91c2x5U2VlblZhbHVlcy5pbmNsdWRlcyh2YWx1ZSkpIHtcbiAgICByZXR1cm4gJ1tDaXJjdWxhcl0nO1xuICB9XG5cbiAgY29uc3Qgc2VlblZhbHVlcyA9IFsuLi5wcmV2aW91c2x5U2VlblZhbHVlcywgdmFsdWVdO1xuXG4gIGlmIChpc0pTT05hYmxlKHZhbHVlKSkge1xuICAgIGNvbnN0IGpzb25WYWx1ZSA9IHZhbHVlLnRvSlNPTigpOyAvLyBjaGVjayBmb3IgaW5maW5pdGUgcmVjdXJzaW9uXG5cbiAgICBpZiAoanNvblZhbHVlICE9PSB2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiBqc29uVmFsdWUgPT09ICdzdHJpbmcnXG4gICAgICAgID8ganNvblZhbHVlXG4gICAgICAgIDogZm9ybWF0VmFsdWUoanNvblZhbHVlLCBzZWVuVmFsdWVzKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZm9ybWF0QXJyYXkodmFsdWUsIHNlZW5WYWx1ZXMpO1xuICB9XG5cbiAgcmV0dXJuIGZvcm1hdE9iamVjdCh2YWx1ZSwgc2VlblZhbHVlcyk7XG59XG5cbmZ1bmN0aW9uIGlzSlNPTmFibGUodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZS50b0pTT04gPT09ICdmdW5jdGlvbic7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdE9iamVjdChvYmplY3QsIHNlZW5WYWx1ZXMpIHtcbiAgY29uc3QgZW50cmllcyA9IE9iamVjdC5lbnRyaWVzKG9iamVjdCk7XG5cbiAgaWYgKGVudHJpZXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuICd7fSc7XG4gIH1cblxuICBpZiAoc2VlblZhbHVlcy5sZW5ndGggPiBNQVhfUkVDVVJTSVZFX0RFUFRIKSB7XG4gICAgcmV0dXJuICdbJyArIGdldE9iamVjdFRhZyhvYmplY3QpICsgJ10nO1xuICB9XG5cbiAgY29uc3QgcHJvcGVydGllcyA9IGVudHJpZXMubWFwKFxuICAgIChba2V5LCB2YWx1ZV0pID0+IGtleSArICc6ICcgKyBmb3JtYXRWYWx1ZSh2YWx1ZSwgc2VlblZhbHVlcyksXG4gICk7XG4gIHJldHVybiAneyAnICsgcHJvcGVydGllcy5qb2luKCcsICcpICsgJyB9Jztcbn1cblxuZnVuY3Rpb24gZm9ybWF0QXJyYXkoYXJyYXksIHNlZW5WYWx1ZXMpIHtcbiAgaWYgKGFycmF5Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiAnW10nO1xuICB9XG5cbiAgaWYgKHNlZW5WYWx1ZXMubGVuZ3RoID4gTUFYX1JFQ1VSU0lWRV9ERVBUSCkge1xuICAgIHJldHVybiAnW0FycmF5XSc7XG4gIH1cblxuICBjb25zdCBsZW4gPSBNYXRoLm1pbihNQVhfQVJSQVlfTEVOR1RILCBhcnJheS5sZW5ndGgpO1xuICBjb25zdCByZW1haW5pbmcgPSBhcnJheS5sZW5ndGggLSBsZW47XG4gIGNvbnN0IGl0ZW1zID0gW107XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIGl0ZW1zLnB1c2goZm9ybWF0VmFsdWUoYXJyYXlbaV0sIHNlZW5WYWx1ZXMpKTtcbiAgfVxuXG4gIGlmIChyZW1haW5pbmcgPT09IDEpIHtcbiAgICBpdGVtcy5wdXNoKCcuLi4gMSBtb3JlIGl0ZW0nKTtcbiAgfSBlbHNlIGlmIChyZW1haW5pbmcgPiAxKSB7XG4gICAgaXRlbXMucHVzaChgLi4uICR7cmVtYWluaW5nfSBtb3JlIGl0ZW1zYCk7XG4gIH1cblxuICByZXR1cm4gJ1snICsgaXRlbXMuam9pbignLCAnKSArICddJztcbn1cblxuZnVuY3Rpb24gZ2V0T2JqZWN0VGFnKG9iamVjdCkge1xuICBjb25zdCB0YWcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nXG4gICAgLmNhbGwob2JqZWN0KVxuICAgIC5yZXBsYWNlKC9eXFxbb2JqZWN0IC8sICcnKVxuICAgIC5yZXBsYWNlKC9dJC8sICcnKTtcblxuICBpZiAodGFnID09PSAnT2JqZWN0JyAmJiB0eXBlb2Ygb2JqZWN0LmNvbnN0cnVjdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uc3QgbmFtZSA9IG9iamVjdC5jb25zdHJ1Y3Rvci5uYW1lO1xuXG4gICAgaWYgKHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJyAmJiBuYW1lICE9PSAnJykge1xuICAgICAgcmV0dXJuIG5hbWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhZztcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/jsutils/inspect.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/jsutils/instanceOf.mjs":
/*!********************************************************************************************!*\
  !*** ../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/jsutils/instanceOf.mjs ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   instanceOf: () => (/* binding */ instanceOf)\n/* harmony export */ });\n/* harmony import */ var _inspect_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./inspect.mjs */ \"(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/jsutils/inspect.mjs\");\n\n/* c8 ignore next 3 */\n\nconst isProduction =\n  globalThis.process && // eslint-disable-next-line no-undef\n  \"development\" === 'production';\n/**\n * A replacement for instanceof which includes an error warning when multi-realm\n * constructors are detected.\n * See: https://expressjs.com/en/advanced/best-practice-performance.html#set-node_env-to-production\n * See: https://webpack.js.org/guides/production/\n */\n\nconst instanceOf =\n  /* c8 ignore next 6 */\n  // FIXME: https://github.com/graphql/graphql-js/issues/2317\n  isProduction\n    ? function instanceOf(value, constructor) {\n        return value instanceof constructor;\n      }\n    : function instanceOf(value, constructor) {\n        if (value instanceof constructor) {\n          return true;\n        }\n\n        if (typeof value === 'object' && value !== null) {\n          var _value$constructor;\n\n          // Prefer Symbol.toStringTag since it is immune to minification.\n          const className = constructor.prototype[Symbol.toStringTag];\n          const valueClassName = // We still need to support constructor's name to detect conflicts with older versions of this library.\n            Symbol.toStringTag in value // @ts-expect-error TS bug see, https://github.com/microsoft/TypeScript/issues/38009\n              ? value[Symbol.toStringTag]\n              : (_value$constructor = value.constructor) === null ||\n                _value$constructor === void 0\n              ? void 0\n              : _value$constructor.name;\n\n          if (className === valueClassName) {\n            const stringifiedValue = (0,_inspect_mjs__WEBPACK_IMPORTED_MODULE_0__.inspect)(value);\n            throw new Error(`Cannot use ${className} \"${stringifiedValue}\" from another module or realm.\n\nEnsure that there is only one instance of \"graphql\" in the node_modules\ndirectory. If different versions of \"graphql\" are the dependencies of other\nrelied on modules, use \"resolutions\" to ensure only one version is installed.\n\nhttps://yarnpkg.com/en/docs/selective-version-resolutions\n\nDuplicate \"graphql\" modules cannot be used at the same time since different\nversions may have different capabilities and behavior. The data from one\nversion used in the function from another could produce confusing and\nspurious results.`);\n          }\n        }\n\n        return false;\n      };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vZ3JhcGhxbEAxNi4xMS4wL25vZGVfbW9kdWxlcy9ncmFwaHFsL2pzdXRpbHMvaW5zdGFuY2VPZi5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBd0M7QUFDeEM7O0FBRUE7QUFDQTtBQUNBLEVBQUUsYUFBb0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxxQ0FBcUMscURBQU87QUFDNUMsMENBQTBDLFdBQVcsR0FBRyxpQkFBaUI7O0FBRXpFO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsiL2hvbWUvdS9Qcm9qZWN0cy9Db2xkVHJhY2Uvbm9kZV9tb2R1bGVzLy5wbnBtL2dyYXBocWxAMTYuMTEuMC9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL2luc3RhbmNlT2YubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGluc3BlY3QgfSBmcm9tICcuL2luc3BlY3QubWpzJztcbi8qIGM4IGlnbm9yZSBuZXh0IDMgKi9cblxuY29uc3QgaXNQcm9kdWN0aW9uID1cbiAgZ2xvYmFsVGhpcy5wcm9jZXNzICYmIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nO1xuLyoqXG4gKiBBIHJlcGxhY2VtZW50IGZvciBpbnN0YW5jZW9mIHdoaWNoIGluY2x1ZGVzIGFuIGVycm9yIHdhcm5pbmcgd2hlbiBtdWx0aS1yZWFsbVxuICogY29uc3RydWN0b3JzIGFyZSBkZXRlY3RlZC5cbiAqIFNlZTogaHR0cHM6Ly9leHByZXNzanMuY29tL2VuL2FkdmFuY2VkL2Jlc3QtcHJhY3RpY2UtcGVyZm9ybWFuY2UuaHRtbCNzZXQtbm9kZV9lbnYtdG8tcHJvZHVjdGlvblxuICogU2VlOiBodHRwczovL3dlYnBhY2suanMub3JnL2d1aWRlcy9wcm9kdWN0aW9uL1xuICovXG5cbmV4cG9ydCBjb25zdCBpbnN0YW5jZU9mID1cbiAgLyogYzggaWdub3JlIG5leHQgNiAqL1xuICAvLyBGSVhNRTogaHR0cHM6Ly9naXRodWIuY29tL2dyYXBocWwvZ3JhcGhxbC1qcy9pc3N1ZXMvMjMxN1xuICBpc1Byb2R1Y3Rpb25cbiAgICA/IGZ1bmN0aW9uIGluc3RhbmNlT2YodmFsdWUsIGNvbnN0cnVjdG9yKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIGNvbnN0cnVjdG9yO1xuICAgICAgfVxuICAgIDogZnVuY3Rpb24gaW5zdGFuY2VPZih2YWx1ZSwgY29uc3RydWN0b3IpIHtcbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgY29uc3RydWN0b3IpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICE9PSBudWxsKSB7XG4gICAgICAgICAgdmFyIF92YWx1ZSRjb25zdHJ1Y3RvcjtcblxuICAgICAgICAgIC8vIFByZWZlciBTeW1ib2wudG9TdHJpbmdUYWcgc2luY2UgaXQgaXMgaW1tdW5lIHRvIG1pbmlmaWNhdGlvbi5cbiAgICAgICAgICBjb25zdCBjbGFzc05hbWUgPSBjb25zdHJ1Y3Rvci5wcm90b3R5cGVbU3ltYm9sLnRvU3RyaW5nVGFnXTtcbiAgICAgICAgICBjb25zdCB2YWx1ZUNsYXNzTmFtZSA9IC8vIFdlIHN0aWxsIG5lZWQgdG8gc3VwcG9ydCBjb25zdHJ1Y3RvcidzIG5hbWUgdG8gZGV0ZWN0IGNvbmZsaWN0cyB3aXRoIG9sZGVyIHZlcnNpb25zIG9mIHRoaXMgbGlicmFyeS5cbiAgICAgICAgICAgIFN5bWJvbC50b1N0cmluZ1RhZyBpbiB2YWx1ZSAvLyBAdHMtZXhwZWN0LWVycm9yIFRTIGJ1ZyBzZWUsIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvVHlwZVNjcmlwdC9pc3N1ZXMvMzgwMDlcbiAgICAgICAgICAgICAgPyB2YWx1ZVtTeW1ib2wudG9TdHJpbmdUYWddXG4gICAgICAgICAgICAgIDogKF92YWx1ZSRjb25zdHJ1Y3RvciA9IHZhbHVlLmNvbnN0cnVjdG9yKSA9PT0gbnVsbCB8fFxuICAgICAgICAgICAgICAgIF92YWx1ZSRjb25zdHJ1Y3RvciA9PT0gdm9pZCAwXG4gICAgICAgICAgICAgID8gdm9pZCAwXG4gICAgICAgICAgICAgIDogX3ZhbHVlJGNvbnN0cnVjdG9yLm5hbWU7XG5cbiAgICAgICAgICBpZiAoY2xhc3NOYW1lID09PSB2YWx1ZUNsYXNzTmFtZSkge1xuICAgICAgICAgICAgY29uc3Qgc3RyaW5naWZpZWRWYWx1ZSA9IGluc3BlY3QodmFsdWUpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgdXNlICR7Y2xhc3NOYW1lfSBcIiR7c3RyaW5naWZpZWRWYWx1ZX1cIiBmcm9tIGFub3RoZXIgbW9kdWxlIG9yIHJlYWxtLlxuXG5FbnN1cmUgdGhhdCB0aGVyZSBpcyBvbmx5IG9uZSBpbnN0YW5jZSBvZiBcImdyYXBocWxcIiBpbiB0aGUgbm9kZV9tb2R1bGVzXG5kaXJlY3RvcnkuIElmIGRpZmZlcmVudCB2ZXJzaW9ucyBvZiBcImdyYXBocWxcIiBhcmUgdGhlIGRlcGVuZGVuY2llcyBvZiBvdGhlclxucmVsaWVkIG9uIG1vZHVsZXMsIHVzZSBcInJlc29sdXRpb25zXCIgdG8gZW5zdXJlIG9ubHkgb25lIHZlcnNpb24gaXMgaW5zdGFsbGVkLlxuXG5odHRwczovL3lhcm5wa2cuY29tL2VuL2RvY3Mvc2VsZWN0aXZlLXZlcnNpb24tcmVzb2x1dGlvbnNcblxuRHVwbGljYXRlIFwiZ3JhcGhxbFwiIG1vZHVsZXMgY2Fubm90IGJlIHVzZWQgYXQgdGhlIHNhbWUgdGltZSBzaW5jZSBkaWZmZXJlbnRcbnZlcnNpb25zIG1heSBoYXZlIGRpZmZlcmVudCBjYXBhYmlsaXRpZXMgYW5kIGJlaGF2aW9yLiBUaGUgZGF0YSBmcm9tIG9uZVxudmVyc2lvbiB1c2VkIGluIHRoZSBmdW5jdGlvbiBmcm9tIGFub3RoZXIgY291bGQgcHJvZHVjZSBjb25mdXNpbmcgYW5kXG5zcHVyaW91cyByZXN1bHRzLmApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/jsutils/instanceOf.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/jsutils/invariant.mjs":
/*!*******************************************************************************************!*\
  !*** ../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/jsutils/invariant.mjs ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   invariant: () => (/* binding */ invariant)\n/* harmony export */ });\nfunction invariant(condition, message) {\n  const booleanCondition = Boolean(condition);\n\n  if (!booleanCondition) {\n    throw new Error(\n      message != null ? message : 'Unexpected invariant triggered.',\n    );\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vZ3JhcGhxbEAxNi4xMS4wL25vZGVfbW9kdWxlcy9ncmFwaHFsL2pzdXRpbHMvaW52YXJpYW50Lm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL3UvUHJvamVjdHMvQ29sZFRyYWNlL25vZGVfbW9kdWxlcy8ucG5wbS9ncmFwaHFsQDE2LjExLjAvbm9kZV9tb2R1bGVzL2dyYXBocWwvanN1dGlscy9pbnZhcmlhbnQubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBtZXNzYWdlKSB7XG4gIGNvbnN0IGJvb2xlYW5Db25kaXRpb24gPSBCb29sZWFuKGNvbmRpdGlvbik7XG5cbiAgaWYgKCFib29sZWFuQ29uZGl0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgbWVzc2FnZSAhPSBudWxsID8gbWVzc2FnZSA6ICdVbmV4cGVjdGVkIGludmFyaWFudCB0cmlnZ2VyZWQuJyxcbiAgICApO1xuICB9XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/jsutils/invariant.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/jsutils/isObjectLike.mjs":
/*!**********************************************************************************************!*\
  !*** ../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/jsutils/isObjectLike.mjs ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isObjectLike: () => (/* binding */ isObjectLike)\n/* harmony export */ });\n/**\n * Return true if `value` is object-like. A value is object-like if it's not\n * `null` and has a `typeof` result of \"object\".\n */\nfunction isObjectLike(value) {\n  return typeof value == 'object' && value !== null;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vZ3JhcGhxbEAxNi4xMS4wL25vZGVfbW9kdWxlcy9ncmFwaHFsL2pzdXRpbHMvaXNPYmplY3RMaWtlLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL3UvUHJvamVjdHMvQ29sZFRyYWNlL25vZGVfbW9kdWxlcy8ucG5wbS9ncmFwaHFsQDE2LjExLjAvbm9kZV9tb2R1bGVzL2dyYXBocWwvanN1dGlscy9pc09iamVjdExpa2UubWpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUmV0dXJuIHRydWUgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdFxuICogYG51bGxgIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdvYmplY3QnICYmIHZhbHVlICE9PSBudWxsO1xufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/jsutils/isObjectLike.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/ast.mjs":
/*!**************************************************************************************!*\
  !*** ../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/ast.mjs ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Location: () => (/* binding */ Location),\n/* harmony export */   OperationTypeNode: () => (/* binding */ OperationTypeNode),\n/* harmony export */   QueryDocumentKeys: () => (/* binding */ QueryDocumentKeys),\n/* harmony export */   Token: () => (/* binding */ Token),\n/* harmony export */   isNode: () => (/* binding */ isNode)\n/* harmony export */ });\n/**\n * Contains a range of UTF-8 character offsets and token references that\n * identify the region of the source from which the AST derived.\n */\nclass Location {\n  /**\n   * The character offset at which this Node begins.\n   */\n\n  /**\n   * The character offset at which this Node ends.\n   */\n\n  /**\n   * The Token at which this Node begins.\n   */\n\n  /**\n   * The Token at which this Node ends.\n   */\n\n  /**\n   * The Source document the AST represents.\n   */\n  constructor(startToken, endToken, source) {\n    this.start = startToken.start;\n    this.end = endToken.end;\n    this.startToken = startToken;\n    this.endToken = endToken;\n    this.source = source;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Location';\n  }\n\n  toJSON() {\n    return {\n      start: this.start,\n      end: this.end,\n    };\n  }\n}\n/**\n * Represents a range of characters represented by a lexical token\n * within a Source.\n */\n\nclass Token {\n  /**\n   * The kind of Token.\n   */\n\n  /**\n   * The character offset at which this Node begins.\n   */\n\n  /**\n   * The character offset at which this Node ends.\n   */\n\n  /**\n   * The 1-indexed line number on which this Token appears.\n   */\n\n  /**\n   * The 1-indexed column number at which this Token begins.\n   */\n\n  /**\n   * For non-punctuation tokens, represents the interpreted value of the token.\n   *\n   * Note: is undefined for punctuation tokens, but typed as string for\n   * convenience in the parser.\n   */\n\n  /**\n   * Tokens exist as nodes in a double-linked-list amongst all tokens\n   * including ignored tokens. <SOF> is always the first node and <EOF>\n   * the last.\n   */\n  constructor(kind, start, end, line, column, value) {\n    this.kind = kind;\n    this.start = start;\n    this.end = end;\n    this.line = line;\n    this.column = column; // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n    this.value = value;\n    this.prev = null;\n    this.next = null;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Token';\n  }\n\n  toJSON() {\n    return {\n      kind: this.kind,\n      value: this.value,\n      line: this.line,\n      column: this.column,\n    };\n  }\n}\n/**\n * The list of all possible AST node types.\n */\n\n/**\n * @internal\n */\nconst QueryDocumentKeys = {\n  Name: [],\n  Document: ['definitions'],\n  OperationDefinition: [\n    'name',\n    'variableDefinitions',\n    'directives',\n    'selectionSet',\n  ],\n  VariableDefinition: ['variable', 'type', 'defaultValue', 'directives'],\n  Variable: ['name'],\n  SelectionSet: ['selections'],\n  Field: ['alias', 'name', 'arguments', 'directives', 'selectionSet'],\n  Argument: ['name', 'value'],\n  FragmentSpread: ['name', 'directives'],\n  InlineFragment: ['typeCondition', 'directives', 'selectionSet'],\n  FragmentDefinition: [\n    'name', // Note: fragment variable definitions are deprecated and will removed in v17.0.0\n    'variableDefinitions',\n    'typeCondition',\n    'directives',\n    'selectionSet',\n  ],\n  IntValue: [],\n  FloatValue: [],\n  StringValue: [],\n  BooleanValue: [],\n  NullValue: [],\n  EnumValue: [],\n  ListValue: ['values'],\n  ObjectValue: ['fields'],\n  ObjectField: ['name', 'value'],\n  Directive: ['name', 'arguments'],\n  NamedType: ['name'],\n  ListType: ['type'],\n  NonNullType: ['type'],\n  SchemaDefinition: ['description', 'directives', 'operationTypes'],\n  OperationTypeDefinition: ['type'],\n  ScalarTypeDefinition: ['description', 'name', 'directives'],\n  ObjectTypeDefinition: [\n    'description',\n    'name',\n    'interfaces',\n    'directives',\n    'fields',\n  ],\n  FieldDefinition: ['description', 'name', 'arguments', 'type', 'directives'],\n  InputValueDefinition: [\n    'description',\n    'name',\n    'type',\n    'defaultValue',\n    'directives',\n  ],\n  InterfaceTypeDefinition: [\n    'description',\n    'name',\n    'interfaces',\n    'directives',\n    'fields',\n  ],\n  UnionTypeDefinition: ['description', 'name', 'directives', 'types'],\n  EnumTypeDefinition: ['description', 'name', 'directives', 'values'],\n  EnumValueDefinition: ['description', 'name', 'directives'],\n  InputObjectTypeDefinition: ['description', 'name', 'directives', 'fields'],\n  DirectiveDefinition: ['description', 'name', 'arguments', 'locations'],\n  SchemaExtension: ['directives', 'operationTypes'],\n  ScalarTypeExtension: ['name', 'directives'],\n  ObjectTypeExtension: ['name', 'interfaces', 'directives', 'fields'],\n  InterfaceTypeExtension: ['name', 'interfaces', 'directives', 'fields'],\n  UnionTypeExtension: ['name', 'directives', 'types'],\n  EnumTypeExtension: ['name', 'directives', 'values'],\n  InputObjectTypeExtension: ['name', 'directives', 'fields'],\n};\nconst kindValues = new Set(Object.keys(QueryDocumentKeys));\n/**\n * @internal\n */\n\nfunction isNode(maybeNode) {\n  const maybeKind =\n    maybeNode === null || maybeNode === void 0 ? void 0 : maybeNode.kind;\n  return typeof maybeKind === 'string' && kindValues.has(maybeKind);\n}\n/** Name */\n\nvar OperationTypeNode;\n\n(function (OperationTypeNode) {\n  OperationTypeNode['QUERY'] = 'query';\n  OperationTypeNode['MUTATION'] = 'mutation';\n  OperationTypeNode['SUBSCRIPTION'] = 'subscription';\n})(OperationTypeNode || (OperationTypeNode = {}));\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/ast.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/blockString.mjs":
/*!**********************************************************************************************!*\
  !*** ../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/blockString.mjs ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   dedentBlockStringLines: () => (/* binding */ dedentBlockStringLines),\n/* harmony export */   isPrintableAsBlockString: () => (/* binding */ isPrintableAsBlockString),\n/* harmony export */   printBlockString: () => (/* binding */ printBlockString)\n/* harmony export */ });\n/* harmony import */ var _characterClasses_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./characterClasses.mjs */ \"(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/characterClasses.mjs\");\n\n/**\n * Produces the value of a block string from its parsed raw value, similar to\n * CoffeeScript's block string, Python's docstring trim or Ruby's strip_heredoc.\n *\n * This implements the GraphQL spec's BlockStringValue() static algorithm.\n *\n * @internal\n */\n\nfunction dedentBlockStringLines(lines) {\n  var _firstNonEmptyLine2;\n\n  let commonIndent = Number.MAX_SAFE_INTEGER;\n  let firstNonEmptyLine = null;\n  let lastNonEmptyLine = -1;\n\n  for (let i = 0; i < lines.length; ++i) {\n    var _firstNonEmptyLine;\n\n    const line = lines[i];\n    const indent = leadingWhitespace(line);\n\n    if (indent === line.length) {\n      continue; // skip empty lines\n    }\n\n    firstNonEmptyLine =\n      (_firstNonEmptyLine = firstNonEmptyLine) !== null &&\n      _firstNonEmptyLine !== void 0\n        ? _firstNonEmptyLine\n        : i;\n    lastNonEmptyLine = i;\n\n    if (i !== 0 && indent < commonIndent) {\n      commonIndent = indent;\n    }\n  }\n\n  return lines // Remove common indentation from all lines but first.\n    .map((line, i) => (i === 0 ? line : line.slice(commonIndent))) // Remove leading and trailing blank lines.\n    .slice(\n      (_firstNonEmptyLine2 = firstNonEmptyLine) !== null &&\n        _firstNonEmptyLine2 !== void 0\n        ? _firstNonEmptyLine2\n        : 0,\n      lastNonEmptyLine + 1,\n    );\n}\n\nfunction leadingWhitespace(str) {\n  let i = 0;\n\n  while (i < str.length && (0,_characterClasses_mjs__WEBPACK_IMPORTED_MODULE_0__.isWhiteSpace)(str.charCodeAt(i))) {\n    ++i;\n  }\n\n  return i;\n}\n/**\n * @internal\n */\n\nfunction isPrintableAsBlockString(value) {\n  if (value === '') {\n    return true; // empty string is printable\n  }\n\n  let isEmptyLine = true;\n  let hasIndent = false;\n  let hasCommonIndent = true;\n  let seenNonEmptyLine = false;\n\n  for (let i = 0; i < value.length; ++i) {\n    switch (value.codePointAt(i)) {\n      case 0x0000:\n      case 0x0001:\n      case 0x0002:\n      case 0x0003:\n      case 0x0004:\n      case 0x0005:\n      case 0x0006:\n      case 0x0007:\n      case 0x0008:\n      case 0x000b:\n      case 0x000c:\n      case 0x000e:\n      case 0x000f:\n        return false;\n      // Has non-printable characters\n\n      case 0x000d:\n        //  \\r\n        return false;\n      // Has \\r or \\r\\n which will be replaced as \\n\n\n      case 10:\n        //  \\n\n        if (isEmptyLine && !seenNonEmptyLine) {\n          return false; // Has leading new line\n        }\n\n        seenNonEmptyLine = true;\n        isEmptyLine = true;\n        hasIndent = false;\n        break;\n\n      case 9: //   \\t\n\n      case 32:\n        //  <space>\n        hasIndent || (hasIndent = isEmptyLine);\n        break;\n\n      default:\n        hasCommonIndent && (hasCommonIndent = hasIndent);\n        isEmptyLine = false;\n    }\n  }\n\n  if (isEmptyLine) {\n    return false; // Has trailing empty lines\n  }\n\n  if (hasCommonIndent && seenNonEmptyLine) {\n    return false; // Has internal indent\n  }\n\n  return true;\n}\n/**\n * Print a block string in the indented block form by adding a leading and\n * trailing blank line. However, if a block string starts with whitespace and is\n * a single-line, adding a leading blank line would strip that whitespace.\n *\n * @internal\n */\n\nfunction printBlockString(value, options) {\n  const escapedValue = value.replace(/\"\"\"/g, '\\\\\"\"\"'); // Expand a block string's raw value into independent lines.\n\n  const lines = escapedValue.split(/\\r\\n|[\\n\\r]/g);\n  const isSingleLine = lines.length === 1; // If common indentation is found we can fix some of those cases by adding leading new line\n\n  const forceLeadingNewLine =\n    lines.length > 1 &&\n    lines\n      .slice(1)\n      .every((line) => line.length === 0 || (0,_characterClasses_mjs__WEBPACK_IMPORTED_MODULE_0__.isWhiteSpace)(line.charCodeAt(0))); // Trailing triple quotes just looks confusing but doesn't force trailing new line\n\n  const hasTrailingTripleQuotes = escapedValue.endsWith('\\\\\"\"\"'); // Trailing quote (single or double) or slash forces trailing new line\n\n  const hasTrailingQuote = value.endsWith('\"') && !hasTrailingTripleQuotes;\n  const hasTrailingSlash = value.endsWith('\\\\');\n  const forceTrailingNewline = hasTrailingQuote || hasTrailingSlash;\n  const printAsMultipleLines =\n    !(options !== null && options !== void 0 && options.minimize) && // add leading and trailing new lines only if it improves readability\n    (!isSingleLine ||\n      value.length > 70 ||\n      forceTrailingNewline ||\n      forceLeadingNewLine ||\n      hasTrailingTripleQuotes);\n  let result = ''; // Format a multi-line block quote to account for leading space.\n\n  const skipLeadingNewLine = isSingleLine && (0,_characterClasses_mjs__WEBPACK_IMPORTED_MODULE_0__.isWhiteSpace)(value.charCodeAt(0));\n\n  if ((printAsMultipleLines && !skipLeadingNewLine) || forceLeadingNewLine) {\n    result += '\\n';\n  }\n\n  result += escapedValue;\n\n  if (printAsMultipleLines || forceTrailingNewline) {\n    result += '\\n';\n  }\n\n  return '\"\"\"' + result + '\"\"\"';\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/blockString.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/characterClasses.mjs":
/*!***************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/characterClasses.mjs ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isDigit: () => (/* binding */ isDigit),\n/* harmony export */   isLetter: () => (/* binding */ isLetter),\n/* harmony export */   isNameContinue: () => (/* binding */ isNameContinue),\n/* harmony export */   isNameStart: () => (/* binding */ isNameStart),\n/* harmony export */   isWhiteSpace: () => (/* binding */ isWhiteSpace)\n/* harmony export */ });\n/**\n * ```\n * WhiteSpace ::\n *   - \"Horizontal Tab (U+0009)\"\n *   - \"Space (U+0020)\"\n * ```\n * @internal\n */\nfunction isWhiteSpace(code) {\n  return code === 0x0009 || code === 0x0020;\n}\n/**\n * ```\n * Digit :: one of\n *   - `0` `1` `2` `3` `4` `5` `6` `7` `8` `9`\n * ```\n * @internal\n */\n\nfunction isDigit(code) {\n  return code >= 0x0030 && code <= 0x0039;\n}\n/**\n * ```\n * Letter :: one of\n *   - `A` `B` `C` `D` `E` `F` `G` `H` `I` `J` `K` `L` `M`\n *   - `N` `O` `P` `Q` `R` `S` `T` `U` `V` `W` `X` `Y` `Z`\n *   - `a` `b` `c` `d` `e` `f` `g` `h` `i` `j` `k` `l` `m`\n *   - `n` `o` `p` `q` `r` `s` `t` `u` `v` `w` `x` `y` `z`\n * ```\n * @internal\n */\n\nfunction isLetter(code) {\n  return (\n    (code >= 0x0061 && code <= 0x007a) || // A-Z\n    (code >= 0x0041 && code <= 0x005a) // a-z\n  );\n}\n/**\n * ```\n * NameStart ::\n *   - Letter\n *   - `_`\n * ```\n * @internal\n */\n\nfunction isNameStart(code) {\n  return isLetter(code) || code === 0x005f;\n}\n/**\n * ```\n * NameContinue ::\n *   - Letter\n *   - Digit\n *   - `_`\n * ```\n * @internal\n */\n\nfunction isNameContinue(code) {\n  return isLetter(code) || isDigit(code) || code === 0x005f;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vZ3JhcGhxbEAxNi4xMS4wL25vZGVfbW9kdWxlcy9ncmFwaHFsL2xhbmd1YWdlL2NoYXJhY3RlckNsYXNzZXMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVPO0FBQ1A7QUFDQSIsInNvdXJjZXMiOlsiL2hvbWUvdS9Qcm9qZWN0cy9Db2xkVHJhY2Uvbm9kZV9tb2R1bGVzLy5wbnBtL2dyYXBocWxAMTYuMTEuMC9ub2RlX21vZHVsZXMvZ3JhcGhxbC9sYW5ndWFnZS9jaGFyYWN0ZXJDbGFzc2VzLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIGBgYFxuICogV2hpdGVTcGFjZSA6OlxuICogICAtIFwiSG9yaXpvbnRhbCBUYWIgKFUrMDAwOSlcIlxuICogICAtIFwiU3BhY2UgKFUrMDAyMClcIlxuICogYGBgXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzV2hpdGVTcGFjZShjb2RlKSB7XG4gIHJldHVybiBjb2RlID09PSAweDAwMDkgfHwgY29kZSA9PT0gMHgwMDIwO1xufVxuLyoqXG4gKiBgYGBcbiAqIERpZ2l0IDo6IG9uZSBvZlxuICogICAtIGAwYCBgMWAgYDJgIGAzYCBgNGAgYDVgIGA2YCBgN2AgYDhgIGA5YFxuICogYGBgXG4gKiBAaW50ZXJuYWxcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaXNEaWdpdChjb2RlKSB7XG4gIHJldHVybiBjb2RlID49IDB4MDAzMCAmJiBjb2RlIDw9IDB4MDAzOTtcbn1cbi8qKlxuICogYGBgXG4gKiBMZXR0ZXIgOjogb25lIG9mXG4gKiAgIC0gYEFgIGBCYCBgQ2AgYERgIGBFYCBgRmAgYEdgIGBIYCBgSWAgYEpgIGBLYCBgTGAgYE1gXG4gKiAgIC0gYE5gIGBPYCBgUGAgYFFgIGBSYCBgU2AgYFRgIGBVYCBgVmAgYFdgIGBYYCBgWWAgYFpgXG4gKiAgIC0gYGFgIGBiYCBgY2AgYGRgIGBlYCBgZmAgYGdgIGBoYCBgaWAgYGpgIGBrYCBgbGAgYG1gXG4gKiAgIC0gYG5gIGBvYCBgcGAgYHFgIGByYCBgc2AgYHRgIGB1YCBgdmAgYHdgIGB4YCBgeWAgYHpgXG4gKiBgYGBcbiAqIEBpbnRlcm5hbFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBpc0xldHRlcihjb2RlKSB7XG4gIHJldHVybiAoXG4gICAgKGNvZGUgPj0gMHgwMDYxICYmIGNvZGUgPD0gMHgwMDdhKSB8fCAvLyBBLVpcbiAgICAoY29kZSA+PSAweDAwNDEgJiYgY29kZSA8PSAweDAwNWEpIC8vIGEtelxuICApO1xufVxuLyoqXG4gKiBgYGBcbiAqIE5hbWVTdGFydCA6OlxuICogICAtIExldHRlclxuICogICAtIGBfYFxuICogYGBgXG4gKiBAaW50ZXJuYWxcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaXNOYW1lU3RhcnQoY29kZSkge1xuICByZXR1cm4gaXNMZXR0ZXIoY29kZSkgfHwgY29kZSA9PT0gMHgwMDVmO1xufVxuLyoqXG4gKiBgYGBcbiAqIE5hbWVDb250aW51ZSA6OlxuICogICAtIExldHRlclxuICogICAtIERpZ2l0XG4gKiAgIC0gYF9gXG4gKiBgYGBcbiAqIEBpbnRlcm5hbFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBpc05hbWVDb250aW51ZShjb2RlKSB7XG4gIHJldHVybiBpc0xldHRlcihjb2RlKSB8fCBpc0RpZ2l0KGNvZGUpIHx8IGNvZGUgPT09IDB4MDA1Zjtcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/characterClasses.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/directiveLocation.mjs":
/*!****************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/directiveLocation.mjs ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DirectiveLocation: () => (/* binding */ DirectiveLocation)\n/* harmony export */ });\n/**\n * The set of allowed directive location values.\n */\nvar DirectiveLocation;\n\n(function (DirectiveLocation) {\n  DirectiveLocation['QUERY'] = 'QUERY';\n  DirectiveLocation['MUTATION'] = 'MUTATION';\n  DirectiveLocation['SUBSCRIPTION'] = 'SUBSCRIPTION';\n  DirectiveLocation['FIELD'] = 'FIELD';\n  DirectiveLocation['FRAGMENT_DEFINITION'] = 'FRAGMENT_DEFINITION';\n  DirectiveLocation['FRAGMENT_SPREAD'] = 'FRAGMENT_SPREAD';\n  DirectiveLocation['INLINE_FRAGMENT'] = 'INLINE_FRAGMENT';\n  DirectiveLocation['VARIABLE_DEFINITION'] = 'VARIABLE_DEFINITION';\n  DirectiveLocation['SCHEMA'] = 'SCHEMA';\n  DirectiveLocation['SCALAR'] = 'SCALAR';\n  DirectiveLocation['OBJECT'] = 'OBJECT';\n  DirectiveLocation['FIELD_DEFINITION'] = 'FIELD_DEFINITION';\n  DirectiveLocation['ARGUMENT_DEFINITION'] = 'ARGUMENT_DEFINITION';\n  DirectiveLocation['INTERFACE'] = 'INTERFACE';\n  DirectiveLocation['UNION'] = 'UNION';\n  DirectiveLocation['ENUM'] = 'ENUM';\n  DirectiveLocation['ENUM_VALUE'] = 'ENUM_VALUE';\n  DirectiveLocation['INPUT_OBJECT'] = 'INPUT_OBJECT';\n  DirectiveLocation['INPUT_FIELD_DEFINITION'] = 'INPUT_FIELD_DEFINITION';\n})(DirectiveLocation || (DirectiveLocation = {}));\n\n\n/**\n * The enum type representing the directive location values.\n *\n * @deprecated Please use `DirectiveLocation`. Will be remove in v17.\n */\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vZ3JhcGhxbEAxNi4xMS4wL25vZGVfbW9kdWxlcy9ncmFwaHFsL2xhbmd1YWdlL2RpcmVjdGl2ZUxvY2F0aW9uLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsOENBQThDOztBQUVsQjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvaG9tZS91L1Byb2plY3RzL0NvbGRUcmFjZS9ub2RlX21vZHVsZXMvLnBucG0vZ3JhcGhxbEAxNi4xMS4wL25vZGVfbW9kdWxlcy9ncmFwaHFsL2xhbmd1YWdlL2RpcmVjdGl2ZUxvY2F0aW9uLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoZSBzZXQgb2YgYWxsb3dlZCBkaXJlY3RpdmUgbG9jYXRpb24gdmFsdWVzLlxuICovXG52YXIgRGlyZWN0aXZlTG9jYXRpb247XG5cbihmdW5jdGlvbiAoRGlyZWN0aXZlTG9jYXRpb24pIHtcbiAgRGlyZWN0aXZlTG9jYXRpb25bJ1FVRVJZJ10gPSAnUVVFUlknO1xuICBEaXJlY3RpdmVMb2NhdGlvblsnTVVUQVRJT04nXSA9ICdNVVRBVElPTic7XG4gIERpcmVjdGl2ZUxvY2F0aW9uWydTVUJTQ1JJUFRJT04nXSA9ICdTVUJTQ1JJUFRJT04nO1xuICBEaXJlY3RpdmVMb2NhdGlvblsnRklFTEQnXSA9ICdGSUVMRCc7XG4gIERpcmVjdGl2ZUxvY2F0aW9uWydGUkFHTUVOVF9ERUZJTklUSU9OJ10gPSAnRlJBR01FTlRfREVGSU5JVElPTic7XG4gIERpcmVjdGl2ZUxvY2F0aW9uWydGUkFHTUVOVF9TUFJFQUQnXSA9ICdGUkFHTUVOVF9TUFJFQUQnO1xuICBEaXJlY3RpdmVMb2NhdGlvblsnSU5MSU5FX0ZSQUdNRU5UJ10gPSAnSU5MSU5FX0ZSQUdNRU5UJztcbiAgRGlyZWN0aXZlTG9jYXRpb25bJ1ZBUklBQkxFX0RFRklOSVRJT04nXSA9ICdWQVJJQUJMRV9ERUZJTklUSU9OJztcbiAgRGlyZWN0aXZlTG9jYXRpb25bJ1NDSEVNQSddID0gJ1NDSEVNQSc7XG4gIERpcmVjdGl2ZUxvY2F0aW9uWydTQ0FMQVInXSA9ICdTQ0FMQVInO1xuICBEaXJlY3RpdmVMb2NhdGlvblsnT0JKRUNUJ10gPSAnT0JKRUNUJztcbiAgRGlyZWN0aXZlTG9jYXRpb25bJ0ZJRUxEX0RFRklOSVRJT04nXSA9ICdGSUVMRF9ERUZJTklUSU9OJztcbiAgRGlyZWN0aXZlTG9jYXRpb25bJ0FSR1VNRU5UX0RFRklOSVRJT04nXSA9ICdBUkdVTUVOVF9ERUZJTklUSU9OJztcbiAgRGlyZWN0aXZlTG9jYXRpb25bJ0lOVEVSRkFDRSddID0gJ0lOVEVSRkFDRSc7XG4gIERpcmVjdGl2ZUxvY2F0aW9uWydVTklPTiddID0gJ1VOSU9OJztcbiAgRGlyZWN0aXZlTG9jYXRpb25bJ0VOVU0nXSA9ICdFTlVNJztcbiAgRGlyZWN0aXZlTG9jYXRpb25bJ0VOVU1fVkFMVUUnXSA9ICdFTlVNX1ZBTFVFJztcbiAgRGlyZWN0aXZlTG9jYXRpb25bJ0lOUFVUX09CSkVDVCddID0gJ0lOUFVUX09CSkVDVCc7XG4gIERpcmVjdGl2ZUxvY2F0aW9uWydJTlBVVF9GSUVMRF9ERUZJTklUSU9OJ10gPSAnSU5QVVRfRklFTERfREVGSU5JVElPTic7XG59KShEaXJlY3RpdmVMb2NhdGlvbiB8fCAoRGlyZWN0aXZlTG9jYXRpb24gPSB7fSkpO1xuXG5leHBvcnQgeyBEaXJlY3RpdmVMb2NhdGlvbiB9O1xuLyoqXG4gKiBUaGUgZW51bSB0eXBlIHJlcHJlc2VudGluZyB0aGUgZGlyZWN0aXZlIGxvY2F0aW9uIHZhbHVlcy5cbiAqXG4gKiBAZGVwcmVjYXRlZCBQbGVhc2UgdXNlIGBEaXJlY3RpdmVMb2NhdGlvbmAuIFdpbGwgYmUgcmVtb3ZlIGluIHYxNy5cbiAqL1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/directiveLocation.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/kinds.mjs":
/*!****************************************************************************************!*\
  !*** ../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/kinds.mjs ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Kind: () => (/* binding */ Kind)\n/* harmony export */ });\n/**\n * The set of allowed kind values for AST nodes.\n */\nvar Kind;\n\n(function (Kind) {\n  Kind['NAME'] = 'Name';\n  Kind['DOCUMENT'] = 'Document';\n  Kind['OPERATION_DEFINITION'] = 'OperationDefinition';\n  Kind['VARIABLE_DEFINITION'] = 'VariableDefinition';\n  Kind['SELECTION_SET'] = 'SelectionSet';\n  Kind['FIELD'] = 'Field';\n  Kind['ARGUMENT'] = 'Argument';\n  Kind['FRAGMENT_SPREAD'] = 'FragmentSpread';\n  Kind['INLINE_FRAGMENT'] = 'InlineFragment';\n  Kind['FRAGMENT_DEFINITION'] = 'FragmentDefinition';\n  Kind['VARIABLE'] = 'Variable';\n  Kind['INT'] = 'IntValue';\n  Kind['FLOAT'] = 'FloatValue';\n  Kind['STRING'] = 'StringValue';\n  Kind['BOOLEAN'] = 'BooleanValue';\n  Kind['NULL'] = 'NullValue';\n  Kind['ENUM'] = 'EnumValue';\n  Kind['LIST'] = 'ListValue';\n  Kind['OBJECT'] = 'ObjectValue';\n  Kind['OBJECT_FIELD'] = 'ObjectField';\n  Kind['DIRECTIVE'] = 'Directive';\n  Kind['NAMED_TYPE'] = 'NamedType';\n  Kind['LIST_TYPE'] = 'ListType';\n  Kind['NON_NULL_TYPE'] = 'NonNullType';\n  Kind['SCHEMA_DEFINITION'] = 'SchemaDefinition';\n  Kind['OPERATION_TYPE_DEFINITION'] = 'OperationTypeDefinition';\n  Kind['SCALAR_TYPE_DEFINITION'] = 'ScalarTypeDefinition';\n  Kind['OBJECT_TYPE_DEFINITION'] = 'ObjectTypeDefinition';\n  Kind['FIELD_DEFINITION'] = 'FieldDefinition';\n  Kind['INPUT_VALUE_DEFINITION'] = 'InputValueDefinition';\n  Kind['INTERFACE_TYPE_DEFINITION'] = 'InterfaceTypeDefinition';\n  Kind['UNION_TYPE_DEFINITION'] = 'UnionTypeDefinition';\n  Kind['ENUM_TYPE_DEFINITION'] = 'EnumTypeDefinition';\n  Kind['ENUM_VALUE_DEFINITION'] = 'EnumValueDefinition';\n  Kind['INPUT_OBJECT_TYPE_DEFINITION'] = 'InputObjectTypeDefinition';\n  Kind['DIRECTIVE_DEFINITION'] = 'DirectiveDefinition';\n  Kind['SCHEMA_EXTENSION'] = 'SchemaExtension';\n  Kind['SCALAR_TYPE_EXTENSION'] = 'ScalarTypeExtension';\n  Kind['OBJECT_TYPE_EXTENSION'] = 'ObjectTypeExtension';\n  Kind['INTERFACE_TYPE_EXTENSION'] = 'InterfaceTypeExtension';\n  Kind['UNION_TYPE_EXTENSION'] = 'UnionTypeExtension';\n  Kind['ENUM_TYPE_EXTENSION'] = 'EnumTypeExtension';\n  Kind['INPUT_OBJECT_TYPE_EXTENSION'] = 'InputObjectTypeExtension';\n})(Kind || (Kind = {}));\n\n\n/**\n * The enum type representing the possible kind values of AST nodes.\n *\n * @deprecated Please use `Kind`. Will be remove in v17.\n */\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vZ3JhcGhxbEAxNi4xMS4wL25vZGVfbW9kdWxlcy9ncmFwaHFsL2xhbmd1YWdlL2tpbmRzLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsb0JBQW9COztBQUVMO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL3UvUHJvamVjdHMvQ29sZFRyYWNlL25vZGVfbW9kdWxlcy8ucG5wbS9ncmFwaHFsQDE2LjExLjAvbm9kZV9tb2R1bGVzL2dyYXBocWwvbGFuZ3VhZ2Uva2luZHMubWpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhlIHNldCBvZiBhbGxvd2VkIGtpbmQgdmFsdWVzIGZvciBBU1Qgbm9kZXMuXG4gKi9cbnZhciBLaW5kO1xuXG4oZnVuY3Rpb24gKEtpbmQpIHtcbiAgS2luZFsnTkFNRSddID0gJ05hbWUnO1xuICBLaW5kWydET0NVTUVOVCddID0gJ0RvY3VtZW50JztcbiAgS2luZFsnT1BFUkFUSU9OX0RFRklOSVRJT04nXSA9ICdPcGVyYXRpb25EZWZpbml0aW9uJztcbiAgS2luZFsnVkFSSUFCTEVfREVGSU5JVElPTiddID0gJ1ZhcmlhYmxlRGVmaW5pdGlvbic7XG4gIEtpbmRbJ1NFTEVDVElPTl9TRVQnXSA9ICdTZWxlY3Rpb25TZXQnO1xuICBLaW5kWydGSUVMRCddID0gJ0ZpZWxkJztcbiAgS2luZFsnQVJHVU1FTlQnXSA9ICdBcmd1bWVudCc7XG4gIEtpbmRbJ0ZSQUdNRU5UX1NQUkVBRCddID0gJ0ZyYWdtZW50U3ByZWFkJztcbiAgS2luZFsnSU5MSU5FX0ZSQUdNRU5UJ10gPSAnSW5saW5lRnJhZ21lbnQnO1xuICBLaW5kWydGUkFHTUVOVF9ERUZJTklUSU9OJ10gPSAnRnJhZ21lbnREZWZpbml0aW9uJztcbiAgS2luZFsnVkFSSUFCTEUnXSA9ICdWYXJpYWJsZSc7XG4gIEtpbmRbJ0lOVCddID0gJ0ludFZhbHVlJztcbiAgS2luZFsnRkxPQVQnXSA9ICdGbG9hdFZhbHVlJztcbiAgS2luZFsnU1RSSU5HJ10gPSAnU3RyaW5nVmFsdWUnO1xuICBLaW5kWydCT09MRUFOJ10gPSAnQm9vbGVhblZhbHVlJztcbiAgS2luZFsnTlVMTCddID0gJ051bGxWYWx1ZSc7XG4gIEtpbmRbJ0VOVU0nXSA9ICdFbnVtVmFsdWUnO1xuICBLaW5kWydMSVNUJ10gPSAnTGlzdFZhbHVlJztcbiAgS2luZFsnT0JKRUNUJ10gPSAnT2JqZWN0VmFsdWUnO1xuICBLaW5kWydPQkpFQ1RfRklFTEQnXSA9ICdPYmplY3RGaWVsZCc7XG4gIEtpbmRbJ0RJUkVDVElWRSddID0gJ0RpcmVjdGl2ZSc7XG4gIEtpbmRbJ05BTUVEX1RZUEUnXSA9ICdOYW1lZFR5cGUnO1xuICBLaW5kWydMSVNUX1RZUEUnXSA9ICdMaXN0VHlwZSc7XG4gIEtpbmRbJ05PTl9OVUxMX1RZUEUnXSA9ICdOb25OdWxsVHlwZSc7XG4gIEtpbmRbJ1NDSEVNQV9ERUZJTklUSU9OJ10gPSAnU2NoZW1hRGVmaW5pdGlvbic7XG4gIEtpbmRbJ09QRVJBVElPTl9UWVBFX0RFRklOSVRJT04nXSA9ICdPcGVyYXRpb25UeXBlRGVmaW5pdGlvbic7XG4gIEtpbmRbJ1NDQUxBUl9UWVBFX0RFRklOSVRJT04nXSA9ICdTY2FsYXJUeXBlRGVmaW5pdGlvbic7XG4gIEtpbmRbJ09CSkVDVF9UWVBFX0RFRklOSVRJT04nXSA9ICdPYmplY3RUeXBlRGVmaW5pdGlvbic7XG4gIEtpbmRbJ0ZJRUxEX0RFRklOSVRJT04nXSA9ICdGaWVsZERlZmluaXRpb24nO1xuICBLaW5kWydJTlBVVF9WQUxVRV9ERUZJTklUSU9OJ10gPSAnSW5wdXRWYWx1ZURlZmluaXRpb24nO1xuICBLaW5kWydJTlRFUkZBQ0VfVFlQRV9ERUZJTklUSU9OJ10gPSAnSW50ZXJmYWNlVHlwZURlZmluaXRpb24nO1xuICBLaW5kWydVTklPTl9UWVBFX0RFRklOSVRJT04nXSA9ICdVbmlvblR5cGVEZWZpbml0aW9uJztcbiAgS2luZFsnRU5VTV9UWVBFX0RFRklOSVRJT04nXSA9ICdFbnVtVHlwZURlZmluaXRpb24nO1xuICBLaW5kWydFTlVNX1ZBTFVFX0RFRklOSVRJT04nXSA9ICdFbnVtVmFsdWVEZWZpbml0aW9uJztcbiAgS2luZFsnSU5QVVRfT0JKRUNUX1RZUEVfREVGSU5JVElPTiddID0gJ0lucHV0T2JqZWN0VHlwZURlZmluaXRpb24nO1xuICBLaW5kWydESVJFQ1RJVkVfREVGSU5JVElPTiddID0gJ0RpcmVjdGl2ZURlZmluaXRpb24nO1xuICBLaW5kWydTQ0hFTUFfRVhURU5TSU9OJ10gPSAnU2NoZW1hRXh0ZW5zaW9uJztcbiAgS2luZFsnU0NBTEFSX1RZUEVfRVhURU5TSU9OJ10gPSAnU2NhbGFyVHlwZUV4dGVuc2lvbic7XG4gIEtpbmRbJ09CSkVDVF9UWVBFX0VYVEVOU0lPTiddID0gJ09iamVjdFR5cGVFeHRlbnNpb24nO1xuICBLaW5kWydJTlRFUkZBQ0VfVFlQRV9FWFRFTlNJT04nXSA9ICdJbnRlcmZhY2VUeXBlRXh0ZW5zaW9uJztcbiAgS2luZFsnVU5JT05fVFlQRV9FWFRFTlNJT04nXSA9ICdVbmlvblR5cGVFeHRlbnNpb24nO1xuICBLaW5kWydFTlVNX1RZUEVfRVhURU5TSU9OJ10gPSAnRW51bVR5cGVFeHRlbnNpb24nO1xuICBLaW5kWydJTlBVVF9PQkpFQ1RfVFlQRV9FWFRFTlNJT04nXSA9ICdJbnB1dE9iamVjdFR5cGVFeHRlbnNpb24nO1xufSkoS2luZCB8fCAoS2luZCA9IHt9KSk7XG5cbmV4cG9ydCB7IEtpbmQgfTtcbi8qKlxuICogVGhlIGVudW0gdHlwZSByZXByZXNlbnRpbmcgdGhlIHBvc3NpYmxlIGtpbmQgdmFsdWVzIG9mIEFTVCBub2Rlcy5cbiAqXG4gKiBAZGVwcmVjYXRlZCBQbGVhc2UgdXNlIGBLaW5kYC4gV2lsbCBiZSByZW1vdmUgaW4gdjE3LlxuICovXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/kinds.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/lexer.mjs":
/*!****************************************************************************************!*\
  !*** ../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/lexer.mjs ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Lexer: () => (/* binding */ Lexer),\n/* harmony export */   isPunctuatorTokenKind: () => (/* binding */ isPunctuatorTokenKind)\n/* harmony export */ });\n/* harmony import */ var _error_syntaxError_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../error/syntaxError.mjs */ \"(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/error/syntaxError.mjs\");\n/* harmony import */ var _ast_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ast.mjs */ \"(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/ast.mjs\");\n/* harmony import */ var _blockString_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./blockString.mjs */ \"(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/blockString.mjs\");\n/* harmony import */ var _characterClasses_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./characterClasses.mjs */ \"(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/characterClasses.mjs\");\n/* harmony import */ var _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tokenKind.mjs */ \"(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/tokenKind.mjs\");\n\n\n\n\n\n/**\n * Given a Source object, creates a Lexer for that source.\n * A Lexer is a stateful stream generator in that every time\n * it is advanced, it returns the next token in the Source. Assuming the\n * source lexes, the final Token emitted by the lexer will be of kind\n * EOF, after which the lexer will repeatedly return the same EOF token\n * whenever called.\n */\n\nclass Lexer {\n  /**\n   * The previously focused non-ignored token.\n   */\n\n  /**\n   * The currently focused non-ignored token.\n   */\n\n  /**\n   * The (1-indexed) line containing the current token.\n   */\n\n  /**\n   * The character offset at which the current line begins.\n   */\n  constructor(source) {\n    const startOfFileToken = new _ast_mjs__WEBPACK_IMPORTED_MODULE_0__.Token(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.SOF, 0, 0, 0, 0);\n    this.source = source;\n    this.lastToken = startOfFileToken;\n    this.token = startOfFileToken;\n    this.line = 1;\n    this.lineStart = 0;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Lexer';\n  }\n  /**\n   * Advances the token stream to the next non-ignored token.\n   */\n\n  advance() {\n    this.lastToken = this.token;\n    const token = (this.token = this.lookahead());\n    return token;\n  }\n  /**\n   * Looks ahead and returns the next non-ignored token, but does not change\n   * the state of Lexer.\n   */\n\n  lookahead() {\n    let token = this.token;\n\n    if (token.kind !== _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.EOF) {\n      do {\n        if (token.next) {\n          token = token.next;\n        } else {\n          // Read the next token and form a link in the token linked-list.\n          const nextToken = readNextToken(this, token.end); // @ts-expect-error next is only mutable during parsing.\n\n          token.next = nextToken; // @ts-expect-error prev is only mutable during parsing.\n\n          nextToken.prev = token;\n          token = nextToken;\n        }\n      } while (token.kind === _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.COMMENT);\n    }\n\n    return token;\n  }\n}\n/**\n * @internal\n */\n\nfunction isPunctuatorTokenKind(kind) {\n  return (\n    kind === _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.BANG ||\n    kind === _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.DOLLAR ||\n    kind === _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.AMP ||\n    kind === _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.PAREN_L ||\n    kind === _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.PAREN_R ||\n    kind === _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.SPREAD ||\n    kind === _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.COLON ||\n    kind === _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.EQUALS ||\n    kind === _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.AT ||\n    kind === _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.BRACKET_L ||\n    kind === _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.BRACKET_R ||\n    kind === _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.BRACE_L ||\n    kind === _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.PIPE ||\n    kind === _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.BRACE_R\n  );\n}\n/**\n * A Unicode scalar value is any Unicode code point except surrogate code\n * points. In other words, the inclusive ranges of values 0x0000 to 0xD7FF and\n * 0xE000 to 0x10FFFF.\n *\n * SourceCharacter ::\n *   - \"Any Unicode scalar value\"\n */\n\nfunction isUnicodeScalarValue(code) {\n  return (\n    (code >= 0x0000 && code <= 0xd7ff) || (code >= 0xe000 && code <= 0x10ffff)\n  );\n}\n/**\n * The GraphQL specification defines source text as a sequence of unicode scalar\n * values (which Unicode defines to exclude surrogate code points). However\n * JavaScript defines strings as a sequence of UTF-16 code units which may\n * include surrogates. A surrogate pair is a valid source character as it\n * encodes a supplementary code point (above U+FFFF), but unpaired surrogate\n * code points are not valid source characters.\n */\n\nfunction isSupplementaryCodePoint(body, location) {\n  return (\n    isLeadingSurrogate(body.charCodeAt(location)) &&\n    isTrailingSurrogate(body.charCodeAt(location + 1))\n  );\n}\n\nfunction isLeadingSurrogate(code) {\n  return code >= 0xd800 && code <= 0xdbff;\n}\n\nfunction isTrailingSurrogate(code) {\n  return code >= 0xdc00 && code <= 0xdfff;\n}\n/**\n * Prints the code point (or end of file reference) at a given location in a\n * source for use in error messages.\n *\n * Printable ASCII is printed quoted, while other points are printed in Unicode\n * code point form (ie. U+1234).\n */\n\nfunction printCodePointAt(lexer, location) {\n  const code = lexer.source.body.codePointAt(location);\n\n  if (code === undefined) {\n    return _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.EOF;\n  } else if (code >= 0x0020 && code <= 0x007e) {\n    // Printable ASCII\n    const char = String.fromCodePoint(code);\n    return char === '\"' ? \"'\\\"'\" : `\"${char}\"`;\n  } // Unicode code point\n\n  return 'U+' + code.toString(16).toUpperCase().padStart(4, '0');\n}\n/**\n * Create a token with line and column location information.\n */\n\nfunction createToken(lexer, kind, start, end, value) {\n  const line = lexer.line;\n  const col = 1 + start - lexer.lineStart;\n  return new _ast_mjs__WEBPACK_IMPORTED_MODULE_0__.Token(kind, start, end, line, col, value);\n}\n/**\n * Gets the next token from the source starting at the given position.\n *\n * This skips over whitespace until it finds the next lexable token, then lexes\n * punctuators immediately or calls the appropriate helper function for more\n * complicated tokens.\n */\n\nfunction readNextToken(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // SourceCharacter\n\n    switch (code) {\n      // Ignored ::\n      //   - UnicodeBOM\n      //   - WhiteSpace\n      //   - LineTerminator\n      //   - Comment\n      //   - Comma\n      //\n      // UnicodeBOM :: \"Byte Order Mark (U+FEFF)\"\n      //\n      // WhiteSpace ::\n      //   - \"Horizontal Tab (U+0009)\"\n      //   - \"Space (U+0020)\"\n      //\n      // Comma :: ,\n      case 0xfeff: // <BOM>\n\n      case 0x0009: // \\t\n\n      case 0x0020: // <space>\n\n      case 0x002c:\n        // ,\n        ++position;\n        continue;\n      // LineTerminator ::\n      //   - \"New Line (U+000A)\"\n      //   - \"Carriage Return (U+000D)\" [lookahead != \"New Line (U+000A)\"]\n      //   - \"Carriage Return (U+000D)\" \"New Line (U+000A)\"\n\n      case 0x000a:\n        // \\n\n        ++position;\n        ++lexer.line;\n        lexer.lineStart = position;\n        continue;\n\n      case 0x000d:\n        // \\r\n        if (body.charCodeAt(position + 1) === 0x000a) {\n          position += 2;\n        } else {\n          ++position;\n        }\n\n        ++lexer.line;\n        lexer.lineStart = position;\n        continue;\n      // Comment\n\n      case 0x0023:\n        // #\n        return readComment(lexer, position);\n      // Token ::\n      //   - Punctuator\n      //   - Name\n      //   - IntValue\n      //   - FloatValue\n      //   - StringValue\n      //\n      // Punctuator :: one of ! $ & ( ) ... : = @ [ ] { | }\n\n      case 0x0021:\n        // !\n        return createToken(lexer, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.BANG, position, position + 1);\n\n      case 0x0024:\n        // $\n        return createToken(lexer, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.DOLLAR, position, position + 1);\n\n      case 0x0026:\n        // &\n        return createToken(lexer, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.AMP, position, position + 1);\n\n      case 0x0028:\n        // (\n        return createToken(lexer, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.PAREN_L, position, position + 1);\n\n      case 0x0029:\n        // )\n        return createToken(lexer, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.PAREN_R, position, position + 1);\n\n      case 0x002e:\n        // .\n        if (\n          body.charCodeAt(position + 1) === 0x002e &&\n          body.charCodeAt(position + 2) === 0x002e\n        ) {\n          return createToken(lexer, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.SPREAD, position, position + 3);\n        }\n\n        break;\n\n      case 0x003a:\n        // :\n        return createToken(lexer, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.COLON, position, position + 1);\n\n      case 0x003d:\n        // =\n        return createToken(lexer, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.EQUALS, position, position + 1);\n\n      case 0x0040:\n        // @\n        return createToken(lexer, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.AT, position, position + 1);\n\n      case 0x005b:\n        // [\n        return createToken(lexer, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.BRACKET_L, position, position + 1);\n\n      case 0x005d:\n        // ]\n        return createToken(lexer, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.BRACKET_R, position, position + 1);\n\n      case 0x007b:\n        // {\n        return createToken(lexer, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.BRACE_L, position, position + 1);\n\n      case 0x007c:\n        // |\n        return createToken(lexer, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.PIPE, position, position + 1);\n\n      case 0x007d:\n        // }\n        return createToken(lexer, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.BRACE_R, position, position + 1);\n      // StringValue\n\n      case 0x0022:\n        // \"\n        if (\n          body.charCodeAt(position + 1) === 0x0022 &&\n          body.charCodeAt(position + 2) === 0x0022\n        ) {\n          return readBlockString(lexer, position);\n        }\n\n        return readString(lexer, position);\n    } // IntValue | FloatValue (Digit | -)\n\n    if ((0,_characterClasses_mjs__WEBPACK_IMPORTED_MODULE_2__.isDigit)(code) || code === 0x002d) {\n      return readNumber(lexer, position, code);\n    } // Name\n\n    if ((0,_characterClasses_mjs__WEBPACK_IMPORTED_MODULE_2__.isNameStart)(code)) {\n      return readName(lexer, position);\n    }\n\n    throw (0,_error_syntaxError_mjs__WEBPACK_IMPORTED_MODULE_3__.syntaxError)(\n      lexer.source,\n      position,\n      code === 0x0027\n        ? 'Unexpected single quote character (\\'), did you mean to use a double quote (\")?'\n        : isUnicodeScalarValue(code) || isSupplementaryCodePoint(body, position)\n        ? `Unexpected character: ${printCodePointAt(lexer, position)}.`\n        : `Invalid character: ${printCodePointAt(lexer, position)}.`,\n    );\n  }\n\n  return createToken(lexer, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.EOF, bodyLength, bodyLength);\n}\n/**\n * Reads a comment token from the source file.\n *\n * ```\n * Comment :: # CommentChar* [lookahead != CommentChar]\n *\n * CommentChar :: SourceCharacter but not LineTerminator\n * ```\n */\n\nfunction readComment(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // LineTerminator (\\n | \\r)\n\n    if (code === 0x000a || code === 0x000d) {\n      break;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      break;\n    }\n  }\n\n  return createToken(\n    lexer,\n    _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.COMMENT,\n    start,\n    position,\n    body.slice(start + 1, position),\n  );\n}\n/**\n * Reads a number token from the source file, either a FloatValue or an IntValue\n * depending on whether a FractionalPart or ExponentPart is encountered.\n *\n * ```\n * IntValue :: IntegerPart [lookahead != {Digit, `.`, NameStart}]\n *\n * IntegerPart ::\n *   - NegativeSign? 0\n *   - NegativeSign? NonZeroDigit Digit*\n *\n * NegativeSign :: -\n *\n * NonZeroDigit :: Digit but not `0`\n *\n * FloatValue ::\n *   - IntegerPart FractionalPart ExponentPart [lookahead != {Digit, `.`, NameStart}]\n *   - IntegerPart FractionalPart [lookahead != {Digit, `.`, NameStart}]\n *   - IntegerPart ExponentPart [lookahead != {Digit, `.`, NameStart}]\n *\n * FractionalPart :: . Digit+\n *\n * ExponentPart :: ExponentIndicator Sign? Digit+\n *\n * ExponentIndicator :: one of `e` `E`\n *\n * Sign :: one of + -\n * ```\n */\n\nfunction readNumber(lexer, start, firstCode) {\n  const body = lexer.source.body;\n  let position = start;\n  let code = firstCode;\n  let isFloat = false; // NegativeSign (-)\n\n  if (code === 0x002d) {\n    code = body.charCodeAt(++position);\n  } // Zero (0)\n\n  if (code === 0x0030) {\n    code = body.charCodeAt(++position);\n\n    if ((0,_characterClasses_mjs__WEBPACK_IMPORTED_MODULE_2__.isDigit)(code)) {\n      throw (0,_error_syntaxError_mjs__WEBPACK_IMPORTED_MODULE_3__.syntaxError)(\n        lexer.source,\n        position,\n        `Invalid number, unexpected digit after 0: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  } else {\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // Full stop (.)\n\n  if (code === 0x002e) {\n    isFloat = true;\n    code = body.charCodeAt(++position);\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // E e\n\n  if (code === 0x0045 || code === 0x0065) {\n    isFloat = true;\n    code = body.charCodeAt(++position); // + -\n\n    if (code === 0x002b || code === 0x002d) {\n      code = body.charCodeAt(++position);\n    }\n\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // Numbers cannot be followed by . or NameStart\n\n  if (code === 0x002e || (0,_characterClasses_mjs__WEBPACK_IMPORTED_MODULE_2__.isNameStart)(code)) {\n    throw (0,_error_syntaxError_mjs__WEBPACK_IMPORTED_MODULE_3__.syntaxError)(\n      lexer.source,\n      position,\n      `Invalid number, expected digit but got: ${printCodePointAt(\n        lexer,\n        position,\n      )}.`,\n    );\n  }\n\n  return createToken(\n    lexer,\n    isFloat ? _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.FLOAT : _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.INT,\n    start,\n    position,\n    body.slice(start, position),\n  );\n}\n/**\n * Returns the new position in the source after reading one or more digits.\n */\n\nfunction readDigits(lexer, start, firstCode) {\n  if (!(0,_characterClasses_mjs__WEBPACK_IMPORTED_MODULE_2__.isDigit)(firstCode)) {\n    throw (0,_error_syntaxError_mjs__WEBPACK_IMPORTED_MODULE_3__.syntaxError)(\n      lexer.source,\n      start,\n      `Invalid number, expected digit but got: ${printCodePointAt(\n        lexer,\n        start,\n      )}.`,\n    );\n  }\n\n  const body = lexer.source.body;\n  let position = start + 1; // +1 to skip first firstCode\n\n  while ((0,_characterClasses_mjs__WEBPACK_IMPORTED_MODULE_2__.isDigit)(body.charCodeAt(position))) {\n    ++position;\n  }\n\n  return position;\n}\n/**\n * Reads a single-quote string token from the source file.\n *\n * ```\n * StringValue ::\n *   - `\"\"` [lookahead != `\"`]\n *   - `\"` StringCharacter+ `\"`\n *\n * StringCharacter ::\n *   - SourceCharacter but not `\"` or `\\` or LineTerminator\n *   - `\\u` EscapedUnicode\n *   - `\\` EscapedCharacter\n *\n * EscapedUnicode ::\n *   - `{` HexDigit+ `}`\n *   - HexDigit HexDigit HexDigit HexDigit\n *\n * EscapedCharacter :: one of `\"` `\\` `/` `b` `f` `n` `r` `t`\n * ```\n */\n\nfunction readString(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n  let chunkStart = position;\n  let value = '';\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // Closing Quote (\")\n\n    if (code === 0x0022) {\n      value += body.slice(chunkStart, position);\n      return createToken(lexer, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.STRING, start, position + 1, value);\n    } // Escape Sequence (\\)\n\n    if (code === 0x005c) {\n      value += body.slice(chunkStart, position);\n      const escape =\n        body.charCodeAt(position + 1) === 0x0075 // u\n          ? body.charCodeAt(position + 2) === 0x007b // {\n            ? readEscapedUnicodeVariableWidth(lexer, position)\n            : readEscapedUnicodeFixedWidth(lexer, position)\n          : readEscapedCharacter(lexer, position);\n      value += escape.value;\n      position += escape.size;\n      chunkStart = position;\n      continue;\n    } // LineTerminator (\\n | \\r)\n\n    if (code === 0x000a || code === 0x000d) {\n      break;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      throw (0,_error_syntaxError_mjs__WEBPACK_IMPORTED_MODULE_3__.syntaxError)(\n        lexer.source,\n        position,\n        `Invalid character within String: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  }\n\n  throw (0,_error_syntaxError_mjs__WEBPACK_IMPORTED_MODULE_3__.syntaxError)(lexer.source, position, 'Unterminated string.');\n} // The string value and lexed size of an escape sequence.\n\nfunction readEscapedUnicodeVariableWidth(lexer, position) {\n  const body = lexer.source.body;\n  let point = 0;\n  let size = 3; // Cannot be larger than 12 chars (\\u{00000000}).\n\n  while (size < 12) {\n    const code = body.charCodeAt(position + size++); // Closing Brace (})\n\n    if (code === 0x007d) {\n      // Must be at least 5 chars (\\u{0}) and encode a Unicode scalar value.\n      if (size < 5 || !isUnicodeScalarValue(point)) {\n        break;\n      }\n\n      return {\n        value: String.fromCodePoint(point),\n        size,\n      };\n    } // Append this hex digit to the code point.\n\n    point = (point << 4) | readHexDigit(code);\n\n    if (point < 0) {\n      break;\n    }\n  }\n\n  throw (0,_error_syntaxError_mjs__WEBPACK_IMPORTED_MODULE_3__.syntaxError)(\n    lexer.source,\n    position,\n    `Invalid Unicode escape sequence: \"${body.slice(\n      position,\n      position + size,\n    )}\".`,\n  );\n}\n\nfunction readEscapedUnicodeFixedWidth(lexer, position) {\n  const body = lexer.source.body;\n  const code = read16BitHexCode(body, position + 2);\n\n  if (isUnicodeScalarValue(code)) {\n    return {\n      value: String.fromCodePoint(code),\n      size: 6,\n    };\n  } // GraphQL allows JSON-style surrogate pair escape sequences, but only when\n  // a valid pair is formed.\n\n  if (isLeadingSurrogate(code)) {\n    // \\u\n    if (\n      body.charCodeAt(position + 6) === 0x005c &&\n      body.charCodeAt(position + 7) === 0x0075\n    ) {\n      const trailingCode = read16BitHexCode(body, position + 8);\n\n      if (isTrailingSurrogate(trailingCode)) {\n        // JavaScript defines strings as a sequence of UTF-16 code units and\n        // encodes Unicode code points above U+FFFF using a surrogate pair of\n        // code units. Since this is a surrogate pair escape sequence, just\n        // include both codes into the JavaScript string value. Had JavaScript\n        // not been internally based on UTF-16, then this surrogate pair would\n        // be decoded to retrieve the supplementary code point.\n        return {\n          value: String.fromCodePoint(code, trailingCode),\n          size: 12,\n        };\n      }\n    }\n  }\n\n  throw (0,_error_syntaxError_mjs__WEBPACK_IMPORTED_MODULE_3__.syntaxError)(\n    lexer.source,\n    position,\n    `Invalid Unicode escape sequence: \"${body.slice(position, position + 6)}\".`,\n  );\n}\n/**\n * Reads four hexadecimal characters and returns the positive integer that 16bit\n * hexadecimal string represents. For example, \"000f\" will return 15, and \"dead\"\n * will return 57005.\n *\n * Returns a negative number if any char was not a valid hexadecimal digit.\n */\n\nfunction read16BitHexCode(body, position) {\n  // readHexDigit() returns -1 on error. ORing a negative value with any other\n  // value always produces a negative value.\n  return (\n    (readHexDigit(body.charCodeAt(position)) << 12) |\n    (readHexDigit(body.charCodeAt(position + 1)) << 8) |\n    (readHexDigit(body.charCodeAt(position + 2)) << 4) |\n    readHexDigit(body.charCodeAt(position + 3))\n  );\n}\n/**\n * Reads a hexadecimal character and returns its positive integer value (0-15).\n *\n * '0' becomes 0, '9' becomes 9\n * 'A' becomes 10, 'F' becomes 15\n * 'a' becomes 10, 'f' becomes 15\n *\n * Returns -1 if the provided character code was not a valid hexadecimal digit.\n *\n * HexDigit :: one of\n *   - `0` `1` `2` `3` `4` `5` `6` `7` `8` `9`\n *   - `A` `B` `C` `D` `E` `F`\n *   - `a` `b` `c` `d` `e` `f`\n */\n\nfunction readHexDigit(code) {\n  return code >= 0x0030 && code <= 0x0039 // 0-9\n    ? code - 0x0030\n    : code >= 0x0041 && code <= 0x0046 // A-F\n    ? code - 0x0037\n    : code >= 0x0061 && code <= 0x0066 // a-f\n    ? code - 0x0057\n    : -1;\n}\n/**\n * | Escaped Character | Code Point | Character Name               |\n * | ----------------- | ---------- | ---------------------------- |\n * | `\"`               | U+0022     | double quote                 |\n * | `\\`               | U+005C     | reverse solidus (back slash) |\n * | `/`               | U+002F     | solidus (forward slash)      |\n * | `b`               | U+0008     | backspace                    |\n * | `f`               | U+000C     | form feed                    |\n * | `n`               | U+000A     | line feed (new line)         |\n * | `r`               | U+000D     | carriage return              |\n * | `t`               | U+0009     | horizontal tab               |\n */\n\nfunction readEscapedCharacter(lexer, position) {\n  const body = lexer.source.body;\n  const code = body.charCodeAt(position + 1);\n\n  switch (code) {\n    case 0x0022:\n      // \"\n      return {\n        value: '\\u0022',\n        size: 2,\n      };\n\n    case 0x005c:\n      // \\\n      return {\n        value: '\\u005c',\n        size: 2,\n      };\n\n    case 0x002f:\n      // /\n      return {\n        value: '\\u002f',\n        size: 2,\n      };\n\n    case 0x0062:\n      // b\n      return {\n        value: '\\u0008',\n        size: 2,\n      };\n\n    case 0x0066:\n      // f\n      return {\n        value: '\\u000c',\n        size: 2,\n      };\n\n    case 0x006e:\n      // n\n      return {\n        value: '\\u000a',\n        size: 2,\n      };\n\n    case 0x0072:\n      // r\n      return {\n        value: '\\u000d',\n        size: 2,\n      };\n\n    case 0x0074:\n      // t\n      return {\n        value: '\\u0009',\n        size: 2,\n      };\n  }\n\n  throw (0,_error_syntaxError_mjs__WEBPACK_IMPORTED_MODULE_3__.syntaxError)(\n    lexer.source,\n    position,\n    `Invalid character escape sequence: \"${body.slice(\n      position,\n      position + 2,\n    )}\".`,\n  );\n}\n/**\n * Reads a block string token from the source file.\n *\n * ```\n * StringValue ::\n *   - `\"\"\"` BlockStringCharacter* `\"\"\"`\n *\n * BlockStringCharacter ::\n *   - SourceCharacter but not `\"\"\"` or `\\\"\"\"`\n *   - `\\\"\"\"`\n * ```\n */\n\nfunction readBlockString(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let lineStart = lexer.lineStart;\n  let position = start + 3;\n  let chunkStart = position;\n  let currentLine = '';\n  const blockLines = [];\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // Closing Triple-Quote (\"\"\")\n\n    if (\n      code === 0x0022 &&\n      body.charCodeAt(position + 1) === 0x0022 &&\n      body.charCodeAt(position + 2) === 0x0022\n    ) {\n      currentLine += body.slice(chunkStart, position);\n      blockLines.push(currentLine);\n      const token = createToken(\n        lexer,\n        _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.BLOCK_STRING,\n        start,\n        position + 3, // Return a string of the lines joined with U+000A.\n        (0,_blockString_mjs__WEBPACK_IMPORTED_MODULE_4__.dedentBlockStringLines)(blockLines).join('\\n'),\n      );\n      lexer.line += blockLines.length - 1;\n      lexer.lineStart = lineStart;\n      return token;\n    } // Escaped Triple-Quote (\\\"\"\")\n\n    if (\n      code === 0x005c &&\n      body.charCodeAt(position + 1) === 0x0022 &&\n      body.charCodeAt(position + 2) === 0x0022 &&\n      body.charCodeAt(position + 3) === 0x0022\n    ) {\n      currentLine += body.slice(chunkStart, position);\n      chunkStart = position + 1; // skip only slash\n\n      position += 4;\n      continue;\n    } // LineTerminator\n\n    if (code === 0x000a || code === 0x000d) {\n      currentLine += body.slice(chunkStart, position);\n      blockLines.push(currentLine);\n\n      if (code === 0x000d && body.charCodeAt(position + 1) === 0x000a) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      currentLine = '';\n      chunkStart = position;\n      lineStart = position;\n      continue;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      throw (0,_error_syntaxError_mjs__WEBPACK_IMPORTED_MODULE_3__.syntaxError)(\n        lexer.source,\n        position,\n        `Invalid character within String: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  }\n\n  throw (0,_error_syntaxError_mjs__WEBPACK_IMPORTED_MODULE_3__.syntaxError)(lexer.source, position, 'Unterminated string.');\n}\n/**\n * Reads an alphanumeric + underscore name from the source.\n *\n * ```\n * Name ::\n *   - NameStart NameContinue* [lookahead != NameContinue]\n * ```\n */\n\nfunction readName(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position);\n\n    if ((0,_characterClasses_mjs__WEBPACK_IMPORTED_MODULE_2__.isNameContinue)(code)) {\n      ++position;\n    } else {\n      break;\n    }\n  }\n\n  return createToken(\n    lexer,\n    _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.NAME,\n    start,\n    position,\n    body.slice(start, position),\n  );\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/lexer.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/location.mjs":
/*!*******************************************************************************************!*\
  !*** ../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/location.mjs ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getLocation: () => (/* binding */ getLocation)\n/* harmony export */ });\n/* harmony import */ var _jsutils_invariant_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsutils/invariant.mjs */ \"(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/jsutils/invariant.mjs\");\n\nconst LineRegExp = /\\r\\n|[\\n\\r]/g;\n/**\n * Represents a location in a Source.\n */\n\n/**\n * Takes a Source and a UTF-8 character offset, and returns the corresponding\n * line and column as a SourceLocation.\n */\nfunction getLocation(source, position) {\n  let lastLineStart = 0;\n  let line = 1;\n\n  for (const match of source.body.matchAll(LineRegExp)) {\n    typeof match.index === 'number' || (0,_jsutils_invariant_mjs__WEBPACK_IMPORTED_MODULE_0__.invariant)(false);\n\n    if (match.index >= position) {\n      break;\n    }\n\n    lastLineStart = match.index + match[0].length;\n    line += 1;\n  }\n\n  return {\n    line,\n    column: position + 1 - lastLineStart,\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vZ3JhcGhxbEAxNi4xMS4wL25vZGVfbW9kdWxlcy9ncmFwaHFsL2xhbmd1YWdlL2xvY2F0aW9uLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFxRDtBQUNyRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBLHVDQUF1QyxpRUFBUzs7QUFFaEQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvaG9tZS91L1Byb2plY3RzL0NvbGRUcmFjZS9ub2RlX21vZHVsZXMvLnBucG0vZ3JhcGhxbEAxNi4xMS4wL25vZGVfbW9kdWxlcy9ncmFwaHFsL2xhbmd1YWdlL2xvY2F0aW9uLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpbnZhcmlhbnQgfSBmcm9tICcuLi9qc3V0aWxzL2ludmFyaWFudC5tanMnO1xuY29uc3QgTGluZVJlZ0V4cCA9IC9cXHJcXG58W1xcblxccl0vZztcbi8qKlxuICogUmVwcmVzZW50cyBhIGxvY2F0aW9uIGluIGEgU291cmNlLlxuICovXG5cbi8qKlxuICogVGFrZXMgYSBTb3VyY2UgYW5kIGEgVVRGLTggY2hhcmFjdGVyIG9mZnNldCwgYW5kIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmdcbiAqIGxpbmUgYW5kIGNvbHVtbiBhcyBhIFNvdXJjZUxvY2F0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TG9jYXRpb24oc291cmNlLCBwb3NpdGlvbikge1xuICBsZXQgbGFzdExpbmVTdGFydCA9IDA7XG4gIGxldCBsaW5lID0gMTtcblxuICBmb3IgKGNvbnN0IG1hdGNoIG9mIHNvdXJjZS5ib2R5Lm1hdGNoQWxsKExpbmVSZWdFeHApKSB7XG4gICAgdHlwZW9mIG1hdGNoLmluZGV4ID09PSAnbnVtYmVyJyB8fCBpbnZhcmlhbnQoZmFsc2UpO1xuXG4gICAgaWYgKG1hdGNoLmluZGV4ID49IHBvc2l0aW9uKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBsYXN0TGluZVN0YXJ0ID0gbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGg7XG4gICAgbGluZSArPSAxO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBsaW5lLFxuICAgIGNvbHVtbjogcG9zaXRpb24gKyAxIC0gbGFzdExpbmVTdGFydCxcbiAgfTtcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/location.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/parser.mjs":
/*!*****************************************************************************************!*\
  !*** ../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/parser.mjs ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Parser: () => (/* binding */ Parser),\n/* harmony export */   parse: () => (/* binding */ parse),\n/* harmony export */   parseConstValue: () => (/* binding */ parseConstValue),\n/* harmony export */   parseType: () => (/* binding */ parseType),\n/* harmony export */   parseValue: () => (/* binding */ parseValue)\n/* harmony export */ });\n/* harmony import */ var _error_syntaxError_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../error/syntaxError.mjs */ \"(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/error/syntaxError.mjs\");\n/* harmony import */ var _ast_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ast.mjs */ \"(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/ast.mjs\");\n/* harmony import */ var _directiveLocation_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./directiveLocation.mjs */ \"(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/directiveLocation.mjs\");\n/* harmony import */ var _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./kinds.mjs */ \"(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/kinds.mjs\");\n/* harmony import */ var _lexer_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lexer.mjs */ \"(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/lexer.mjs\");\n/* harmony import */ var _source_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./source.mjs */ \"(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/source.mjs\");\n/* harmony import */ var _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tokenKind.mjs */ \"(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/tokenKind.mjs\");\n\n\n\n\n\n\n\n/**\n * Configuration options to control parser behavior\n */\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\nfunction parse(source, options) {\n  const parser = new Parser(source, options);\n  const document = parser.parseDocument();\n  Object.defineProperty(document, 'tokenCount', {\n    enumerable: false,\n    value: parser.tokenCount,\n  });\n  return document;\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\nfunction parseValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.SOF);\n  const value = parser.parseValueLiteral(false);\n  parser.expectToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.EOF);\n  return value;\n}\n/**\n * Similar to parseValue(), but raises a parse error if it encounters a\n * variable. The return type will be a constant value.\n */\n\nfunction parseConstValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.SOF);\n  const value = parser.parseConstValueLiteral();\n  parser.expectToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\nfunction parseType(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.SOF);\n  const type = parser.parseTypeReference();\n  parser.expectToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.EOF);\n  return type;\n}\n/**\n * This class is exported only to assist people in implementing their own parsers\n * without duplicating too much code and should be used only as last resort for cases\n * such as experimental syntax or if certain features could not be contributed upstream.\n *\n * It is still part of the internal API and is versioned, so any changes to it are never\n * considered breaking changes. If you still need to support multiple versions of the\n * library, please use the `versionInfo` variable for version detection.\n *\n * @internal\n */\n\nclass Parser {\n  constructor(source, options = {}) {\n    const sourceObj = (0,_source_mjs__WEBPACK_IMPORTED_MODULE_1__.isSource)(source) ? source : new _source_mjs__WEBPACK_IMPORTED_MODULE_1__.Source(source);\n    this._lexer = new _lexer_mjs__WEBPACK_IMPORTED_MODULE_2__.Lexer(sourceObj);\n    this._options = options;\n    this._tokenCounter = 0;\n  }\n\n  get tokenCount() {\n    return this._tokenCounter;\n  }\n  /**\n   * Converts a name lex token into a name parse node.\n   */\n\n  parseName() {\n    const token = this.expectToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.NAME);\n    return this.node(token, {\n      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.NAME,\n      value: token.value,\n    });\n  } // Implements the parsing rules in the Document section.\n\n  /**\n   * Document : Definition+\n   */\n\n  parseDocument() {\n    return this.node(this._lexer.token, {\n      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.DOCUMENT,\n      definitions: this.many(\n        _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.SOF,\n        this.parseDefinition,\n        _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.EOF,\n      ),\n    });\n  }\n  /**\n   * Definition :\n   *   - ExecutableDefinition\n   *   - TypeSystemDefinition\n   *   - TypeSystemExtension\n   *\n   * ExecutableDefinition :\n   *   - OperationDefinition\n   *   - FragmentDefinition\n   *\n   * TypeSystemDefinition :\n   *   - SchemaDefinition\n   *   - TypeDefinition\n   *   - DirectiveDefinition\n   *\n   * TypeDefinition :\n   *   - ScalarTypeDefinition\n   *   - ObjectTypeDefinition\n   *   - InterfaceTypeDefinition\n   *   - UnionTypeDefinition\n   *   - EnumTypeDefinition\n   *   - InputObjectTypeDefinition\n   */\n\n  parseDefinition() {\n    if (this.peek(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACE_L)) {\n      return this.parseOperationDefinition();\n    } // Many definitions begin with a description and require a lookahead.\n\n    const hasDescription = this.peekDescription();\n    const keywordToken = hasDescription\n      ? this._lexer.lookahead()\n      : this._lexer.token;\n\n    if (keywordToken.kind === _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaDefinition();\n\n        case 'scalar':\n          return this.parseScalarTypeDefinition();\n\n        case 'type':\n          return this.parseObjectTypeDefinition();\n\n        case 'interface':\n          return this.parseInterfaceTypeDefinition();\n\n        case 'union':\n          return this.parseUnionTypeDefinition();\n\n        case 'enum':\n          return this.parseEnumTypeDefinition();\n\n        case 'input':\n          return this.parseInputObjectTypeDefinition();\n\n        case 'directive':\n          return this.parseDirectiveDefinition();\n      }\n\n      if (hasDescription) {\n        throw (0,_error_syntaxError_mjs__WEBPACK_IMPORTED_MODULE_4__.syntaxError)(\n          this._lexer.source,\n          this._lexer.token.start,\n          'Unexpected description, descriptions are supported only on type definitions.',\n        );\n      }\n\n      switch (keywordToken.value) {\n        case 'query':\n        case 'mutation':\n        case 'subscription':\n          return this.parseOperationDefinition();\n\n        case 'fragment':\n          return this.parseFragmentDefinition();\n\n        case 'extend':\n          return this.parseTypeSystemExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  } // Implements the parsing rules in the Operations section.\n\n  /**\n   * OperationDefinition :\n   *  - SelectionSet\n   *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n   */\n\n  parseOperationDefinition() {\n    const start = this._lexer.token;\n\n    if (this.peek(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACE_L)) {\n      return this.node(start, {\n        kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.OPERATION_DEFINITION,\n        operation: _ast_mjs__WEBPACK_IMPORTED_MODULE_5__.OperationTypeNode.QUERY,\n        name: undefined,\n        variableDefinitions: [],\n        directives: [],\n        selectionSet: this.parseSelectionSet(),\n      });\n    }\n\n    const operation = this.parseOperationType();\n    let name;\n\n    if (this.peek(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.NAME)) {\n      name = this.parseName();\n    }\n\n    return this.node(start, {\n      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.OPERATION_DEFINITION,\n      operation,\n      name,\n      variableDefinitions: this.parseVariableDefinitions(),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * OperationType : one of query mutation subscription\n   */\n\n  parseOperationType() {\n    const operationToken = this.expectToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.NAME);\n\n    switch (operationToken.value) {\n      case 'query':\n        return _ast_mjs__WEBPACK_IMPORTED_MODULE_5__.OperationTypeNode.QUERY;\n\n      case 'mutation':\n        return _ast_mjs__WEBPACK_IMPORTED_MODULE_5__.OperationTypeNode.MUTATION;\n\n      case 'subscription':\n        return _ast_mjs__WEBPACK_IMPORTED_MODULE_5__.OperationTypeNode.SUBSCRIPTION;\n    }\n\n    throw this.unexpected(operationToken);\n  }\n  /**\n   * VariableDefinitions : ( VariableDefinition+ )\n   */\n\n  parseVariableDefinitions() {\n    return this.optionalMany(\n      _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.PAREN_L,\n      this.parseVariableDefinition,\n      _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.PAREN_R,\n    );\n  }\n  /**\n   * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\n   */\n\n  parseVariableDefinition() {\n    return this.node(this._lexer.token, {\n      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.VARIABLE_DEFINITION,\n      variable: this.parseVariable(),\n      type: (this.expectToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.COLON), this.parseTypeReference()),\n      defaultValue: this.expectOptionalToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.EQUALS)\n        ? this.parseConstValueLiteral()\n        : undefined,\n      directives: this.parseConstDirectives(),\n    });\n  }\n  /**\n   * Variable : $ Name\n   */\n\n  parseVariable() {\n    const start = this._lexer.token;\n    this.expectToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.DOLLAR);\n    return this.node(start, {\n      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.VARIABLE,\n      name: this.parseName(),\n    });\n  }\n  /**\n   * ```\n   * SelectionSet : { Selection+ }\n   * ```\n   */\n\n  parseSelectionSet() {\n    return this.node(this._lexer.token, {\n      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.SELECTION_SET,\n      selections: this.many(\n        _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACE_L,\n        this.parseSelection,\n        _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACE_R,\n      ),\n    });\n  }\n  /**\n   * Selection :\n   *   - Field\n   *   - FragmentSpread\n   *   - InlineFragment\n   */\n\n  parseSelection() {\n    return this.peek(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.SPREAD)\n      ? this.parseFragment()\n      : this.parseField();\n  }\n  /**\n   * Field : Alias? Name Arguments? Directives? SelectionSet?\n   *\n   * Alias : Name :\n   */\n\n  parseField() {\n    const start = this._lexer.token;\n    const nameOrAlias = this.parseName();\n    let alias;\n    let name;\n\n    if (this.expectOptionalToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.COLON)) {\n      alias = nameOrAlias;\n      name = this.parseName();\n    } else {\n      name = nameOrAlias;\n    }\n\n    return this.node(start, {\n      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.FIELD,\n      alias,\n      name,\n      arguments: this.parseArguments(false),\n      directives: this.parseDirectives(false),\n      selectionSet: this.peek(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACE_L)\n        ? this.parseSelectionSet()\n        : undefined,\n    });\n  }\n  /**\n   * Arguments[Const] : ( Argument[?Const]+ )\n   */\n\n  parseArguments(isConst) {\n    const item = isConst ? this.parseConstArgument : this.parseArgument;\n    return this.optionalMany(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.PAREN_L, item, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.PAREN_R);\n  }\n  /**\n   * Argument[Const] : Name : Value[?Const]\n   */\n\n  parseArgument(isConst = false) {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.COLON);\n    return this.node(start, {\n      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.ARGUMENT,\n      name,\n      value: this.parseValueLiteral(isConst),\n    });\n  }\n\n  parseConstArgument() {\n    return this.parseArgument(true);\n  } // Implements the parsing rules in the Fragments section.\n\n  /**\n   * Corresponds to both FragmentSpread and InlineFragment in the spec.\n   *\n   * FragmentSpread : ... FragmentName Directives?\n   *\n   * InlineFragment : ... TypeCondition? Directives? SelectionSet\n   */\n\n  parseFragment() {\n    const start = this._lexer.token;\n    this.expectToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.SPREAD);\n    const hasTypeCondition = this.expectOptionalKeyword('on');\n\n    if (!hasTypeCondition && this.peek(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.NAME)) {\n      return this.node(start, {\n        kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.FRAGMENT_SPREAD,\n        name: this.parseFragmentName(),\n        directives: this.parseDirectives(false),\n      });\n    }\n\n    return this.node(start, {\n      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.INLINE_FRAGMENT,\n      typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * FragmentDefinition :\n   *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n   *\n   * TypeCondition : NamedType\n   */\n\n  parseFragmentDefinition() {\n    const start = this._lexer.token;\n    this.expectKeyword('fragment'); // Legacy support for defining variables within fragments changes\n    // the grammar of FragmentDefinition:\n    //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n    if (this._options.allowLegacyFragmentVariables === true) {\n      return this.node(start, {\n        kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.FRAGMENT_DEFINITION,\n        name: this.parseFragmentName(),\n        variableDefinitions: this.parseVariableDefinitions(),\n        typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n        directives: this.parseDirectives(false),\n        selectionSet: this.parseSelectionSet(),\n      });\n    }\n\n    return this.node(start, {\n      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.FRAGMENT_DEFINITION,\n      name: this.parseFragmentName(),\n      typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * FragmentName : Name but not `on`\n   */\n\n  parseFragmentName() {\n    if (this._lexer.token.value === 'on') {\n      throw this.unexpected();\n    }\n\n    return this.parseName();\n  } // Implements the parsing rules in the Values section.\n\n  /**\n   * Value[Const] :\n   *   - [~Const] Variable\n   *   - IntValue\n   *   - FloatValue\n   *   - StringValue\n   *   - BooleanValue\n   *   - NullValue\n   *   - EnumValue\n   *   - ListValue[?Const]\n   *   - ObjectValue[?Const]\n   *\n   * BooleanValue : one of `true` `false`\n   *\n   * NullValue : `null`\n   *\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n\n  parseValueLiteral(isConst) {\n    const token = this._lexer.token;\n\n    switch (token.kind) {\n      case _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACKET_L:\n        return this.parseList(isConst);\n\n      case _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACE_L:\n        return this.parseObject(isConst);\n\n      case _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.INT:\n        this.advanceLexer();\n        return this.node(token, {\n          kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.INT,\n          value: token.value,\n        });\n\n      case _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.FLOAT:\n        this.advanceLexer();\n        return this.node(token, {\n          kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.FLOAT,\n          value: token.value,\n        });\n\n      case _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.STRING:\n      case _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BLOCK_STRING:\n        return this.parseStringLiteral();\n\n      case _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.NAME:\n        this.advanceLexer();\n\n        switch (token.value) {\n          case 'true':\n            return this.node(token, {\n              kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.BOOLEAN,\n              value: true,\n            });\n\n          case 'false':\n            return this.node(token, {\n              kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.BOOLEAN,\n              value: false,\n            });\n\n          case 'null':\n            return this.node(token, {\n              kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.NULL,\n            });\n\n          default:\n            return this.node(token, {\n              kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.ENUM,\n              value: token.value,\n            });\n        }\n\n      case _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.DOLLAR:\n        if (isConst) {\n          this.expectToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.DOLLAR);\n\n          if (this._lexer.token.kind === _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.NAME) {\n            const varName = this._lexer.token.value;\n            throw (0,_error_syntaxError_mjs__WEBPACK_IMPORTED_MODULE_4__.syntaxError)(\n              this._lexer.source,\n              token.start,\n              `Unexpected variable \"$${varName}\" in constant value.`,\n            );\n          } else {\n            throw this.unexpected(token);\n          }\n        }\n\n        return this.parseVariable();\n\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  parseConstValueLiteral() {\n    return this.parseValueLiteral(true);\n  }\n\n  parseStringLiteral() {\n    const token = this._lexer.token;\n    this.advanceLexer();\n    return this.node(token, {\n      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.STRING,\n      value: token.value,\n      block: token.kind === _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BLOCK_STRING,\n    });\n  }\n  /**\n   * ListValue[Const] :\n   *   - [ ]\n   *   - [ Value[?Const]+ ]\n   */\n\n  parseList(isConst) {\n    const item = () => this.parseValueLiteral(isConst);\n\n    return this.node(this._lexer.token, {\n      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.LIST,\n      values: this.any(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACKET_L, item, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACKET_R),\n    });\n  }\n  /**\n   * ```\n   * ObjectValue[Const] :\n   *   - { }\n   *   - { ObjectField[?Const]+ }\n   * ```\n   */\n\n  parseObject(isConst) {\n    const item = () => this.parseObjectField(isConst);\n\n    return this.node(this._lexer.token, {\n      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.OBJECT,\n      fields: this.any(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACE_L, item, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACE_R),\n    });\n  }\n  /**\n   * ObjectField[Const] : Name : Value[?Const]\n   */\n\n  parseObjectField(isConst) {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.COLON);\n    return this.node(start, {\n      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.OBJECT_FIELD,\n      name,\n      value: this.parseValueLiteral(isConst),\n    });\n  } // Implements the parsing rules in the Directives section.\n\n  /**\n   * Directives[Const] : Directive[?Const]+\n   */\n\n  parseDirectives(isConst) {\n    const directives = [];\n\n    while (this.peek(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.AT)) {\n      directives.push(this.parseDirective(isConst));\n    }\n\n    return directives;\n  }\n\n  parseConstDirectives() {\n    return this.parseDirectives(true);\n  }\n  /**\n   * ```\n   * Directive[Const] : @ Name Arguments[?Const]?\n   * ```\n   */\n\n  parseDirective(isConst) {\n    const start = this._lexer.token;\n    this.expectToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.AT);\n    return this.node(start, {\n      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.DIRECTIVE,\n      name: this.parseName(),\n      arguments: this.parseArguments(isConst),\n    });\n  } // Implements the parsing rules in the Types section.\n\n  /**\n   * Type :\n   *   - NamedType\n   *   - ListType\n   *   - NonNullType\n   */\n\n  parseTypeReference() {\n    const start = this._lexer.token;\n    let type;\n\n    if (this.expectOptionalToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACKET_L)) {\n      const innerType = this.parseTypeReference();\n      this.expectToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACKET_R);\n      type = this.node(start, {\n        kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.LIST_TYPE,\n        type: innerType,\n      });\n    } else {\n      type = this.parseNamedType();\n    }\n\n    if (this.expectOptionalToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BANG)) {\n      return this.node(start, {\n        kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.NON_NULL_TYPE,\n        type,\n      });\n    }\n\n    return type;\n  }\n  /**\n   * NamedType : Name\n   */\n\n  parseNamedType() {\n    return this.node(this._lexer.token, {\n      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.NAMED_TYPE,\n      name: this.parseName(),\n    });\n  } // Implements the parsing rules in the Type Definition section.\n\n  peekDescription() {\n    return this.peek(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.STRING) || this.peek(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BLOCK_STRING);\n  }\n  /**\n   * Description : StringValue\n   */\n\n  parseDescription() {\n    if (this.peekDescription()) {\n      return this.parseStringLiteral();\n    }\n  }\n  /**\n   * ```\n   * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }\n   * ```\n   */\n\n  parseSchemaDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('schema');\n    const directives = this.parseConstDirectives();\n    const operationTypes = this.many(\n      _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACE_L,\n      this.parseOperationTypeDefinition,\n      _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACE_R,\n    );\n    return this.node(start, {\n      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.SCHEMA_DEFINITION,\n      description,\n      directives,\n      operationTypes,\n    });\n  }\n  /**\n   * OperationTypeDefinition : OperationType : NamedType\n   */\n\n  parseOperationTypeDefinition() {\n    const start = this._lexer.token;\n    const operation = this.parseOperationType();\n    this.expectToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.COLON);\n    const type = this.parseNamedType();\n    return this.node(start, {\n      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.OPERATION_TYPE_DEFINITION,\n      operation,\n      type,\n    });\n  }\n  /**\n   * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n   */\n\n  parseScalarTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.SCALAR_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n    });\n  }\n  /**\n   * ObjectTypeDefinition :\n   *   Description?\n   *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n   */\n\n  parseObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    return this.node(start, {\n      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ImplementsInterfaces :\n   *   - implements `&`? NamedType\n   *   - ImplementsInterfaces & NamedType\n   */\n\n  parseImplementsInterfaces() {\n    return this.expectOptionalKeyword('implements')\n      ? this.delimitedMany(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.AMP, this.parseNamedType)\n      : [];\n  }\n  /**\n   * ```\n   * FieldsDefinition : { FieldDefinition+ }\n   * ```\n   */\n\n  parseFieldsDefinition() {\n    return this.optionalMany(\n      _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACE_L,\n      this.parseFieldDefinition,\n      _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * FieldDefinition :\n   *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n   */\n\n  parseFieldDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    this.expectToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.COLON);\n    const type = this.parseTypeReference();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.FIELD_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      type,\n      directives,\n    });\n  }\n  /**\n   * ArgumentsDefinition : ( InputValueDefinition+ )\n   */\n\n  parseArgumentDefs() {\n    return this.optionalMany(\n      _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.PAREN_L,\n      this.parseInputValueDef,\n      _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.PAREN_R,\n    );\n  }\n  /**\n   * InputValueDefinition :\n   *   - Description? Name : Type DefaultValue? Directives[Const]?\n   */\n\n  parseInputValueDef() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    this.expectToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.COLON);\n    const type = this.parseTypeReference();\n    let defaultValue;\n\n    if (this.expectOptionalToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.EQUALS)) {\n      defaultValue = this.parseConstValueLiteral();\n    }\n\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.INPUT_VALUE_DEFINITION,\n      description,\n      name,\n      type,\n      defaultValue,\n      directives,\n    });\n  }\n  /**\n   * InterfaceTypeDefinition :\n   *   - Description? interface Name Directives[Const]? FieldsDefinition?\n   */\n\n  parseInterfaceTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    return this.node(start, {\n      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.INTERFACE_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * UnionTypeDefinition :\n   *   - Description? union Name Directives[Const]? UnionMemberTypes?\n   */\n\n  parseUnionTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const types = this.parseUnionMemberTypes();\n    return this.node(start, {\n      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.UNION_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      types,\n    });\n  }\n  /**\n   * UnionMemberTypes :\n   *   - = `|`? NamedType\n   *   - UnionMemberTypes | NamedType\n   */\n\n  parseUnionMemberTypes() {\n    return this.expectOptionalToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.EQUALS)\n      ? this.delimitedMany(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.PIPE, this.parseNamedType)\n      : [];\n  }\n  /**\n   * EnumTypeDefinition :\n   *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n   */\n\n  parseEnumTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const values = this.parseEnumValuesDefinition();\n    return this.node(start, {\n      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.ENUM_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      values,\n    });\n  }\n  /**\n   * ```\n   * EnumValuesDefinition : { EnumValueDefinition+ }\n   * ```\n   */\n\n  parseEnumValuesDefinition() {\n    return this.optionalMany(\n      _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACE_L,\n      this.parseEnumValueDefinition,\n      _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * EnumValueDefinition : Description? EnumValue Directives[Const]?\n   */\n\n  parseEnumValueDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseEnumValueName();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.ENUM_VALUE_DEFINITION,\n      description,\n      name,\n      directives,\n    });\n  }\n  /**\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n\n  parseEnumValueName() {\n    if (\n      this._lexer.token.value === 'true' ||\n      this._lexer.token.value === 'false' ||\n      this._lexer.token.value === 'null'\n    ) {\n      throw (0,_error_syntaxError_mjs__WEBPACK_IMPORTED_MODULE_4__.syntaxError)(\n        this._lexer.source,\n        this._lexer.token.start,\n        `${getTokenDesc(\n          this._lexer.token,\n        )} is reserved and cannot be used for an enum value.`,\n      );\n    }\n\n    return this.parseName();\n  }\n  /**\n   * InputObjectTypeDefinition :\n   *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n   */\n\n  parseInputObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseInputFieldsDefinition();\n    return this.node(start, {\n      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.INPUT_OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ```\n   * InputFieldsDefinition : { InputValueDefinition+ }\n   * ```\n   */\n\n  parseInputFieldsDefinition() {\n    return this.optionalMany(\n      _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACE_L,\n      this.parseInputValueDef,\n      _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * TypeSystemExtension :\n   *   - SchemaExtension\n   *   - TypeExtension\n   *\n   * TypeExtension :\n   *   - ScalarTypeExtension\n   *   - ObjectTypeExtension\n   *   - InterfaceTypeExtension\n   *   - UnionTypeExtension\n   *   - EnumTypeExtension\n   *   - InputObjectTypeDefinition\n   */\n\n  parseTypeSystemExtension() {\n    const keywordToken = this._lexer.lookahead();\n\n    if (keywordToken.kind === _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaExtension();\n\n        case 'scalar':\n          return this.parseScalarTypeExtension();\n\n        case 'type':\n          return this.parseObjectTypeExtension();\n\n        case 'interface':\n          return this.parseInterfaceTypeExtension();\n\n        case 'union':\n          return this.parseUnionTypeExtension();\n\n        case 'enum':\n          return this.parseEnumTypeExtension();\n\n        case 'input':\n          return this.parseInputObjectTypeExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  }\n  /**\n   * ```\n   * SchemaExtension :\n   *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\n   *  - extend schema Directives[Const]\n   * ```\n   */\n\n  parseSchemaExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('schema');\n    const directives = this.parseConstDirectives();\n    const operationTypes = this.optionalMany(\n      _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACE_L,\n      this.parseOperationTypeDefinition,\n      _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACE_R,\n    );\n\n    if (directives.length === 0 && operationTypes.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.SCHEMA_EXTENSION,\n      directives,\n      operationTypes,\n    });\n  }\n  /**\n   * ScalarTypeExtension :\n   *   - extend scalar Name Directives[Const]\n   */\n\n  parseScalarTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n\n    if (directives.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.SCALAR_TYPE_EXTENSION,\n      name,\n      directives,\n    });\n  }\n  /**\n   * ObjectTypeExtension :\n   *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend type Name ImplementsInterfaces? Directives[Const]\n   *  - extend type Name ImplementsInterfaces\n   */\n\n  parseObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n\n    if (\n      interfaces.length === 0 &&\n      directives.length === 0 &&\n      fields.length === 0\n    ) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.OBJECT_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * InterfaceTypeExtension :\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]\n   *  - extend interface Name ImplementsInterfaces\n   */\n\n  parseInterfaceTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n\n    if (\n      interfaces.length === 0 &&\n      directives.length === 0 &&\n      fields.length === 0\n    ) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.INTERFACE_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * UnionTypeExtension :\n   *   - extend union Name Directives[Const]? UnionMemberTypes\n   *   - extend union Name Directives[Const]\n   */\n\n  parseUnionTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const types = this.parseUnionMemberTypes();\n\n    if (directives.length === 0 && types.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.UNION_TYPE_EXTENSION,\n      name,\n      directives,\n      types,\n    });\n  }\n  /**\n   * EnumTypeExtension :\n   *   - extend enum Name Directives[Const]? EnumValuesDefinition\n   *   - extend enum Name Directives[Const]\n   */\n\n  parseEnumTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const values = this.parseEnumValuesDefinition();\n\n    if (directives.length === 0 && values.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.ENUM_TYPE_EXTENSION,\n      name,\n      directives,\n      values,\n    });\n  }\n  /**\n   * InputObjectTypeExtension :\n   *   - extend input Name Directives[Const]? InputFieldsDefinition\n   *   - extend input Name Directives[Const]\n   */\n\n  parseInputObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseInputFieldsDefinition();\n\n    if (directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.INPUT_OBJECT_TYPE_EXTENSION,\n      name,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ```\n   * DirectiveDefinition :\n   *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations\n   * ```\n   */\n\n  parseDirectiveDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('directive');\n    this.expectToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.AT);\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    const repeatable = this.expectOptionalKeyword('repeatable');\n    this.expectKeyword('on');\n    const locations = this.parseDirectiveLocations();\n    return this.node(start, {\n      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.DIRECTIVE_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      repeatable,\n      locations,\n    });\n  }\n  /**\n   * DirectiveLocations :\n   *   - `|`? DirectiveLocation\n   *   - DirectiveLocations | DirectiveLocation\n   */\n\n  parseDirectiveLocations() {\n    return this.delimitedMany(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.PIPE, this.parseDirectiveLocation);\n  }\n  /*\n   * DirectiveLocation :\n   *   - ExecutableDirectiveLocation\n   *   - TypeSystemDirectiveLocation\n   *\n   * ExecutableDirectiveLocation : one of\n   *   `QUERY`\n   *   `MUTATION`\n   *   `SUBSCRIPTION`\n   *   `FIELD`\n   *   `FRAGMENT_DEFINITION`\n   *   `FRAGMENT_SPREAD`\n   *   `INLINE_FRAGMENT`\n   *\n   * TypeSystemDirectiveLocation : one of\n   *   `SCHEMA`\n   *   `SCALAR`\n   *   `OBJECT`\n   *   `FIELD_DEFINITION`\n   *   `ARGUMENT_DEFINITION`\n   *   `INTERFACE`\n   *   `UNION`\n   *   `ENUM`\n   *   `ENUM_VALUE`\n   *   `INPUT_OBJECT`\n   *   `INPUT_FIELD_DEFINITION`\n   */\n\n  parseDirectiveLocation() {\n    const start = this._lexer.token;\n    const name = this.parseName();\n\n    if (Object.prototype.hasOwnProperty.call(_directiveLocation_mjs__WEBPACK_IMPORTED_MODULE_6__.DirectiveLocation, name.value)) {\n      return name;\n    }\n\n    throw this.unexpected(start);\n  } // Core parsing utility functions\n\n  /**\n   * Returns a node that, if configured to do so, sets a \"loc\" field as a\n   * location object, used to identify the place in the source that created a\n   * given parsed object.\n   */\n\n  node(startToken, node) {\n    if (this._options.noLocation !== true) {\n      node.loc = new _ast_mjs__WEBPACK_IMPORTED_MODULE_5__.Location(\n        startToken,\n        this._lexer.lastToken,\n        this._lexer.source,\n      );\n    }\n\n    return node;\n  }\n  /**\n   * Determines if the next token is of a given kind\n   */\n\n  peek(kind) {\n    return this._lexer.token.kind === kind;\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n\n  expectToken(kind) {\n    const token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this.advanceLexer();\n      return token;\n    }\n\n    throw (0,_error_syntaxError_mjs__WEBPACK_IMPORTED_MODULE_4__.syntaxError)(\n      this._lexer.source,\n      token.start,\n      `Expected ${getTokenKindDesc(kind)}, found ${getTokenDesc(token)}.`,\n    );\n  }\n  /**\n   * If the next token is of the given kind, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n\n  expectOptionalToken(kind) {\n    const token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this.advanceLexer();\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * If the next token is a given keyword, advance the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n\n  expectKeyword(value) {\n    const token = this._lexer.token;\n\n    if (token.kind === _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.NAME && token.value === value) {\n      this.advanceLexer();\n    } else {\n      throw (0,_error_syntaxError_mjs__WEBPACK_IMPORTED_MODULE_4__.syntaxError)(\n        this._lexer.source,\n        token.start,\n        `Expected \"${value}\", found ${getTokenDesc(token)}.`,\n      );\n    }\n  }\n  /**\n   * If the next token is a given keyword, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n\n  expectOptionalKeyword(value) {\n    const token = this._lexer.token;\n\n    if (token.kind === _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.NAME && token.value === value) {\n      this.advanceLexer();\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Helper function for creating an error when an unexpected lexed token is encountered.\n   */\n\n  unexpected(atToken) {\n    const token =\n      atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;\n    return (0,_error_syntaxError_mjs__WEBPACK_IMPORTED_MODULE_4__.syntaxError)(\n      this._lexer.source,\n      token.start,\n      `Unexpected ${getTokenDesc(token)}.`,\n    );\n  }\n  /**\n   * Returns a possibly empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  any(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n\n    while (!this.expectOptionalToken(closeKind)) {\n      nodes.push(parseFn.call(this));\n    }\n\n    return nodes;\n  }\n  /**\n   * Returns a list of parse nodes, determined by the parseFn.\n   * It can be empty only if open token is missing otherwise it will always return non-empty list\n   * that begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  optionalMany(openKind, parseFn, closeKind) {\n    if (this.expectOptionalToken(openKind)) {\n      const nodes = [];\n\n      do {\n        nodes.push(parseFn.call(this));\n      } while (!this.expectOptionalToken(closeKind));\n\n      return nodes;\n    }\n\n    return [];\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  many(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (!this.expectOptionalToken(closeKind));\n\n    return nodes;\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list may begin with a lex token of delimiterKind followed by items separated by lex tokens of tokenKind.\n   * Advances the parser to the next lex token after last item in the list.\n   */\n\n  delimitedMany(delimiterKind, parseFn) {\n    this.expectOptionalToken(delimiterKind);\n    const nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (this.expectOptionalToken(delimiterKind));\n\n    return nodes;\n  }\n\n  advanceLexer() {\n    const { maxTokens } = this._options;\n\n    const token = this._lexer.advance();\n\n    if (token.kind !== _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.EOF) {\n      ++this._tokenCounter;\n\n      if (maxTokens !== undefined && this._tokenCounter > maxTokens) {\n        throw (0,_error_syntaxError_mjs__WEBPACK_IMPORTED_MODULE_4__.syntaxError)(\n          this._lexer.source,\n          token.start,\n          `Document contains more that ${maxTokens} tokens. Parsing aborted.`,\n        );\n      }\n    }\n  }\n}\n/**\n * A helper function to describe a token as a string for debugging.\n */\n\nfunction getTokenDesc(token) {\n  const value = token.value;\n  return getTokenKindDesc(token.kind) + (value != null ? ` \"${value}\"` : '');\n}\n/**\n * A helper function to describe a token kind as a string for debugging.\n */\n\nfunction getTokenKindDesc(kind) {\n  return (0,_lexer_mjs__WEBPACK_IMPORTED_MODULE_2__.isPunctuatorTokenKind)(kind) ? `\"${kind}\"` : kind;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/parser.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/printLocation.mjs":
/*!************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/printLocation.mjs ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   printLocation: () => (/* binding */ printLocation),\n/* harmony export */   printSourceLocation: () => (/* binding */ printSourceLocation)\n/* harmony export */ });\n/* harmony import */ var _location_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./location.mjs */ \"(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/location.mjs\");\n\n\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\nfunction printLocation(location) {\n  return printSourceLocation(\n    location.source,\n    (0,_location_mjs__WEBPACK_IMPORTED_MODULE_0__.getLocation)(location.source, location.start),\n  );\n}\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\n\nfunction printSourceLocation(source, sourceLocation) {\n  const firstLineColumnOffset = source.locationOffset.column - 1;\n  const body = ''.padStart(firstLineColumnOffset) + source.body;\n  const lineIndex = sourceLocation.line - 1;\n  const lineOffset = source.locationOffset.line - 1;\n  const lineNum = sourceLocation.line + lineOffset;\n  const columnOffset = sourceLocation.line === 1 ? firstLineColumnOffset : 0;\n  const columnNum = sourceLocation.column + columnOffset;\n  const locationStr = `${source.name}:${lineNum}:${columnNum}\\n`;\n  const lines = body.split(/\\r\\n|[\\n\\r]/g);\n  const locationLine = lines[lineIndex]; // Special case for minified documents\n\n  if (locationLine.length > 120) {\n    const subLineIndex = Math.floor(columnNum / 80);\n    const subLineColumnNum = columnNum % 80;\n    const subLines = [];\n\n    for (let i = 0; i < locationLine.length; i += 80) {\n      subLines.push(locationLine.slice(i, i + 80));\n    }\n\n    return (\n      locationStr +\n      printPrefixedLines([\n        [`${lineNum} |`, subLines[0]],\n        ...subLines.slice(1, subLineIndex + 1).map((subLine) => ['|', subLine]),\n        ['|', '^'.padStart(subLineColumnNum)],\n        ['|', subLines[subLineIndex + 1]],\n      ])\n    );\n  }\n\n  return (\n    locationStr +\n    printPrefixedLines([\n      // Lines specified like this: [\"prefix\", \"string\"],\n      [`${lineNum - 1} |`, lines[lineIndex - 1]],\n      [`${lineNum} |`, locationLine],\n      ['|', '^'.padStart(columnNum)],\n      [`${lineNum + 1} |`, lines[lineIndex + 1]],\n    ])\n  );\n}\n\nfunction printPrefixedLines(lines) {\n  const existingLines = lines.filter(([_, line]) => line !== undefined);\n  const padLen = Math.max(...existingLines.map(([prefix]) => prefix.length));\n  return existingLines\n    .map(([prefix, line]) => prefix.padStart(padLen) + (line ? ' ' + line : ''))\n    .join('\\n');\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vZ3JhcGhxbEAxNi4xMS4wL25vZGVfbW9kdWxlcy9ncmFwaHFsL2xhbmd1YWdlL3ByaW50TG9jYXRpb24ubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE2Qzs7QUFFN0M7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0EsSUFBSSwwREFBVztBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixZQUFZLEdBQUcsUUFBUSxHQUFHLFVBQVU7QUFDN0Q7QUFDQSx5Q0FBeUM7O0FBRXpDO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG9CQUFvQix5QkFBeUI7QUFDN0M7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLFNBQVM7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxhQUFhO0FBQ3ZCLFVBQVUsU0FBUztBQUNuQjtBQUNBLFVBQVUsYUFBYTtBQUN2QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL3UvUHJvamVjdHMvQ29sZFRyYWNlL25vZGVfbW9kdWxlcy8ucG5wbS9ncmFwaHFsQDE2LjExLjAvbm9kZV9tb2R1bGVzL2dyYXBocWwvbGFuZ3VhZ2UvcHJpbnRMb2NhdGlvbi5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0TG9jYXRpb24gfSBmcm9tICcuL2xvY2F0aW9uLm1qcyc7XG5cbi8qKlxuICogUmVuZGVyIGEgaGVscGZ1bCBkZXNjcmlwdGlvbiBvZiB0aGUgbG9jYXRpb24gaW4gdGhlIEdyYXBoUUwgU291cmNlIGRvY3VtZW50LlxuICovXG5leHBvcnQgZnVuY3Rpb24gcHJpbnRMb2NhdGlvbihsb2NhdGlvbikge1xuICByZXR1cm4gcHJpbnRTb3VyY2VMb2NhdGlvbihcbiAgICBsb2NhdGlvbi5zb3VyY2UsXG4gICAgZ2V0TG9jYXRpb24obG9jYXRpb24uc291cmNlLCBsb2NhdGlvbi5zdGFydCksXG4gICk7XG59XG4vKipcbiAqIFJlbmRlciBhIGhlbHBmdWwgZGVzY3JpcHRpb24gb2YgdGhlIGxvY2F0aW9uIGluIHRoZSBHcmFwaFFMIFNvdXJjZSBkb2N1bWVudC5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcHJpbnRTb3VyY2VMb2NhdGlvbihzb3VyY2UsIHNvdXJjZUxvY2F0aW9uKSB7XG4gIGNvbnN0IGZpcnN0TGluZUNvbHVtbk9mZnNldCA9IHNvdXJjZS5sb2NhdGlvbk9mZnNldC5jb2x1bW4gLSAxO1xuICBjb25zdCBib2R5ID0gJycucGFkU3RhcnQoZmlyc3RMaW5lQ29sdW1uT2Zmc2V0KSArIHNvdXJjZS5ib2R5O1xuICBjb25zdCBsaW5lSW5kZXggPSBzb3VyY2VMb2NhdGlvbi5saW5lIC0gMTtcbiAgY29uc3QgbGluZU9mZnNldCA9IHNvdXJjZS5sb2NhdGlvbk9mZnNldC5saW5lIC0gMTtcbiAgY29uc3QgbGluZU51bSA9IHNvdXJjZUxvY2F0aW9uLmxpbmUgKyBsaW5lT2Zmc2V0O1xuICBjb25zdCBjb2x1bW5PZmZzZXQgPSBzb3VyY2VMb2NhdGlvbi5saW5lID09PSAxID8gZmlyc3RMaW5lQ29sdW1uT2Zmc2V0IDogMDtcbiAgY29uc3QgY29sdW1uTnVtID0gc291cmNlTG9jYXRpb24uY29sdW1uICsgY29sdW1uT2Zmc2V0O1xuICBjb25zdCBsb2NhdGlvblN0ciA9IGAke3NvdXJjZS5uYW1lfToke2xpbmVOdW19OiR7Y29sdW1uTnVtfVxcbmA7XG4gIGNvbnN0IGxpbmVzID0gYm9keS5zcGxpdCgvXFxyXFxufFtcXG5cXHJdL2cpO1xuICBjb25zdCBsb2NhdGlvbkxpbmUgPSBsaW5lc1tsaW5lSW5kZXhdOyAvLyBTcGVjaWFsIGNhc2UgZm9yIG1pbmlmaWVkIGRvY3VtZW50c1xuXG4gIGlmIChsb2NhdGlvbkxpbmUubGVuZ3RoID4gMTIwKSB7XG4gICAgY29uc3Qgc3ViTGluZUluZGV4ID0gTWF0aC5mbG9vcihjb2x1bW5OdW0gLyA4MCk7XG4gICAgY29uc3Qgc3ViTGluZUNvbHVtbk51bSA9IGNvbHVtbk51bSAlIDgwO1xuICAgIGNvbnN0IHN1YkxpbmVzID0gW107XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxvY2F0aW9uTGluZS5sZW5ndGg7IGkgKz0gODApIHtcbiAgICAgIHN1YkxpbmVzLnB1c2gobG9jYXRpb25MaW5lLnNsaWNlKGksIGkgKyA4MCkpO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICBsb2NhdGlvblN0ciArXG4gICAgICBwcmludFByZWZpeGVkTGluZXMoW1xuICAgICAgICBbYCR7bGluZU51bX0gfGAsIHN1YkxpbmVzWzBdXSxcbiAgICAgICAgLi4uc3ViTGluZXMuc2xpY2UoMSwgc3ViTGluZUluZGV4ICsgMSkubWFwKChzdWJMaW5lKSA9PiBbJ3wnLCBzdWJMaW5lXSksXG4gICAgICAgIFsnfCcsICdeJy5wYWRTdGFydChzdWJMaW5lQ29sdW1uTnVtKV0sXG4gICAgICAgIFsnfCcsIHN1YkxpbmVzW3N1YkxpbmVJbmRleCArIDFdXSxcbiAgICAgIF0pXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgbG9jYXRpb25TdHIgK1xuICAgIHByaW50UHJlZml4ZWRMaW5lcyhbXG4gICAgICAvLyBMaW5lcyBzcGVjaWZpZWQgbGlrZSB0aGlzOiBbXCJwcmVmaXhcIiwgXCJzdHJpbmdcIl0sXG4gICAgICBbYCR7bGluZU51bSAtIDF9IHxgLCBsaW5lc1tsaW5lSW5kZXggLSAxXV0sXG4gICAgICBbYCR7bGluZU51bX0gfGAsIGxvY2F0aW9uTGluZV0sXG4gICAgICBbJ3wnLCAnXicucGFkU3RhcnQoY29sdW1uTnVtKV0sXG4gICAgICBbYCR7bGluZU51bSArIDF9IHxgLCBsaW5lc1tsaW5lSW5kZXggKyAxXV0sXG4gICAgXSlcbiAgKTtcbn1cblxuZnVuY3Rpb24gcHJpbnRQcmVmaXhlZExpbmVzKGxpbmVzKSB7XG4gIGNvbnN0IGV4aXN0aW5nTGluZXMgPSBsaW5lcy5maWx0ZXIoKFtfLCBsaW5lXSkgPT4gbGluZSAhPT0gdW5kZWZpbmVkKTtcbiAgY29uc3QgcGFkTGVuID0gTWF0aC5tYXgoLi4uZXhpc3RpbmdMaW5lcy5tYXAoKFtwcmVmaXhdKSA9PiBwcmVmaXgubGVuZ3RoKSk7XG4gIHJldHVybiBleGlzdGluZ0xpbmVzXG4gICAgLm1hcCgoW3ByZWZpeCwgbGluZV0pID0+IHByZWZpeC5wYWRTdGFydChwYWRMZW4pICsgKGxpbmUgPyAnICcgKyBsaW5lIDogJycpKVxuICAgIC5qb2luKCdcXG4nKTtcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/printLocation.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/printString.mjs":
/*!**********************************************************************************************!*\
  !*** ../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/printString.mjs ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   printString: () => (/* binding */ printString)\n/* harmony export */ });\n/**\n * Prints a string as a GraphQL StringValue literal. Replaces control characters\n * and excluded characters (\" U+0022 and \\\\ U+005C) with escape sequences.\n */\nfunction printString(str) {\n  return `\"${str.replace(escapedRegExp, escapedReplacer)}\"`;\n} // eslint-disable-next-line no-control-regex\n\nconst escapedRegExp = /[\\x00-\\x1f\\x22\\x5c\\x7f-\\x9f]/g;\n\nfunction escapedReplacer(str) {\n  return escapeSequences[str.charCodeAt(0)];\n} // prettier-ignore\n\nconst escapeSequences = [\n  '\\\\u0000',\n  '\\\\u0001',\n  '\\\\u0002',\n  '\\\\u0003',\n  '\\\\u0004',\n  '\\\\u0005',\n  '\\\\u0006',\n  '\\\\u0007',\n  '\\\\b',\n  '\\\\t',\n  '\\\\n',\n  '\\\\u000B',\n  '\\\\f',\n  '\\\\r',\n  '\\\\u000E',\n  '\\\\u000F',\n  '\\\\u0010',\n  '\\\\u0011',\n  '\\\\u0012',\n  '\\\\u0013',\n  '\\\\u0014',\n  '\\\\u0015',\n  '\\\\u0016',\n  '\\\\u0017',\n  '\\\\u0018',\n  '\\\\u0019',\n  '\\\\u001A',\n  '\\\\u001B',\n  '\\\\u001C',\n  '\\\\u001D',\n  '\\\\u001E',\n  '\\\\u001F',\n  '',\n  '',\n  '\\\\\"',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '', // 2F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '', // 3F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '', // 4F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '\\\\\\\\',\n  '',\n  '',\n  '', // 5F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '', // 6F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '\\\\u007F',\n  '\\\\u0080',\n  '\\\\u0081',\n  '\\\\u0082',\n  '\\\\u0083',\n  '\\\\u0084',\n  '\\\\u0085',\n  '\\\\u0086',\n  '\\\\u0087',\n  '\\\\u0088',\n  '\\\\u0089',\n  '\\\\u008A',\n  '\\\\u008B',\n  '\\\\u008C',\n  '\\\\u008D',\n  '\\\\u008E',\n  '\\\\u008F',\n  '\\\\u0090',\n  '\\\\u0091',\n  '\\\\u0092',\n  '\\\\u0093',\n  '\\\\u0094',\n  '\\\\u0095',\n  '\\\\u0096',\n  '\\\\u0097',\n  '\\\\u0098',\n  '\\\\u0099',\n  '\\\\u009A',\n  '\\\\u009B',\n  '\\\\u009C',\n  '\\\\u009D',\n  '\\\\u009E',\n  '\\\\u009F',\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vZ3JhcGhxbEAxNi4xMS4wL25vZGVfbW9kdWxlcy9ncmFwaHFsL2xhbmd1YWdlL3ByaW50U3RyaW5nLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLGFBQWEsNENBQTRDO0FBQ3pELEVBQUU7O0FBRUY7O0FBRUE7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvaG9tZS91L1Byb2plY3RzL0NvbGRUcmFjZS9ub2RlX21vZHVsZXMvLnBucG0vZ3JhcGhxbEAxNi4xMS4wL25vZGVfbW9kdWxlcy9ncmFwaHFsL2xhbmd1YWdlL3ByaW50U3RyaW5nLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFByaW50cyBhIHN0cmluZyBhcyBhIEdyYXBoUUwgU3RyaW5nVmFsdWUgbGl0ZXJhbC4gUmVwbGFjZXMgY29udHJvbCBjaGFyYWN0ZXJzXG4gKiBhbmQgZXhjbHVkZWQgY2hhcmFjdGVycyAoXCIgVSswMDIyIGFuZCBcXFxcIFUrMDA1Qykgd2l0aCBlc2NhcGUgc2VxdWVuY2VzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcHJpbnRTdHJpbmcoc3RyKSB7XG4gIHJldHVybiBgXCIke3N0ci5yZXBsYWNlKGVzY2FwZWRSZWdFeHAsIGVzY2FwZWRSZXBsYWNlcil9XCJgO1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udHJvbC1yZWdleFxuXG5jb25zdCBlc2NhcGVkUmVnRXhwID0gL1tcXHgwMC1cXHgxZlxceDIyXFx4NWNcXHg3Zi1cXHg5Zl0vZztcblxuZnVuY3Rpb24gZXNjYXBlZFJlcGxhY2VyKHN0cikge1xuICByZXR1cm4gZXNjYXBlU2VxdWVuY2VzW3N0ci5jaGFyQ29kZUF0KDApXTtcbn0gLy8gcHJldHRpZXItaWdub3JlXG5cbmNvbnN0IGVzY2FwZVNlcXVlbmNlcyA9IFtcbiAgJ1xcXFx1MDAwMCcsXG4gICdcXFxcdTAwMDEnLFxuICAnXFxcXHUwMDAyJyxcbiAgJ1xcXFx1MDAwMycsXG4gICdcXFxcdTAwMDQnLFxuICAnXFxcXHUwMDA1JyxcbiAgJ1xcXFx1MDAwNicsXG4gICdcXFxcdTAwMDcnLFxuICAnXFxcXGInLFxuICAnXFxcXHQnLFxuICAnXFxcXG4nLFxuICAnXFxcXHUwMDBCJyxcbiAgJ1xcXFxmJyxcbiAgJ1xcXFxyJyxcbiAgJ1xcXFx1MDAwRScsXG4gICdcXFxcdTAwMEYnLFxuICAnXFxcXHUwMDEwJyxcbiAgJ1xcXFx1MDAxMScsXG4gICdcXFxcdTAwMTInLFxuICAnXFxcXHUwMDEzJyxcbiAgJ1xcXFx1MDAxNCcsXG4gICdcXFxcdTAwMTUnLFxuICAnXFxcXHUwMDE2JyxcbiAgJ1xcXFx1MDAxNycsXG4gICdcXFxcdTAwMTgnLFxuICAnXFxcXHUwMDE5JyxcbiAgJ1xcXFx1MDAxQScsXG4gICdcXFxcdTAwMUInLFxuICAnXFxcXHUwMDFDJyxcbiAgJ1xcXFx1MDAxRCcsXG4gICdcXFxcdTAwMUUnLFxuICAnXFxcXHUwMDFGJyxcbiAgJycsXG4gICcnLFxuICAnXFxcXFwiJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsIC8vIDJGXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLCAvLyAzRlxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJywgLy8gNEZcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJ1xcXFxcXFxcJyxcbiAgJycsXG4gICcnLFxuICAnJywgLy8gNUZcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsIC8vIDZGXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICcnLFxuICAnJyxcbiAgJycsXG4gICdcXFxcdTAwN0YnLFxuICAnXFxcXHUwMDgwJyxcbiAgJ1xcXFx1MDA4MScsXG4gICdcXFxcdTAwODInLFxuICAnXFxcXHUwMDgzJyxcbiAgJ1xcXFx1MDA4NCcsXG4gICdcXFxcdTAwODUnLFxuICAnXFxcXHUwMDg2JyxcbiAgJ1xcXFx1MDA4NycsXG4gICdcXFxcdTAwODgnLFxuICAnXFxcXHUwMDg5JyxcbiAgJ1xcXFx1MDA4QScsXG4gICdcXFxcdTAwOEInLFxuICAnXFxcXHUwMDhDJyxcbiAgJ1xcXFx1MDA4RCcsXG4gICdcXFxcdTAwOEUnLFxuICAnXFxcXHUwMDhGJyxcbiAgJ1xcXFx1MDA5MCcsXG4gICdcXFxcdTAwOTEnLFxuICAnXFxcXHUwMDkyJyxcbiAgJ1xcXFx1MDA5MycsXG4gICdcXFxcdTAwOTQnLFxuICAnXFxcXHUwMDk1JyxcbiAgJ1xcXFx1MDA5NicsXG4gICdcXFxcdTAwOTcnLFxuICAnXFxcXHUwMDk4JyxcbiAgJ1xcXFx1MDA5OScsXG4gICdcXFxcdTAwOUEnLFxuICAnXFxcXHUwMDlCJyxcbiAgJ1xcXFx1MDA5QycsXG4gICdcXFxcdTAwOUQnLFxuICAnXFxcXHUwMDlFJyxcbiAgJ1xcXFx1MDA5RicsXG5dO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/printString.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/printer.mjs":
/*!******************************************************************************************!*\
  !*** ../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/printer.mjs ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   print: () => (/* binding */ print)\n/* harmony export */ });\n/* harmony import */ var _blockString_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./blockString.mjs */ \"(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/blockString.mjs\");\n/* harmony import */ var _printString_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./printString.mjs */ \"(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/printString.mjs\");\n/* harmony import */ var _visitor_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./visitor.mjs */ \"(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/visitor.mjs\");\n\n\n\n/**\n * Converts an AST into a string, using one set of reasonable\n * formatting rules.\n */\n\nfunction print(ast) {\n  return (0,_visitor_mjs__WEBPACK_IMPORTED_MODULE_0__.visit)(ast, printDocASTReducer);\n}\nconst MAX_LINE_LENGTH = 80;\nconst printDocASTReducer = {\n  Name: {\n    leave: (node) => node.value,\n  },\n  Variable: {\n    leave: (node) => '$' + node.name,\n  },\n  // Document\n  Document: {\n    leave: (node) => join(node.definitions, '\\n\\n'),\n  },\n  OperationDefinition: {\n    leave(node) {\n      const varDefs = wrap('(', join(node.variableDefinitions, ', '), ')');\n      const prefix = join(\n        [\n          node.operation,\n          join([node.name, varDefs]),\n          join(node.directives, ' '),\n        ],\n        ' ',\n      ); // Anonymous queries with no directives or variable definitions can use\n      // the query short form.\n\n      return (prefix === 'query' ? '' : prefix + ' ') + node.selectionSet;\n    },\n  },\n  VariableDefinition: {\n    leave: ({ variable, type, defaultValue, directives }) =>\n      variable +\n      ': ' +\n      type +\n      wrap(' = ', defaultValue) +\n      wrap(' ', join(directives, ' ')),\n  },\n  SelectionSet: {\n    leave: ({ selections }) => block(selections),\n  },\n  Field: {\n    leave({ alias, name, arguments: args, directives, selectionSet }) {\n      const prefix = wrap('', alias, ': ') + name;\n      let argsLine = prefix + wrap('(', join(args, ', '), ')');\n\n      if (argsLine.length > MAX_LINE_LENGTH) {\n        argsLine = prefix + wrap('(\\n', indent(join(args, '\\n')), '\\n)');\n      }\n\n      return join([argsLine, join(directives, ' '), selectionSet], ' ');\n    },\n  },\n  Argument: {\n    leave: ({ name, value }) => name + ': ' + value,\n  },\n  // Fragments\n  FragmentSpread: {\n    leave: ({ name, directives }) =>\n      '...' + name + wrap(' ', join(directives, ' ')),\n  },\n  InlineFragment: {\n    leave: ({ typeCondition, directives, selectionSet }) =>\n      join(\n        [\n          '...',\n          wrap('on ', typeCondition),\n          join(directives, ' '),\n          selectionSet,\n        ],\n        ' ',\n      ),\n  },\n  FragmentDefinition: {\n    leave: (\n      { name, typeCondition, variableDefinitions, directives, selectionSet }, // Note: fragment variable definitions are experimental and may be changed\n    ) =>\n      // or removed in the future.\n      `fragment ${name}${wrap('(', join(variableDefinitions, ', '), ')')} ` +\n      `on ${typeCondition} ${wrap('', join(directives, ' '), ' ')}` +\n      selectionSet,\n  },\n  // Value\n  IntValue: {\n    leave: ({ value }) => value,\n  },\n  FloatValue: {\n    leave: ({ value }) => value,\n  },\n  StringValue: {\n    leave: ({ value, block: isBlockString }) =>\n      isBlockString ? (0,_blockString_mjs__WEBPACK_IMPORTED_MODULE_1__.printBlockString)(value) : (0,_printString_mjs__WEBPACK_IMPORTED_MODULE_2__.printString)(value),\n  },\n  BooleanValue: {\n    leave: ({ value }) => (value ? 'true' : 'false'),\n  },\n  NullValue: {\n    leave: () => 'null',\n  },\n  EnumValue: {\n    leave: ({ value }) => value,\n  },\n  ListValue: {\n    leave: ({ values }) => '[' + join(values, ', ') + ']',\n  },\n  ObjectValue: {\n    leave: ({ fields }) => '{' + join(fields, ', ') + '}',\n  },\n  ObjectField: {\n    leave: ({ name, value }) => name + ': ' + value,\n  },\n  // Directive\n  Directive: {\n    leave: ({ name, arguments: args }) =>\n      '@' + name + wrap('(', join(args, ', '), ')'),\n  },\n  // Type\n  NamedType: {\n    leave: ({ name }) => name,\n  },\n  ListType: {\n    leave: ({ type }) => '[' + type + ']',\n  },\n  NonNullType: {\n    leave: ({ type }) => type + '!',\n  },\n  // Type System Definitions\n  SchemaDefinition: {\n    leave: ({ description, directives, operationTypes }) =>\n      wrap('', description, '\\n') +\n      join(['schema', join(directives, ' '), block(operationTypes)], ' '),\n  },\n  OperationTypeDefinition: {\n    leave: ({ operation, type }) => operation + ': ' + type,\n  },\n  ScalarTypeDefinition: {\n    leave: ({ description, name, directives }) =>\n      wrap('', description, '\\n') +\n      join(['scalar', name, join(directives, ' ')], ' '),\n  },\n  ObjectTypeDefinition: {\n    leave: ({ description, name, interfaces, directives, fields }) =>\n      wrap('', description, '\\n') +\n      join(\n        [\n          'type',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  FieldDefinition: {\n    leave: ({ description, name, arguments: args, type, directives }) =>\n      wrap('', description, '\\n') +\n      name +\n      (hasMultilineItems(args)\n        ? wrap('(\\n', indent(join(args, '\\n')), '\\n)')\n        : wrap('(', join(args, ', '), ')')) +\n      ': ' +\n      type +\n      wrap(' ', join(directives, ' ')),\n  },\n  InputValueDefinition: {\n    leave: ({ description, name, type, defaultValue, directives }) =>\n      wrap('', description, '\\n') +\n      join(\n        [name + ': ' + type, wrap('= ', defaultValue), join(directives, ' ')],\n        ' ',\n      ),\n  },\n  InterfaceTypeDefinition: {\n    leave: ({ description, name, interfaces, directives, fields }) =>\n      wrap('', description, '\\n') +\n      join(\n        [\n          'interface',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  UnionTypeDefinition: {\n    leave: ({ description, name, directives, types }) =>\n      wrap('', description, '\\n') +\n      join(\n        ['union', name, join(directives, ' '), wrap('= ', join(types, ' | '))],\n        ' ',\n      ),\n  },\n  EnumTypeDefinition: {\n    leave: ({ description, name, directives, values }) =>\n      wrap('', description, '\\n') +\n      join(['enum', name, join(directives, ' '), block(values)], ' '),\n  },\n  EnumValueDefinition: {\n    leave: ({ description, name, directives }) =>\n      wrap('', description, '\\n') + join([name, join(directives, ' ')], ' '),\n  },\n  InputObjectTypeDefinition: {\n    leave: ({ description, name, directives, fields }) =>\n      wrap('', description, '\\n') +\n      join(['input', name, join(directives, ' '), block(fields)], ' '),\n  },\n  DirectiveDefinition: {\n    leave: ({ description, name, arguments: args, repeatable, locations }) =>\n      wrap('', description, '\\n') +\n      'directive @' +\n      name +\n      (hasMultilineItems(args)\n        ? wrap('(\\n', indent(join(args, '\\n')), '\\n)')\n        : wrap('(', join(args, ', '), ')')) +\n      (repeatable ? ' repeatable' : '') +\n      ' on ' +\n      join(locations, ' | '),\n  },\n  SchemaExtension: {\n    leave: ({ directives, operationTypes }) =>\n      join(\n        ['extend schema', join(directives, ' '), block(operationTypes)],\n        ' ',\n      ),\n  },\n  ScalarTypeExtension: {\n    leave: ({ name, directives }) =>\n      join(['extend scalar', name, join(directives, ' ')], ' '),\n  },\n  ObjectTypeExtension: {\n    leave: ({ name, interfaces, directives, fields }) =>\n      join(\n        [\n          'extend type',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  InterfaceTypeExtension: {\n    leave: ({ name, interfaces, directives, fields }) =>\n      join(\n        [\n          'extend interface',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  UnionTypeExtension: {\n    leave: ({ name, directives, types }) =>\n      join(\n        [\n          'extend union',\n          name,\n          join(directives, ' '),\n          wrap('= ', join(types, ' | ')),\n        ],\n        ' ',\n      ),\n  },\n  EnumTypeExtension: {\n    leave: ({ name, directives, values }) =>\n      join(['extend enum', name, join(directives, ' '), block(values)], ' '),\n  },\n  InputObjectTypeExtension: {\n    leave: ({ name, directives, fields }) =>\n      join(['extend input', name, join(directives, ' '), block(fields)], ' '),\n  },\n};\n/**\n * Given maybeArray, print an empty string if it is null or empty, otherwise\n * print all items together separated by separator if provided\n */\n\nfunction join(maybeArray, separator = '') {\n  var _maybeArray$filter$jo;\n\n  return (_maybeArray$filter$jo =\n    maybeArray === null || maybeArray === void 0\n      ? void 0\n      : maybeArray.filter((x) => x).join(separator)) !== null &&\n    _maybeArray$filter$jo !== void 0\n    ? _maybeArray$filter$jo\n    : '';\n}\n/**\n * Given array, print each item on its own line, wrapped in an indented `{ }` block.\n */\n\nfunction block(array) {\n  return wrap('{\\n', indent(join(array, '\\n')), '\\n}');\n}\n/**\n * If maybeString is not null or empty, then wrap with start and end, otherwise print an empty string.\n */\n\nfunction wrap(start, maybeString, end = '') {\n  return maybeString != null && maybeString !== ''\n    ? start + maybeString + end\n    : '';\n}\n\nfunction indent(str) {\n  return wrap('  ', str.replace(/\\n/g, '\\n  '));\n}\n\nfunction hasMultilineItems(maybeArray) {\n  var _maybeArray$some;\n\n  // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n  /* c8 ignore next */\n  return (_maybeArray$some =\n    maybeArray === null || maybeArray === void 0\n      ? void 0\n      : maybeArray.some((str) => str.includes('\\n'))) !== null &&\n    _maybeArray$some !== void 0\n    ? _maybeArray$some\n    : false;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vZ3JhcGhxbEAxNi4xMS4wL25vZGVfbW9kdWxlcy9ncmFwaHFsL2xhbmd1YWdlL3ByaW50ZXIubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBcUQ7QUFDTDtBQUNWO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBOztBQUVPO0FBQ1AsU0FBUyxtREFBSztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0EsY0FBYywwQ0FBMEM7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGNBQWMsWUFBWTtBQUMxQixHQUFHO0FBQ0g7QUFDQSxZQUFZLHdEQUF3RDtBQUNwRTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQSxjQUFjLGFBQWE7QUFDM0IsR0FBRztBQUNIO0FBQ0E7QUFDQSxjQUFjLGtCQUFrQjtBQUNoQztBQUNBLEdBQUc7QUFDSDtBQUNBLGNBQWMseUNBQXlDO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsUUFBUSxvRUFBb0U7QUFDNUU7QUFDQTtBQUNBLGtCQUFrQixLQUFLLEVBQUUsaURBQWlEO0FBQzFFLFlBQVksZUFBZSxFQUFFLHFDQUFxQztBQUNsRTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsY0FBYyxPQUFPO0FBQ3JCLEdBQUc7QUFDSDtBQUNBLGNBQWMsT0FBTztBQUNyQixHQUFHO0FBQ0g7QUFDQSxjQUFjLDZCQUE2QjtBQUMzQyxzQkFBc0Isa0VBQWdCLFVBQVUsNkRBQVc7QUFDM0QsR0FBRztBQUNIO0FBQ0EsY0FBYyxPQUFPO0FBQ3JCLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsY0FBYyxPQUFPO0FBQ3JCLEdBQUc7QUFDSDtBQUNBLGNBQWMsUUFBUTtBQUN0QixHQUFHO0FBQ0g7QUFDQSxjQUFjLFFBQVEsT0FBTywyQkFBMkI7QUFDeEQsR0FBRztBQUNIO0FBQ0EsY0FBYyxhQUFhO0FBQzNCLEdBQUc7QUFDSDtBQUNBO0FBQ0EsY0FBYyx1QkFBdUI7QUFDckM7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLGNBQWMsTUFBTTtBQUNwQixHQUFHO0FBQ0g7QUFDQSxjQUFjLE1BQU07QUFDcEIsR0FBRztBQUNIO0FBQ0EsY0FBYyxNQUFNO0FBQ3BCLEdBQUc7QUFDSDtBQUNBO0FBQ0EsY0FBYyx5Q0FBeUM7QUFDdkQ7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGNBQWMsaUJBQWlCO0FBQy9CLEdBQUc7QUFDSDtBQUNBLGNBQWMsK0JBQStCO0FBQzdDO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxjQUFjLG1EQUFtRDtBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsY0FBYyxzREFBc0Q7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGNBQWMsbURBQW1EO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxjQUFjLG1EQUFtRDtBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsY0FBYyxzQ0FBc0M7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGNBQWMsdUNBQXVDO0FBQ3JEO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxjQUFjLCtCQUErQjtBQUM3QztBQUNBLEdBQUc7QUFDSDtBQUNBLGNBQWMsdUNBQXVDO0FBQ3JEO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxjQUFjLDJEQUEyRDtBQUN6RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxjQUFjLDRCQUE0QjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGNBQWMsa0JBQWtCO0FBQ2hDO0FBQ0EsR0FBRztBQUNIO0FBQ0EsY0FBYyxzQ0FBc0M7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxjQUFjLHNDQUFzQztBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGNBQWMseUJBQXlCO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGNBQWMsMEJBQTBCO0FBQ3hDO0FBQ0EsR0FBRztBQUNIO0FBQ0EsY0FBYywwQkFBMEI7QUFDeEM7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRFQUE0RTtBQUM1RTs7QUFFQTtBQUNBLGdCQUFnQixvQ0FBb0M7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL3UvUHJvamVjdHMvQ29sZFRyYWNlL25vZGVfbW9kdWxlcy8ucG5wbS9ncmFwaHFsQDE2LjExLjAvbm9kZV9tb2R1bGVzL2dyYXBocWwvbGFuZ3VhZ2UvcHJpbnRlci5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcHJpbnRCbG9ja1N0cmluZyB9IGZyb20gJy4vYmxvY2tTdHJpbmcubWpzJztcbmltcG9ydCB7IHByaW50U3RyaW5nIH0gZnJvbSAnLi9wcmludFN0cmluZy5tanMnO1xuaW1wb3J0IHsgdmlzaXQgfSBmcm9tICcuL3Zpc2l0b3IubWpzJztcbi8qKlxuICogQ29udmVydHMgYW4gQVNUIGludG8gYSBzdHJpbmcsIHVzaW5nIG9uZSBzZXQgb2YgcmVhc29uYWJsZVxuICogZm9ybWF0dGluZyBydWxlcy5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcHJpbnQoYXN0KSB7XG4gIHJldHVybiB2aXNpdChhc3QsIHByaW50RG9jQVNUUmVkdWNlcik7XG59XG5jb25zdCBNQVhfTElORV9MRU5HVEggPSA4MDtcbmNvbnN0IHByaW50RG9jQVNUUmVkdWNlciA9IHtcbiAgTmFtZToge1xuICAgIGxlYXZlOiAobm9kZSkgPT4gbm9kZS52YWx1ZSxcbiAgfSxcbiAgVmFyaWFibGU6IHtcbiAgICBsZWF2ZTogKG5vZGUpID0+ICckJyArIG5vZGUubmFtZSxcbiAgfSxcbiAgLy8gRG9jdW1lbnRcbiAgRG9jdW1lbnQ6IHtcbiAgICBsZWF2ZTogKG5vZGUpID0+IGpvaW4obm9kZS5kZWZpbml0aW9ucywgJ1xcblxcbicpLFxuICB9LFxuICBPcGVyYXRpb25EZWZpbml0aW9uOiB7XG4gICAgbGVhdmUobm9kZSkge1xuICAgICAgY29uc3QgdmFyRGVmcyA9IHdyYXAoJygnLCBqb2luKG5vZGUudmFyaWFibGVEZWZpbml0aW9ucywgJywgJyksICcpJyk7XG4gICAgICBjb25zdCBwcmVmaXggPSBqb2luKFxuICAgICAgICBbXG4gICAgICAgICAgbm9kZS5vcGVyYXRpb24sXG4gICAgICAgICAgam9pbihbbm9kZS5uYW1lLCB2YXJEZWZzXSksXG4gICAgICAgICAgam9pbihub2RlLmRpcmVjdGl2ZXMsICcgJyksXG4gICAgICAgIF0sXG4gICAgICAgICcgJyxcbiAgICAgICk7IC8vIEFub255bW91cyBxdWVyaWVzIHdpdGggbm8gZGlyZWN0aXZlcyBvciB2YXJpYWJsZSBkZWZpbml0aW9ucyBjYW4gdXNlXG4gICAgICAvLyB0aGUgcXVlcnkgc2hvcnQgZm9ybS5cblxuICAgICAgcmV0dXJuIChwcmVmaXggPT09ICdxdWVyeScgPyAnJyA6IHByZWZpeCArICcgJykgKyBub2RlLnNlbGVjdGlvblNldDtcbiAgICB9LFxuICB9LFxuICBWYXJpYWJsZURlZmluaXRpb246IHtcbiAgICBsZWF2ZTogKHsgdmFyaWFibGUsIHR5cGUsIGRlZmF1bHRWYWx1ZSwgZGlyZWN0aXZlcyB9KSA9PlxuICAgICAgdmFyaWFibGUgK1xuICAgICAgJzogJyArXG4gICAgICB0eXBlICtcbiAgICAgIHdyYXAoJyA9ICcsIGRlZmF1bHRWYWx1ZSkgK1xuICAgICAgd3JhcCgnICcsIGpvaW4oZGlyZWN0aXZlcywgJyAnKSksXG4gIH0sXG4gIFNlbGVjdGlvblNldDoge1xuICAgIGxlYXZlOiAoeyBzZWxlY3Rpb25zIH0pID0+IGJsb2NrKHNlbGVjdGlvbnMpLFxuICB9LFxuICBGaWVsZDoge1xuICAgIGxlYXZlKHsgYWxpYXMsIG5hbWUsIGFyZ3VtZW50czogYXJncywgZGlyZWN0aXZlcywgc2VsZWN0aW9uU2V0IH0pIHtcbiAgICAgIGNvbnN0IHByZWZpeCA9IHdyYXAoJycsIGFsaWFzLCAnOiAnKSArIG5hbWU7XG4gICAgICBsZXQgYXJnc0xpbmUgPSBwcmVmaXggKyB3cmFwKCcoJywgam9pbihhcmdzLCAnLCAnKSwgJyknKTtcblxuICAgICAgaWYgKGFyZ3NMaW5lLmxlbmd0aCA+IE1BWF9MSU5FX0xFTkdUSCkge1xuICAgICAgICBhcmdzTGluZSA9IHByZWZpeCArIHdyYXAoJyhcXG4nLCBpbmRlbnQoam9pbihhcmdzLCAnXFxuJykpLCAnXFxuKScpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gam9pbihbYXJnc0xpbmUsIGpvaW4oZGlyZWN0aXZlcywgJyAnKSwgc2VsZWN0aW9uU2V0XSwgJyAnKTtcbiAgICB9LFxuICB9LFxuICBBcmd1bWVudDoge1xuICAgIGxlYXZlOiAoeyBuYW1lLCB2YWx1ZSB9KSA9PiBuYW1lICsgJzogJyArIHZhbHVlLFxuICB9LFxuICAvLyBGcmFnbWVudHNcbiAgRnJhZ21lbnRTcHJlYWQ6IHtcbiAgICBsZWF2ZTogKHsgbmFtZSwgZGlyZWN0aXZlcyB9KSA9PlxuICAgICAgJy4uLicgKyBuYW1lICsgd3JhcCgnICcsIGpvaW4oZGlyZWN0aXZlcywgJyAnKSksXG4gIH0sXG4gIElubGluZUZyYWdtZW50OiB7XG4gICAgbGVhdmU6ICh7IHR5cGVDb25kaXRpb24sIGRpcmVjdGl2ZXMsIHNlbGVjdGlvblNldCB9KSA9PlxuICAgICAgam9pbihcbiAgICAgICAgW1xuICAgICAgICAgICcuLi4nLFxuICAgICAgICAgIHdyYXAoJ29uICcsIHR5cGVDb25kaXRpb24pLFxuICAgICAgICAgIGpvaW4oZGlyZWN0aXZlcywgJyAnKSxcbiAgICAgICAgICBzZWxlY3Rpb25TZXQsXG4gICAgICAgIF0sXG4gICAgICAgICcgJyxcbiAgICAgICksXG4gIH0sXG4gIEZyYWdtZW50RGVmaW5pdGlvbjoge1xuICAgIGxlYXZlOiAoXG4gICAgICB7IG5hbWUsIHR5cGVDb25kaXRpb24sIHZhcmlhYmxlRGVmaW5pdGlvbnMsIGRpcmVjdGl2ZXMsIHNlbGVjdGlvblNldCB9LCAvLyBOb3RlOiBmcmFnbWVudCB2YXJpYWJsZSBkZWZpbml0aW9ucyBhcmUgZXhwZXJpbWVudGFsIGFuZCBtYXkgYmUgY2hhbmdlZFxuICAgICkgPT5cbiAgICAgIC8vIG9yIHJlbW92ZWQgaW4gdGhlIGZ1dHVyZS5cbiAgICAgIGBmcmFnbWVudCAke25hbWV9JHt3cmFwKCcoJywgam9pbih2YXJpYWJsZURlZmluaXRpb25zLCAnLCAnKSwgJyknKX0gYCArXG4gICAgICBgb24gJHt0eXBlQ29uZGl0aW9ufSAke3dyYXAoJycsIGpvaW4oZGlyZWN0aXZlcywgJyAnKSwgJyAnKX1gICtcbiAgICAgIHNlbGVjdGlvblNldCxcbiAgfSxcbiAgLy8gVmFsdWVcbiAgSW50VmFsdWU6IHtcbiAgICBsZWF2ZTogKHsgdmFsdWUgfSkgPT4gdmFsdWUsXG4gIH0sXG4gIEZsb2F0VmFsdWU6IHtcbiAgICBsZWF2ZTogKHsgdmFsdWUgfSkgPT4gdmFsdWUsXG4gIH0sXG4gIFN0cmluZ1ZhbHVlOiB7XG4gICAgbGVhdmU6ICh7IHZhbHVlLCBibG9jazogaXNCbG9ja1N0cmluZyB9KSA9PlxuICAgICAgaXNCbG9ja1N0cmluZyA/IHByaW50QmxvY2tTdHJpbmcodmFsdWUpIDogcHJpbnRTdHJpbmcodmFsdWUpLFxuICB9LFxuICBCb29sZWFuVmFsdWU6IHtcbiAgICBsZWF2ZTogKHsgdmFsdWUgfSkgPT4gKHZhbHVlID8gJ3RydWUnIDogJ2ZhbHNlJyksXG4gIH0sXG4gIE51bGxWYWx1ZToge1xuICAgIGxlYXZlOiAoKSA9PiAnbnVsbCcsXG4gIH0sXG4gIEVudW1WYWx1ZToge1xuICAgIGxlYXZlOiAoeyB2YWx1ZSB9KSA9PiB2YWx1ZSxcbiAgfSxcbiAgTGlzdFZhbHVlOiB7XG4gICAgbGVhdmU6ICh7IHZhbHVlcyB9KSA9PiAnWycgKyBqb2luKHZhbHVlcywgJywgJykgKyAnXScsXG4gIH0sXG4gIE9iamVjdFZhbHVlOiB7XG4gICAgbGVhdmU6ICh7IGZpZWxkcyB9KSA9PiAneycgKyBqb2luKGZpZWxkcywgJywgJykgKyAnfScsXG4gIH0sXG4gIE9iamVjdEZpZWxkOiB7XG4gICAgbGVhdmU6ICh7IG5hbWUsIHZhbHVlIH0pID0+IG5hbWUgKyAnOiAnICsgdmFsdWUsXG4gIH0sXG4gIC8vIERpcmVjdGl2ZVxuICBEaXJlY3RpdmU6IHtcbiAgICBsZWF2ZTogKHsgbmFtZSwgYXJndW1lbnRzOiBhcmdzIH0pID0+XG4gICAgICAnQCcgKyBuYW1lICsgd3JhcCgnKCcsIGpvaW4oYXJncywgJywgJyksICcpJyksXG4gIH0sXG4gIC8vIFR5cGVcbiAgTmFtZWRUeXBlOiB7XG4gICAgbGVhdmU6ICh7IG5hbWUgfSkgPT4gbmFtZSxcbiAgfSxcbiAgTGlzdFR5cGU6IHtcbiAgICBsZWF2ZTogKHsgdHlwZSB9KSA9PiAnWycgKyB0eXBlICsgJ10nLFxuICB9LFxuICBOb25OdWxsVHlwZToge1xuICAgIGxlYXZlOiAoeyB0eXBlIH0pID0+IHR5cGUgKyAnIScsXG4gIH0sXG4gIC8vIFR5cGUgU3lzdGVtIERlZmluaXRpb25zXG4gIFNjaGVtYURlZmluaXRpb246IHtcbiAgICBsZWF2ZTogKHsgZGVzY3JpcHRpb24sIGRpcmVjdGl2ZXMsIG9wZXJhdGlvblR5cGVzIH0pID0+XG4gICAgICB3cmFwKCcnLCBkZXNjcmlwdGlvbiwgJ1xcbicpICtcbiAgICAgIGpvaW4oWydzY2hlbWEnLCBqb2luKGRpcmVjdGl2ZXMsICcgJyksIGJsb2NrKG9wZXJhdGlvblR5cGVzKV0sICcgJyksXG4gIH0sXG4gIE9wZXJhdGlvblR5cGVEZWZpbml0aW9uOiB7XG4gICAgbGVhdmU6ICh7IG9wZXJhdGlvbiwgdHlwZSB9KSA9PiBvcGVyYXRpb24gKyAnOiAnICsgdHlwZSxcbiAgfSxcbiAgU2NhbGFyVHlwZURlZmluaXRpb246IHtcbiAgICBsZWF2ZTogKHsgZGVzY3JpcHRpb24sIG5hbWUsIGRpcmVjdGl2ZXMgfSkgPT5cbiAgICAgIHdyYXAoJycsIGRlc2NyaXB0aW9uLCAnXFxuJykgK1xuICAgICAgam9pbihbJ3NjYWxhcicsIG5hbWUsIGpvaW4oZGlyZWN0aXZlcywgJyAnKV0sICcgJyksXG4gIH0sXG4gIE9iamVjdFR5cGVEZWZpbml0aW9uOiB7XG4gICAgbGVhdmU6ICh7IGRlc2NyaXB0aW9uLCBuYW1lLCBpbnRlcmZhY2VzLCBkaXJlY3RpdmVzLCBmaWVsZHMgfSkgPT5cbiAgICAgIHdyYXAoJycsIGRlc2NyaXB0aW9uLCAnXFxuJykgK1xuICAgICAgam9pbihcbiAgICAgICAgW1xuICAgICAgICAgICd0eXBlJyxcbiAgICAgICAgICBuYW1lLFxuICAgICAgICAgIHdyYXAoJ2ltcGxlbWVudHMgJywgam9pbihpbnRlcmZhY2VzLCAnICYgJykpLFxuICAgICAgICAgIGpvaW4oZGlyZWN0aXZlcywgJyAnKSxcbiAgICAgICAgICBibG9jayhmaWVsZHMpLFxuICAgICAgICBdLFxuICAgICAgICAnICcsXG4gICAgICApLFxuICB9LFxuICBGaWVsZERlZmluaXRpb246IHtcbiAgICBsZWF2ZTogKHsgZGVzY3JpcHRpb24sIG5hbWUsIGFyZ3VtZW50czogYXJncywgdHlwZSwgZGlyZWN0aXZlcyB9KSA9PlxuICAgICAgd3JhcCgnJywgZGVzY3JpcHRpb24sICdcXG4nKSArXG4gICAgICBuYW1lICtcbiAgICAgIChoYXNNdWx0aWxpbmVJdGVtcyhhcmdzKVxuICAgICAgICA/IHdyYXAoJyhcXG4nLCBpbmRlbnQoam9pbihhcmdzLCAnXFxuJykpLCAnXFxuKScpXG4gICAgICAgIDogd3JhcCgnKCcsIGpvaW4oYXJncywgJywgJyksICcpJykpICtcbiAgICAgICc6ICcgK1xuICAgICAgdHlwZSArXG4gICAgICB3cmFwKCcgJywgam9pbihkaXJlY3RpdmVzLCAnICcpKSxcbiAgfSxcbiAgSW5wdXRWYWx1ZURlZmluaXRpb246IHtcbiAgICBsZWF2ZTogKHsgZGVzY3JpcHRpb24sIG5hbWUsIHR5cGUsIGRlZmF1bHRWYWx1ZSwgZGlyZWN0aXZlcyB9KSA9PlxuICAgICAgd3JhcCgnJywgZGVzY3JpcHRpb24sICdcXG4nKSArXG4gICAgICBqb2luKFxuICAgICAgICBbbmFtZSArICc6ICcgKyB0eXBlLCB3cmFwKCc9ICcsIGRlZmF1bHRWYWx1ZSksIGpvaW4oZGlyZWN0aXZlcywgJyAnKV0sXG4gICAgICAgICcgJyxcbiAgICAgICksXG4gIH0sXG4gIEludGVyZmFjZVR5cGVEZWZpbml0aW9uOiB7XG4gICAgbGVhdmU6ICh7IGRlc2NyaXB0aW9uLCBuYW1lLCBpbnRlcmZhY2VzLCBkaXJlY3RpdmVzLCBmaWVsZHMgfSkgPT5cbiAgICAgIHdyYXAoJycsIGRlc2NyaXB0aW9uLCAnXFxuJykgK1xuICAgICAgam9pbihcbiAgICAgICAgW1xuICAgICAgICAgICdpbnRlcmZhY2UnLFxuICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgd3JhcCgnaW1wbGVtZW50cyAnLCBqb2luKGludGVyZmFjZXMsICcgJiAnKSksXG4gICAgICAgICAgam9pbihkaXJlY3RpdmVzLCAnICcpLFxuICAgICAgICAgIGJsb2NrKGZpZWxkcyksXG4gICAgICAgIF0sXG4gICAgICAgICcgJyxcbiAgICAgICksXG4gIH0sXG4gIFVuaW9uVHlwZURlZmluaXRpb246IHtcbiAgICBsZWF2ZTogKHsgZGVzY3JpcHRpb24sIG5hbWUsIGRpcmVjdGl2ZXMsIHR5cGVzIH0pID0+XG4gICAgICB3cmFwKCcnLCBkZXNjcmlwdGlvbiwgJ1xcbicpICtcbiAgICAgIGpvaW4oXG4gICAgICAgIFsndW5pb24nLCBuYW1lLCBqb2luKGRpcmVjdGl2ZXMsICcgJyksIHdyYXAoJz0gJywgam9pbih0eXBlcywgJyB8ICcpKV0sXG4gICAgICAgICcgJyxcbiAgICAgICksXG4gIH0sXG4gIEVudW1UeXBlRGVmaW5pdGlvbjoge1xuICAgIGxlYXZlOiAoeyBkZXNjcmlwdGlvbiwgbmFtZSwgZGlyZWN0aXZlcywgdmFsdWVzIH0pID0+XG4gICAgICB3cmFwKCcnLCBkZXNjcmlwdGlvbiwgJ1xcbicpICtcbiAgICAgIGpvaW4oWydlbnVtJywgbmFtZSwgam9pbihkaXJlY3RpdmVzLCAnICcpLCBibG9jayh2YWx1ZXMpXSwgJyAnKSxcbiAgfSxcbiAgRW51bVZhbHVlRGVmaW5pdGlvbjoge1xuICAgIGxlYXZlOiAoeyBkZXNjcmlwdGlvbiwgbmFtZSwgZGlyZWN0aXZlcyB9KSA9PlxuICAgICAgd3JhcCgnJywgZGVzY3JpcHRpb24sICdcXG4nKSArIGpvaW4oW25hbWUsIGpvaW4oZGlyZWN0aXZlcywgJyAnKV0sICcgJyksXG4gIH0sXG4gIElucHV0T2JqZWN0VHlwZURlZmluaXRpb246IHtcbiAgICBsZWF2ZTogKHsgZGVzY3JpcHRpb24sIG5hbWUsIGRpcmVjdGl2ZXMsIGZpZWxkcyB9KSA9PlxuICAgICAgd3JhcCgnJywgZGVzY3JpcHRpb24sICdcXG4nKSArXG4gICAgICBqb2luKFsnaW5wdXQnLCBuYW1lLCBqb2luKGRpcmVjdGl2ZXMsICcgJyksIGJsb2NrKGZpZWxkcyldLCAnICcpLFxuICB9LFxuICBEaXJlY3RpdmVEZWZpbml0aW9uOiB7XG4gICAgbGVhdmU6ICh7IGRlc2NyaXB0aW9uLCBuYW1lLCBhcmd1bWVudHM6IGFyZ3MsIHJlcGVhdGFibGUsIGxvY2F0aW9ucyB9KSA9PlxuICAgICAgd3JhcCgnJywgZGVzY3JpcHRpb24sICdcXG4nKSArXG4gICAgICAnZGlyZWN0aXZlIEAnICtcbiAgICAgIG5hbWUgK1xuICAgICAgKGhhc011bHRpbGluZUl0ZW1zKGFyZ3MpXG4gICAgICAgID8gd3JhcCgnKFxcbicsIGluZGVudChqb2luKGFyZ3MsICdcXG4nKSksICdcXG4pJylcbiAgICAgICAgOiB3cmFwKCcoJywgam9pbihhcmdzLCAnLCAnKSwgJyknKSkgK1xuICAgICAgKHJlcGVhdGFibGUgPyAnIHJlcGVhdGFibGUnIDogJycpICtcbiAgICAgICcgb24gJyArXG4gICAgICBqb2luKGxvY2F0aW9ucywgJyB8ICcpLFxuICB9LFxuICBTY2hlbWFFeHRlbnNpb246IHtcbiAgICBsZWF2ZTogKHsgZGlyZWN0aXZlcywgb3BlcmF0aW9uVHlwZXMgfSkgPT5cbiAgICAgIGpvaW4oXG4gICAgICAgIFsnZXh0ZW5kIHNjaGVtYScsIGpvaW4oZGlyZWN0aXZlcywgJyAnKSwgYmxvY2sob3BlcmF0aW9uVHlwZXMpXSxcbiAgICAgICAgJyAnLFxuICAgICAgKSxcbiAgfSxcbiAgU2NhbGFyVHlwZUV4dGVuc2lvbjoge1xuICAgIGxlYXZlOiAoeyBuYW1lLCBkaXJlY3RpdmVzIH0pID0+XG4gICAgICBqb2luKFsnZXh0ZW5kIHNjYWxhcicsIG5hbWUsIGpvaW4oZGlyZWN0aXZlcywgJyAnKV0sICcgJyksXG4gIH0sXG4gIE9iamVjdFR5cGVFeHRlbnNpb246IHtcbiAgICBsZWF2ZTogKHsgbmFtZSwgaW50ZXJmYWNlcywgZGlyZWN0aXZlcywgZmllbGRzIH0pID0+XG4gICAgICBqb2luKFxuICAgICAgICBbXG4gICAgICAgICAgJ2V4dGVuZCB0eXBlJyxcbiAgICAgICAgICBuYW1lLFxuICAgICAgICAgIHdyYXAoJ2ltcGxlbWVudHMgJywgam9pbihpbnRlcmZhY2VzLCAnICYgJykpLFxuICAgICAgICAgIGpvaW4oZGlyZWN0aXZlcywgJyAnKSxcbiAgICAgICAgICBibG9jayhmaWVsZHMpLFxuICAgICAgICBdLFxuICAgICAgICAnICcsXG4gICAgICApLFxuICB9LFxuICBJbnRlcmZhY2VUeXBlRXh0ZW5zaW9uOiB7XG4gICAgbGVhdmU6ICh7IG5hbWUsIGludGVyZmFjZXMsIGRpcmVjdGl2ZXMsIGZpZWxkcyB9KSA9PlxuICAgICAgam9pbihcbiAgICAgICAgW1xuICAgICAgICAgICdleHRlbmQgaW50ZXJmYWNlJyxcbiAgICAgICAgICBuYW1lLFxuICAgICAgICAgIHdyYXAoJ2ltcGxlbWVudHMgJywgam9pbihpbnRlcmZhY2VzLCAnICYgJykpLFxuICAgICAgICAgIGpvaW4oZGlyZWN0aXZlcywgJyAnKSxcbiAgICAgICAgICBibG9jayhmaWVsZHMpLFxuICAgICAgICBdLFxuICAgICAgICAnICcsXG4gICAgICApLFxuICB9LFxuICBVbmlvblR5cGVFeHRlbnNpb246IHtcbiAgICBsZWF2ZTogKHsgbmFtZSwgZGlyZWN0aXZlcywgdHlwZXMgfSkgPT5cbiAgICAgIGpvaW4oXG4gICAgICAgIFtcbiAgICAgICAgICAnZXh0ZW5kIHVuaW9uJyxcbiAgICAgICAgICBuYW1lLFxuICAgICAgICAgIGpvaW4oZGlyZWN0aXZlcywgJyAnKSxcbiAgICAgICAgICB3cmFwKCc9ICcsIGpvaW4odHlwZXMsICcgfCAnKSksXG4gICAgICAgIF0sXG4gICAgICAgICcgJyxcbiAgICAgICksXG4gIH0sXG4gIEVudW1UeXBlRXh0ZW5zaW9uOiB7XG4gICAgbGVhdmU6ICh7IG5hbWUsIGRpcmVjdGl2ZXMsIHZhbHVlcyB9KSA9PlxuICAgICAgam9pbihbJ2V4dGVuZCBlbnVtJywgbmFtZSwgam9pbihkaXJlY3RpdmVzLCAnICcpLCBibG9jayh2YWx1ZXMpXSwgJyAnKSxcbiAgfSxcbiAgSW5wdXRPYmplY3RUeXBlRXh0ZW5zaW9uOiB7XG4gICAgbGVhdmU6ICh7IG5hbWUsIGRpcmVjdGl2ZXMsIGZpZWxkcyB9KSA9PlxuICAgICAgam9pbihbJ2V4dGVuZCBpbnB1dCcsIG5hbWUsIGpvaW4oZGlyZWN0aXZlcywgJyAnKSwgYmxvY2soZmllbGRzKV0sICcgJyksXG4gIH0sXG59O1xuLyoqXG4gKiBHaXZlbiBtYXliZUFycmF5LCBwcmludCBhbiBlbXB0eSBzdHJpbmcgaWYgaXQgaXMgbnVsbCBvciBlbXB0eSwgb3RoZXJ3aXNlXG4gKiBwcmludCBhbGwgaXRlbXMgdG9nZXRoZXIgc2VwYXJhdGVkIGJ5IHNlcGFyYXRvciBpZiBwcm92aWRlZFxuICovXG5cbmZ1bmN0aW9uIGpvaW4obWF5YmVBcnJheSwgc2VwYXJhdG9yID0gJycpIHtcbiAgdmFyIF9tYXliZUFycmF5JGZpbHRlciRqbztcblxuICByZXR1cm4gKF9tYXliZUFycmF5JGZpbHRlciRqbyA9XG4gICAgbWF5YmVBcnJheSA9PT0gbnVsbCB8fCBtYXliZUFycmF5ID09PSB2b2lkIDBcbiAgICAgID8gdm9pZCAwXG4gICAgICA6IG1heWJlQXJyYXkuZmlsdGVyKCh4KSA9PiB4KS5qb2luKHNlcGFyYXRvcikpICE9PSBudWxsICYmXG4gICAgX21heWJlQXJyYXkkZmlsdGVyJGpvICE9PSB2b2lkIDBcbiAgICA/IF9tYXliZUFycmF5JGZpbHRlciRqb1xuICAgIDogJyc7XG59XG4vKipcbiAqIEdpdmVuIGFycmF5LCBwcmludCBlYWNoIGl0ZW0gb24gaXRzIG93biBsaW5lLCB3cmFwcGVkIGluIGFuIGluZGVudGVkIGB7IH1gIGJsb2NrLlxuICovXG5cbmZ1bmN0aW9uIGJsb2NrKGFycmF5KSB7XG4gIHJldHVybiB3cmFwKCd7XFxuJywgaW5kZW50KGpvaW4oYXJyYXksICdcXG4nKSksICdcXG59Jyk7XG59XG4vKipcbiAqIElmIG1heWJlU3RyaW5nIGlzIG5vdCBudWxsIG9yIGVtcHR5LCB0aGVuIHdyYXAgd2l0aCBzdGFydCBhbmQgZW5kLCBvdGhlcndpc2UgcHJpbnQgYW4gZW1wdHkgc3RyaW5nLlxuICovXG5cbmZ1bmN0aW9uIHdyYXAoc3RhcnQsIG1heWJlU3RyaW5nLCBlbmQgPSAnJykge1xuICByZXR1cm4gbWF5YmVTdHJpbmcgIT0gbnVsbCAmJiBtYXliZVN0cmluZyAhPT0gJydcbiAgICA/IHN0YXJ0ICsgbWF5YmVTdHJpbmcgKyBlbmRcbiAgICA6ICcnO1xufVxuXG5mdW5jdGlvbiBpbmRlbnQoc3RyKSB7XG4gIHJldHVybiB3cmFwKCcgICcsIHN0ci5yZXBsYWNlKC9cXG4vZywgJ1xcbiAgJykpO1xufVxuXG5mdW5jdGlvbiBoYXNNdWx0aWxpbmVJdGVtcyhtYXliZUFycmF5KSB7XG4gIHZhciBfbWF5YmVBcnJheSRzb21lO1xuXG4gIC8vIEZJWE1FOiBodHRwczovL2dpdGh1Yi5jb20vZ3JhcGhxbC9ncmFwaHFsLWpzL2lzc3Vlcy8yMjAzXG5cbiAgLyogYzggaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuIChfbWF5YmVBcnJheSRzb21lID1cbiAgICBtYXliZUFycmF5ID09PSBudWxsIHx8IG1heWJlQXJyYXkgPT09IHZvaWQgMFxuICAgICAgPyB2b2lkIDBcbiAgICAgIDogbWF5YmVBcnJheS5zb21lKChzdHIpID0+IHN0ci5pbmNsdWRlcygnXFxuJykpKSAhPT0gbnVsbCAmJlxuICAgIF9tYXliZUFycmF5JHNvbWUgIT09IHZvaWQgMFxuICAgID8gX21heWJlQXJyYXkkc29tZVxuICAgIDogZmFsc2U7XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/printer.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/source.mjs":
/*!*****************************************************************************************!*\
  !*** ../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/source.mjs ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Source: () => (/* binding */ Source),\n/* harmony export */   isSource: () => (/* binding */ isSource)\n/* harmony export */ });\n/* harmony import */ var _jsutils_devAssert_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsutils/devAssert.mjs */ \"(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/jsutils/devAssert.mjs\");\n/* harmony import */ var _jsutils_inspect_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../jsutils/inspect.mjs */ \"(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/jsutils/inspect.mjs\");\n/* harmony import */ var _jsutils_instanceOf_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../jsutils/instanceOf.mjs */ \"(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/jsutils/instanceOf.mjs\");\n\n\n\n\n/**\n * A representation of source input to GraphQL. The `name` and `locationOffset` parameters are\n * optional, but they are useful for clients who store GraphQL documents in source files.\n * For example, if the GraphQL input starts at line 40 in a file named `Foo.graphql`, it might\n * be useful for `name` to be `\"Foo.graphql\"` and location to be `{ line: 40, column: 1 }`.\n * The `line` and `column` properties in `locationOffset` are 1-indexed.\n */\nclass Source {\n  constructor(\n    body,\n    name = 'GraphQL request',\n    locationOffset = {\n      line: 1,\n      column: 1,\n    },\n  ) {\n    typeof body === 'string' ||\n      (0,_jsutils_devAssert_mjs__WEBPACK_IMPORTED_MODULE_0__.devAssert)(false, `Body must be a string. Received: ${(0,_jsutils_inspect_mjs__WEBPACK_IMPORTED_MODULE_1__.inspect)(body)}.`);\n    this.body = body;\n    this.name = name;\n    this.locationOffset = locationOffset;\n    this.locationOffset.line > 0 ||\n      (0,_jsutils_devAssert_mjs__WEBPACK_IMPORTED_MODULE_0__.devAssert)(\n        false,\n        'line in locationOffset is 1-indexed and must be positive.',\n      );\n    this.locationOffset.column > 0 ||\n      (0,_jsutils_devAssert_mjs__WEBPACK_IMPORTED_MODULE_0__.devAssert)(\n        false,\n        'column in locationOffset is 1-indexed and must be positive.',\n      );\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Source';\n  }\n}\n/**\n * Test if the given value is a Source object.\n *\n * @internal\n */\n\nfunction isSource(source) {\n  return (0,_jsutils_instanceOf_mjs__WEBPACK_IMPORTED_MODULE_2__.instanceOf)(source, Source);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vZ3JhcGhxbEAxNi4xMS4wL25vZGVfbW9kdWxlcy9ncmFwaHFsL2xhbmd1YWdlL3NvdXJjZS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBcUQ7QUFDSjtBQUNNOztBQUV2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9FQUFvRSxxQkFBcUI7QUFDekY7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxNQUFNLGlFQUFTLDRDQUE0Qyw2REFBTyxPQUFPO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxpRUFBUztBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxpRUFBUztBQUNmO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFTztBQUNQLFNBQVMsbUVBQVU7QUFDbkIiLCJzb3VyY2VzIjpbIi9ob21lL3UvUHJvamVjdHMvQ29sZFRyYWNlL25vZGVfbW9kdWxlcy8ucG5wbS9ncmFwaHFsQDE2LjExLjAvbm9kZV9tb2R1bGVzL2dyYXBocWwvbGFuZ3VhZ2Uvc291cmNlLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkZXZBc3NlcnQgfSBmcm9tICcuLi9qc3V0aWxzL2RldkFzc2VydC5tanMnO1xuaW1wb3J0IHsgaW5zcGVjdCB9IGZyb20gJy4uL2pzdXRpbHMvaW5zcGVjdC5tanMnO1xuaW1wb3J0IHsgaW5zdGFuY2VPZiB9IGZyb20gJy4uL2pzdXRpbHMvaW5zdGFuY2VPZi5tanMnO1xuXG4vKipcbiAqIEEgcmVwcmVzZW50YXRpb24gb2Ygc291cmNlIGlucHV0IHRvIEdyYXBoUUwuIFRoZSBgbmFtZWAgYW5kIGBsb2NhdGlvbk9mZnNldGAgcGFyYW1ldGVycyBhcmVcbiAqIG9wdGlvbmFsLCBidXQgdGhleSBhcmUgdXNlZnVsIGZvciBjbGllbnRzIHdobyBzdG9yZSBHcmFwaFFMIGRvY3VtZW50cyBpbiBzb3VyY2UgZmlsZXMuXG4gKiBGb3IgZXhhbXBsZSwgaWYgdGhlIEdyYXBoUUwgaW5wdXQgc3RhcnRzIGF0IGxpbmUgNDAgaW4gYSBmaWxlIG5hbWVkIGBGb28uZ3JhcGhxbGAsIGl0IG1pZ2h0XG4gKiBiZSB1c2VmdWwgZm9yIGBuYW1lYCB0byBiZSBgXCJGb28uZ3JhcGhxbFwiYCBhbmQgbG9jYXRpb24gdG8gYmUgYHsgbGluZTogNDAsIGNvbHVtbjogMSB9YC5cbiAqIFRoZSBgbGluZWAgYW5kIGBjb2x1bW5gIHByb3BlcnRpZXMgaW4gYGxvY2F0aW9uT2Zmc2V0YCBhcmUgMS1pbmRleGVkLlxuICovXG5leHBvcnQgY2xhc3MgU291cmNlIHtcbiAgY29uc3RydWN0b3IoXG4gICAgYm9keSxcbiAgICBuYW1lID0gJ0dyYXBoUUwgcmVxdWVzdCcsXG4gICAgbG9jYXRpb25PZmZzZXQgPSB7XG4gICAgICBsaW5lOiAxLFxuICAgICAgY29sdW1uOiAxLFxuICAgIH0sXG4gICkge1xuICAgIHR5cGVvZiBib2R5ID09PSAnc3RyaW5nJyB8fFxuICAgICAgZGV2QXNzZXJ0KGZhbHNlLCBgQm9keSBtdXN0IGJlIGEgc3RyaW5nLiBSZWNlaXZlZDogJHtpbnNwZWN0KGJvZHkpfS5gKTtcbiAgICB0aGlzLmJvZHkgPSBib2R5O1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgdGhpcy5sb2NhdGlvbk9mZnNldCA9IGxvY2F0aW9uT2Zmc2V0O1xuICAgIHRoaXMubG9jYXRpb25PZmZzZXQubGluZSA+IDAgfHxcbiAgICAgIGRldkFzc2VydChcbiAgICAgICAgZmFsc2UsXG4gICAgICAgICdsaW5lIGluIGxvY2F0aW9uT2Zmc2V0IGlzIDEtaW5kZXhlZCBhbmQgbXVzdCBiZSBwb3NpdGl2ZS4nLFxuICAgICAgKTtcbiAgICB0aGlzLmxvY2F0aW9uT2Zmc2V0LmNvbHVtbiA+IDAgfHxcbiAgICAgIGRldkFzc2VydChcbiAgICAgICAgZmFsc2UsXG4gICAgICAgICdjb2x1bW4gaW4gbG9jYXRpb25PZmZzZXQgaXMgMS1pbmRleGVkIGFuZCBtdXN0IGJlIHBvc2l0aXZlLicsXG4gICAgICApO1xuICB9XG5cbiAgZ2V0IFtTeW1ib2wudG9TdHJpbmdUYWddKCkge1xuICAgIHJldHVybiAnU291cmNlJztcbiAgfVxufVxuLyoqXG4gKiBUZXN0IGlmIHRoZSBnaXZlbiB2YWx1ZSBpcyBhIFNvdXJjZSBvYmplY3QuXG4gKlxuICogQGludGVybmFsXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGlzU291cmNlKHNvdXJjZSkge1xuICByZXR1cm4gaW5zdGFuY2VPZihzb3VyY2UsIFNvdXJjZSk7XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/source.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/tokenKind.mjs":
/*!********************************************************************************************!*\
  !*** ../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/tokenKind.mjs ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TokenKind: () => (/* binding */ TokenKind)\n/* harmony export */ });\n/**\n * An exported enum describing the different kinds of tokens that the\n * lexer emits.\n */\nvar TokenKind;\n\n(function (TokenKind) {\n  TokenKind['SOF'] = '<SOF>';\n  TokenKind['EOF'] = '<EOF>';\n  TokenKind['BANG'] = '!';\n  TokenKind['DOLLAR'] = '$';\n  TokenKind['AMP'] = '&';\n  TokenKind['PAREN_L'] = '(';\n  TokenKind['PAREN_R'] = ')';\n  TokenKind['SPREAD'] = '...';\n  TokenKind['COLON'] = ':';\n  TokenKind['EQUALS'] = '=';\n  TokenKind['AT'] = '@';\n  TokenKind['BRACKET_L'] = '[';\n  TokenKind['BRACKET_R'] = ']';\n  TokenKind['BRACE_L'] = '{';\n  TokenKind['PIPE'] = '|';\n  TokenKind['BRACE_R'] = '}';\n  TokenKind['NAME'] = 'Name';\n  TokenKind['INT'] = 'Int';\n  TokenKind['FLOAT'] = 'Float';\n  TokenKind['STRING'] = 'String';\n  TokenKind['BLOCK_STRING'] = 'BlockString';\n  TokenKind['COMMENT'] = 'Comment';\n})(TokenKind || (TokenKind = {}));\n\n\n/**\n * The enum type representing the token kinds values.\n *\n * @deprecated Please use `TokenKind`. Will be remove in v17.\n */\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vZ3JhcGhxbEAxNi4xMS4wL25vZGVfbW9kdWxlcy9ncmFwaHFsL2xhbmd1YWdlL3Rva2VuS2luZC5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDhCQUE4Qjs7QUFFVjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvaG9tZS91L1Byb2plY3RzL0NvbGRUcmFjZS9ub2RlX21vZHVsZXMvLnBucG0vZ3JhcGhxbEAxNi4xMS4wL25vZGVfbW9kdWxlcy9ncmFwaHFsL2xhbmd1YWdlL3Rva2VuS2luZC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBbiBleHBvcnRlZCBlbnVtIGRlc2NyaWJpbmcgdGhlIGRpZmZlcmVudCBraW5kcyBvZiB0b2tlbnMgdGhhdCB0aGVcbiAqIGxleGVyIGVtaXRzLlxuICovXG52YXIgVG9rZW5LaW5kO1xuXG4oZnVuY3Rpb24gKFRva2VuS2luZCkge1xuICBUb2tlbktpbmRbJ1NPRiddID0gJzxTT0Y+JztcbiAgVG9rZW5LaW5kWydFT0YnXSA9ICc8RU9GPic7XG4gIFRva2VuS2luZFsnQkFORyddID0gJyEnO1xuICBUb2tlbktpbmRbJ0RPTExBUiddID0gJyQnO1xuICBUb2tlbktpbmRbJ0FNUCddID0gJyYnO1xuICBUb2tlbktpbmRbJ1BBUkVOX0wnXSA9ICcoJztcbiAgVG9rZW5LaW5kWydQQVJFTl9SJ10gPSAnKSc7XG4gIFRva2VuS2luZFsnU1BSRUFEJ10gPSAnLi4uJztcbiAgVG9rZW5LaW5kWydDT0xPTiddID0gJzonO1xuICBUb2tlbktpbmRbJ0VRVUFMUyddID0gJz0nO1xuICBUb2tlbktpbmRbJ0FUJ10gPSAnQCc7XG4gIFRva2VuS2luZFsnQlJBQ0tFVF9MJ10gPSAnWyc7XG4gIFRva2VuS2luZFsnQlJBQ0tFVF9SJ10gPSAnXSc7XG4gIFRva2VuS2luZFsnQlJBQ0VfTCddID0gJ3snO1xuICBUb2tlbktpbmRbJ1BJUEUnXSA9ICd8JztcbiAgVG9rZW5LaW5kWydCUkFDRV9SJ10gPSAnfSc7XG4gIFRva2VuS2luZFsnTkFNRSddID0gJ05hbWUnO1xuICBUb2tlbktpbmRbJ0lOVCddID0gJ0ludCc7XG4gIFRva2VuS2luZFsnRkxPQVQnXSA9ICdGbG9hdCc7XG4gIFRva2VuS2luZFsnU1RSSU5HJ10gPSAnU3RyaW5nJztcbiAgVG9rZW5LaW5kWydCTE9DS19TVFJJTkcnXSA9ICdCbG9ja1N0cmluZyc7XG4gIFRva2VuS2luZFsnQ09NTUVOVCddID0gJ0NvbW1lbnQnO1xufSkoVG9rZW5LaW5kIHx8IChUb2tlbktpbmQgPSB7fSkpO1xuXG5leHBvcnQgeyBUb2tlbktpbmQgfTtcbi8qKlxuICogVGhlIGVudW0gdHlwZSByZXByZXNlbnRpbmcgdGhlIHRva2VuIGtpbmRzIHZhbHVlcy5cbiAqXG4gKiBAZGVwcmVjYXRlZCBQbGVhc2UgdXNlIGBUb2tlbktpbmRgLiBXaWxsIGJlIHJlbW92ZSBpbiB2MTcuXG4gKi9cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/tokenKind.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/visitor.mjs":
/*!******************************************************************************************!*\
  !*** ../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/visitor.mjs ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BREAK: () => (/* binding */ BREAK),\n/* harmony export */   getEnterLeaveForKind: () => (/* binding */ getEnterLeaveForKind),\n/* harmony export */   getVisitFn: () => (/* binding */ getVisitFn),\n/* harmony export */   visit: () => (/* binding */ visit),\n/* harmony export */   visitInParallel: () => (/* binding */ visitInParallel)\n/* harmony export */ });\n/* harmony import */ var _jsutils_devAssert_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../jsutils/devAssert.mjs */ \"(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/jsutils/devAssert.mjs\");\n/* harmony import */ var _jsutils_inspect_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../jsutils/inspect.mjs */ \"(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/jsutils/inspect.mjs\");\n/* harmony import */ var _ast_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ast.mjs */ \"(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/ast.mjs\");\n/* harmony import */ var _kinds_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./kinds.mjs */ \"(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/kinds.mjs\");\n\n\n\n\n/**\n * A visitor is provided to visit, it contains the collection of\n * relevant functions to be called during the visitor's traversal.\n */\n\nconst BREAK = Object.freeze({});\n/**\n * visit() will walk through an AST using a depth-first traversal, calling\n * the visitor's enter function at each node in the traversal, and calling the\n * leave function after visiting that node and all of its child nodes.\n *\n * By returning different values from the enter and leave functions, the\n * behavior of the visitor can be altered, including skipping over a sub-tree of\n * the AST (by returning false), editing the AST by returning a value or null\n * to remove the value, or to stop the whole traversal by returning BREAK.\n *\n * When using visit() to edit an AST, the original AST will not be modified, and\n * a new version of the AST with the changes applied will be returned from the\n * visit function.\n *\n * ```ts\n * const editedAST = visit(ast, {\n *   enter(node, key, parent, path, ancestors) {\n *     // @return\n *     //   undefined: no action\n *     //   false: skip visiting this node\n *     //   visitor.BREAK: stop visiting altogether\n *     //   null: delete this node\n *     //   any value: replace this node with the returned value\n *   },\n *   leave(node, key, parent, path, ancestors) {\n *     // @return\n *     //   undefined: no action\n *     //   false: no action\n *     //   visitor.BREAK: stop visiting altogether\n *     //   null: delete this node\n *     //   any value: replace this node with the returned value\n *   }\n * });\n * ```\n *\n * Alternatively to providing enter() and leave() functions, a visitor can\n * instead provide functions named the same as the kinds of AST nodes, or\n * enter/leave visitors at a named key, leading to three permutations of the\n * visitor API:\n *\n * 1) Named visitors triggered when entering a node of a specific kind.\n *\n * ```ts\n * visit(ast, {\n *   Kind(node) {\n *     // enter the \"Kind\" node\n *   }\n * })\n * ```\n *\n * 2) Named visitors that trigger upon entering and leaving a node of a specific kind.\n *\n * ```ts\n * visit(ast, {\n *   Kind: {\n *     enter(node) {\n *       // enter the \"Kind\" node\n *     }\n *     leave(node) {\n *       // leave the \"Kind\" node\n *     }\n *   }\n * })\n * ```\n *\n * 3) Generic visitors that trigger upon entering and leaving any node.\n *\n * ```ts\n * visit(ast, {\n *   enter(node) {\n *     // enter any node\n *   },\n *   leave(node) {\n *     // leave any node\n *   }\n * })\n * ```\n */\n\nfunction visit(root, visitor, visitorKeys = _ast_mjs__WEBPACK_IMPORTED_MODULE_0__.QueryDocumentKeys) {\n  const enterLeaveMap = new Map();\n\n  for (const kind of Object.values(_kinds_mjs__WEBPACK_IMPORTED_MODULE_1__.Kind)) {\n    enterLeaveMap.set(kind, getEnterLeaveForKind(visitor, kind));\n  }\n  /* eslint-disable no-undef-init */\n\n  let stack = undefined;\n  let inArray = Array.isArray(root);\n  let keys = [root];\n  let index = -1;\n  let edits = [];\n  let node = root;\n  let key = undefined;\n  let parent = undefined;\n  const path = [];\n  const ancestors = [];\n  /* eslint-enable no-undef-init */\n\n  do {\n    index++;\n    const isLeaving = index === keys.length;\n    const isEdited = isLeaving && edits.length !== 0;\n\n    if (isLeaving) {\n      key = ancestors.length === 0 ? undefined : path[path.length - 1];\n      node = parent;\n      parent = ancestors.pop();\n\n      if (isEdited) {\n        if (inArray) {\n          node = node.slice();\n          let editOffset = 0;\n\n          for (const [editKey, editValue] of edits) {\n            const arrayKey = editKey - editOffset;\n\n            if (editValue === null) {\n              node.splice(arrayKey, 1);\n              editOffset++;\n            } else {\n              node[arrayKey] = editValue;\n            }\n          }\n        } else {\n          node = { ...node };\n\n          for (const [editKey, editValue] of edits) {\n            node[editKey] = editValue;\n          }\n        }\n      }\n\n      index = stack.index;\n      keys = stack.keys;\n      edits = stack.edits;\n      inArray = stack.inArray;\n      stack = stack.prev;\n    } else if (parent) {\n      key = inArray ? index : keys[index];\n      node = parent[key];\n\n      if (node === null || node === undefined) {\n        continue;\n      }\n\n      path.push(key);\n    }\n\n    let result;\n\n    if (!Array.isArray(node)) {\n      var _enterLeaveMap$get, _enterLeaveMap$get2;\n\n      (0,_ast_mjs__WEBPACK_IMPORTED_MODULE_0__.isNode)(node) || (0,_jsutils_devAssert_mjs__WEBPACK_IMPORTED_MODULE_2__.devAssert)(false, `Invalid AST Node: ${(0,_jsutils_inspect_mjs__WEBPACK_IMPORTED_MODULE_3__.inspect)(node)}.`);\n      const visitFn = isLeaving\n        ? (_enterLeaveMap$get = enterLeaveMap.get(node.kind)) === null ||\n          _enterLeaveMap$get === void 0\n          ? void 0\n          : _enterLeaveMap$get.leave\n        : (_enterLeaveMap$get2 = enterLeaveMap.get(node.kind)) === null ||\n          _enterLeaveMap$get2 === void 0\n        ? void 0\n        : _enterLeaveMap$get2.enter;\n      result =\n        visitFn === null || visitFn === void 0\n          ? void 0\n          : visitFn.call(visitor, node, key, parent, path, ancestors);\n\n      if (result === BREAK) {\n        break;\n      }\n\n      if (result === false) {\n        if (!isLeaving) {\n          path.pop();\n          continue;\n        }\n      } else if (result !== undefined) {\n        edits.push([key, result]);\n\n        if (!isLeaving) {\n          if ((0,_ast_mjs__WEBPACK_IMPORTED_MODULE_0__.isNode)(result)) {\n            node = result;\n          } else {\n            path.pop();\n            continue;\n          }\n        }\n      }\n    }\n\n    if (result === undefined && isEdited) {\n      edits.push([key, node]);\n    }\n\n    if (isLeaving) {\n      path.pop();\n    } else {\n      var _node$kind;\n\n      stack = {\n        inArray,\n        index,\n        keys,\n        edits,\n        prev: stack,\n      };\n      inArray = Array.isArray(node);\n      keys = inArray\n        ? node\n        : (_node$kind = visitorKeys[node.kind]) !== null &&\n          _node$kind !== void 0\n        ? _node$kind\n        : [];\n      index = -1;\n      edits = [];\n\n      if (parent) {\n        ancestors.push(parent);\n      }\n\n      parent = node;\n    }\n  } while (stack !== undefined);\n\n  if (edits.length !== 0) {\n    // New root\n    return edits[edits.length - 1][1];\n  }\n\n  return root;\n}\n/**\n * Creates a new visitor instance which delegates to many visitors to run in\n * parallel. Each visitor will be visited for each node before moving on.\n *\n * If a prior visitor edits a node, no following visitors will see that node.\n */\n\nfunction visitInParallel(visitors) {\n  const skipping = new Array(visitors.length).fill(null);\n  const mergedVisitor = Object.create(null);\n\n  for (const kind of Object.values(_kinds_mjs__WEBPACK_IMPORTED_MODULE_1__.Kind)) {\n    let hasVisitor = false;\n    const enterList = new Array(visitors.length).fill(undefined);\n    const leaveList = new Array(visitors.length).fill(undefined);\n\n    for (let i = 0; i < visitors.length; ++i) {\n      const { enter, leave } = getEnterLeaveForKind(visitors[i], kind);\n      hasVisitor || (hasVisitor = enter != null || leave != null);\n      enterList[i] = enter;\n      leaveList[i] = leave;\n    }\n\n    if (!hasVisitor) {\n      continue;\n    }\n\n    const mergedEnterLeave = {\n      enter(...args) {\n        const node = args[0];\n\n        for (let i = 0; i < visitors.length; i++) {\n          if (skipping[i] === null) {\n            var _enterList$i;\n\n            const result =\n              (_enterList$i = enterList[i]) === null || _enterList$i === void 0\n                ? void 0\n                : _enterList$i.apply(visitors[i], args);\n\n            if (result === false) {\n              skipping[i] = node;\n            } else if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined) {\n              return result;\n            }\n          }\n        }\n      },\n\n      leave(...args) {\n        const node = args[0];\n\n        for (let i = 0; i < visitors.length; i++) {\n          if (skipping[i] === null) {\n            var _leaveList$i;\n\n            const result =\n              (_leaveList$i = leaveList[i]) === null || _leaveList$i === void 0\n                ? void 0\n                : _leaveList$i.apply(visitors[i], args);\n\n            if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined && result !== false) {\n              return result;\n            }\n          } else if (skipping[i] === node) {\n            skipping[i] = null;\n          }\n        }\n      },\n    };\n    mergedVisitor[kind] = mergedEnterLeave;\n  }\n\n  return mergedVisitor;\n}\n/**\n * Given a visitor instance and a node kind, return EnterLeaveVisitor for that kind.\n */\n\nfunction getEnterLeaveForKind(visitor, kind) {\n  const kindVisitor = visitor[kind];\n\n  if (typeof kindVisitor === 'object') {\n    // { Kind: { enter() {}, leave() {} } }\n    return kindVisitor;\n  } else if (typeof kindVisitor === 'function') {\n    // { Kind() {} }\n    return {\n      enter: kindVisitor,\n      leave: undefined,\n    };\n  } // { enter() {}, leave() {} }\n\n  return {\n    enter: visitor.enter,\n    leave: visitor.leave,\n  };\n}\n/**\n * Given a visitor instance, if it is leaving or not, and a node kind, return\n * the function the visitor runtime should call.\n *\n * @deprecated Please use `getEnterLeaveForKind` instead. Will be removed in v17\n */\n\n/* c8 ignore next 8 */\n\nfunction getVisitFn(visitor, kind, isLeaving) {\n  const { enter, leave } = getEnterLeaveForKind(visitor, kind);\n  return isLeaving ? leave : enter;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/visitor.mjs\n"));

/***/ })

}]);